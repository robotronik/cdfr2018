ARM GAS  /tmp/cclPV7jd.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xl_320.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.XL_FSM_HEADER_0,"ax",%progbits
  18              		.align	1
  19              		.global	XL_FSM_HEADER_0
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	XL_FSM_HEADER_0:
  26              	.LFB3:
  27              		.file 1 "Src/xl_320.c"
   1:Src/xl_320.c  **** #include "xl_320.h"
   2:Src/xl_320.c  **** #include <stdio.h>
   3:Src/xl_320.c  **** 
   4:Src/xl_320.c  **** //========================================
   5:Src/xl_320.c  **** //    CONSTANTES ET VARIABLES GLOBALES
   6:Src/xl_320.c  **** //========================================
   7:Src/xl_320.c  **** //static const uint8_t broadcast_id = 0xFE;
   8:Src/xl_320.c  **** static const uint8_t header[4] = {0xFF, 0xFF, 0xFD, 0x00};
   9:Src/xl_320.c  **** static const uint8_t stuffing_byte = 0xFD;
  10:Src/xl_320.c  **** static XL_Error err;
  11:Src/xl_320.c  **** 
  12:Src/xl_320.c  **** //========================================
  13:Src/xl_320.c  **** //        FONCTIONS DE RECEPTION
  14:Src/xl_320.c  **** //========================================
  15:Src/xl_320.c  **** #define FSM_BYTE *(fsm->p_buffer)
  16:Src/xl_320.c  **** #define FSM_NEXT fsm->p_buffer++
  17:Src/xl_320.c  **** #define FSM_RESET fsm->update_state = XL_FSM_HEADER_0; fsm->p_buffer = fsm->buffer
  18:Src/xl_320.c  **** #define FSM_UPDATE(state_function) fsm->update_state = state_function
  19:Src/xl_320.c  **** 
  20:Src/xl_320.c  **** void XL_FSM_HEADER_0(XL_Receiver_FSM *fsm){
  28              		.loc 1 20 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  21:Src/xl_320.c  ****   if(FSM_BYTE == header[0]){
  34              		.loc 1 21 0
  35 0000 C368     		ldr	r3, [r0, #12]
  36 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  37 0004 FF2A     		cmp	r2, #255
ARM GAS  /tmp/cclPV7jd.s 			page 2


  38 0006 00D0     		beq	.L3
  39              	.L1:
  22:Src/xl_320.c  ****     FSM_NEXT;
  23:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_HEADER_1);
  24:Src/xl_320.c  ****   }
  25:Src/xl_320.c  **** }
  40              		.loc 1 25 0
  41 0008 7047     		bx	lr
  42              	.L3:
  22:Src/xl_320.c  ****     FSM_NEXT;
  43              		.loc 1 22 0
  44 000a 0133     		adds	r3, r3, #1
  45 000c C360     		str	r3, [r0, #12]
  23:Src/xl_320.c  ****   }
  46              		.loc 1 23 0
  47 000e 014B     		ldr	r3, .L4
  48 0010 0360     		str	r3, [r0]
  49              		.loc 1 25 0
  50 0012 F9E7     		b	.L1
  51              	.L5:
  52              		.align	2
  53              	.L4:
  54 0014 00000000 		.word	XL_FSM_HEADER_1
  55              		.cfi_endproc
  56              	.LFE3:
  58              		.section	.text.XL_FSM_HEADER_1,"ax",%progbits
  59              		.align	1
  60              		.global	XL_FSM_HEADER_1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv4-sp-d16
  66              	XL_FSM_HEADER_1:
  67              	.LFB4:
  26:Src/xl_320.c  **** 
  27:Src/xl_320.c  **** void XL_FSM_HEADER_1(XL_Receiver_FSM *fsm){
  68              		.loc 1 27 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.LVL1:
  28:Src/xl_320.c  ****   if(FSM_BYTE == header[1]){
  74              		.loc 1 28 0
  75 0000 C368     		ldr	r3, [r0, #12]
  76 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  77 0004 FF2A     		cmp	r2, #255
  78 0006 04D0     		beq	.L9
  29:Src/xl_320.c  ****     FSM_NEXT;
  30:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_HEADER_2);
  31:Src/xl_320.c  ****   }
  32:Src/xl_320.c  ****   else{
  33:Src/xl_320.c  ****     FSM_RESET;
  79              		.loc 1 33 0
  80 0008 044B     		ldr	r3, .L10
  81 000a 0360     		str	r3, [r0]
  82 000c 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/cclPV7jd.s 			page 3


  83 000e C360     		str	r3, [r0, #12]
  34:Src/xl_320.c  ****   }
  35:Src/xl_320.c  **** }
  84              		.loc 1 35 0
  85 0010 7047     		bx	lr
  86              	.L9:
  29:Src/xl_320.c  ****     FSM_NEXT;
  87              		.loc 1 29 0
  88 0012 0133     		adds	r3, r3, #1
  89 0014 C360     		str	r3, [r0, #12]
  30:Src/xl_320.c  ****   }
  90              		.loc 1 30 0
  91 0016 024B     		ldr	r3, .L10+4
  92 0018 0360     		str	r3, [r0]
  93 001a 7047     		bx	lr
  94              	.L11:
  95              		.align	2
  96              	.L10:
  97 001c 00000000 		.word	XL_FSM_HEADER_0
  98 0020 00000000 		.word	XL_FSM_HEADER_2
  99              		.cfi_endproc
 100              	.LFE4:
 102              		.section	.text.XL_FSM_HEADER_2,"ax",%progbits
 103              		.align	1
 104              		.global	XL_FSM_HEADER_2
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	XL_FSM_HEADER_2:
 111              	.LFB5:
  36:Src/xl_320.c  **** 
  37:Src/xl_320.c  **** void XL_FSM_HEADER_2(XL_Receiver_FSM *fsm){
 112              		.loc 1 37 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL2:
  38:Src/xl_320.c  ****   if(FSM_BYTE == header[2]){
 118              		.loc 1 38 0
 119 0000 C368     		ldr	r3, [r0, #12]
 120 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 121 0004 FD2A     		cmp	r2, #253
 122 0006 04D0     		beq	.L15
  39:Src/xl_320.c  ****     FSM_NEXT;
  40:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_HEADER_3);
  41:Src/xl_320.c  ****   }
  42:Src/xl_320.c  ****   else{
  43:Src/xl_320.c  ****     FSM_RESET;
 123              		.loc 1 43 0
 124 0008 044B     		ldr	r3, .L16
 125 000a 0360     		str	r3, [r0]
 126 000c 8368     		ldr	r3, [r0, #8]
 127 000e C360     		str	r3, [r0, #12]
  44:Src/xl_320.c  ****   }
  45:Src/xl_320.c  **** }
ARM GAS  /tmp/cclPV7jd.s 			page 4


 128              		.loc 1 45 0
 129 0010 7047     		bx	lr
 130              	.L15:
  39:Src/xl_320.c  ****     FSM_NEXT;
 131              		.loc 1 39 0
 132 0012 0133     		adds	r3, r3, #1
 133 0014 C360     		str	r3, [r0, #12]
  40:Src/xl_320.c  ****   }
 134              		.loc 1 40 0
 135 0016 024B     		ldr	r3, .L16+4
 136 0018 0360     		str	r3, [r0]
 137 001a 7047     		bx	lr
 138              	.L17:
 139              		.align	2
 140              	.L16:
 141 001c 00000000 		.word	XL_FSM_HEADER_0
 142 0020 00000000 		.word	XL_FSM_HEADER_3
 143              		.cfi_endproc
 144              	.LFE5:
 146              		.section	.text.XL_FSM_HEADER_3,"ax",%progbits
 147              		.align	1
 148              		.global	XL_FSM_HEADER_3
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	XL_FSM_HEADER_3:
 155              	.LFB6:
  46:Src/xl_320.c  **** 
  47:Src/xl_320.c  **** void XL_FSM_HEADER_3(XL_Receiver_FSM *fsm){
 156              		.loc 1 47 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL3:
  48:Src/xl_320.c  ****   if(FSM_BYTE != stuffing_byte){
 162              		.loc 1 48 0
 163 0000 C368     		ldr	r3, [r0, #12]
 164 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 165 0004 FD2A     		cmp	r2, #253
 166 0006 04D0     		beq	.L19
  49:Src/xl_320.c  ****     FSM_NEXT;
 167              		.loc 1 49 0
 168 0008 0133     		adds	r3, r3, #1
 169 000a C360     		str	r3, [r0, #12]
  50:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_ID);
 170              		.loc 1 50 0
 171 000c 034B     		ldr	r3, .L21
 172 000e 0360     		str	r3, [r0]
 173 0010 7047     		bx	lr
 174              	.L19:
  51:Src/xl_320.c  ****   }
  52:Src/xl_320.c  ****   else{
  53:Src/xl_320.c  ****     FSM_RESET;
 175              		.loc 1 53 0
 176 0012 034B     		ldr	r3, .L21+4
ARM GAS  /tmp/cclPV7jd.s 			page 5


 177 0014 0360     		str	r3, [r0]
 178 0016 8368     		ldr	r3, [r0, #8]
 179 0018 C360     		str	r3, [r0, #12]
  54:Src/xl_320.c  ****   }
  55:Src/xl_320.c  **** }
 180              		.loc 1 55 0
 181 001a 7047     		bx	lr
 182              	.L22:
 183              		.align	2
 184              	.L21:
 185 001c 00000000 		.word	XL_FSM_ID
 186 0020 00000000 		.word	XL_FSM_HEADER_0
 187              		.cfi_endproc
 188              	.LFE6:
 190              		.section	.text.XL_FSM_ID,"ax",%progbits
 191              		.align	1
 192              		.global	XL_FSM_ID
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	XL_FSM_ID:
 199              	.LFB7:
  56:Src/xl_320.c  **** 
  57:Src/xl_320.c  **** void XL_FSM_ID(XL_Receiver_FSM *fsm){
 200              		.loc 1 57 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL4:
  58:Src/xl_320.c  ****   if(FSM_BYTE != 0xFF && FSM_BYTE != 0xFD){
 206              		.loc 1 58 0
 207 0000 C368     		ldr	r3, [r0, #12]
 208 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 209 0004 FF2A     		cmp	r2, #255
 210 0006 06D0     		beq	.L24
 211              		.loc 1 58 0 is_stmt 0 discriminator 1
 212 0008 FD2A     		cmp	r2, #253
 213 000a 04D0     		beq	.L24
  59:Src/xl_320.c  ****     FSM_NEXT;
 214              		.loc 1 59 0 is_stmt 1
 215 000c 0133     		adds	r3, r3, #1
 216 000e C360     		str	r3, [r0, #12]
  60:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_LENGTH_LOW);
 217              		.loc 1 60 0
 218 0010 034B     		ldr	r3, .L26
 219 0012 0360     		str	r3, [r0]
 220 0014 7047     		bx	lr
 221              	.L24:
  61:Src/xl_320.c  ****   }
  62:Src/xl_320.c  ****   else{
  63:Src/xl_320.c  ****     FSM_RESET;
 222              		.loc 1 63 0
 223 0016 034B     		ldr	r3, .L26+4
 224 0018 0360     		str	r3, [r0]
 225 001a 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/cclPV7jd.s 			page 6


 226 001c C360     		str	r3, [r0, #12]
  64:Src/xl_320.c  ****   }
  65:Src/xl_320.c  **** }
 227              		.loc 1 65 0
 228 001e 7047     		bx	lr
 229              	.L27:
 230              		.align	2
 231              	.L26:
 232 0020 00000000 		.word	XL_FSM_LENGTH_LOW
 233 0024 00000000 		.word	XL_FSM_HEADER_0
 234              		.cfi_endproc
 235              	.LFE7:
 237              		.section	.text.XL_FSM_LENGTH_LOW,"ax",%progbits
 238              		.align	1
 239              		.global	XL_FSM_LENGTH_LOW
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu fpv4-sp-d16
 245              	XL_FSM_LENGTH_LOW:
 246              	.LFB8:
  66:Src/xl_320.c  **** 
  67:Src/xl_320.c  **** void XL_FSM_LENGTH_LOW(XL_Receiver_FSM *fsm){
 247              		.loc 1 67 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252              	.LVL5:
  68:Src/xl_320.c  ****   fsm->remaining_bytes = FSM_BYTE;
 253              		.loc 1 68 0
 254 0000 C368     		ldr	r3, [r0, #12]
 255 0002 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 256 0006 8280     		strh	r2, [r0, #4]	@ movhi
  69:Src/xl_320.c  ****   FSM_NEXT;
 257              		.loc 1 69 0
 258 0008 C360     		str	r3, [r0, #12]
  70:Src/xl_320.c  ****   FSM_UPDATE(XL_FSM_LENGTH_HIGH);
 259              		.loc 1 70 0
 260 000a 014B     		ldr	r3, .L29
 261 000c 0360     		str	r3, [r0]
  71:Src/xl_320.c  **** }
 262              		.loc 1 71 0
 263 000e 7047     		bx	lr
 264              	.L30:
 265              		.align	2
 266              	.L29:
 267 0010 00000000 		.word	XL_FSM_LENGTH_HIGH
 268              		.cfi_endproc
 269              	.LFE8:
 271              		.section	.text.XL_FSM_LENGTH_HIGH,"ax",%progbits
 272              		.align	1
 273              		.global	XL_FSM_LENGTH_HIGH
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cclPV7jd.s 			page 7


 279              	XL_FSM_LENGTH_HIGH:
 280              	.LFB9:
  72:Src/xl_320.c  **** 
  73:Src/xl_320.c  **** void XL_FSM_LENGTH_HIGH(XL_Receiver_FSM *fsm){
 281              		.loc 1 73 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286              	.LVL6:
  74:Src/xl_320.c  ****   fsm->remaining_bytes |= FSM_BYTE << 8;
 287              		.loc 1 74 0
 288 0000 C268     		ldr	r2, [r0, #12]
 289 0002 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 290 0004 8388     		ldrh	r3, [r0, #4]
 291 0006 43EA0123 		orr	r3, r3, r1, lsl #8
 292 000a 8380     		strh	r3, [r0, #4]	@ movhi
 293              	.LVL7:
  75:Src/xl_320.c  ****   const uint16_t remaining_bytes = fsm->remaining_bytes;
  76:Src/xl_320.c  ****   if((remaining_bytes >= 4) && (7 + remaining_bytes <= XL_BUFFER_SIZE)){
 294              		.loc 1 76 0
 295 000c 032B     		cmp	r3, #3
 296 000e 03D9     		bls	.L32
 297              		.loc 1 76 0 is_stmt 0 discriminator 1
 298 0010 0733     		adds	r3, r3, #7
 299              	.LVL8:
 300 0012 B3F5807F 		cmp	r3, #256
 301 0016 04DD     		ble	.L34
 302              	.L32:
  77:Src/xl_320.c  ****     FSM_NEXT;
  78:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_INSTRUCTION);
  79:Src/xl_320.c  ****   }
  80:Src/xl_320.c  ****   else{
  81:Src/xl_320.c  ****     FSM_RESET;
 303              		.loc 1 81 0 is_stmt 1
 304 0018 044B     		ldr	r3, .L35
 305 001a 0360     		str	r3, [r0]
 306 001c 8368     		ldr	r3, [r0, #8]
 307 001e C360     		str	r3, [r0, #12]
  82:Src/xl_320.c  ****   }
  83:Src/xl_320.c  **** }
 308              		.loc 1 83 0
 309 0020 7047     		bx	lr
 310              	.L34:
  77:Src/xl_320.c  ****     FSM_NEXT;
 311              		.loc 1 77 0
 312 0022 0132     		adds	r2, r2, #1
 313 0024 C260     		str	r2, [r0, #12]
  78:Src/xl_320.c  ****   }
 314              		.loc 1 78 0
 315 0026 024B     		ldr	r3, .L35+4
 316 0028 0360     		str	r3, [r0]
 317 002a 7047     		bx	lr
 318              	.L36:
 319              		.align	2
 320              	.L35:
 321 002c 00000000 		.word	XL_FSM_HEADER_0
ARM GAS  /tmp/cclPV7jd.s 			page 8


 322 0030 00000000 		.word	XL_FSM_INSTRUCTION
 323              		.cfi_endproc
 324              	.LFE9:
 326              		.section	.text.XL_FSM_INSTRUCTION,"ax",%progbits
 327              		.align	1
 328              		.global	XL_FSM_INSTRUCTION
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	XL_FSM_INSTRUCTION:
 335              	.LFB10:
  84:Src/xl_320.c  **** void XL_FSM_INSTRUCTION(XL_Receiver_FSM *fsm){
 336              		.loc 1 84 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341              	.LVL9:
  85:Src/xl_320.c  ****   if(FSM_BYTE == XL_STATUS){
 342              		.loc 1 85 0
 343 0000 C368     		ldr	r3, [r0, #12]
 344 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 345 0004 552A     		cmp	r2, #85
 346 0006 04D0     		beq	.L40
  86:Src/xl_320.c  ****     fsm->remaining_bytes--;
  87:Src/xl_320.c  ****     FSM_NEXT;
  88:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_RECEIVING);
  89:Src/xl_320.c  ****   }else{
  90:Src/xl_320.c  ****     FSM_RESET;
 347              		.loc 1 90 0
 348 0008 064B     		ldr	r3, .L41
 349 000a 0360     		str	r3, [r0]
 350 000c 8368     		ldr	r3, [r0, #8]
 351 000e C360     		str	r3, [r0, #12]
  91:Src/xl_320.c  ****   }
  92:Src/xl_320.c  **** }
 352              		.loc 1 92 0
 353 0010 7047     		bx	lr
 354              	.L40:
  86:Src/xl_320.c  ****     fsm->remaining_bytes--;
 355              		.loc 1 86 0
 356 0012 8288     		ldrh	r2, [r0, #4]
 357 0014 013A     		subs	r2, r2, #1
 358 0016 8280     		strh	r2, [r0, #4]	@ movhi
  87:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_RECEIVING);
 359              		.loc 1 87 0
 360 0018 0133     		adds	r3, r3, #1
 361 001a C360     		str	r3, [r0, #12]
  88:Src/xl_320.c  ****   }else{
 362              		.loc 1 88 0
 363 001c 024B     		ldr	r3, .L41+4
 364 001e 0360     		str	r3, [r0]
 365 0020 7047     		bx	lr
 366              	.L42:
 367 0022 00BF     		.align	2
 368              	.L41:
ARM GAS  /tmp/cclPV7jd.s 			page 9


 369 0024 00000000 		.word	XL_FSM_HEADER_0
 370 0028 00000000 		.word	XL_FSM_RECEIVING
 371              		.cfi_endproc
 372              	.LFE10:
 374              		.section	.text.XL_FSM_RECEIVING,"ax",%progbits
 375              		.align	1
 376              		.global	XL_FSM_RECEIVING
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	XL_FSM_RECEIVING:
 383              	.LFB11:
  93:Src/xl_320.c  **** 
  94:Src/xl_320.c  **** void XL_FSM_RECEIVING(XL_Receiver_FSM *fsm){
 384              		.loc 1 94 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389              	.LVL10:
  95:Src/xl_320.c  ****   FSM_NEXT;
 390              		.loc 1 95 0
 391 0000 C368     		ldr	r3, [r0, #12]
 392 0002 0133     		adds	r3, r3, #1
 393 0004 C360     		str	r3, [r0, #12]
  96:Src/xl_320.c  ****   fsm->remaining_bytes--;
 394              		.loc 1 96 0
 395 0006 8388     		ldrh	r3, [r0, #4]
 396 0008 013B     		subs	r3, r3, #1
 397 000a 9BB2     		uxth	r3, r3
 398 000c 8380     		strh	r3, [r0, #4]	@ movhi
  97:Src/xl_320.c  ****   if(fsm->remaining_bytes == 0){
 399              		.loc 1 97 0
 400 000e 0BB9     		cbnz	r3, .L43
  98:Src/xl_320.c  ****     fsm->done = 1;
 401              		.loc 1 98 0
 402 0010 0123     		movs	r3, #1
 403 0012 0374     		strb	r3, [r0, #16]
 404              	.L43:
  99:Src/xl_320.c  ****   }
 100:Src/xl_320.c  **** }
 405              		.loc 1 100 0
 406 0014 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE11:
 410              		.section	.text.XL_Update_CRC,"ax",%progbits
 411              		.align	1
 412              		.global	XL_Update_CRC
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	XL_Update_CRC:
 419              	.LFB16:
 101:Src/xl_320.c  **** 
 102:Src/xl_320.c  **** uint8_t XL_Extract_Status_Packet(XL_Status_Packet *packet, uint8_t frame[XL_BUFFER_SIZE], uint16_t 
ARM GAS  /tmp/cclPV7jd.s 			page 10


 103:Src/xl_320.c  ****   //CRC
 104:Src/xl_320.c  ****   uint16_t old_crc = (frame[length-1] << 8) | frame[length-2];
 105:Src/xl_320.c  ****   uint16_t new_crc = XL_Update_CRC(0, frame, length-2);
 106:Src/xl_320.c  ****   if(new_crc != old_crc){
 107:Src/xl_320.c  ****     err = XL_ERR_BAD_FRAME;
 108:Src/xl_320.c  ****     return 1;
 109:Src/xl_320.c  ****   }
 110:Src/xl_320.c  **** 
 111:Src/xl_320.c  ****   packet->id = frame[4];
 112:Src/xl_320.c  ****   packet->err = frame[8];
 113:Src/xl_320.c  **** 
 114:Src/xl_320.c  ****   //Paramètres
 115:Src/xl_320.c  ****   uint8_t *start_stuffing = frame+7;
 116:Src/xl_320.c  ****   uint8_t *end_stuffing = frame+(length-2);
 117:Src/xl_320.c  ****   uint8_t *p_frame = frame+9;
 118:Src/xl_320.c  **** 
 119:Src/xl_320.c  ****   packet->nb_params = 0;
 120:Src/xl_320.c  ****   while(p_frame != end_stuffing){
 121:Src/xl_320.c  ****     packet->params[packet->nb_params++] = *(p_frame++);
 122:Src/xl_320.c  ****     if(p_frame - start_stuffing == 3){
 123:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 124:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 125:Src/xl_320.c  **** 	  err = XL_ERR_BAD_FRAME;
 126:Src/xl_320.c  **** 	  return 1;
 127:Src/xl_320.c  **** 	}
 128:Src/xl_320.c  **** 	p_frame++;
 129:Src/xl_320.c  **** 	start_stuffing = p_frame;
 130:Src/xl_320.c  ****       }
 131:Src/xl_320.c  ****       else{
 132:Src/xl_320.c  **** 	start_stuffing++;
 133:Src/xl_320.c  ****       }
 134:Src/xl_320.c  ****     }
 135:Src/xl_320.c  ****   }
 136:Src/xl_320.c  ****   
 137:Src/xl_320.c  ****   return 0;
 138:Src/xl_320.c  **** }
 139:Src/xl_320.c  **** 
 140:Src/xl_320.c  **** uint8_t XL_Receive(XL_Interface *interface, XL_Status_Packet *packet, uint32_t timeout){
 141:Src/xl_320.c  ****   //Initialisation du timer
 142:Src/xl_320.c  ****   uint32_t tick = interface->get_tick();
 143:Src/xl_320.c  **** 
 144:Src/xl_320.c  ****   //Attente de la fin d'un envoi
 145:Src/xl_320.c  ****   while(interface->sending == 1){
 146:Src/xl_320.c  ****     //Evite une boucle infinie
 147:Src/xl_320.c  ****     if(interface->get_tick() - tick > timeout){
 148:Src/xl_320.c  ****       return 1;
 149:Src/xl_320.c  ****     }
 150:Src/xl_320.c  ****   }
 151:Src/xl_320.c  **** 
 152:Src/xl_320.c  ****   //Préparation de la réception
 153:Src/xl_320.c  ****   interface->set_direction(XL_RECEIVE);
 154:Src/xl_320.c  ****   
 155:Src/xl_320.c  ****   interface->fsm.update_state = XL_FSM_HEADER_0;
 156:Src/xl_320.c  ****   interface->fsm.remaining_bytes = 0;
 157:Src/xl_320.c  ****   interface->fsm.buffer = interface->buffer;
 158:Src/xl_320.c  ****   interface->fsm.p_buffer = interface->buffer;
 159:Src/xl_320.c  ****   interface->fsm.done = 0;
ARM GAS  /tmp/cclPV7jd.s 			page 11


 160:Src/xl_320.c  **** 
 161:Src/xl_320.c  ****   //Réception
 162:Src/xl_320.c  ****   while(interface->fsm.done != 1 && ((interface->get_tick() - tick) <= timeout)){
 163:Src/xl_320.c  ****     if(interface->receive(interface->fsm.p_buffer, 1, 1) != 0){
 164:Src/xl_320.c  ****       break;
 165:Src/xl_320.c  ****     }
 166:Src/xl_320.c  ****     interface->fsm.update_state(&(interface->fsm));
 167:Src/xl_320.c  ****   }
 168:Src/xl_320.c  **** 
 169:Src/xl_320.c  ****   //Récupération du paquet
 170:Src/xl_320.c  ****   if(interface->fsm.done == 0){
 171:Src/xl_320.c  ****     return 1;
 172:Src/xl_320.c  ****   }
 173:Src/xl_320.c  **** 
 174:Src/xl_320.c  ****   return XL_Extract_Status_Packet(packet, interface->buffer, interface->fsm.p_buffer - interface->f
 175:Src/xl_320.c  **** }
 176:Src/xl_320.c  **** 
 177:Src/xl_320.c  **** //======================================
 178:Src/xl_320.c  **** //           FONCTIONS D'ENVOI          
 179:Src/xl_320.c  **** //======================================
 180:Src/xl_320.c  **** uint8_t XL_Build_Frame(XL_Instruction_Packet *packet, uint8_t buffer[XL_BUFFER_SIZE]){
 181:Src/xl_320.c  ****   //Vérification des arguments
 182:Src/xl_320.c  ****   if(packet == 0 || packet->params == 0 || buffer == 0){
 183:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ARGUMENTS;
 184:Src/xl_320.c  ****     return 0;
 185:Src/xl_320.c  ****   }
 186:Src/xl_320.c  ****   //Evite une collision avec l'en-tête
 187:Src/xl_320.c  ****   if(packet->id == 0xFD || packet->id == 0xFF){
 188:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ID;
 189:Src/xl_320.c  ****     return 0;
 190:Src/xl_320.c  ****   }
 191:Src/xl_320.c  ****   //Evite un overflow
 192:Src/xl_320.c  ****   if(10+packet->nb_params+packet->nb_params/3 > XL_BUFFER_SIZE){
 193:Src/xl_320.c  ****     err = XL_ERR_BUFFER_OVERFLOW;
 194:Src/xl_320.c  ****     return 0;
 195:Src/xl_320.c  ****   }
 196:Src/xl_320.c  **** 
 197:Src/xl_320.c  ****   uint8_t *p_buffer = buffer;
 198:Src/xl_320.c  ****   //Header
 199:Src/xl_320.c  ****   *(p_buffer++) = header[0];
 200:Src/xl_320.c  ****   *(p_buffer++) = header[1];
 201:Src/xl_320.c  ****   *(p_buffer++) = header[2];
 202:Src/xl_320.c  ****   *(p_buffer++) = header[3];
 203:Src/xl_320.c  **** 
 204:Src/xl_320.c  ****   //Packet ID
 205:Src/xl_320.c  ****   *(p_buffer++) = packet->id;
 206:Src/xl_320.c  **** 
 207:Src/xl_320.c  ****   //Packet length (temporaire)
 208:Src/xl_320.c  ****   p_buffer += 2;
 209:Src/xl_320.c  **** 
 210:Src/xl_320.c  ****   //<BEGIN BYTE STUFFING>
 211:Src/xl_320.c  ****   //Instruction
 212:Src/xl_320.c  ****   uint8_t *start_stuffing = p_buffer;
 213:Src/xl_320.c  ****   *(p_buffer++) = packet->instruction;
 214:Src/xl_320.c  **** 
 215:Src/xl_320.c  ****   //Paramètres
 216:Src/xl_320.c  ****   int i;
ARM GAS  /tmp/cclPV7jd.s 			page 12


 217:Src/xl_320.c  ****   for(i = 0; i < packet->nb_params; i++){
 218:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 219:Src/xl_320.c  ****     if(p_buffer - start_stuffing == 3){
 220:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 221:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 222:Src/xl_320.c  **** 	start_stuffing = p_buffer;
 223:Src/xl_320.c  ****       }else{
 224:Src/xl_320.c  **** 	start_stuffing++;
 225:Src/xl_320.c  ****       }
 226:Src/xl_320.c  ****     }
 227:Src/xl_320.c  ****   }
 228:Src/xl_320.c  ****   //<END BYTE STUFFING>
 229:Src/xl_320.c  **** 
 230:Src/xl_320.c  ****   //Packet length
 231:Src/xl_320.c  ****   uint16_t packet_length = (p_buffer-buffer) - 7 + 2;//Ce qu'on a écrit - (header+id+length) + crc
 232:Src/xl_320.c  ****   buffer[5] = packet_length & 0x00FF;
 233:Src/xl_320.c  ****   buffer[6] = packet_length >> 8;
 234:Src/xl_320.c  **** 
 235:Src/xl_320.c  ****   //Cyclic Redundancy Check
 236:Src/xl_320.c  ****   uint16_t crc = XL_Update_CRC(0, buffer, packet_length+7-2);
 237:Src/xl_320.c  ****   *(p_buffer++) = crc & 0x00FF;
 238:Src/xl_320.c  ****   *(p_buffer++) = crc >> 8;
 239:Src/xl_320.c  ****   
 240:Src/xl_320.c  ****   return p_buffer-buffer;    
 241:Src/xl_320.c  **** }
 242:Src/xl_320.c  **** 
 243:Src/xl_320.c  **** uint8_t XL_Send(XL_Interface *interface, XL_Instruction_Packet *packet, uint32_t timeout){
 244:Src/xl_320.c  ****   //Initialisation du timer
 245:Src/xl_320.c  ****   uint32_t tick = interface->get_tick();
 246:Src/xl_320.c  **** 
 247:Src/xl_320.c  ****   //Attente de la fin d'un envoi
 248:Src/xl_320.c  ****   while(interface->sending == 1){
 249:Src/xl_320.c  ****     //Evite une boucle infinie
 250:Src/xl_320.c  ****     if(interface->get_tick() - tick > timeout){
 251:Src/xl_320.c  ****       return 1;
 252:Src/xl_320.c  ****     }
 253:Src/xl_320.c  ****   }
 254:Src/xl_320.c  **** 
 255:Src/xl_320.c  ****   //Préparation de l'envoi
 256:Src/xl_320.c  ****   interface->sending = 1;
 257:Src/xl_320.c  ****   interface->set_direction(XL_SEND);
 258:Src/xl_320.c  ****   
 259:Src/xl_320.c  ****   uint8_t length = XL_Build_Frame(packet, interface->buffer);
 260:Src/xl_320.c  ****   if(!length){
 261:Src/xl_320.c  ****     interface->sending = 0;
 262:Src/xl_320.c  ****     return 1;
 263:Src/xl_320.c  ****   }
 264:Src/xl_320.c  ****   interface->send(interface->buffer, length);
 265:Src/xl_320.c  ****   return 0;
 266:Src/xl_320.c  **** }
 267:Src/xl_320.c  **** 
 268:Src/xl_320.c  **** uint16_t XL_Update_CRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size){
 420              		.loc 1 268 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 512
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              	.LVL11:
ARM GAS  /tmp/cclPV7jd.s 			page 13


 425 0000 70B5     		push	{r4, r5, r6, lr}
 426              	.LCFI0:
 427              		.cfi_def_cfa_offset 16
 428              		.cfi_offset 4, -16
 429              		.cfi_offset 5, -12
 430              		.cfi_offset 6, -8
 431              		.cfi_offset 14, -4
 432 0002 ADF5007D 		sub	sp, sp, #512
 433              	.LCFI1:
 434              		.cfi_def_cfa_offset 528
 435 0006 0446     		mov	r4, r0
 436 0008 0E46     		mov	r6, r1
 437 000a 1546     		mov	r5, r2
 269:Src/xl_320.c  ****   uint16_t i, j;
 270:Src/xl_320.c  ****   uint16_t crc_table[256] = {
 438              		.loc 1 270 0
 439 000c 4FF40072 		mov	r2, #512
 440              	.LVL12:
 441 0010 0A49     		ldr	r1, .L49
 442              	.LVL13:
 443 0012 6846     		mov	r0, sp
 444              	.LVL14:
 445 0014 FFF7FEFF 		bl	memcpy
 446              	.LVL15:
 271:Src/xl_320.c  ****     0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 272:Src/xl_320.c  ****     0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
 273:Src/xl_320.c  ****     0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
 274:Src/xl_320.c  ****     0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
 275:Src/xl_320.c  ****     0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
 276:Src/xl_320.c  ****     0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
 277:Src/xl_320.c  ****     0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
 278:Src/xl_320.c  ****     0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
 279:Src/xl_320.c  ****     0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
 280:Src/xl_320.c  ****     0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
 281:Src/xl_320.c  ****     0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
 282:Src/xl_320.c  ****     0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
 283:Src/xl_320.c  ****     0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
 284:Src/xl_320.c  ****     0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
 285:Src/xl_320.c  ****     0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
 286:Src/xl_320.c  ****     0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
 287:Src/xl_320.c  ****     0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
 288:Src/xl_320.c  ****     0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
 289:Src/xl_320.c  ****     0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
 290:Src/xl_320.c  ****     0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
 291:Src/xl_320.c  ****     0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
 292:Src/xl_320.c  ****     0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
 293:Src/xl_320.c  ****     0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
 294:Src/xl_320.c  ****     0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
 295:Src/xl_320.c  ****     0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
 296:Src/xl_320.c  ****     0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
 297:Src/xl_320.c  ****     0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
 298:Src/xl_320.c  ****     0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
 299:Src/xl_320.c  ****     0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
 300:Src/xl_320.c  ****     0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
 301:Src/xl_320.c  ****     0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
 302:Src/xl_320.c  ****     0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
 303:Src/xl_320.c  **** 
ARM GAS  /tmp/cclPV7jd.s 			page 14


 304:Src/xl_320.c  ****   for(j = 0; j < data_blk_size; j++){
 447              		.loc 1 304 0
 448 0018 0023     		movs	r3, #0
 449 001a 09E0     		b	.L46
 450              	.LVL16:
 451              	.L47:
 305:Src/xl_320.c  ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 452              		.loc 1 305 0 discriminator 3
 453 001c F25C     		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 454 001e 82EA1422 		eor	r2, r2, r4, lsr #8
 455              	.LVL17:
 306:Src/xl_320.c  ****       crc_accum = (crc_accum << 8) ^ crc_table[i];
 456              		.loc 1 306 0 discriminator 3
 457 0022 3DF91220 		ldrsh	r2, [sp, r2, lsl #1]
 458              	.LVL18:
 459 0026 82EA0424 		eor	r4, r2, r4, lsl #8
 460              	.LVL19:
 461 002a A4B2     		uxth	r4, r4
 462              	.LVL20:
 304:Src/xl_320.c  ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 463              		.loc 1 304 0 discriminator 3
 464 002c 0133     		adds	r3, r3, #1
 465              	.LVL21:
 466 002e 9BB2     		uxth	r3, r3
 467              	.LVL22:
 468              	.L46:
 304:Src/xl_320.c  ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 469              		.loc 1 304 0 is_stmt 0 discriminator 1
 470 0030 AB42     		cmp	r3, r5
 471 0032 F3D3     		bcc	.L47
 307:Src/xl_320.c  ****   }
 308:Src/xl_320.c  **** 
 309:Src/xl_320.c  ****   return crc_accum;
 310:Src/xl_320.c  **** }
 472              		.loc 1 310 0 is_stmt 1
 473 0034 2046     		mov	r0, r4
 474 0036 0DF5007D 		add	sp, sp, #512
 475              	.LCFI2:
 476              		.cfi_def_cfa_offset 16
 477              		@ sp needed
 478 003a 70BD     		pop	{r4, r5, r6, pc}
 479              	.LVL23:
 480              	.L50:
 481              		.align	2
 482              	.L49:
 483 003c 00000000 		.word	.LANCHOR0
 484              		.cfi_endproc
 485              	.LFE16:
 487              		.section	.text.XL_Extract_Status_Packet,"ax",%progbits
 488              		.align	1
 489              		.global	XL_Extract_Status_Packet
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv4-sp-d16
 495              	XL_Extract_Status_Packet:
 496              	.LFB12:
ARM GAS  /tmp/cclPV7jd.s 			page 15


 102:Src/xl_320.c  ****   //CRC
 497              		.loc 1 102 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              	.LVL24:
 502 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 503              	.LCFI3:
 504              		.cfi_def_cfa_offset 24
 505              		.cfi_offset 3, -24
 506              		.cfi_offset 4, -20
 507              		.cfi_offset 5, -16
 508              		.cfi_offset 6, -12
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 0546     		mov	r5, r0
 512 0004 0C46     		mov	r4, r1
 104:Src/xl_320.c  ****   uint16_t new_crc = XL_Update_CRC(0, frame, length-2);
 513              		.loc 1 104 0
 514 0006 8B18     		adds	r3, r1, r2
 515 0008 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 516 000c 023A     		subs	r2, r2, #2
 517              	.LVL25:
 518 000e 8E18     		adds	r6, r1, r2
 519 0010 8F5C     		ldrb	r7, [r1, r2]	@ zero_extendqisi2
 520 0012 47EA0327 		orr	r7, r7, r3, lsl #8
 521              	.LVL26:
 105:Src/xl_320.c  ****   if(new_crc != old_crc){
 522              		.loc 1 105 0
 523 0016 92B2     		uxth	r2, r2
 524 0018 0020     		movs	r0, #0
 525              	.LVL27:
 526 001a FFF7FEFF 		bl	XL_Update_CRC
 527              	.LVL28:
 106:Src/xl_320.c  ****     err = XL_ERR_BAD_FRAME;
 528              		.loc 1 106 0
 529 001e 8742     		cmp	r7, r0
 530 0020 01D0     		beq	.L60
 108:Src/xl_320.c  ****   }
 531              		.loc 1 108 0
 532 0022 0120     		movs	r0, #1
 533              	.LVL29:
 534              	.L52:
 138:Src/xl_320.c  **** 
 535              		.loc 1 138 0
 536 0024 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 537              	.LVL30:
 538              	.L60:
 111:Src/xl_320.c  ****   packet->err = frame[8];
 539              		.loc 1 111 0
 540 0026 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 541 0028 2B70     		strb	r3, [r5]
 112:Src/xl_320.c  **** 
 542              		.loc 1 112 0
 543 002a 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 544 002c 6B70     		strb	r3, [r5, #1]
 115:Src/xl_320.c  ****   uint8_t *end_stuffing = frame+(length-2);
ARM GAS  /tmp/cclPV7jd.s 			page 16


 545              		.loc 1 115 0
 546 002e E01D     		adds	r0, r4, #7
 547              	.LVL31:
 117:Src/xl_320.c  **** 
 548              		.loc 1 117 0
 549 0030 04F10902 		add	r2, r4, #9
 550              	.LVL32:
 119:Src/xl_320.c  ****   while(p_frame != end_stuffing){
 551              		.loc 1 119 0
 552 0034 0023     		movs	r3, #0
 553 0036 AB70     		strb	r3, [r5, #2]
 120:Src/xl_320.c  ****     packet->params[packet->nb_params++] = *(p_frame++);
 554              		.loc 1 120 0
 555 0038 01E0     		b	.L53
 556              	.LVL33:
 557              	.L55:
 132:Src/xl_320.c  ****       }
 558              		.loc 1 132 0
 559 003a 0130     		adds	r0, r0, #1
 560              	.LVL34:
 561              	.L54:
 128:Src/xl_320.c  **** 	start_stuffing = p_frame;
 562              		.loc 1 128 0
 563 003c 0A46     		mov	r2, r1
 564              	.LVL35:
 565              	.L53:
 120:Src/xl_320.c  ****     packet->params[packet->nb_params++] = *(p_frame++);
 566              		.loc 1 120 0
 567 003e 9642     		cmp	r6, r2
 568 0040 18D0     		beq	.L61
 121:Src/xl_320.c  ****     if(p_frame - start_stuffing == 3){
 569              		.loc 1 121 0
 570 0042 511C     		adds	r1, r2, #1
 571              	.LVL36:
 572 0044 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 573 0046 5C1C     		adds	r4, r3, #1
 574 0048 AC70     		strb	r4, [r5, #2]
 575 004a 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 576 004c 2B44     		add	r3, r3, r5
 577 004e DC70     		strb	r4, [r3, #3]
 122:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 578              		.loc 1 122 0
 579 0050 0B1A     		subs	r3, r1, r0
 580 0052 032B     		cmp	r3, #3
 581 0054 F2D1     		bne	.L54
 123:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 582              		.loc 1 123 0
 583 0056 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 584 0058 FF2B     		cmp	r3, #255
 585 005a EED1     		bne	.L55
 123:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 586              		.loc 1 123 0 is_stmt 0 discriminator 1
 587 005c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 588 005e FF2B     		cmp	r3, #255
 589 0060 EBD1     		bne	.L55
 123:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 590              		.loc 1 123 0 discriminator 2
ARM GAS  /tmp/cclPV7jd.s 			page 17


 591 0062 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 592 0064 FD2B     		cmp	r3, #253
 593 0066 E8D1     		bne	.L55
 124:Src/xl_320.c  **** 	  err = XL_ERR_BAD_FRAME;
 594              		.loc 1 124 0 is_stmt 1
 595 0068 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 596 006a FD2B     		cmp	r3, #253
 597 006c 04D1     		bne	.L58
 128:Src/xl_320.c  **** 	start_stuffing = p_frame;
 598              		.loc 1 128 0
 599 006e 901C     		adds	r0, r2, #2
 600              	.LVL37:
 601 0070 0146     		mov	r1, r0
 129:Src/xl_320.c  ****       }
 602              		.loc 1 129 0
 603 0072 E3E7     		b	.L54
 604              	.LVL38:
 605              	.L61:
 137:Src/xl_320.c  **** }
 606              		.loc 1 137 0
 607 0074 0020     		movs	r0, #0
 608              	.LVL39:
 609 0076 D5E7     		b	.L52
 610              	.LVL40:
 611              	.L58:
 126:Src/xl_320.c  **** 	}
 612              		.loc 1 126 0
 613 0078 0120     		movs	r0, #1
 614              	.LVL41:
 615 007a D3E7     		b	.L52
 616              		.cfi_endproc
 617              	.LFE12:
 619              		.section	.text.XL_Receive,"ax",%progbits
 620              		.align	1
 621              		.global	XL_Receive
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu fpv4-sp-d16
 627              	XL_Receive:
 628              	.LFB13:
 140:Src/xl_320.c  ****   //Initialisation du timer
 629              		.loc 1 140 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL42:
 634 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 635              	.LCFI4:
 636              		.cfi_def_cfa_offset 24
 637              		.cfi_offset 4, -24
 638              		.cfi_offset 5, -20
 639              		.cfi_offset 6, -16
 640              		.cfi_offset 7, -12
 641              		.cfi_offset 8, -8
 642              		.cfi_offset 14, -4
 643 0004 0446     		mov	r4, r0
ARM GAS  /tmp/cclPV7jd.s 			page 18


 644 0006 8846     		mov	r8, r1
 645 0008 1646     		mov	r6, r2
 142:Src/xl_320.c  **** 
 646              		.loc 1 142 0
 647 000a C368     		ldr	r3, [r0, #12]
 648 000c 9847     		blx	r3
 649              	.LVL43:
 650 000e 0546     		mov	r5, r0
 651              	.LVL44:
 652              	.L63:
 145:Src/xl_320.c  ****     //Evite une boucle infinie
 653              		.loc 1 145 0
 654 0010 94F82431 		ldrb	r3, [r4, #292]	@ zero_extendqisi2
 655 0014 DBB2     		uxtb	r3, r3
 656 0016 012B     		cmp	r3, #1
 657 0018 07D1     		bne	.L72
 147:Src/xl_320.c  ****       return 1;
 658              		.loc 1 147 0
 659 001a E368     		ldr	r3, [r4, #12]
 660 001c 9847     		blx	r3
 661              	.LVL45:
 662 001e 401B     		subs	r0, r0, r5
 663 0020 B042     		cmp	r0, r6
 664 0022 F5D9     		bls	.L63
 148:Src/xl_320.c  ****     }
 665              		.loc 1 148 0
 666 0024 0120     		movs	r0, #1
 667              	.L64:
 175:Src/xl_320.c  **** 
 668              		.loc 1 175 0
 669 0026 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 670              	.LVL46:
 671              	.L72:
 153:Src/xl_320.c  ****   
 672              		.loc 1 153 0
 673 002a A368     		ldr	r3, [r4, #8]
 674 002c 0120     		movs	r0, #1
 675 002e 9847     		blx	r3
 676              	.LVL47:
 155:Src/xl_320.c  ****   interface->fsm.remaining_bytes = 0;
 677              		.loc 1 155 0
 678 0030 154B     		ldr	r3, .L74
 679 0032 2361     		str	r3, [r4, #16]
 156:Src/xl_320.c  ****   interface->fsm.buffer = interface->buffer;
 680              		.loc 1 156 0
 681 0034 0023     		movs	r3, #0
 682 0036 A382     		strh	r3, [r4, #20]	@ movhi
 157:Src/xl_320.c  ****   interface->fsm.p_buffer = interface->buffer;
 683              		.loc 1 157 0
 684 0038 04F12407 		add	r7, r4, #36
 685 003c A761     		str	r7, [r4, #24]
 158:Src/xl_320.c  ****   interface->fsm.done = 0;
 686              		.loc 1 158 0
 687 003e E761     		str	r7, [r4, #28]
 159:Src/xl_320.c  **** 
 688              		.loc 1 159 0
 689 0040 84F82030 		strb	r3, [r4, #32]
ARM GAS  /tmp/cclPV7jd.s 			page 19


 690              	.L66:
 162:Src/xl_320.c  ****     if(interface->receive(interface->fsm.p_buffer, 1, 1) != 0){
 691              		.loc 1 162 0
 692 0044 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 693 0048 012B     		cmp	r3, #1
 694 004a 0FD0     		beq	.L67
 162:Src/xl_320.c  ****     if(interface->receive(interface->fsm.p_buffer, 1, 1) != 0){
 695              		.loc 1 162 0 is_stmt 0 discriminator 1
 696 004c E368     		ldr	r3, [r4, #12]
 697 004e 9847     		blx	r3
 698              	.LVL48:
 699 0050 401B     		subs	r0, r0, r5
 700 0052 B042     		cmp	r0, r6
 701 0054 0AD8     		bhi	.L67
 163:Src/xl_320.c  ****       break;
 702              		.loc 1 163 0 is_stmt 1
 703 0056 6368     		ldr	r3, [r4, #4]
 704 0058 0122     		movs	r2, #1
 705 005a 1146     		mov	r1, r2
 706 005c E069     		ldr	r0, [r4, #28]
 707 005e 9847     		blx	r3
 708              	.LVL49:
 709 0060 20B9     		cbnz	r0, .L67
 166:Src/xl_320.c  ****   }
 710              		.loc 1 166 0
 711 0062 2046     		mov	r0, r4
 712 0064 50F8103F 		ldr	r3, [r0, #16]!
 713 0068 9847     		blx	r3
 714              	.LVL50:
 715 006a EBE7     		b	.L66
 716              	.L67:
 170:Src/xl_320.c  ****     return 1;
 717              		.loc 1 170 0
 718 006c 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 719 0070 0BB9     		cbnz	r3, .L73
 171:Src/xl_320.c  ****   }
 720              		.loc 1 171 0
 721 0072 0120     		movs	r0, #1
 722 0074 D7E7     		b	.L64
 723              	.L73:
 174:Src/xl_320.c  **** }
 724              		.loc 1 174 0
 725 0076 E269     		ldr	r2, [r4, #28]
 726 0078 A369     		ldr	r3, [r4, #24]
 727 007a D21A     		subs	r2, r2, r3
 728 007c 92B2     		uxth	r2, r2
 729 007e 3946     		mov	r1, r7
 730 0080 4046     		mov	r0, r8
 731 0082 FFF7FEFF 		bl	XL_Extract_Status_Packet
 732              	.LVL51:
 733 0086 CEE7     		b	.L64
 734              	.L75:
 735              		.align	2
 736              	.L74:
 737 0088 00000000 		.word	XL_FSM_HEADER_0
 738              		.cfi_endproc
 739              	.LFE13:
ARM GAS  /tmp/cclPV7jd.s 			page 20


 741              		.section	.text.XL_Build_Frame,"ax",%progbits
 742              		.align	1
 743              		.global	XL_Build_Frame
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu fpv4-sp-d16
 749              	XL_Build_Frame:
 750              	.LFB14:
 180:Src/xl_320.c  ****   //Vérification des arguments
 751              		.loc 1 180 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL52:
 182:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ARGUMENTS;
 756              		.loc 1 182 0
 757 0000 0028     		cmp	r0, #0
 758 0002 53D0     		beq	.L82
 759 0004 0346     		mov	r3, r0
 182:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ARGUMENTS;
 760              		.loc 1 182 0 is_stmt 0 discriminator 1
 761 0006 4268     		ldr	r2, [r0, #4]
 762 0008 002A     		cmp	r2, #0
 763 000a 51D0     		beq	.L83
 182:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ARGUMENTS;
 764              		.loc 1 182 0 discriminator 2
 765 000c 0029     		cmp	r1, #0
 766 000e 51D0     		beq	.L84
 187:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ID;
 767              		.loc 1 187 0 is_stmt 1
 768 0010 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 769 0012 FD2A     		cmp	r2, #253
 770 0014 50D0     		beq	.L85
 187:Src/xl_320.c  ****     err = XL_ERR_ILLEGAL_ID;
 771              		.loc 1 187 0 is_stmt 0 discriminator 1
 772 0016 FF2A     		cmp	r2, #255
 773 0018 50D0     		beq	.L86
 180:Src/xl_320.c  ****   //Vérification des arguments
 774              		.loc 1 180 0 is_stmt 1
 775 001a 70B5     		push	{r4, r5, r6, lr}
 776              	.LCFI5:
 777              		.cfi_def_cfa_offset 16
 778              		.cfi_offset 4, -16
 779              		.cfi_offset 5, -12
 780              		.cfi_offset 6, -8
 781              		.cfi_offset 14, -4
 192:Src/xl_320.c  ****     err = XL_ERR_BUFFER_OVERFLOW;
 782              		.loc 1 192 0
 783 001c 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 784 001e 02F10A00 		add	r0, r2, #10
 785              	.LVL53:
 786 0022 284C     		ldr	r4, .L93
 787 0024 A4FB0242 		umull	r4, r2, r4, r2
 788 0028 00EB5202 		add	r2, r0, r2, lsr #1
 789 002c B2F5807F 		cmp	r2, #256
 790 0030 46DC     		bgt	.L87
ARM GAS  /tmp/cclPV7jd.s 			page 21


 791              	.LVL54:
 199:Src/xl_320.c  ****   *(p_buffer++) = header[1];
 792              		.loc 1 199 0
 793 0032 FF22     		movs	r2, #255
 794 0034 0A70     		strb	r2, [r1]
 795              	.LVL55:
 200:Src/xl_320.c  ****   *(p_buffer++) = header[2];
 796              		.loc 1 200 0
 797 0036 4A70     		strb	r2, [r1, #1]
 798              	.LVL56:
 201:Src/xl_320.c  ****   *(p_buffer++) = header[3];
 799              		.loc 1 201 0
 800 0038 FD22     		movs	r2, #253
 801 003a 8A70     		strb	r2, [r1, #2]
 802              	.LVL57:
 202:Src/xl_320.c  **** 
 803              		.loc 1 202 0
 804 003c 0022     		movs	r2, #0
 805 003e CA70     		strb	r2, [r1, #3]
 806              	.LVL58:
 205:Src/xl_320.c  **** 
 807              		.loc 1 205 0
 808 0040 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 809 0042 0871     		strb	r0, [r1, #4]
 208:Src/xl_320.c  **** 
 810              		.loc 1 208 0
 811 0044 CD1D     		adds	r5, r1, #7
 812              	.LVL59:
 213:Src/xl_320.c  **** 
 813              		.loc 1 213 0
 814 0046 01F10804 		add	r4, r1, #8
 815              	.LVL60:
 816 004a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 817 004c C871     		strb	r0, [r1, #7]
 818              	.LVL61:
 217:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 819              		.loc 1 217 0
 820 004e 02E0     		b	.L78
 821              	.LVL62:
 822              	.L80:
 224:Src/xl_320.c  ****       }
 823              		.loc 1 224 0
 824 0050 0135     		adds	r5, r5, #1
 825              	.LVL63:
 826              	.L79:
 217:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 827              		.loc 1 217 0 discriminator 2
 828 0052 0132     		adds	r2, r2, #1
 829              	.LVL64:
 830 0054 0446     		mov	r4, r0
 831              	.LVL65:
 832              	.L78:
 217:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 833              		.loc 1 217 0 is_stmt 0 discriminator 1
 834 0056 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 835 0058 9042     		cmp	r0, r2
 836 005a 14DD     		ble	.L92
ARM GAS  /tmp/cclPV7jd.s 			page 22


 218:Src/xl_320.c  ****     if(p_buffer - start_stuffing == 3){
 837              		.loc 1 218 0 is_stmt 1
 838 005c 5E68     		ldr	r6, [r3, #4]
 839 005e 601C     		adds	r0, r4, #1
 840              	.LVL66:
 841 0060 B65C     		ldrb	r6, [r6, r2]	@ zero_extendqisi2
 842 0062 2670     		strb	r6, [r4]
 219:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 843              		.loc 1 219 0
 844 0064 461B     		subs	r6, r0, r5
 845 0066 032E     		cmp	r6, #3
 846 0068 F3D1     		bne	.L79
 220:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 847              		.loc 1 220 0
 848 006a 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 849 006c FF2E     		cmp	r6, #255
 850 006e EFD1     		bne	.L80
 220:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 851              		.loc 1 220 0 is_stmt 0 discriminator 1
 852 0070 6E78     		ldrb	r6, [r5, #1]	@ zero_extendqisi2
 853 0072 FF2E     		cmp	r6, #255
 854 0074 ECD1     		bne	.L80
 220:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 855              		.loc 1 220 0 discriminator 2
 856 0076 AE78     		ldrb	r6, [r5, #2]	@ zero_extendqisi2
 857 0078 FD2E     		cmp	r6, #253
 858 007a E9D1     		bne	.L80
 221:Src/xl_320.c  **** 	start_stuffing = p_buffer;
 859              		.loc 1 221 0 is_stmt 1
 860 007c A01C     		adds	r0, r4, #2
 861              	.LVL67:
 862 007e FD25     		movs	r5, #253
 863              	.LVL68:
 864 0080 6570     		strb	r5, [r4, #1]
 865              	.LVL69:
 222:Src/xl_320.c  ****       }else{
 866              		.loc 1 222 0
 867 0082 0546     		mov	r5, r0
 868 0084 E5E7     		b	.L79
 869              	.LVL70:
 870              	.L92:
 871 0086 0D46     		mov	r5, r1
 872              	.LVL71:
 231:Src/xl_320.c  ****   buffer[5] = packet_length & 0x00FF;
 873              		.loc 1 231 0
 874 0088 621A     		subs	r2, r4, r1
 875              	.LVL72:
 876 008a 92B2     		uxth	r2, r2
 877 008c 531F     		subs	r3, r2, #5
 878              	.LVL73:
 879 008e 9BB2     		uxth	r3, r3
 880              	.LVL74:
 232:Src/xl_320.c  ****   buffer[6] = packet_length >> 8;
 881              		.loc 1 232 0
 882 0090 4B71     		strb	r3, [r1, #5]
 233:Src/xl_320.c  **** 
 883              		.loc 1 233 0
ARM GAS  /tmp/cclPV7jd.s 			page 23


 884 0092 1B0A     		lsrs	r3, r3, #8
 885              	.LVL75:
 886 0094 8B71     		strb	r3, [r1, #6]
 236:Src/xl_320.c  ****   *(p_buffer++) = crc & 0x00FF;
 887              		.loc 1 236 0
 888 0096 0020     		movs	r0, #0
 889 0098 FFF7FEFF 		bl	XL_Update_CRC
 890              	.LVL76:
 237:Src/xl_320.c  ****   *(p_buffer++) = crc >> 8;
 891              		.loc 1 237 0
 892 009c 2146     		mov	r1, r4
 893 009e 01F8020B 		strb	r0, [r1], #2
 894              	.LVL77:
 238:Src/xl_320.c  ****   
 895              		.loc 1 238 0
 896 00a2 000A     		lsrs	r0, r0, #8
 897              	.LVL78:
 898 00a4 6070     		strb	r0, [r4, #1]
 240:Src/xl_320.c  **** }
 899              		.loc 1 240 0
 900 00a6 481B     		subs	r0, r1, r5
 901 00a8 C0B2     		uxtb	r0, r0
 902              	.LVL79:
 903              	.L77:
 241:Src/xl_320.c  **** 
 904              		.loc 1 241 0
 905 00aa 70BD     		pop	{r4, r5, r6, pc}
 906              	.LVL80:
 907              	.L82:
 908              	.LCFI6:
 909              		.cfi_def_cfa_offset 0
 910              		.cfi_restore 4
 911              		.cfi_restore 5
 912              		.cfi_restore 6
 913              		.cfi_restore 14
 184:Src/xl_320.c  ****   }
 914              		.loc 1 184 0
 915 00ac 0020     		movs	r0, #0
 916              	.LVL81:
 917 00ae 7047     		bx	lr
 918              	.LVL82:
 919              	.L83:
 920 00b0 0020     		movs	r0, #0
 921              	.LVL83:
 922 00b2 7047     		bx	lr
 923              	.LVL84:
 924              	.L84:
 925 00b4 0020     		movs	r0, #0
 926              	.LVL85:
 927 00b6 7047     		bx	lr
 928              	.LVL86:
 929              	.L85:
 189:Src/xl_320.c  ****   }
 930              		.loc 1 189 0
 931 00b8 0020     		movs	r0, #0
 932              	.LVL87:
 933 00ba 7047     		bx	lr
ARM GAS  /tmp/cclPV7jd.s 			page 24


 934              	.LVL88:
 935              	.L86:
 936 00bc 0020     		movs	r0, #0
 937              	.LVL89:
 241:Src/xl_320.c  **** 
 938              		.loc 1 241 0
 939 00be 7047     		bx	lr
 940              	.L87:
 941              	.LCFI7:
 942              		.cfi_def_cfa_offset 16
 943              		.cfi_offset 4, -16
 944              		.cfi_offset 5, -12
 945              		.cfi_offset 6, -8
 946              		.cfi_offset 14, -4
 194:Src/xl_320.c  ****   }
 947              		.loc 1 194 0
 948 00c0 0020     		movs	r0, #0
 949 00c2 F2E7     		b	.L77
 950              	.L94:
 951              		.align	2
 952              	.L93:
 953 00c4 ABAAAAAA 		.word	-1431655765
 954              		.cfi_endproc
 955              	.LFE14:
 957              		.section	.text.XL_Send,"ax",%progbits
 958              		.align	1
 959              		.global	XL_Send
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu fpv4-sp-d16
 965              	XL_Send:
 966              	.LFB15:
 243:Src/xl_320.c  ****   //Initialisation du timer
 967              		.loc 1 243 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              	.LVL90:
 972 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 973              	.LCFI8:
 974              		.cfi_def_cfa_offset 24
 975              		.cfi_offset 3, -24
 976              		.cfi_offset 4, -20
 977              		.cfi_offset 5, -16
 978              		.cfi_offset 6, -12
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 0446     		mov	r4, r0
 982 0004 0F46     		mov	r7, r1
 983 0006 1646     		mov	r6, r2
 245:Src/xl_320.c  **** 
 984              		.loc 1 245 0
 985 0008 C368     		ldr	r3, [r0, #12]
 986 000a 9847     		blx	r3
 987              	.LVL91:
 988 000c 0546     		mov	r5, r0
ARM GAS  /tmp/cclPV7jd.s 			page 25


 989              	.LVL92:
 990              	.L96:
 248:Src/xl_320.c  ****     //Evite une boucle infinie
 991              		.loc 1 248 0
 992 000e 94F82431 		ldrb	r3, [r4, #292]	@ zero_extendqisi2
 993 0012 DBB2     		uxtb	r3, r3
 994 0014 012B     		cmp	r3, #1
 995 0016 06D1     		bne	.L102
 250:Src/xl_320.c  ****       return 1;
 996              		.loc 1 250 0
 997 0018 E368     		ldr	r3, [r4, #12]
 998 001a 9847     		blx	r3
 999              	.LVL93:
 1000 001c 401B     		subs	r0, r0, r5
 1001 001e B042     		cmp	r0, r6
 1002 0020 F5D9     		bls	.L96
 251:Src/xl_320.c  ****     }
 1003              		.loc 1 251 0
 1004 0022 0120     		movs	r0, #1
 1005              	.LVL94:
 1006              	.L97:
 266:Src/xl_320.c  **** 
 1007              		.loc 1 266 0
 1008 0024 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1009              	.LVL95:
 1010              	.L102:
 256:Src/xl_320.c  ****   interface->set_direction(XL_SEND);
 1011              		.loc 1 256 0
 1012 0026 0123     		movs	r3, #1
 1013 0028 84F82431 		strb	r3, [r4, #292]
 257:Src/xl_320.c  ****   
 1014              		.loc 1 257 0
 1015 002c A368     		ldr	r3, [r4, #8]
 1016 002e 0020     		movs	r0, #0
 1017 0030 9847     		blx	r3
 1018              	.LVL96:
 259:Src/xl_320.c  ****   if(!length){
 1019              		.loc 1 259 0
 1020 0032 04F12405 		add	r5, r4, #36
 1021              	.LVL97:
 1022 0036 2946     		mov	r1, r5
 1023 0038 3846     		mov	r0, r7
 1024 003a FFF7FEFF 		bl	XL_Build_Frame
 1025              	.LVL98:
 260:Src/xl_320.c  ****     interface->sending = 0;
 1026              		.loc 1 260 0
 1027 003e 28B1     		cbz	r0, .L103
 264:Src/xl_320.c  ****   return 0;
 1028              		.loc 1 264 0
 1029 0040 2368     		ldr	r3, [r4]
 1030 0042 81B2     		uxth	r1, r0
 1031 0044 2846     		mov	r0, r5
 1032              	.LVL99:
 1033 0046 9847     		blx	r3
 1034              	.LVL100:
 265:Src/xl_320.c  **** }
 1035              		.loc 1 265 0
ARM GAS  /tmp/cclPV7jd.s 			page 26


 1036 0048 0020     		movs	r0, #0
 1037 004a EBE7     		b	.L97
 1038              	.LVL101:
 1039              	.L103:
 261:Src/xl_320.c  ****     return 1;
 1040              		.loc 1 261 0
 1041 004c 0023     		movs	r3, #0
 1042 004e 84F82431 		strb	r3, [r4, #292]
 262:Src/xl_320.c  ****   }
 1043              		.loc 1 262 0
 1044 0052 0120     		movs	r0, #1
 1045              	.LVL102:
 1046 0054 E6E7     		b	.L97
 1047              		.cfi_endproc
 1048              	.LFE15:
 1050              		.section	.rodata
 1051              		.align	2
 1052              		.set	.LANCHOR0,. + 0
 1053              	.LC0:
 1054 0000 0000     		.short	0
 1055 0002 0580     		.short	-32763
 1056 0004 0F80     		.short	-32753
 1057 0006 0A00     		.short	10
 1058 0008 1B80     		.short	-32741
 1059 000a 1E00     		.short	30
 1060 000c 1400     		.short	20
 1061 000e 1180     		.short	-32751
 1062 0010 3380     		.short	-32717
 1063 0012 3600     		.short	54
 1064 0014 3C00     		.short	60
 1065 0016 3980     		.short	-32711
 1066 0018 2800     		.short	40
 1067 001a 2D80     		.short	-32723
 1068 001c 2780     		.short	-32729
 1069 001e 2200     		.short	34
 1070 0020 6380     		.short	-32669
 1071 0022 6600     		.short	102
 1072 0024 6C00     		.short	108
 1073 0026 6980     		.short	-32663
 1074 0028 7800     		.short	120
 1075 002a 7D80     		.short	-32643
 1076 002c 7780     		.short	-32649
 1077 002e 7200     		.short	114
 1078 0030 5000     		.short	80
 1079 0032 5580     		.short	-32683
 1080 0034 5F80     		.short	-32673
 1081 0036 5A00     		.short	90
 1082 0038 4B80     		.short	-32693
 1083 003a 4E00     		.short	78
 1084 003c 4400     		.short	68
 1085 003e 4180     		.short	-32703
 1086 0040 C380     		.short	-32573
 1087 0042 C600     		.short	198
 1088 0044 CC00     		.short	204
 1089 0046 C980     		.short	-32567
 1090 0048 D800     		.short	216
 1091 004a DD80     		.short	-32547
ARM GAS  /tmp/cclPV7jd.s 			page 27


 1092 004c D780     		.short	-32553
 1093 004e D200     		.short	210
 1094 0050 F000     		.short	240
 1095 0052 F580     		.short	-32523
 1096 0054 FF80     		.short	-32513
 1097 0056 FA00     		.short	250
 1098 0058 EB80     		.short	-32533
 1099 005a EE00     		.short	238
 1100 005c E400     		.short	228
 1101 005e E180     		.short	-32543
 1102 0060 A000     		.short	160
 1103 0062 A580     		.short	-32603
 1104 0064 AF80     		.short	-32593
 1105 0066 AA00     		.short	170
 1106 0068 BB80     		.short	-32581
 1107 006a BE00     		.short	190
 1108 006c B400     		.short	180
 1109 006e B180     		.short	-32591
 1110 0070 9380     		.short	-32621
 1111 0072 9600     		.short	150
 1112 0074 9C00     		.short	156
 1113 0076 9980     		.short	-32615
 1114 0078 8800     		.short	136
 1115 007a 8D80     		.short	-32627
 1116 007c 8780     		.short	-32633
 1117 007e 8200     		.short	130
 1118 0080 8381     		.short	-32381
 1119 0082 8601     		.short	390
 1120 0084 8C01     		.short	396
 1121 0086 8981     		.short	-32375
 1122 0088 9801     		.short	408
 1123 008a 9D81     		.short	-32355
 1124 008c 9781     		.short	-32361
 1125 008e 9201     		.short	402
 1126 0090 B001     		.short	432
 1127 0092 B581     		.short	-32331
 1128 0094 BF81     		.short	-32321
 1129 0096 BA01     		.short	442
 1130 0098 AB81     		.short	-32341
 1131 009a AE01     		.short	430
 1132 009c A401     		.short	420
 1133 009e A181     		.short	-32351
 1134 00a0 E001     		.short	480
 1135 00a2 E581     		.short	-32283
 1136 00a4 EF81     		.short	-32273
 1137 00a6 EA01     		.short	490
 1138 00a8 FB81     		.short	-32261
 1139 00aa FE01     		.short	510
 1140 00ac F401     		.short	500
 1141 00ae F181     		.short	-32271
 1142 00b0 D381     		.short	-32301
 1143 00b2 D601     		.short	470
 1144 00b4 DC01     		.short	476
 1145 00b6 D981     		.short	-32295
 1146 00b8 C801     		.short	456
 1147 00ba CD81     		.short	-32307
 1148 00bc C781     		.short	-32313
ARM GAS  /tmp/cclPV7jd.s 			page 28


 1149 00be C201     		.short	450
 1150 00c0 4001     		.short	320
 1151 00c2 4581     		.short	-32443
 1152 00c4 4F81     		.short	-32433
 1153 00c6 4A01     		.short	330
 1154 00c8 5B81     		.short	-32421
 1155 00ca 5E01     		.short	350
 1156 00cc 5401     		.short	340
 1157 00ce 5181     		.short	-32431
 1158 00d0 7381     		.short	-32397
 1159 00d2 7601     		.short	374
 1160 00d4 7C01     		.short	380
 1161 00d6 7981     		.short	-32391
 1162 00d8 6801     		.short	360
 1163 00da 6D81     		.short	-32403
 1164 00dc 6781     		.short	-32409
 1165 00de 6201     		.short	354
 1166 00e0 2381     		.short	-32477
 1167 00e2 2601     		.short	294
 1168 00e4 2C01     		.short	300
 1169 00e6 2981     		.short	-32471
 1170 00e8 3801     		.short	312
 1171 00ea 3D81     		.short	-32451
 1172 00ec 3781     		.short	-32457
 1173 00ee 3201     		.short	306
 1174 00f0 1001     		.short	272
 1175 00f2 1581     		.short	-32491
 1176 00f4 1F81     		.short	-32481
 1177 00f6 1A01     		.short	282
 1178 00f8 0B81     		.short	-32501
 1179 00fa 0E01     		.short	270
 1180 00fc 0401     		.short	260
 1181 00fe 0181     		.short	-32511
 1182 0100 0383     		.short	-31997
 1183 0102 0603     		.short	774
 1184 0104 0C03     		.short	780
 1185 0106 0983     		.short	-31991
 1186 0108 1803     		.short	792
 1187 010a 1D83     		.short	-31971
 1188 010c 1783     		.short	-31977
 1189 010e 1203     		.short	786
 1190 0110 3003     		.short	816
 1191 0112 3583     		.short	-31947
 1192 0114 3F83     		.short	-31937
 1193 0116 3A03     		.short	826
 1194 0118 2B83     		.short	-31957
 1195 011a 2E03     		.short	814
 1196 011c 2403     		.short	804
 1197 011e 2183     		.short	-31967
 1198 0120 6003     		.short	864
 1199 0122 6583     		.short	-31899
 1200 0124 6F83     		.short	-31889
 1201 0126 6A03     		.short	874
 1202 0128 7B83     		.short	-31877
 1203 012a 7E03     		.short	894
 1204 012c 7403     		.short	884
 1205 012e 7183     		.short	-31887
ARM GAS  /tmp/cclPV7jd.s 			page 29


 1206 0130 5383     		.short	-31917
 1207 0132 5603     		.short	854
 1208 0134 5C03     		.short	860
 1209 0136 5983     		.short	-31911
 1210 0138 4803     		.short	840
 1211 013a 4D83     		.short	-31923
 1212 013c 4783     		.short	-31929
 1213 013e 4203     		.short	834
 1214 0140 C003     		.short	960
 1215 0142 C583     		.short	-31803
 1216 0144 CF83     		.short	-31793
 1217 0146 CA03     		.short	970
 1218 0148 DB83     		.short	-31781
 1219 014a DE03     		.short	990
 1220 014c D403     		.short	980
 1221 014e D183     		.short	-31791
 1222 0150 F383     		.short	-31757
 1223 0152 F603     		.short	1014
 1224 0154 FC03     		.short	1020
 1225 0156 F983     		.short	-31751
 1226 0158 E803     		.short	1000
 1227 015a ED83     		.short	-31763
 1228 015c E783     		.short	-31769
 1229 015e E203     		.short	994
 1230 0160 A383     		.short	-31837
 1231 0162 A603     		.short	934
 1232 0164 AC03     		.short	940
 1233 0166 A983     		.short	-31831
 1234 0168 B803     		.short	952
 1235 016a BD83     		.short	-31811
 1236 016c B783     		.short	-31817
 1237 016e B203     		.short	946
 1238 0170 9003     		.short	912
 1239 0172 9583     		.short	-31851
 1240 0174 9F83     		.short	-31841
 1241 0176 9A03     		.short	922
 1242 0178 8B83     		.short	-31861
 1243 017a 8E03     		.short	910
 1244 017c 8403     		.short	900
 1245 017e 8183     		.short	-31871
 1246 0180 8002     		.short	640
 1247 0182 8582     		.short	-32123
 1248 0184 8F82     		.short	-32113
 1249 0186 8A02     		.short	650
 1250 0188 9B82     		.short	-32101
 1251 018a 9E02     		.short	670
 1252 018c 9402     		.short	660
 1253 018e 9182     		.short	-32111
 1254 0190 B382     		.short	-32077
 1255 0192 B602     		.short	694
 1256 0194 BC02     		.short	700
 1257 0196 B982     		.short	-32071
 1258 0198 A802     		.short	680
 1259 019a AD82     		.short	-32083
 1260 019c A782     		.short	-32089
 1261 019e A202     		.short	674
 1262 01a0 E382     		.short	-32029
ARM GAS  /tmp/cclPV7jd.s 			page 30


 1263 01a2 E602     		.short	742
 1264 01a4 EC02     		.short	748
 1265 01a6 E982     		.short	-32023
 1266 01a8 F802     		.short	760
 1267 01aa FD82     		.short	-32003
 1268 01ac F782     		.short	-32009
 1269 01ae F202     		.short	754
 1270 01b0 D002     		.short	720
 1271 01b2 D582     		.short	-32043
 1272 01b4 DF82     		.short	-32033
 1273 01b6 DA02     		.short	730
 1274 01b8 CB82     		.short	-32053
 1275 01ba CE02     		.short	718
 1276 01bc C402     		.short	708
 1277 01be C182     		.short	-32063
 1278 01c0 4382     		.short	-32189
 1279 01c2 4602     		.short	582
 1280 01c4 4C02     		.short	588
 1281 01c6 4982     		.short	-32183
 1282 01c8 5802     		.short	600
 1283 01ca 5D82     		.short	-32163
 1284 01cc 5782     		.short	-32169
 1285 01ce 5202     		.short	594
 1286 01d0 7002     		.short	624
 1287 01d2 7582     		.short	-32139
 1288 01d4 7F82     		.short	-32129
 1289 01d6 7A02     		.short	634
 1290 01d8 6B82     		.short	-32149
 1291 01da 6E02     		.short	622
 1292 01dc 6402     		.short	612
 1293 01de 6182     		.short	-32159
 1294 01e0 2002     		.short	544
 1295 01e2 2582     		.short	-32219
 1296 01e4 2F82     		.short	-32209
 1297 01e6 2A02     		.short	554
 1298 01e8 3B82     		.short	-32197
 1299 01ea 3E02     		.short	574
 1300 01ec 3402     		.short	564
 1301 01ee 3182     		.short	-32207
 1302 01f0 1382     		.short	-32237
 1303 01f2 1602     		.short	534
 1304 01f4 1C02     		.short	540
 1305 01f6 1982     		.short	-32231
 1306 01f8 0802     		.short	520
 1307 01fa 0D82     		.short	-32243
 1308 01fc 0782     		.short	-32249
 1309 01fe 0202     		.short	514
 1310              		.text
 1311              	.Letext0:
 1312              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1313              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1314              		.file 4 "Inc/xl_320.h"
 1315              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 1316              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 1317              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 1318              		.file 8 "/usr/arm-none-eabi/include/sys/reent.h"
 1319              		.file 9 "<built-in>"
ARM GAS  /tmp/cclPV7jd.s 			page 31


ARM GAS  /tmp/cclPV7jd.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xl_320.c
     /tmp/cclPV7jd.s:18     .text.XL_FSM_HEADER_0:0000000000000000 $t
     /tmp/cclPV7jd.s:25     .text.XL_FSM_HEADER_0:0000000000000000 XL_FSM_HEADER_0
     /tmp/cclPV7jd.s:54     .text.XL_FSM_HEADER_0:0000000000000014 $d
     /tmp/cclPV7jd.s:66     .text.XL_FSM_HEADER_1:0000000000000000 XL_FSM_HEADER_1
     /tmp/cclPV7jd.s:59     .text.XL_FSM_HEADER_1:0000000000000000 $t
     /tmp/cclPV7jd.s:97     .text.XL_FSM_HEADER_1:000000000000001c $d
     /tmp/cclPV7jd.s:110    .text.XL_FSM_HEADER_2:0000000000000000 XL_FSM_HEADER_2
     /tmp/cclPV7jd.s:103    .text.XL_FSM_HEADER_2:0000000000000000 $t
     /tmp/cclPV7jd.s:141    .text.XL_FSM_HEADER_2:000000000000001c $d
     /tmp/cclPV7jd.s:154    .text.XL_FSM_HEADER_3:0000000000000000 XL_FSM_HEADER_3
     /tmp/cclPV7jd.s:147    .text.XL_FSM_HEADER_3:0000000000000000 $t
     /tmp/cclPV7jd.s:185    .text.XL_FSM_HEADER_3:000000000000001c $d
     /tmp/cclPV7jd.s:198    .text.XL_FSM_ID:0000000000000000 XL_FSM_ID
     /tmp/cclPV7jd.s:191    .text.XL_FSM_ID:0000000000000000 $t
     /tmp/cclPV7jd.s:232    .text.XL_FSM_ID:0000000000000020 $d
     /tmp/cclPV7jd.s:245    .text.XL_FSM_LENGTH_LOW:0000000000000000 XL_FSM_LENGTH_LOW
     /tmp/cclPV7jd.s:238    .text.XL_FSM_LENGTH_LOW:0000000000000000 $t
     /tmp/cclPV7jd.s:267    .text.XL_FSM_LENGTH_LOW:0000000000000010 $d
     /tmp/cclPV7jd.s:279    .text.XL_FSM_LENGTH_HIGH:0000000000000000 XL_FSM_LENGTH_HIGH
     /tmp/cclPV7jd.s:272    .text.XL_FSM_LENGTH_HIGH:0000000000000000 $t
     /tmp/cclPV7jd.s:321    .text.XL_FSM_LENGTH_HIGH:000000000000002c $d
     /tmp/cclPV7jd.s:334    .text.XL_FSM_INSTRUCTION:0000000000000000 XL_FSM_INSTRUCTION
     /tmp/cclPV7jd.s:327    .text.XL_FSM_INSTRUCTION:0000000000000000 $t
     /tmp/cclPV7jd.s:369    .text.XL_FSM_INSTRUCTION:0000000000000024 $d
     /tmp/cclPV7jd.s:382    .text.XL_FSM_RECEIVING:0000000000000000 XL_FSM_RECEIVING
     /tmp/cclPV7jd.s:375    .text.XL_FSM_RECEIVING:0000000000000000 $t
     /tmp/cclPV7jd.s:411    .text.XL_Update_CRC:0000000000000000 $t
     /tmp/cclPV7jd.s:418    .text.XL_Update_CRC:0000000000000000 XL_Update_CRC
     /tmp/cclPV7jd.s:483    .text.XL_Update_CRC:000000000000003c $d
     /tmp/cclPV7jd.s:488    .text.XL_Extract_Status_Packet:0000000000000000 $t
     /tmp/cclPV7jd.s:495    .text.XL_Extract_Status_Packet:0000000000000000 XL_Extract_Status_Packet
     /tmp/cclPV7jd.s:620    .text.XL_Receive:0000000000000000 $t
     /tmp/cclPV7jd.s:627    .text.XL_Receive:0000000000000000 XL_Receive
     /tmp/cclPV7jd.s:737    .text.XL_Receive:0000000000000088 $d
     /tmp/cclPV7jd.s:742    .text.XL_Build_Frame:0000000000000000 $t
     /tmp/cclPV7jd.s:749    .text.XL_Build_Frame:0000000000000000 XL_Build_Frame
     /tmp/cclPV7jd.s:953    .text.XL_Build_Frame:00000000000000c4 $d
     /tmp/cclPV7jd.s:958    .text.XL_Send:0000000000000000 $t
     /tmp/cclPV7jd.s:965    .text.XL_Send:0000000000000000 XL_Send
     /tmp/cclPV7jd.s:1051   .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
