ARM GAS  /tmp/ccuthlll.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xl_320.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.XL_FSM_HEADER_0,"ax",%progbits
  18              		.align	1
  19              		.global	XL_FSM_HEADER_0
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	XL_FSM_HEADER_0:
  26              	.LFB3:
  27              		.file 1 "Src/xl_320.c"
   1:Src/xl_320.c  **** #include "xl_320.h"
   2:Src/xl_320.c  **** #include <stdio.h>
   3:Src/xl_320.c  **** 
   4:Src/xl_320.c  **** //========================================
   5:Src/xl_320.c  **** //    CONSTANTES ET VARIABLES GLOBALES
   6:Src/xl_320.c  **** //========================================
   7:Src/xl_320.c  **** static const uint8_t header[4] = {0xFF, 0xFF, 0xFD, 0x00};
   8:Src/xl_320.c  **** static const uint8_t stuffing_byte = 0xFD;
   9:Src/xl_320.c  **** static const uint8_t field_addr[] = {
  10:Src/xl_320.c  ****   [XL_ID] = 3,
  11:Src/xl_320.c  ****   [XL_BAUD_RATE] = 4,
  12:Src/xl_320.c  ****   [XL_RETURN_DELAY_TIME] = 5,
  13:Src/xl_320.c  ****   [XL_CW_ANGLE_LIMIT] = 6,
  14:Src/xl_320.c  ****   [XL_CCW_ANGLE_LIMIT] = 8,
  15:Src/xl_320.c  ****   [XL_CONTROL_MODE] = 11,
  16:Src/xl_320.c  ****   [XL_LIMIT_TEMPERATURE] = 12,
  17:Src/xl_320.c  ****   [XL_LOWER_LIMIT_VOLTAGE] = 13,
  18:Src/xl_320.c  ****   [XL_UPPER_LIMIT_VOLTAGE] = 14,
  19:Src/xl_320.c  ****   [XL_MAX_TORQUE] = 15,
  20:Src/xl_320.c  ****   [XL_RETURN_LEVEL] = 17,
  21:Src/xl_320.c  ****   [XL_ALARM_SHUTDOWN] = 18,
  22:Src/xl_320.c  ****   //EEPROM - Info
  23:Src/xl_320.c  ****   [XL_MODEL_NUMBER] = 0,
  24:Src/xl_320.c  ****   [XL_FIRMWARE_VERSION] = 2,
  25:Src/xl_320.c  ****   //RAM - Contrôle
  26:Src/xl_320.c  ****   [XL_TORQUE_ENABLE] = 24,
  27:Src/xl_320.c  ****   [XL_LED] = 25,
  28:Src/xl_320.c  ****   [XL_D_GAIN] = 27,
  29:Src/xl_320.c  ****   [XL_I_GAIN] = 28,
  30:Src/xl_320.c  ****   [XL_P_GAIN] = 29,
  31:Src/xl_320.c  ****   [XL_GOAL_POSITION] = 30,
ARM GAS  /tmp/ccuthlll.s 			page 2


  32:Src/xl_320.c  ****   [XL_MOVING_SPEED] = 32,
  33:Src/xl_320.c  ****   [XL_TORQUE_LIMIT] = 35,
  34:Src/xl_320.c  ****   [XL_PUNCH] = 51,
  35:Src/xl_320.c  ****   //RAM - Info
  36:Src/xl_320.c  ****   [XL_CURRENT_POSITION] = 37,
  37:Src/xl_320.c  ****   [XL_CURRENT_SPEED] = 39,
  38:Src/xl_320.c  ****   [XL_CURRENT_LOAD] = 41,
  39:Src/xl_320.c  ****   [XL_CURRENT_VOLTAGE] = 45,
  40:Src/xl_320.c  ****   [XL_CURRENT_TEMPERATURE] = 46,
  41:Src/xl_320.c  ****   [XL_REGISTERED_INSTRUCTION] = 47,
  42:Src/xl_320.c  ****   [XL_MOVING] = 49,
  43:Src/xl_320.c  ****   [XL_HARDWARE_ERROR_STATUS] = 50,
  44:Src/xl_320.c  **** };
  45:Src/xl_320.c  **** static const uint8_t field_length[] = {
  46:Src/xl_320.c  ****   [XL_ID] = 1,
  47:Src/xl_320.c  ****   [XL_BAUD_RATE] = 1,
  48:Src/xl_320.c  ****   [XL_RETURN_DELAY_TIME] = 1,
  49:Src/xl_320.c  ****   [XL_CW_ANGLE_LIMIT] = 2,
  50:Src/xl_320.c  ****   [XL_CCW_ANGLE_LIMIT] = 2,
  51:Src/xl_320.c  ****   [XL_CONTROL_MODE] = 1,
  52:Src/xl_320.c  ****   [XL_LIMIT_TEMPERATURE] = 1,
  53:Src/xl_320.c  ****   [XL_LOWER_LIMIT_VOLTAGE] = 1,
  54:Src/xl_320.c  ****   [XL_UPPER_LIMIT_VOLTAGE] = 1,
  55:Src/xl_320.c  ****   [XL_MAX_TORQUE] = 2,
  56:Src/xl_320.c  ****   [XL_RETURN_LEVEL] = 1,
  57:Src/xl_320.c  ****   [XL_ALARM_SHUTDOWN] = 1,
  58:Src/xl_320.c  ****   //EEPROM - Info
  59:Src/xl_320.c  ****   [XL_MODEL_NUMBER] = 2,
  60:Src/xl_320.c  ****   [XL_FIRMWARE_VERSION] = 1,
  61:Src/xl_320.c  ****   //RAM - Contrôle
  62:Src/xl_320.c  ****   [XL_TORQUE_ENABLE] = 1,
  63:Src/xl_320.c  ****   [XL_LED] = 1,
  64:Src/xl_320.c  ****   [XL_D_GAIN] = 1,
  65:Src/xl_320.c  ****   [XL_I_GAIN] = 1,
  66:Src/xl_320.c  ****   [XL_P_GAIN] = 1,
  67:Src/xl_320.c  ****   [XL_GOAL_POSITION] = 2,
  68:Src/xl_320.c  ****   [XL_MOVING_SPEED] = 2,
  69:Src/xl_320.c  ****   [XL_TORQUE_LIMIT] = 2,
  70:Src/xl_320.c  ****   [XL_PUNCH] = 2,
  71:Src/xl_320.c  ****   //RAM - Info
  72:Src/xl_320.c  ****   [XL_CURRENT_POSITION] = 2,
  73:Src/xl_320.c  ****   [XL_CURRENT_SPEED] = 2,
  74:Src/xl_320.c  ****   [XL_CURRENT_LOAD] = 2,
  75:Src/xl_320.c  ****   [XL_CURRENT_VOLTAGE] = 1,
  76:Src/xl_320.c  ****   [XL_CURRENT_TEMPERATURE] = 1,
  77:Src/xl_320.c  ****   [XL_REGISTERED_INSTRUCTION] = 1,
  78:Src/xl_320.c  ****   [XL_MOVING] = 1,
  79:Src/xl_320.c  ****   [XL_HARDWARE_ERROR_STATUS] = 1,
  80:Src/xl_320.c  **** };
  81:Src/xl_320.c  **** static uint16_t err;
  82:Src/xl_320.c  **** 
  83:Src/xl_320.c  **** //========================================
  84:Src/xl_320.c  **** //        FONCTIONS DE RECEPTION
  85:Src/xl_320.c  **** //========================================
  86:Src/xl_320.c  **** #define FSM_BYTE *(fsm->p_buffer)
  87:Src/xl_320.c  **** #define FSM_NEXT fsm->p_buffer++
  88:Src/xl_320.c  **** #define FSM_RESET fsm->update_state = XL_FSM_HEADER_0; fsm->p_buffer = fsm->buffer
ARM GAS  /tmp/ccuthlll.s 			page 3


  89:Src/xl_320.c  **** #define FSM_UPDATE(state_function) fsm->update_state = state_function
  90:Src/xl_320.c  **** 
  91:Src/xl_320.c  **** void XL_FSM_HEADER_0(XL_Receiver_FSM *fsm){
  28              		.loc 1 91 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  92:Src/xl_320.c  ****   if(FSM_BYTE == header[0]){
  34              		.loc 1 92 0
  35 0000 C368     		ldr	r3, [r0, #12]
  36 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  37 0004 FF2A     		cmp	r2, #255
  38 0006 00D0     		beq	.L3
  39              	.L1:
  93:Src/xl_320.c  ****     FSM_NEXT;
  94:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_HEADER_1);
  95:Src/xl_320.c  ****   }
  96:Src/xl_320.c  **** }
  40              		.loc 1 96 0
  41 0008 7047     		bx	lr
  42              	.L3:
  93:Src/xl_320.c  ****     FSM_NEXT;
  43              		.loc 1 93 0
  44 000a 0133     		adds	r3, r3, #1
  45 000c C360     		str	r3, [r0, #12]
  94:Src/xl_320.c  ****   }
  46              		.loc 1 94 0
  47 000e 014B     		ldr	r3, .L4
  48 0010 0360     		str	r3, [r0]
  49              		.loc 1 96 0
  50 0012 F9E7     		b	.L1
  51              	.L5:
  52              		.align	2
  53              	.L4:
  54 0014 00000000 		.word	XL_FSM_HEADER_1
  55              		.cfi_endproc
  56              	.LFE3:
  58              		.section	.text.XL_FSM_HEADER_1,"ax",%progbits
  59              		.align	1
  60              		.global	XL_FSM_HEADER_1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv4-sp-d16
  66              	XL_FSM_HEADER_1:
  67              	.LFB4:
  97:Src/xl_320.c  **** 
  98:Src/xl_320.c  **** void XL_FSM_HEADER_1(XL_Receiver_FSM *fsm){
  68              		.loc 1 98 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.LVL1:
  99:Src/xl_320.c  ****   if(FSM_BYTE == header[1]){
ARM GAS  /tmp/ccuthlll.s 			page 4


  74              		.loc 1 99 0
  75 0000 C368     		ldr	r3, [r0, #12]
  76 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  77 0004 FF2A     		cmp	r2, #255
  78 0006 04D0     		beq	.L9
 100:Src/xl_320.c  ****     FSM_NEXT;
 101:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_HEADER_2);
 102:Src/xl_320.c  ****   }
 103:Src/xl_320.c  ****   else{
 104:Src/xl_320.c  ****     FSM_RESET;
  79              		.loc 1 104 0
  80 0008 044B     		ldr	r3, .L10
  81 000a 0360     		str	r3, [r0]
  82 000c 8368     		ldr	r3, [r0, #8]
  83 000e C360     		str	r3, [r0, #12]
 105:Src/xl_320.c  ****   }
 106:Src/xl_320.c  **** }
  84              		.loc 1 106 0
  85 0010 7047     		bx	lr
  86              	.L9:
 100:Src/xl_320.c  ****     FSM_NEXT;
  87              		.loc 1 100 0
  88 0012 0133     		adds	r3, r3, #1
  89 0014 C360     		str	r3, [r0, #12]
 101:Src/xl_320.c  ****   }
  90              		.loc 1 101 0
  91 0016 024B     		ldr	r3, .L10+4
  92 0018 0360     		str	r3, [r0]
  93 001a 7047     		bx	lr
  94              	.L11:
  95              		.align	2
  96              	.L10:
  97 001c 00000000 		.word	XL_FSM_HEADER_0
  98 0020 00000000 		.word	XL_FSM_HEADER_2
  99              		.cfi_endproc
 100              	.LFE4:
 102              		.section	.text.XL_FSM_HEADER_2,"ax",%progbits
 103              		.align	1
 104              		.global	XL_FSM_HEADER_2
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	XL_FSM_HEADER_2:
 111              	.LFB5:
 107:Src/xl_320.c  **** 
 108:Src/xl_320.c  **** void XL_FSM_HEADER_2(XL_Receiver_FSM *fsm){
 112              		.loc 1 108 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL2:
 109:Src/xl_320.c  ****   if(FSM_BYTE == header[2]){
 118              		.loc 1 109 0
 119 0000 C368     		ldr	r3, [r0, #12]
 120 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccuthlll.s 			page 5


 121 0004 FD2A     		cmp	r2, #253
 122 0006 04D0     		beq	.L15
 110:Src/xl_320.c  ****     FSM_NEXT;
 111:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_HEADER_3);
 112:Src/xl_320.c  ****   }
 113:Src/xl_320.c  ****   else{
 114:Src/xl_320.c  ****     FSM_RESET;
 123              		.loc 1 114 0
 124 0008 044B     		ldr	r3, .L16
 125 000a 0360     		str	r3, [r0]
 126 000c 8368     		ldr	r3, [r0, #8]
 127 000e C360     		str	r3, [r0, #12]
 115:Src/xl_320.c  ****   }
 116:Src/xl_320.c  **** }
 128              		.loc 1 116 0
 129 0010 7047     		bx	lr
 130              	.L15:
 110:Src/xl_320.c  ****     FSM_NEXT;
 131              		.loc 1 110 0
 132 0012 0133     		adds	r3, r3, #1
 133 0014 C360     		str	r3, [r0, #12]
 111:Src/xl_320.c  ****   }
 134              		.loc 1 111 0
 135 0016 024B     		ldr	r3, .L16+4
 136 0018 0360     		str	r3, [r0]
 137 001a 7047     		bx	lr
 138              	.L17:
 139              		.align	2
 140              	.L16:
 141 001c 00000000 		.word	XL_FSM_HEADER_0
 142 0020 00000000 		.word	XL_FSM_HEADER_3
 143              		.cfi_endproc
 144              	.LFE5:
 146              		.section	.text.XL_FSM_HEADER_3,"ax",%progbits
 147              		.align	1
 148              		.global	XL_FSM_HEADER_3
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	XL_FSM_HEADER_3:
 155              	.LFB6:
 117:Src/xl_320.c  **** 
 118:Src/xl_320.c  **** void XL_FSM_HEADER_3(XL_Receiver_FSM *fsm){
 156              		.loc 1 118 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL3:
 119:Src/xl_320.c  ****   if(FSM_BYTE != stuffing_byte){
 162              		.loc 1 119 0
 163 0000 C368     		ldr	r3, [r0, #12]
 164 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 165 0004 FD2A     		cmp	r2, #253
 166 0006 04D0     		beq	.L19
 120:Src/xl_320.c  ****     FSM_NEXT;
ARM GAS  /tmp/ccuthlll.s 			page 6


 167              		.loc 1 120 0
 168 0008 0133     		adds	r3, r3, #1
 169 000a C360     		str	r3, [r0, #12]
 121:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_ID);
 170              		.loc 1 121 0
 171 000c 034B     		ldr	r3, .L21
 172 000e 0360     		str	r3, [r0]
 173 0010 7047     		bx	lr
 174              	.L19:
 122:Src/xl_320.c  ****   }
 123:Src/xl_320.c  ****   else{
 124:Src/xl_320.c  ****     FSM_RESET;
 175              		.loc 1 124 0
 176 0012 034B     		ldr	r3, .L21+4
 177 0014 0360     		str	r3, [r0]
 178 0016 8368     		ldr	r3, [r0, #8]
 179 0018 C360     		str	r3, [r0, #12]
 125:Src/xl_320.c  ****   }
 126:Src/xl_320.c  **** }
 180              		.loc 1 126 0
 181 001a 7047     		bx	lr
 182              	.L22:
 183              		.align	2
 184              	.L21:
 185 001c 00000000 		.word	XL_FSM_ID
 186 0020 00000000 		.word	XL_FSM_HEADER_0
 187              		.cfi_endproc
 188              	.LFE6:
 190              		.section	.text.XL_FSM_ID,"ax",%progbits
 191              		.align	1
 192              		.global	XL_FSM_ID
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	XL_FSM_ID:
 199              	.LFB7:
 127:Src/xl_320.c  **** 
 128:Src/xl_320.c  **** void XL_FSM_ID(XL_Receiver_FSM *fsm){
 200              		.loc 1 128 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL4:
 129:Src/xl_320.c  ****   if(FSM_BYTE != 0xFF && FSM_BYTE != 0xFD){
 206              		.loc 1 129 0
 207 0000 C368     		ldr	r3, [r0, #12]
 208 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 209 0004 FF2A     		cmp	r2, #255
 210 0006 06D0     		beq	.L24
 211              		.loc 1 129 0 is_stmt 0 discriminator 1
 212 0008 FD2A     		cmp	r2, #253
 213 000a 04D0     		beq	.L24
 130:Src/xl_320.c  ****     FSM_NEXT;
 214              		.loc 1 130 0 is_stmt 1
 215 000c 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccuthlll.s 			page 7


 216 000e C360     		str	r3, [r0, #12]
 131:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_LENGTH_LOW);
 217              		.loc 1 131 0
 218 0010 034B     		ldr	r3, .L26
 219 0012 0360     		str	r3, [r0]
 220 0014 7047     		bx	lr
 221              	.L24:
 132:Src/xl_320.c  ****   }
 133:Src/xl_320.c  ****   else{
 134:Src/xl_320.c  ****     FSM_RESET;
 222              		.loc 1 134 0
 223 0016 034B     		ldr	r3, .L26+4
 224 0018 0360     		str	r3, [r0]
 225 001a 8368     		ldr	r3, [r0, #8]
 226 001c C360     		str	r3, [r0, #12]
 135:Src/xl_320.c  ****   }
 136:Src/xl_320.c  **** }
 227              		.loc 1 136 0
 228 001e 7047     		bx	lr
 229              	.L27:
 230              		.align	2
 231              	.L26:
 232 0020 00000000 		.word	XL_FSM_LENGTH_LOW
 233 0024 00000000 		.word	XL_FSM_HEADER_0
 234              		.cfi_endproc
 235              	.LFE7:
 237              		.section	.text.XL_FSM_LENGTH_LOW,"ax",%progbits
 238              		.align	1
 239              		.global	XL_FSM_LENGTH_LOW
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu fpv4-sp-d16
 245              	XL_FSM_LENGTH_LOW:
 246              	.LFB8:
 137:Src/xl_320.c  **** 
 138:Src/xl_320.c  **** void XL_FSM_LENGTH_LOW(XL_Receiver_FSM *fsm){
 247              		.loc 1 138 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252              	.LVL5:
 139:Src/xl_320.c  ****   fsm->remaining_bytes = FSM_BYTE;
 253              		.loc 1 139 0
 254 0000 C368     		ldr	r3, [r0, #12]
 255 0002 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 256 0006 8280     		strh	r2, [r0, #4]	@ movhi
 140:Src/xl_320.c  ****   FSM_NEXT;
 257              		.loc 1 140 0
 258 0008 C360     		str	r3, [r0, #12]
 141:Src/xl_320.c  ****   FSM_UPDATE(XL_FSM_LENGTH_HIGH);
 259              		.loc 1 141 0
 260 000a 014B     		ldr	r3, .L29
 261 000c 0360     		str	r3, [r0]
 142:Src/xl_320.c  **** }
 262              		.loc 1 142 0
ARM GAS  /tmp/ccuthlll.s 			page 8


 263 000e 7047     		bx	lr
 264              	.L30:
 265              		.align	2
 266              	.L29:
 267 0010 00000000 		.word	XL_FSM_LENGTH_HIGH
 268              		.cfi_endproc
 269              	.LFE8:
 271              		.section	.text.XL_FSM_LENGTH_HIGH,"ax",%progbits
 272              		.align	1
 273              		.global	XL_FSM_LENGTH_HIGH
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
 279              	XL_FSM_LENGTH_HIGH:
 280              	.LFB9:
 143:Src/xl_320.c  **** 
 144:Src/xl_320.c  **** void XL_FSM_LENGTH_HIGH(XL_Receiver_FSM *fsm){
 281              		.loc 1 144 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286              	.LVL6:
 145:Src/xl_320.c  ****   fsm->remaining_bytes |= FSM_BYTE << 8;
 287              		.loc 1 145 0
 288 0000 C268     		ldr	r2, [r0, #12]
 289 0002 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 290 0004 8388     		ldrh	r3, [r0, #4]
 291 0006 43EA0123 		orr	r3, r3, r1, lsl #8
 292 000a 8380     		strh	r3, [r0, #4]	@ movhi
 293              	.LVL7:
 146:Src/xl_320.c  ****   const uint16_t remaining_bytes = fsm->remaining_bytes;
 147:Src/xl_320.c  ****   if((remaining_bytes >= 4) && (7 + remaining_bytes <= XL_BUFFER_SIZE)){
 294              		.loc 1 147 0
 295 000c 032B     		cmp	r3, #3
 296 000e 02D9     		bls	.L32
 297              		.loc 1 147 0 is_stmt 0 discriminator 1
 298 0010 0733     		adds	r3, r3, #7
 299              	.LVL8:
 300 0012 202B     		cmp	r3, #32
 301 0014 04DD     		ble	.L34
 302              	.L32:
 148:Src/xl_320.c  ****     FSM_NEXT;
 149:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_INSTRUCTION);
 150:Src/xl_320.c  ****   }
 151:Src/xl_320.c  ****   else{
 152:Src/xl_320.c  ****     FSM_RESET;
 303              		.loc 1 152 0 is_stmt 1
 304 0016 054B     		ldr	r3, .L35
 305 0018 0360     		str	r3, [r0]
 306 001a 8368     		ldr	r3, [r0, #8]
 307 001c C360     		str	r3, [r0, #12]
 153:Src/xl_320.c  ****   }
 154:Src/xl_320.c  **** }
 308              		.loc 1 154 0
 309 001e 7047     		bx	lr
ARM GAS  /tmp/ccuthlll.s 			page 9


 310              	.L34:
 148:Src/xl_320.c  ****     FSM_NEXT;
 311              		.loc 1 148 0
 312 0020 0132     		adds	r2, r2, #1
 313 0022 C260     		str	r2, [r0, #12]
 149:Src/xl_320.c  ****   }
 314              		.loc 1 149 0
 315 0024 024B     		ldr	r3, .L35+4
 316 0026 0360     		str	r3, [r0]
 317 0028 7047     		bx	lr
 318              	.L36:
 319 002a 00BF     		.align	2
 320              	.L35:
 321 002c 00000000 		.word	XL_FSM_HEADER_0
 322 0030 00000000 		.word	XL_FSM_INSTRUCTION
 323              		.cfi_endproc
 324              	.LFE9:
 326              		.section	.text.XL_FSM_INSTRUCTION,"ax",%progbits
 327              		.align	1
 328              		.global	XL_FSM_INSTRUCTION
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	XL_FSM_INSTRUCTION:
 335              	.LFB10:
 155:Src/xl_320.c  **** void XL_FSM_INSTRUCTION(XL_Receiver_FSM *fsm){
 336              		.loc 1 155 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341              	.LVL9:
 156:Src/xl_320.c  ****   if(FSM_BYTE == XL_STATUS){
 342              		.loc 1 156 0
 343 0000 C368     		ldr	r3, [r0, #12]
 344 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 345 0004 552A     		cmp	r2, #85
 346 0006 04D0     		beq	.L40
 157:Src/xl_320.c  ****     fsm->remaining_bytes--;
 158:Src/xl_320.c  ****     FSM_NEXT;
 159:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_RECEIVING);
 160:Src/xl_320.c  ****   }else{
 161:Src/xl_320.c  ****     FSM_RESET;
 347              		.loc 1 161 0
 348 0008 064B     		ldr	r3, .L41
 349 000a 0360     		str	r3, [r0]
 350 000c 8368     		ldr	r3, [r0, #8]
 351 000e C360     		str	r3, [r0, #12]
 162:Src/xl_320.c  ****   }
 163:Src/xl_320.c  **** }
 352              		.loc 1 163 0
 353 0010 7047     		bx	lr
 354              	.L40:
 157:Src/xl_320.c  ****     fsm->remaining_bytes--;
 355              		.loc 1 157 0
 356 0012 8288     		ldrh	r2, [r0, #4]
ARM GAS  /tmp/ccuthlll.s 			page 10


 357 0014 013A     		subs	r2, r2, #1
 358 0016 8280     		strh	r2, [r0, #4]	@ movhi
 158:Src/xl_320.c  ****     FSM_UPDATE(XL_FSM_RECEIVING);
 359              		.loc 1 158 0
 360 0018 0133     		adds	r3, r3, #1
 361 001a C360     		str	r3, [r0, #12]
 159:Src/xl_320.c  ****   }else{
 362              		.loc 1 159 0
 363 001c 024B     		ldr	r3, .L41+4
 364 001e 0360     		str	r3, [r0]
 365 0020 7047     		bx	lr
 366              	.L42:
 367 0022 00BF     		.align	2
 368              	.L41:
 369 0024 00000000 		.word	XL_FSM_HEADER_0
 370 0028 00000000 		.word	XL_FSM_RECEIVING
 371              		.cfi_endproc
 372              	.LFE10:
 374              		.section	.text.XL_FSM_RECEIVING,"ax",%progbits
 375              		.align	1
 376              		.global	XL_FSM_RECEIVING
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	XL_FSM_RECEIVING:
 383              	.LFB11:
 164:Src/xl_320.c  **** 
 165:Src/xl_320.c  **** void XL_FSM_RECEIVING(XL_Receiver_FSM *fsm){
 384              		.loc 1 165 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389              	.LVL10:
 166:Src/xl_320.c  ****   FSM_NEXT;
 390              		.loc 1 166 0
 391 0000 C368     		ldr	r3, [r0, #12]
 392 0002 0133     		adds	r3, r3, #1
 393 0004 C360     		str	r3, [r0, #12]
 167:Src/xl_320.c  ****   fsm->remaining_bytes--;
 394              		.loc 1 167 0
 395 0006 8388     		ldrh	r3, [r0, #4]
 396 0008 013B     		subs	r3, r3, #1
 397 000a 9BB2     		uxth	r3, r3
 398 000c 8380     		strh	r3, [r0, #4]	@ movhi
 168:Src/xl_320.c  ****   if(fsm->remaining_bytes == 0){
 399              		.loc 1 168 0
 400 000e 0BB9     		cbnz	r3, .L43
 169:Src/xl_320.c  ****     fsm->done = 1;
 401              		.loc 1 169 0
 402 0010 0123     		movs	r3, #1
 403 0012 0374     		strb	r3, [r0, #16]
 404              	.L43:
 170:Src/xl_320.c  ****   }
 171:Src/xl_320.c  **** }
 405              		.loc 1 171 0
ARM GAS  /tmp/ccuthlll.s 			page 11


 406 0014 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE11:
 410              		.section	.text.XL_Update_CRC,"ax",%progbits
 411              		.align	1
 412              		.global	XL_Update_CRC
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	XL_Update_CRC:
 419              	.LFB16:
 172:Src/xl_320.c  **** 
 173:Src/xl_320.c  **** uint8_t XL_Extract_Status_Packet(XL_Status_Packet *packet, uint8_t frame[XL_BUFFER_SIZE], uint16_t 
 174:Src/xl_320.c  ****   //La taille est supposée vérifiée dans XL_Receive.
 175:Src/xl_320.c  ****   //CRC
 176:Src/xl_320.c  ****   uint16_t old_crc = (frame[length-1] << 8) | frame[length-2];
 177:Src/xl_320.c  ****   uint16_t new_crc = XL_Update_CRC(0, frame, length-2);
 178:Src/xl_320.c  ****   if(new_crc != old_crc){
 179:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 180:Src/xl_320.c  ****     return 1;
 181:Src/xl_320.c  ****   }
 182:Src/xl_320.c  **** 
 183:Src/xl_320.c  ****   packet->id = frame[4];
 184:Src/xl_320.c  ****   packet->err = frame[8];
 185:Src/xl_320.c  **** 
 186:Src/xl_320.c  ****   //Paramètres
 187:Src/xl_320.c  ****   uint8_t *start_stuffing = frame+7;
 188:Src/xl_320.c  ****   uint8_t *end_stuffing = frame+(length-2);
 189:Src/xl_320.c  ****   uint8_t *p_frame = frame+9;
 190:Src/xl_320.c  **** 
 191:Src/xl_320.c  ****   packet->nb_params = 0;
 192:Src/xl_320.c  ****   while(p_frame != end_stuffing){
 193:Src/xl_320.c  ****     packet->params[packet->nb_params++] = *(p_frame++);
 194:Src/xl_320.c  ****     if(p_frame - start_stuffing == 3){
 195:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 196:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 197:Src/xl_320.c  **** 	  err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 198:Src/xl_320.c  **** 	  return 1;
 199:Src/xl_320.c  **** 	}
 200:Src/xl_320.c  **** 	p_frame++;
 201:Src/xl_320.c  **** 	start_stuffing = p_frame;
 202:Src/xl_320.c  ****       }
 203:Src/xl_320.c  ****       else{
 204:Src/xl_320.c  **** 	start_stuffing++;
 205:Src/xl_320.c  ****       }
 206:Src/xl_320.c  ****     }
 207:Src/xl_320.c  ****   }
 208:Src/xl_320.c  ****   
 209:Src/xl_320.c  ****   return 0;
 210:Src/xl_320.c  **** }
 211:Src/xl_320.c  **** 
 212:Src/xl_320.c  **** uint8_t XL_Receive(XL_Interface *interface, uint16_t packet_size, uint32_t timeout){
 213:Src/xl_320.c  ****   //Evite un overflow
 214:Src/xl_320.c  ****   if(packet_size > XL_BUFFER_SIZE){
 215:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 216:Src/xl_320.c  ****     return 1;
ARM GAS  /tmp/ccuthlll.s 			page 12


 217:Src/xl_320.c  ****   }
 218:Src/xl_320.c  ****   
 219:Src/xl_320.c  ****   //Préparation de la réception
 220:Src/xl_320.c  ****   interface->set_direction(XL_RECEIVE);
 221:Src/xl_320.c  ****   
 222:Src/xl_320.c  ****   interface->fsm.update_state = XL_FSM_HEADER_0;
 223:Src/xl_320.c  ****   interface->fsm.remaining_bytes = 0;
 224:Src/xl_320.c  ****   interface->fsm.buffer = interface->buffer;
 225:Src/xl_320.c  ****   interface->fsm.p_buffer = interface->buffer;
 226:Src/xl_320.c  ****   interface->fsm.done = 0;
 227:Src/xl_320.c  **** 
 228:Src/xl_320.c  ****   //Réception
 229:Src/xl_320.c  ****   if(interface->receive(interface->fsm.p_buffer, packet_size, timeout) != 0){
 230:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 231:Src/xl_320.c  ****     return 1;
 232:Src/xl_320.c  ****   }
 233:Src/xl_320.c  **** 
 234:Src/xl_320.c  ****   //FSM
 235:Src/xl_320.c  ****   do{
 236:Src/xl_320.c  ****     interface->fsm.update_state(&(interface->fsm));
 237:Src/xl_320.c  **** 
 238:Src/xl_320.c  ****     /*uint8_t *p;
 239:Src/xl_320.c  ****     printf("Buffer : ");
 240:Src/xl_320.c  ****     for(p = interface->buffer; p < interface->fsm.p_buffer; p++){
 241:Src/xl_320.c  ****       printf("0x%2.2X ", *p);
 242:Src/xl_320.c  ****     }
 243:Src/xl_320.c  ****     printf("\n");*/
 244:Src/xl_320.c  ****   }while(interface->fsm.p_buffer != interface->fsm.buffer && interface->fsm.done != 1);
 245:Src/xl_320.c  **** 
 246:Src/xl_320.c  ****   //Récupération du paquet
 247:Src/xl_320.c  ****   if(interface->fsm.done == 0){
 248:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 249:Src/xl_320.c  ****     return 1;
 250:Src/xl_320.c  ****   }
 251:Src/xl_320.c  **** 
 252:Src/xl_320.c  ****   //Vérification de la taille du paquet (au cas où)
 253:Src/xl_320.c  ****   uint16_t r_packet_size = interface->fsm.p_buffer - interface->fsm.buffer;
 254:Src/xl_320.c  ****   if(r_packet_size != packet_size){
 255:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 256:Src/xl_320.c  ****     return 1;
 257:Src/xl_320.c  ****   }
 258:Src/xl_320.c  **** 
 259:Src/xl_320.c  ****   return XL_Extract_Status_Packet(&interface->status, interface->buffer, packet_size);
 260:Src/xl_320.c  **** }
 261:Src/xl_320.c  **** 
 262:Src/xl_320.c  **** //======================================
 263:Src/xl_320.c  **** //           FONCTIONS D'ENVOI          
 264:Src/xl_320.c  **** //======================================
 265:Src/xl_320.c  **** uint8_t XL_Build_Frame(XL_Instruction_Packet *packet, uint8_t buffer[XL_BUFFER_SIZE]){
 266:Src/xl_320.c  ****   //Vérification des arguments
 267:Src/xl_320.c  ****   if(packet == 0 || (packet->params == 0 && packet->nb_params > 0) || buffer == 0){
 268:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 269:Src/xl_320.c  ****     return 0;
 270:Src/xl_320.c  ****   }
 271:Src/xl_320.c  ****   //Evite une collision avec l'en-tête
 272:Src/xl_320.c  ****   if(packet->id == 0xFD || packet->id == 0xFF){
 273:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
ARM GAS  /tmp/ccuthlll.s 			page 13


 274:Src/xl_320.c  ****     return 0;
 275:Src/xl_320.c  ****   }
 276:Src/xl_320.c  ****   //Evite un overflow
 277:Src/xl_320.c  ****   if(10+packet->nb_params+packet->nb_params/3 > XL_BUFFER_SIZE){
 278:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 279:Src/xl_320.c  ****     return 0;
 280:Src/xl_320.c  ****   }
 281:Src/xl_320.c  **** 
 282:Src/xl_320.c  ****   uint8_t *p_buffer = buffer;
 283:Src/xl_320.c  ****   //Header
 284:Src/xl_320.c  ****   *(p_buffer++) = header[0];
 285:Src/xl_320.c  ****   *(p_buffer++) = header[1];
 286:Src/xl_320.c  ****   *(p_buffer++) = header[2];
 287:Src/xl_320.c  ****   *(p_buffer++) = header[3];
 288:Src/xl_320.c  **** 
 289:Src/xl_320.c  ****   //Packet ID
 290:Src/xl_320.c  ****   *(p_buffer++) = packet->id;
 291:Src/xl_320.c  **** 
 292:Src/xl_320.c  ****   //Packet length (temporaire)
 293:Src/xl_320.c  ****   p_buffer += 2;
 294:Src/xl_320.c  **** 
 295:Src/xl_320.c  ****   //<BEGIN BYTE STUFFING>
 296:Src/xl_320.c  ****   //Instruction
 297:Src/xl_320.c  ****   uint8_t *start_stuffing = p_buffer;
 298:Src/xl_320.c  ****   *(p_buffer++) = packet->instruction;
 299:Src/xl_320.c  **** 
 300:Src/xl_320.c  ****   //Paramètres
 301:Src/xl_320.c  ****   int i;
 302:Src/xl_320.c  ****   for(i = 0; i < packet->nb_params; i++){
 303:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 304:Src/xl_320.c  ****     if(p_buffer - start_stuffing == 3){
 305:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 306:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 307:Src/xl_320.c  **** 	start_stuffing = p_buffer;
 308:Src/xl_320.c  ****       }else{
 309:Src/xl_320.c  **** 	start_stuffing++;
 310:Src/xl_320.c  ****       }
 311:Src/xl_320.c  ****     }
 312:Src/xl_320.c  ****   }
 313:Src/xl_320.c  ****   //<END BYTE STUFFING>
 314:Src/xl_320.c  **** 
 315:Src/xl_320.c  ****   //Packet length
 316:Src/xl_320.c  ****   uint16_t packet_length = (p_buffer-buffer) - 7 + 2;//Ce qu'on a écrit - (header+id+length) + crc
 317:Src/xl_320.c  ****   buffer[5] = packet_length & 0x00FF;
 318:Src/xl_320.c  ****   buffer[6] = packet_length >> 8;
 319:Src/xl_320.c  **** 
 320:Src/xl_320.c  ****   //Cyclic Redundancy Check
 321:Src/xl_320.c  ****   uint16_t crc = XL_Update_CRC(0, buffer, packet_length+7-2);
 322:Src/xl_320.c  ****   *(p_buffer++) = crc & 0x00FF;
 323:Src/xl_320.c  ****   *(p_buffer++) = crc >> 8;
 324:Src/xl_320.c  ****   
 325:Src/xl_320.c  ****   return p_buffer-buffer;    
 326:Src/xl_320.c  **** }
 327:Src/xl_320.c  **** 
 328:Src/xl_320.c  **** uint8_t XL_Send(XL_Interface *interface, XL_Instruction_Packet *packet, uint32_t timeout){
 329:Src/xl_320.c  ****   //Préparation de la trame
 330:Src/xl_320.c  ****   uint8_t length = XL_Build_Frame(packet, interface->buffer);
ARM GAS  /tmp/ccuthlll.s 			page 14


 331:Src/xl_320.c  ****   if(!length){
 332:Src/xl_320.c  ****     return 1;
 333:Src/xl_320.c  ****   }
 334:Src/xl_320.c  **** 
 335:Src/xl_320.c  ****   //Envoi
 336:Src/xl_320.c  ****   interface->set_direction(XL_SEND);
 337:Src/xl_320.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 338:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 339:Src/xl_320.c  ****     return 1;
 340:Src/xl_320.c  ****   }
 341:Src/xl_320.c  ****   return 0;
 342:Src/xl_320.c  **** }
 343:Src/xl_320.c  **** 
 344:Src/xl_320.c  **** uint16_t XL_Update_CRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size){
 420              		.loc 1 344 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 512
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              	.LVL11:
 425 0000 70B5     		push	{r4, r5, r6, lr}
 426              	.LCFI0:
 427              		.cfi_def_cfa_offset 16
 428              		.cfi_offset 4, -16
 429              		.cfi_offset 5, -12
 430              		.cfi_offset 6, -8
 431              		.cfi_offset 14, -4
 432 0002 ADF5007D 		sub	sp, sp, #512
 433              	.LCFI1:
 434              		.cfi_def_cfa_offset 528
 435 0006 0446     		mov	r4, r0
 436 0008 0E46     		mov	r6, r1
 437 000a 1546     		mov	r5, r2
 345:Src/xl_320.c  ****   uint16_t i, j;
 346:Src/xl_320.c  ****   uint16_t crc_table[256] = {
 438              		.loc 1 346 0
 439 000c 4FF40072 		mov	r2, #512
 440              	.LVL12:
 441 0010 0A49     		ldr	r1, .L49
 442              	.LVL13:
 443 0012 6846     		mov	r0, sp
 444              	.LVL14:
 445 0014 FFF7FEFF 		bl	memcpy
 446              	.LVL15:
 347:Src/xl_320.c  ****     0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 348:Src/xl_320.c  ****     0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
 349:Src/xl_320.c  ****     0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
 350:Src/xl_320.c  ****     0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
 351:Src/xl_320.c  ****     0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
 352:Src/xl_320.c  ****     0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
 353:Src/xl_320.c  ****     0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
 354:Src/xl_320.c  ****     0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
 355:Src/xl_320.c  ****     0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
 356:Src/xl_320.c  ****     0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
 357:Src/xl_320.c  ****     0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
 358:Src/xl_320.c  ****     0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
 359:Src/xl_320.c  ****     0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
 360:Src/xl_320.c  ****     0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
ARM GAS  /tmp/ccuthlll.s 			page 15


 361:Src/xl_320.c  ****     0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
 362:Src/xl_320.c  ****     0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
 363:Src/xl_320.c  ****     0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
 364:Src/xl_320.c  ****     0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
 365:Src/xl_320.c  ****     0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
 366:Src/xl_320.c  ****     0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
 367:Src/xl_320.c  ****     0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
 368:Src/xl_320.c  ****     0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
 369:Src/xl_320.c  ****     0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
 370:Src/xl_320.c  ****     0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
 371:Src/xl_320.c  ****     0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
 372:Src/xl_320.c  ****     0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
 373:Src/xl_320.c  ****     0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
 374:Src/xl_320.c  ****     0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
 375:Src/xl_320.c  ****     0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
 376:Src/xl_320.c  ****     0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
 377:Src/xl_320.c  ****     0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
 378:Src/xl_320.c  ****     0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202};
 379:Src/xl_320.c  **** 
 380:Src/xl_320.c  ****   for(j = 0; j < data_blk_size; j++){
 447              		.loc 1 380 0
 448 0018 0023     		movs	r3, #0
 449 001a 09E0     		b	.L46
 450              	.LVL16:
 451              	.L47:
 381:Src/xl_320.c  ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 452              		.loc 1 381 0 discriminator 3
 453 001c F25C     		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 454 001e 82EA1422 		eor	r2, r2, r4, lsr #8
 455              	.LVL17:
 382:Src/xl_320.c  ****       crc_accum = (crc_accum << 8) ^ crc_table[i];
 456              		.loc 1 382 0 discriminator 3
 457 0022 3DF91220 		ldrsh	r2, [sp, r2, lsl #1]
 458              	.LVL18:
 459 0026 82EA0424 		eor	r4, r2, r4, lsl #8
 460              	.LVL19:
 461 002a A4B2     		uxth	r4, r4
 462              	.LVL20:
 380:Src/xl_320.c  ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 463              		.loc 1 380 0 discriminator 3
 464 002c 0133     		adds	r3, r3, #1
 465              	.LVL21:
 466 002e 9BB2     		uxth	r3, r3
 467              	.LVL22:
 468              	.L46:
 380:Src/xl_320.c  ****       i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 469              		.loc 1 380 0 is_stmt 0 discriminator 1
 470 0030 AB42     		cmp	r3, r5
 471 0032 F3D3     		bcc	.L47
 383:Src/xl_320.c  ****   }
 384:Src/xl_320.c  **** 
 385:Src/xl_320.c  ****   return crc_accum;
 386:Src/xl_320.c  **** }
 472              		.loc 1 386 0 is_stmt 1
 473 0034 2046     		mov	r0, r4
 474 0036 0DF5007D 		add	sp, sp, #512
 475              	.LCFI2:
ARM GAS  /tmp/ccuthlll.s 			page 16


 476              		.cfi_def_cfa_offset 16
 477              		@ sp needed
 478 003a 70BD     		pop	{r4, r5, r6, pc}
 479              	.LVL23:
 480              	.L50:
 481              		.align	2
 482              	.L49:
 483 003c 00000000 		.word	.LANCHOR0
 484              		.cfi_endproc
 485              	.LFE16:
 487              		.section	.text.XL_Extract_Status_Packet,"ax",%progbits
 488              		.align	1
 489              		.global	XL_Extract_Status_Packet
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv4-sp-d16
 495              	XL_Extract_Status_Packet:
 496              	.LFB12:
 173:Src/xl_320.c  ****   //La taille est supposée vérifiée dans XL_Receive.
 497              		.loc 1 173 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              	.LVL24:
 502 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 503              	.LCFI3:
 504              		.cfi_def_cfa_offset 24
 505              		.cfi_offset 3, -24
 506              		.cfi_offset 4, -20
 507              		.cfi_offset 5, -16
 508              		.cfi_offset 6, -12
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 0546     		mov	r5, r0
 512 0004 0C46     		mov	r4, r1
 176:Src/xl_320.c  ****   uint16_t new_crc = XL_Update_CRC(0, frame, length-2);
 513              		.loc 1 176 0
 514 0006 8B18     		adds	r3, r1, r2
 515 0008 13F8013C 		ldrb	r3, [r3, #-1]	@ zero_extendqisi2
 516 000c 023A     		subs	r2, r2, #2
 517              	.LVL25:
 518 000e 8E18     		adds	r6, r1, r2
 519 0010 8F5C     		ldrb	r7, [r1, r2]	@ zero_extendqisi2
 520 0012 47EA0327 		orr	r7, r7, r3, lsl #8
 521              	.LVL26:
 177:Src/xl_320.c  ****   if(new_crc != old_crc){
 522              		.loc 1 177 0
 523 0016 92B2     		uxth	r2, r2
 524 0018 0020     		movs	r0, #0
 525              	.LVL27:
 526 001a FFF7FEFF 		bl	XL_Update_CRC
 527              	.LVL28:
 178:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 528              		.loc 1 178 0
 529 001e 8742     		cmp	r7, r0
 530 0020 05D0     		beq	.L52
ARM GAS  /tmp/ccuthlll.s 			page 17


 179:Src/xl_320.c  ****     return 1;
 531              		.loc 1 179 0
 532 0022 1A4B     		ldr	r3, .L62
 533 0024 4FF48072 		mov	r2, #256
 534 0028 1A80     		strh	r2, [r3]	@ movhi
 180:Src/xl_320.c  ****   }
 535              		.loc 1 180 0
 536 002a 0120     		movs	r0, #1
 537              	.LVL29:
 538              	.L53:
 210:Src/xl_320.c  **** 
 539              		.loc 1 210 0
 540 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 541              	.LVL30:
 542              	.L52:
 183:Src/xl_320.c  ****   packet->err = frame[8];
 543              		.loc 1 183 0
 544 002e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 545 0030 2B70     		strb	r3, [r5]
 184:Src/xl_320.c  **** 
 546              		.loc 1 184 0
 547 0032 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 548 0034 6B70     		strb	r3, [r5, #1]
 187:Src/xl_320.c  ****   uint8_t *end_stuffing = frame+(length-2);
 549              		.loc 1 187 0
 550 0036 E01D     		adds	r0, r4, #7
 551              	.LVL31:
 189:Src/xl_320.c  **** 
 552              		.loc 1 189 0
 553 0038 04F10902 		add	r2, r4, #9
 554              	.LVL32:
 191:Src/xl_320.c  ****   while(p_frame != end_stuffing){
 555              		.loc 1 191 0
 556 003c 0023     		movs	r3, #0
 557 003e AB70     		strb	r3, [r5, #2]
 192:Src/xl_320.c  ****     packet->params[packet->nb_params++] = *(p_frame++);
 558              		.loc 1 192 0
 559 0040 07E0     		b	.L54
 560              	.LVL33:
 561              	.L61:
 197:Src/xl_320.c  **** 	  return 1;
 562              		.loc 1 197 0
 563 0042 124B     		ldr	r3, .L62
 564 0044 4FF48072 		mov	r2, #256
 565 0048 1A80     		strh	r2, [r3]	@ movhi
 198:Src/xl_320.c  **** 	}
 566              		.loc 1 198 0
 567 004a 0120     		movs	r0, #1
 568              	.LVL34:
 569 004c EEE7     		b	.L53
 570              	.LVL35:
 571              	.L56:
 204:Src/xl_320.c  ****       }
 572              		.loc 1 204 0
 573 004e 0130     		adds	r0, r0, #1
 574              	.LVL36:
 575              	.L55:
ARM GAS  /tmp/ccuthlll.s 			page 18


 200:Src/xl_320.c  **** 	start_stuffing = p_frame;
 576              		.loc 1 200 0
 577 0050 0A46     		mov	r2, r1
 578              	.LVL37:
 579              	.L54:
 192:Src/xl_320.c  ****     packet->params[packet->nb_params++] = *(p_frame++);
 580              		.loc 1 192 0
 581 0052 9642     		cmp	r6, r2
 582 0054 18D0     		beq	.L60
 193:Src/xl_320.c  ****     if(p_frame - start_stuffing == 3){
 583              		.loc 1 193 0
 584 0056 511C     		adds	r1, r2, #1
 585              	.LVL38:
 586 0058 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 587 005a 5C1C     		adds	r4, r3, #1
 588 005c AC70     		strb	r4, [r5, #2]
 589 005e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 590 0060 2B44     		add	r3, r3, r5
 591 0062 DC70     		strb	r4, [r3, #3]
 194:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 592              		.loc 1 194 0
 593 0064 0B1A     		subs	r3, r1, r0
 594 0066 032B     		cmp	r3, #3
 595 0068 F2D1     		bne	.L55
 195:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 596              		.loc 1 195 0
 597 006a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 598 006c FF2B     		cmp	r3, #255
 599 006e EED1     		bne	.L56
 195:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 600              		.loc 1 195 0 is_stmt 0 discriminator 1
 601 0070 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 602 0072 FF2B     		cmp	r3, #255
 603 0074 EBD1     		bne	.L56
 195:Src/xl_320.c  **** 	if(*p_frame != stuffing_byte){
 604              		.loc 1 195 0 discriminator 2
 605 0076 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 606 0078 FD2B     		cmp	r3, #253
 607 007a E8D1     		bne	.L56
 196:Src/xl_320.c  **** 	  err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 608              		.loc 1 196 0 is_stmt 1
 609 007c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 610 007e FD2B     		cmp	r3, #253
 611 0080 DFD1     		bne	.L61
 200:Src/xl_320.c  **** 	start_stuffing = p_frame;
 612              		.loc 1 200 0
 613 0082 901C     		adds	r0, r2, #2
 614              	.LVL39:
 615 0084 0146     		mov	r1, r0
 201:Src/xl_320.c  ****       }
 616              		.loc 1 201 0
 617 0086 E3E7     		b	.L55
 618              	.LVL40:
 619              	.L60:
 209:Src/xl_320.c  **** }
 620              		.loc 1 209 0
 621 0088 0020     		movs	r0, #0
ARM GAS  /tmp/ccuthlll.s 			page 19


 622              	.LVL41:
 623 008a CFE7     		b	.L53
 624              	.L63:
 625              		.align	2
 626              	.L62:
 627 008c 00000000 		.word	.LANCHOR1
 628              		.cfi_endproc
 629              	.LFE12:
 631              		.section	.text.XL_Receive,"ax",%progbits
 632              		.align	1
 633              		.global	XL_Receive
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv4-sp-d16
 639              	XL_Receive:
 640              	.LFB13:
 212:Src/xl_320.c  ****   //Evite un overflow
 641              		.loc 1 212 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              	.LVL42:
 646 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 647              	.LCFI4:
 648              		.cfi_def_cfa_offset 24
 649              		.cfi_offset 3, -24
 650              		.cfi_offset 4, -20
 651              		.cfi_offset 5, -16
 652              		.cfi_offset 6, -12
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 214:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 655              		.loc 1 214 0
 656 0002 2029     		cmp	r1, #32
 657 0004 2ED8     		bhi	.L72
 658 0006 1746     		mov	r7, r2
 659 0008 0D46     		mov	r5, r1
 660 000a 0446     		mov	r4, r0
 220:Src/xl_320.c  ****   
 661              		.loc 1 220 0
 662 000c 8368     		ldr	r3, [r0, #8]
 663 000e 0120     		movs	r0, #1
 664              	.LVL43:
 665 0010 9847     		blx	r3
 666              	.LVL44:
 222:Src/xl_320.c  ****   interface->fsm.remaining_bytes = 0;
 667              		.loc 1 222 0
 668 0012 204B     		ldr	r3, .L75
 669 0014 2361     		str	r3, [r4, #16]
 223:Src/xl_320.c  ****   interface->fsm.buffer = interface->buffer;
 670              		.loc 1 223 0
 671 0016 0023     		movs	r3, #0
 672 0018 A382     		strh	r3, [r4, #20]	@ movhi
 224:Src/xl_320.c  ****   interface->fsm.p_buffer = interface->buffer;
 673              		.loc 1 224 0
 674 001a 04F12406 		add	r6, r4, #36
ARM GAS  /tmp/ccuthlll.s 			page 20


 675 001e A661     		str	r6, [r4, #24]
 225:Src/xl_320.c  ****   interface->fsm.done = 0;
 676              		.loc 1 225 0
 677 0020 E661     		str	r6, [r4, #28]
 226:Src/xl_320.c  **** 
 678              		.loc 1 226 0
 679 0022 84F82030 		strb	r3, [r4, #32]
 229:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 680              		.loc 1 229 0
 681 0026 6368     		ldr	r3, [r4, #4]
 682 0028 3A46     		mov	r2, r7
 683 002a 2946     		mov	r1, r5
 684 002c 3046     		mov	r0, r6
 685 002e 9847     		blx	r3
 686              	.LVL45:
 687 0030 E0B9     		cbnz	r0, .L73
 688              	.L67:
 236:Src/xl_320.c  **** 
 689              		.loc 1 236 0 discriminator 2
 690 0032 2046     		mov	r0, r4
 691 0034 50F8103F 		ldr	r3, [r0, #16]!
 692 0038 9847     		blx	r3
 693              	.LVL46:
 244:Src/xl_320.c  **** 
 694              		.loc 1 244 0 discriminator 2
 695 003a E369     		ldr	r3, [r4, #28]
 696 003c A269     		ldr	r2, [r4, #24]
 697 003e 9342     		cmp	r3, r2
 698 0040 03D0     		beq	.L68
 244:Src/xl_320.c  **** 
 699              		.loc 1 244 0 is_stmt 0 discriminator 1
 700 0042 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 701 0046 0129     		cmp	r1, #1
 702 0048 F3D1     		bne	.L67
 703              	.L68:
 247:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 704              		.loc 1 247 0 is_stmt 1
 705 004a 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 706 004e 99B1     		cbz	r1, .L74
 253:Src/xl_320.c  ****   if(r_packet_size != packet_size){
 707              		.loc 1 253 0
 708 0050 9B1A     		subs	r3, r3, r2
 709 0052 9BB2     		uxth	r3, r3
 710              	.LVL47:
 254:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_BAD_FRAME;
 711              		.loc 1 254 0
 712 0054 9D42     		cmp	r5, r3
 713 0056 15D0     		beq	.L70
 255:Src/xl_320.c  ****     return 1;
 714              		.loc 1 255 0
 715 0058 0F4B     		ldr	r3, .L75+4
 716              	.LVL48:
 717 005a 4FF48072 		mov	r2, #256
 718              	.LVL49:
 719 005e 1A80     		strh	r2, [r3]	@ movhi
 256:Src/xl_320.c  ****   }
 720              		.loc 1 256 0
ARM GAS  /tmp/ccuthlll.s 			page 21


 721 0060 0120     		movs	r0, #1
 722 0062 08E0     		b	.L66
 723              	.LVL50:
 724              	.L72:
 215:Src/xl_320.c  ****     return 1;
 725              		.loc 1 215 0
 726 0064 0120     		movs	r0, #1
 727              	.LVL51:
 728 0066 0C4B     		ldr	r3, .L75+4
 729 0068 1880     		strh	r0, [r3]	@ movhi
 216:Src/xl_320.c  ****   }
 730              		.loc 1 216 0
 731 006a 04E0     		b	.L66
 732              	.LVL52:
 733              	.L73:
 230:Src/xl_320.c  ****     return 1;
 734              		.loc 1 230 0
 735 006c 0A4B     		ldr	r3, .L75+4
 736 006e 40F20112 		movw	r2, #257
 737 0072 1A80     		strh	r2, [r3]	@ movhi
 231:Src/xl_320.c  ****   }
 738              		.loc 1 231 0
 739 0074 0120     		movs	r0, #1
 740              	.LVL53:
 741              	.L66:
 260:Src/xl_320.c  **** 
 742              		.loc 1 260 0
 743 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 744              	.LVL54:
 745              	.L74:
 248:Src/xl_320.c  ****     return 1;
 746              		.loc 1 248 0
 747 0078 074B     		ldr	r3, .L75+4
 748 007a 4FF48072 		mov	r2, #256
 749 007e 1A80     		strh	r2, [r3]	@ movhi
 249:Src/xl_320.c  ****   }
 750              		.loc 1 249 0
 751 0080 0120     		movs	r0, #1
 752 0082 F8E7     		b	.L66
 753              	.LVL55:
 754              	.L70:
 259:Src/xl_320.c  **** }
 755              		.loc 1 259 0
 756 0084 2A46     		mov	r2, r5
 757 0086 3146     		mov	r1, r6
 758 0088 04F14400 		add	r0, r4, #68
 759 008c FFF7FEFF 		bl	XL_Extract_Status_Packet
 760              	.LVL56:
 761 0090 F1E7     		b	.L66
 762              	.L76:
 763 0092 00BF     		.align	2
 764              	.L75:
 765 0094 00000000 		.word	XL_FSM_HEADER_0
 766 0098 00000000 		.word	.LANCHOR1
 767              		.cfi_endproc
 768              	.LFE13:
 770              		.section	.text.XL_Build_Frame,"ax",%progbits
ARM GAS  /tmp/ccuthlll.s 			page 22


 771              		.align	1
 772              		.global	XL_Build_Frame
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 776              		.fpu fpv4-sp-d16
 778              	XL_Build_Frame:
 779              	.LFB14:
 265:Src/xl_320.c  ****   //Vérification des arguments
 780              		.loc 1 265 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              	.LVL57:
 267:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 785              		.loc 1 267 0
 786 0000 28B3     		cbz	r0, .L78
 787 0002 0246     		mov	r2, r0
 267:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 788              		.loc 1 267 0 is_stmt 0 discriminator 1
 789 0004 4368     		ldr	r3, [r0, #4]
 790 0006 FBB1     		cbz	r3, .L92
 791              	.L79:
 267:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 792              		.loc 1 267 0 discriminator 4
 793 0008 09B3     		cbz	r1, .L78
 272:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 794              		.loc 1 272 0 is_stmt 1
 795 000a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 796 000c FD2B     		cmp	r3, #253
 797 000e 22D0     		beq	.L82
 272:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 798              		.loc 1 272 0 is_stmt 0 discriminator 1
 799 0010 FF2B     		cmp	r3, #255
 800 0012 20D0     		beq	.L82
 265:Src/xl_320.c  ****   //Vérification des arguments
 801              		.loc 1 265 0 is_stmt 1
 802 0014 70B5     		push	{r4, r5, r6, lr}
 803              	.LCFI5:
 804              		.cfi_def_cfa_offset 16
 805              		.cfi_offset 4, -16
 806              		.cfi_offset 5, -12
 807              		.cfi_offset 6, -8
 808              		.cfi_offset 14, -4
 277:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_BUFFER_OVERFLOW;
 809              		.loc 1 277 0
 810 0016 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 811 0018 03F10A00 		add	r0, r3, #10
 812              	.LVL58:
 813 001c 294C     		ldr	r4, .L95
 814 001e A4FB0343 		umull	r4, r3, r4, r3
 815 0022 00EB5303 		add	r3, r0, r3, lsr #1
 816 0026 202B     		cmp	r3, #32
 817 0028 19DC     		bgt	.L93
 818              	.LVL59:
 284:Src/xl_320.c  ****   *(p_buffer++) = header[1];
 819              		.loc 1 284 0
ARM GAS  /tmp/ccuthlll.s 			page 23


 820 002a FF23     		movs	r3, #255
 821 002c 0B70     		strb	r3, [r1]
 822              	.LVL60:
 285:Src/xl_320.c  ****   *(p_buffer++) = header[2];
 823              		.loc 1 285 0
 824 002e 4B70     		strb	r3, [r1, #1]
 825              	.LVL61:
 286:Src/xl_320.c  ****   *(p_buffer++) = header[3];
 826              		.loc 1 286 0
 827 0030 FD23     		movs	r3, #253
 828 0032 8B70     		strb	r3, [r1, #2]
 829              	.LVL62:
 287:Src/xl_320.c  **** 
 830              		.loc 1 287 0
 831 0034 0023     		movs	r3, #0
 832 0036 CB70     		strb	r3, [r1, #3]
 833              	.LVL63:
 290:Src/xl_320.c  **** 
 834              		.loc 1 290 0
 835 0038 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 836 003a 0871     		strb	r0, [r1, #4]
 293:Src/xl_320.c  **** 
 837              		.loc 1 293 0
 838 003c CD1D     		adds	r5, r1, #7
 839              	.LVL64:
 298:Src/xl_320.c  **** 
 840              		.loc 1 298 0
 841 003e 01F10804 		add	r4, r1, #8
 842              	.LVL65:
 843 0042 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 844 0044 C871     		strb	r0, [r1, #7]
 845              	.LVL66:
 302:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 846              		.loc 1 302 0
 847 0046 12E0     		b	.L85
 848              	.LVL67:
 849              	.L92:
 850              	.LCFI6:
 851              		.cfi_def_cfa_offset 0
 852              		.cfi_restore 4
 853              		.cfi_restore 5
 854              		.cfi_restore 6
 855              		.cfi_restore 14
 267:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 856              		.loc 1 267 0 discriminator 2
 857 0048 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 858 004a 002B     		cmp	r3, #0
 859 004c DCD0     		beq	.L79
 860              	.L78:
 268:Src/xl_320.c  ****     return 0;
 861              		.loc 1 268 0
 862 004e 0020     		movs	r0, #0
 863              	.LVL68:
 864 0050 1D4B     		ldr	r3, .L95+4
 865 0052 1880     		strh	r0, [r3]	@ movhi
 269:Src/xl_320.c  ****   }
 866              		.loc 1 269 0
ARM GAS  /tmp/ccuthlll.s 			page 24


 867 0054 7047     		bx	lr
 868              	.LVL69:
 869              	.L82:
 273:Src/xl_320.c  ****     return 0;
 870              		.loc 1 273 0
 871 0056 0020     		movs	r0, #0
 872              	.LVL70:
 873 0058 1B4B     		ldr	r3, .L95+4
 874 005a 1880     		strh	r0, [r3]	@ movhi
 326:Src/xl_320.c  **** 
 875              		.loc 1 326 0
 876 005c 7047     		bx	lr
 877              	.L93:
 878              	.LCFI7:
 879              		.cfi_def_cfa_offset 16
 880              		.cfi_offset 4, -16
 881              		.cfi_offset 5, -12
 882              		.cfi_offset 6, -8
 883              		.cfi_offset 14, -4
 278:Src/xl_320.c  ****     return 0;
 884              		.loc 1 278 0
 885 005e 1A4B     		ldr	r3, .L95+4
 886 0060 0122     		movs	r2, #1
 887              	.LVL71:
 888 0062 1A80     		strh	r2, [r3]	@ movhi
 279:Src/xl_320.c  ****   }
 889              		.loc 1 279 0
 890 0064 0020     		movs	r0, #0
 891 0066 2CE0     		b	.L81
 892              	.LVL72:
 893              	.L87:
 309:Src/xl_320.c  ****       }
 894              		.loc 1 309 0
 895 0068 0135     		adds	r5, r5, #1
 896              	.LVL73:
 897              	.L86:
 302:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 898              		.loc 1 302 0 discriminator 2
 899 006a 0133     		adds	r3, r3, #1
 900              	.LVL74:
 901 006c 0446     		mov	r4, r0
 902              	.LVL75:
 903              	.L85:
 302:Src/xl_320.c  ****     *(p_buffer++) = packet->params[i];
 904              		.loc 1 302 0 is_stmt 0 discriminator 1
 905 006e 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 906 0070 9842     		cmp	r0, r3
 907 0072 14DD     		ble	.L94
 303:Src/xl_320.c  ****     if(p_buffer - start_stuffing == 3){
 908              		.loc 1 303 0 is_stmt 1
 909 0074 5668     		ldr	r6, [r2, #4]
 910 0076 601C     		adds	r0, r4, #1
 911              	.LVL76:
 912 0078 F65C     		ldrb	r6, [r6, r3]	@ zero_extendqisi2
 913 007a 2670     		strb	r6, [r4]
 304:Src/xl_320.c  ****       if(start_stuffing[0] == header[0] && start_stuffing[1] == header[1] && start_stuffing[2] == h
 914              		.loc 1 304 0
ARM GAS  /tmp/ccuthlll.s 			page 25


 915 007c 461B     		subs	r6, r0, r5
 916 007e 032E     		cmp	r6, #3
 917 0080 F3D1     		bne	.L86
 305:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 918              		.loc 1 305 0
 919 0082 2E78     		ldrb	r6, [r5]	@ zero_extendqisi2
 920 0084 FF2E     		cmp	r6, #255
 921 0086 EFD1     		bne	.L87
 305:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 922              		.loc 1 305 0 is_stmt 0 discriminator 1
 923 0088 6E78     		ldrb	r6, [r5, #1]	@ zero_extendqisi2
 924 008a FF2E     		cmp	r6, #255
 925 008c ECD1     		bne	.L87
 305:Src/xl_320.c  **** 	*(p_buffer++) = stuffing_byte;
 926              		.loc 1 305 0 discriminator 2
 927 008e AE78     		ldrb	r6, [r5, #2]	@ zero_extendqisi2
 928 0090 FD2E     		cmp	r6, #253
 929 0092 E9D1     		bne	.L87
 306:Src/xl_320.c  **** 	start_stuffing = p_buffer;
 930              		.loc 1 306 0 is_stmt 1
 931 0094 A01C     		adds	r0, r4, #2
 932              	.LVL77:
 933 0096 FD25     		movs	r5, #253
 934              	.LVL78:
 935 0098 6570     		strb	r5, [r4, #1]
 936              	.LVL79:
 307:Src/xl_320.c  ****       }else{
 937              		.loc 1 307 0
 938 009a 0546     		mov	r5, r0
 939 009c E5E7     		b	.L86
 940              	.LVL80:
 941              	.L94:
 942 009e 0D46     		mov	r5, r1
 943              	.LVL81:
 316:Src/xl_320.c  ****   buffer[5] = packet_length & 0x00FF;
 944              		.loc 1 316 0
 945 00a0 621A     		subs	r2, r4, r1
 946              	.LVL82:
 947 00a2 92B2     		uxth	r2, r2
 948 00a4 531F     		subs	r3, r2, #5
 949              	.LVL83:
 950 00a6 9BB2     		uxth	r3, r3
 951              	.LVL84:
 317:Src/xl_320.c  ****   buffer[6] = packet_length >> 8;
 952              		.loc 1 317 0
 953 00a8 4B71     		strb	r3, [r1, #5]
 318:Src/xl_320.c  **** 
 954              		.loc 1 318 0
 955 00aa 1B0A     		lsrs	r3, r3, #8
 956              	.LVL85:
 957 00ac 8B71     		strb	r3, [r1, #6]
 321:Src/xl_320.c  ****   *(p_buffer++) = crc & 0x00FF;
 958              		.loc 1 321 0
 959 00ae 0020     		movs	r0, #0
 960 00b0 FFF7FEFF 		bl	XL_Update_CRC
 961              	.LVL86:
 322:Src/xl_320.c  ****   *(p_buffer++) = crc >> 8;
ARM GAS  /tmp/ccuthlll.s 			page 26


 962              		.loc 1 322 0
 963 00b4 2346     		mov	r3, r4
 964 00b6 03F8020B 		strb	r0, [r3], #2
 965              	.LVL87:
 323:Src/xl_320.c  ****   
 966              		.loc 1 323 0
 967 00ba 000A     		lsrs	r0, r0, #8
 968              	.LVL88:
 969 00bc 6070     		strb	r0, [r4, #1]
 325:Src/xl_320.c  **** }
 970              		.loc 1 325 0
 971 00be 581B     		subs	r0, r3, r5
 972 00c0 C0B2     		uxtb	r0, r0
 973              	.LVL89:
 974              	.L81:
 326:Src/xl_320.c  **** 
 975              		.loc 1 326 0
 976 00c2 70BD     		pop	{r4, r5, r6, pc}
 977              	.L96:
 978              		.align	2
 979              	.L95:
 980 00c4 ABAAAAAA 		.word	-1431655765
 981 00c8 00000000 		.word	.LANCHOR1
 982              		.cfi_endproc
 983              	.LFE14:
 985              		.section	.text.XL_Send,"ax",%progbits
 986              		.align	1
 987              		.global	XL_Send
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu fpv4-sp-d16
 993              	XL_Send:
 994              	.LFB15:
 328:Src/xl_320.c  ****   //Préparation de la trame
 995              		.loc 1 328 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              	.LVL90:
 1000 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1001              	.LCFI8:
 1002              		.cfi_def_cfa_offset 24
 1003              		.cfi_offset 3, -24
 1004              		.cfi_offset 4, -20
 1005              		.cfi_offset 5, -16
 1006              		.cfi_offset 6, -12
 1007              		.cfi_offset 7, -8
 1008              		.cfi_offset 14, -4
 1009 0002 0446     		mov	r4, r0
 1010 0004 0846     		mov	r0, r1
 1011              	.LVL91:
 1012 0006 1746     		mov	r7, r2
 330:Src/xl_320.c  ****   if(!length){
 1013              		.loc 1 330 0
 1014 0008 04F12405 		add	r5, r4, #36
 1015 000c 2946     		mov	r1, r5
ARM GAS  /tmp/ccuthlll.s 			page 27


 1016              	.LVL92:
 1017 000e FFF7FEFF 		bl	XL_Build_Frame
 1018              	.LVL93:
 331:Src/xl_320.c  ****     return 1;
 1019              		.loc 1 331 0
 1020 0012 88B1     		cbz	r0, .L99
 1021 0014 0646     		mov	r6, r0
 336:Src/xl_320.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 1022              		.loc 1 336 0
 1023 0016 A368     		ldr	r3, [r4, #8]
 1024 0018 0020     		movs	r0, #0
 1025              	.LVL94:
 1026 001a 9847     		blx	r3
 1027              	.LVL95:
 337:Src/xl_320.c  ****     err = XL_ERR_LINK | XL_ERR_TIMEOUT;
 1028              		.loc 1 337 0
 1029 001c 2368     		ldr	r3, [r4]
 1030 001e 3A46     		mov	r2, r7
 1031 0020 B1B2     		uxth	r1, r6
 1032 0022 2846     		mov	r0, r5
 1033 0024 9847     		blx	r3
 1034              	.LVL96:
 1035 0026 0128     		cmp	r0, #1
 1036 0028 01D0     		beq	.L102
 341:Src/xl_320.c  **** }
 1037              		.loc 1 341 0
 1038 002a 0020     		movs	r0, #0
 1039              	.L98:
 342:Src/xl_320.c  **** 
 1040              		.loc 1 342 0
 1041 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1042              	.LVL97:
 1043              	.L102:
 338:Src/xl_320.c  ****     return 1;
 1044              		.loc 1 338 0
 1045 002e 034B     		ldr	r3, .L103
 1046 0030 40F20112 		movw	r2, #257
 1047 0034 1A80     		strh	r2, [r3]	@ movhi
 339:Src/xl_320.c  ****   }
 1048              		.loc 1 339 0
 1049 0036 F9E7     		b	.L98
 1050              	.LVL98:
 1051              	.L99:
 332:Src/xl_320.c  ****   }
 1052              		.loc 1 332 0
 1053 0038 0120     		movs	r0, #1
 1054              	.LVL99:
 1055 003a F7E7     		b	.L98
 1056              	.L104:
 1057              		.align	2
 1058              	.L103:
 1059 003c 00000000 		.word	.LANCHOR1
 1060              		.cfi_endproc
 1061              	.LFE15:
 1063              		.section	.text.XL_Get_Error,"ax",%progbits
 1064              		.align	1
 1065              		.global	XL_Get_Error
ARM GAS  /tmp/ccuthlll.s 			page 28


 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv4-sp-d16
 1071              	XL_Get_Error:
 1072              	.LFB17:
 387:Src/xl_320.c  **** 
 388:Src/xl_320.c  **** //======================================
 389:Src/xl_320.c  **** //         GESTION DES ERREURS      
 390:Src/xl_320.c  **** //======================================
 391:Src/xl_320.c  **** uint16_t XL_Get_Error(){
 1073              		.loc 1 391 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 392:Src/xl_320.c  ****   return err;
 393:Src/xl_320.c  **** }
 1078              		.loc 1 393 0
 1079 0000 014B     		ldr	r3, .L106
 1080 0002 1888     		ldrh	r0, [r3]
 1081 0004 7047     		bx	lr
 1082              	.L107:
 1083 0006 00BF     		.align	2
 1084              	.L106:
 1085 0008 00000000 		.word	.LANCHOR1
 1086              		.cfi_endproc
 1087              	.LFE17:
 1089              		.section	.text.XL_Check_Status,"ax",%progbits
 1090              		.align	1
 1091              		.global	XL_Check_Status
 1092              		.syntax unified
 1093              		.thumb
 1094              		.thumb_func
 1095              		.fpu fpv4-sp-d16
 1097              	XL_Check_Status:
 1098              	.LFB18:
 394:Src/xl_320.c  **** 
 395:Src/xl_320.c  **** uint8_t XL_Check_Status(XL *servo){
 1099              		.loc 1 395 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104              	.LVL100:
 396:Src/xl_320.c  ****   if(XL_STATUS_ERROR(servo->interface->status.err) != 0){
 1105              		.loc 1 396 0
 1106 0000 4368     		ldr	r3, [r0, #4]
 1107 0002 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1108 0006 13F03F03 		ands	r3, r3, #63
 1109 000a 05D0     		beq	.L110
 397:Src/xl_320.c  ****     err = XL_ERR_STATUS | XL_STATUS_ERROR(servo->interface->status.err);
 1110              		.loc 1 397 0
 1111 000c 43F40073 		orr	r3, r3, #512
 1112 0010 024A     		ldr	r2, .L111
 1113 0012 1380     		strh	r3, [r2]	@ movhi
 398:Src/xl_320.c  ****     return 1;
ARM GAS  /tmp/ccuthlll.s 			page 29


 1114              		.loc 1 398 0
 1115 0014 0120     		movs	r0, #1
 1116              	.LVL101:
 1117 0016 7047     		bx	lr
 1118              	.LVL102:
 1119              	.L110:
 399:Src/xl_320.c  ****   }
 400:Src/xl_320.c  ****   return 0;
 1120              		.loc 1 400 0
 1121 0018 0020     		movs	r0, #0
 1122              	.LVL103:
 401:Src/xl_320.c  **** }
 1123              		.loc 1 401 0
 1124 001a 7047     		bx	lr
 1125              	.L112:
 1126              		.align	2
 1127              	.L111:
 1128 001c 00000000 		.word	.LANCHOR1
 1129              		.cfi_endproc
 1130              	.LFE18:
 1132              		.section	.text.XL_Ping,"ax",%progbits
 1133              		.align	1
 1134              		.global	XL_Ping
 1135              		.syntax unified
 1136              		.thumb
 1137              		.thumb_func
 1138              		.fpu fpv4-sp-d16
 1140              	XL_Ping:
 1141              	.LFB20:
 402:Src/xl_320.c  **** 
 403:Src/xl_320.c  **** uint8_t XL_Check_Alert(XL *servo){
 404:Src/xl_320.c  ****   if(XL_STATUS_ALERT(servo->interface->status.err) == 1){
 405:Src/xl_320.c  ****     uint16_t hw_error;
 406:Src/xl_320.c  ****     if(XL_Get_Hardware_Error(servo, &hw_error) == 1){
 407:Src/xl_320.c  ****       return 1;
 408:Src/xl_320.c  ****     }
 409:Src/xl_320.c  ****     err = XL_ERR_HARDWARE | hw_error;
 410:Src/xl_320.c  ****     return 1;
 411:Src/xl_320.c  ****   }
 412:Src/xl_320.c  ****   return 0;
 413:Src/xl_320.c  **** }
 414:Src/xl_320.c  **** 
 415:Src/xl_320.c  **** 
 416:Src/xl_320.c  **** //======================================
 417:Src/xl_320.c  **** //         JEU D'INSTRUCTIONS      
 418:Src/xl_320.c  **** //======================================
 419:Src/xl_320.c  **** uint8_t XL_Ping(XL *servo){
 1142              		.loc 1 419 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 8
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 1146              	.LVL104:
 420:Src/xl_320.c  ****   if(servo == 0){
 1147              		.loc 1 420 0
 1148 0000 F0B1     		cbz	r0, .L119
 419:Src/xl_320.c  ****   if(servo == 0){
 1149              		.loc 1 419 0
ARM GAS  /tmp/ccuthlll.s 			page 30


 1150 0002 10B5     		push	{r4, lr}
 1151              	.LCFI9:
 1152              		.cfi_def_cfa_offset 8
 1153              		.cfi_offset 4, -8
 1154              		.cfi_offset 14, -4
 1155 0004 82B0     		sub	sp, sp, #8
 1156              	.LCFI10:
 1157              		.cfi_def_cfa_offset 16
 1158 0006 0446     		mov	r4, r0
 421:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 422:Src/xl_320.c  ****     return 1;
 423:Src/xl_320.c  ****   }
 424:Src/xl_320.c  ****   
 425:Src/xl_320.c  ****   XL_Instruction_Packet packet;
 426:Src/xl_320.c  ****   packet.id = servo->id;
 1159              		.loc 1 426 0
 1160 0008 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1161 000a 8DF80030 		strb	r3, [sp]
 427:Src/xl_320.c  ****   packet.instruction = XL_PING;
 1162              		.loc 1 427 0
 1163 000e 0122     		movs	r2, #1
 1164 0010 8DF80120 		strb	r2, [sp, #1]
 428:Src/xl_320.c  ****   packet.nb_params = 0;
 1165              		.loc 1 428 0
 1166 0014 0023     		movs	r3, #0
 1167 0016 8DF80230 		strb	r3, [sp, #2]
 429:Src/xl_320.c  ****   packet.params = 0;
 1168              		.loc 1 429 0
 1169 001a 0193     		str	r3, [sp, #4]
 430:Src/xl_320.c  **** 
 431:Src/xl_320.c  ****   //Envoi de l'instruction
 432:Src/xl_320.c  ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 1170              		.loc 1 432 0
 1171 001c 6946     		mov	r1, sp
 1172 001e 4068     		ldr	r0, [r0, #4]
 1173              	.LVL105:
 1174 0020 FFF7FEFF 		bl	XL_Send
 1175              	.LVL106:
 1176 0024 0128     		cmp	r0, #1
 1177 0026 09D0     		beq	.L115
 433:Src/xl_320.c  ****     return 1;
 434:Src/xl_320.c  ****   }
 435:Src/xl_320.c  **** 
 436:Src/xl_320.c  ****   //Réception de la réponse
 437:Src/xl_320.c  ****   if(XL_Receive(servo->interface, 14, XL_DEFAULT_TIMEOUT) == 1){
 1178              		.loc 1 437 0
 1179 0028 0122     		movs	r2, #1
 1180 002a 0E21     		movs	r1, #14
 1181 002c 6068     		ldr	r0, [r4, #4]
 1182 002e FFF7FEFF 		bl	XL_Receive
 1183              	.LVL107:
 1184 0032 0128     		cmp	r0, #1
 1185 0034 02D0     		beq	.L115
 438:Src/xl_320.c  ****     return 1;
 439:Src/xl_320.c  ****   }
 440:Src/xl_320.c  **** 
 441:Src/xl_320.c  ****   //Vérification de la réponse
ARM GAS  /tmp/ccuthlll.s 			page 31


 442:Src/xl_320.c  ****   return XL_Check_Status(servo);
 1186              		.loc 1 442 0
 1187 0036 2046     		mov	r0, r4
 1188 0038 FFF7FEFF 		bl	XL_Check_Status
 1189              	.LVL108:
 1190              	.L115:
 443:Src/xl_320.c  **** }
 1191              		.loc 1 443 0
 1192 003c 02B0     		add	sp, sp, #8
 1193              	.LCFI11:
 1194              		.cfi_def_cfa_offset 8
 1195              		@ sp needed
 1196 003e 10BD     		pop	{r4, pc}
 1197              	.LVL109:
 1198              	.L119:
 1199              	.LCFI12:
 1200              		.cfi_def_cfa_offset 0
 1201              		.cfi_restore 4
 1202              		.cfi_restore 14
 421:Src/xl_320.c  ****     return 1;
 1203              		.loc 1 421 0
 1204 0040 024B     		ldr	r3, .L120
 1205 0042 0022     		movs	r2, #0
 1206 0044 1A80     		strh	r2, [r3]	@ movhi
 422:Src/xl_320.c  ****   }
 1207              		.loc 1 422 0
 1208 0046 0120     		movs	r0, #1
 1209              	.LVL110:
 1210              		.loc 1 443 0
 1211 0048 7047     		bx	lr
 1212              	.L121:
 1213 004a 00BF     		.align	2
 1214              	.L120:
 1215 004c 00000000 		.word	.LANCHOR1
 1216              		.cfi_endproc
 1217              	.LFE20:
 1219              		.section	.text.XL_Discover,"ax",%progbits
 1220              		.align	1
 1221              		.global	XL_Discover
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1225              		.fpu fpv4-sp-d16
 1227              	XL_Discover:
 1228              	.LFB21:
 444:Src/xl_320.c  **** 
 445:Src/xl_320.c  **** uint8_t XL_Discover(XL_Interface *interface, XL *buffer_servos, uint8_t len_buffer, uint16_t *nb_se
 1229              		.loc 1 445 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 8
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              	.LVL111:
 1234 0000 70B5     		push	{r4, r5, r6, lr}
 1235              	.LCFI13:
 1236              		.cfi_def_cfa_offset 16
 1237              		.cfi_offset 4, -16
 1238              		.cfi_offset 5, -12
ARM GAS  /tmp/ccuthlll.s 			page 32


 1239              		.cfi_offset 6, -8
 1240              		.cfi_offset 14, -4
 1241 0002 82B0     		sub	sp, sp, #8
 1242              	.LCFI14:
 1243              		.cfi_def_cfa_offset 24
 1244 0004 0E46     		mov	r6, r1
 1245 0006 1546     		mov	r5, r2
 1246 0008 1C46     		mov	r4, r3
 446:Src/xl_320.c  ****   XL servo;
 447:Src/xl_320.c  ****   servo.interface = interface;
 1247              		.loc 1 447 0
 1248 000a 0190     		str	r0, [sp, #4]
 448:Src/xl_320.c  **** 
 449:Src/xl_320.c  ****   *nb_servos = 0;
 1249              		.loc 1 449 0
 1250 000c 0023     		movs	r3, #0
 1251              	.LVL112:
 1252 000e 2380     		strh	r3, [r4]	@ movhi
 450:Src/xl_320.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1253              		.loc 1 450 0
 1254 0010 8DF80030 		strb	r3, [sp]
 1255 0014 04E0     		b	.L123
 1256              	.LVL113:
 1257              	.L124:
 1258              		.loc 1 450 0 is_stmt 0 discriminator 2
 1259 0016 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 1260 001a 0133     		adds	r3, r3, #1
 1261 001c 8DF80030 		strb	r3, [sp]
 1262              	.L123:
 1263              		.loc 1 450 0 discriminator 1
 1264 0020 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 1265 0024 FC2B     		cmp	r3, #252
 1266 0026 13D8     		bhi	.L125
 1267              		.loc 1 450 0 discriminator 3
 1268 0028 2288     		ldrh	r2, [r4]
 1269 002a ABB2     		uxth	r3, r5
 1270 002c 9A42     		cmp	r2, r3
 1271 002e 0FD2     		bcs	.L125
 451:Src/xl_320.c  ****     if(XL_Ping(&servo) == 0){
 1272              		.loc 1 451 0 is_stmt 1
 1273 0030 6846     		mov	r0, sp
 1274 0032 FFF7FEFF 		bl	XL_Ping
 1275              	.LVL114:
 1276 0036 0028     		cmp	r0, #0
 1277 0038 EDD1     		bne	.L124
 452:Src/xl_320.c  ****       buffer_servos[(*nb_servos)++] = servo;
 1278              		.loc 1 452 0
 1279 003a 2388     		ldrh	r3, [r4]
 1280 003c 5A1C     		adds	r2, r3, #1
 1281 003e 2280     		strh	r2, [r4]	@ movhi
 1282 0040 06EBC303 		add	r3, r6, r3, lsl #3
 1283 0044 02AA     		add	r2, sp, #8
 1284 0046 12E90300 		ldmdb	r2, {r0, r1}
 1285 004a 83E80300 		stm	r3, {r0, r1}
 1286 004e E2E7     		b	.L124
 1287              	.L125:
 453:Src/xl_320.c  ****     }
ARM GAS  /tmp/ccuthlll.s 			page 33


 454:Src/xl_320.c  ****   }
 455:Src/xl_320.c  ****   
 456:Src/xl_320.c  ****   return (*nb_servos > 0)?0:1;
 1288              		.loc 1 456 0
 1289 0050 2088     		ldrh	r0, [r4]
 457:Src/xl_320.c  **** }
 1290              		.loc 1 457 0
 1291 0052 B0FA80F0 		clz	r0, r0
 1292 0056 4009     		lsrs	r0, r0, #5
 1293 0058 02B0     		add	sp, sp, #8
 1294              	.LCFI15:
 1295              		.cfi_def_cfa_offset 16
 1296              		@ sp needed
 1297 005a 70BD     		pop	{r4, r5, r6, pc}
 1298              		.cfi_endproc
 1299              	.LFE21:
 1301              		.section	.text.XL_Read,"ax",%progbits
 1302              		.align	1
 1303              		.global	XL_Read
 1304              		.syntax unified
 1305              		.thumb
 1306              		.thumb_func
 1307              		.fpu fpv4-sp-d16
 1309              	XL_Read:
 1310              	.LFB23:
 458:Src/xl_320.c  **** 
 459:Src/xl_320.c  **** uint8_t XL_Say_Hello(XL *servo){
 460:Src/xl_320.c  ****   if(XL_Ping(servo) == 1){
 461:Src/xl_320.c  ****     return 1;
 462:Src/xl_320.c  ****   }
 463:Src/xl_320.c  **** 
 464:Src/xl_320.c  ****   const XL_LED_Color color = (servo->interface->status.err == 0x00)?XL_GREEN:XL_RED;
 465:Src/xl_320.c  ****   uint8_t i;
 466:Src/xl_320.c  ****   for(i = 0; i < servo->id; i++){
 467:Src/xl_320.c  ****     XL_Set_LED(servo, color, XL_NOW);
 468:Src/xl_320.c  ****     servo->interface->delay(500);
 469:Src/xl_320.c  ****     XL_Set_LED(servo, XL_LED_OFF, XL_NOW);
 470:Src/xl_320.c  ****     servo->interface->delay(500);
 471:Src/xl_320.c  ****   }
 472:Src/xl_320.c  **** 
 473:Src/xl_320.c  ****   return 0;
 474:Src/xl_320.c  **** }
 475:Src/xl_320.c  **** 
 476:Src/xl_320.c  **** uint8_t XL_Read(XL *servo, XL_Field field, uint16_t *data){
 1311              		.loc 1 476 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 16
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL115:
 477:Src/xl_320.c  ****   if(field > XL_NB_FIELDS-1){
 1316              		.loc 1 477 0
 1317 0000 1E29     		cmp	r1, #30
 1318 0002 04D9     		bls	.L129
 478:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1319              		.loc 1 478 0
 1320 0004 224B     		ldr	r3, .L136
 1321 0006 0022     		movs	r2, #0
ARM GAS  /tmp/ccuthlll.s 			page 34


 1322              	.LVL116:
 1323 0008 1A80     		strh	r2, [r3]	@ movhi
 479:Src/xl_320.c  ****     return 1;
 1324              		.loc 1 479 0
 1325 000a 0120     		movs	r0, #1
 1326              	.LVL117:
 480:Src/xl_320.c  ****   }
 481:Src/xl_320.c  ****   
 482:Src/xl_320.c  ****   //Préparation de l'instruction READ
 483:Src/xl_320.c  ****   XL_Instruction_Packet packet;
 484:Src/xl_320.c  ****   packet.id = servo->id;
 485:Src/xl_320.c  ****   packet.instruction = XL_READ;
 486:Src/xl_320.c  ****   packet.nb_params = 4;
 487:Src/xl_320.c  ****   uint8_t params[4] = {field_addr[field], 0x00, field_length[field], 0x00};
 488:Src/xl_320.c  ****   packet.params = params;
 489:Src/xl_320.c  **** 
 490:Src/xl_320.c  ****   //Envoi de l'instruction
 491:Src/xl_320.c  ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 492:Src/xl_320.c  ****     return 1;
 493:Src/xl_320.c  ****   }
 494:Src/xl_320.c  ****   
 495:Src/xl_320.c  ****   //Réception de la réponse
 496:Src/xl_320.c  ****   if(XL_Receive(servo->interface, 11+field_length[field], XL_DEFAULT_TIMEOUT) == 1){
 497:Src/xl_320.c  ****     return 1;
 498:Src/xl_320.c  ****   }
 499:Src/xl_320.c  **** 
 500:Src/xl_320.c  ****   //Vérification de la réponse
 501:Src/xl_320.c  ****   if(XL_Check_Status(servo) == 1){
 502:Src/xl_320.c  ****     return 1;
 503:Src/xl_320.c  ****   }
 504:Src/xl_320.c  ****   
 505:Src/xl_320.c  ****   //Récupération de la donnée
 506:Src/xl_320.c  ****   *data = servo->interface->status.params[0];
 507:Src/xl_320.c  ****   if(field_length[field] == 2){
 508:Src/xl_320.c  ****     *data |= servo->interface->status.params[1] << 8;
 509:Src/xl_320.c  ****   }
 510:Src/xl_320.c  ****   return 0;
 511:Src/xl_320.c  **** }
 1327              		.loc 1 511 0
 1328 000c 7047     		bx	lr
 1329              	.LVL118:
 1330              	.L129:
 476:Src/xl_320.c  ****   if(field > XL_NB_FIELDS-1){
 1331              		.loc 1 476 0
 1332 000e 70B5     		push	{r4, r5, r6, lr}
 1333              	.LCFI16:
 1334              		.cfi_def_cfa_offset 16
 1335              		.cfi_offset 4, -16
 1336              		.cfi_offset 5, -12
 1337              		.cfi_offset 6, -8
 1338              		.cfi_offset 14, -4
 1339 0010 84B0     		sub	sp, sp, #16
 1340              	.LCFI17:
 1341              		.cfi_def_cfa_offset 32
 1342 0012 1546     		mov	r5, r2
 1343 0014 0446     		mov	r4, r0
 484:Src/xl_320.c  ****   packet.instruction = XL_READ;
ARM GAS  /tmp/ccuthlll.s 			page 35


 1344              		.loc 1 484 0
 1345 0016 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1346 0018 8DF80830 		strb	r3, [sp, #8]
 485:Src/xl_320.c  ****   packet.nb_params = 4;
 1347              		.loc 1 485 0
 1348 001c 0223     		movs	r3, #2
 1349 001e 8DF80930 		strb	r3, [sp, #9]
 486:Src/xl_320.c  ****   uint8_t params[4] = {field_addr[field], 0x00, field_length[field], 0x00};
 1350              		.loc 1 486 0
 1351 0022 0423     		movs	r3, #4
 1352 0024 8DF80A30 		strb	r3, [sp, #10]
 487:Src/xl_320.c  ****   packet.params = params;
 1353              		.loc 1 487 0
 1354 0028 1A4B     		ldr	r3, .L136+4
 1355 002a 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1356 002c 8DF80430 		strb	r3, [sp, #4]
 1357 0030 0023     		movs	r3, #0
 1358 0032 8DF80530 		strb	r3, [sp, #5]
 1359 0036 184A     		ldr	r2, .L136+8
 1360              	.LVL119:
 1361 0038 565C     		ldrb	r6, [r2, r1]	@ zero_extendqisi2
 1362 003a 8DF80660 		strb	r6, [sp, #6]
 1363 003e 8DF80730 		strb	r3, [sp, #7]
 488:Src/xl_320.c  **** 
 1364              		.loc 1 488 0
 1365 0042 01AB     		add	r3, sp, #4
 1366 0044 0393     		str	r3, [sp, #12]
 491:Src/xl_320.c  ****     return 1;
 1367              		.loc 1 491 0
 1368 0046 0122     		movs	r2, #1
 1369 0048 02A9     		add	r1, sp, #8
 1370              	.LVL120:
 1371 004a 4068     		ldr	r0, [r0, #4]
 1372              	.LVL121:
 1373 004c FFF7FEFF 		bl	XL_Send
 1374              	.LVL122:
 1375 0050 0128     		cmp	r0, #1
 1376 0052 13D0     		beq	.L130
 496:Src/xl_320.c  ****     return 1;
 1377              		.loc 1 496 0
 1378 0054 0122     		movs	r2, #1
 1379 0056 06F10B01 		add	r1, r6, #11
 1380 005a 6068     		ldr	r0, [r4, #4]
 1381 005c FFF7FEFF 		bl	XL_Receive
 1382              	.LVL123:
 1383 0060 0128     		cmp	r0, #1
 1384 0062 0BD0     		beq	.L130
 501:Src/xl_320.c  ****     return 1;
 1385              		.loc 1 501 0
 1386 0064 2046     		mov	r0, r4
 1387 0066 FFF7FEFF 		bl	XL_Check_Status
 1388              	.LVL124:
 1389 006a 0128     		cmp	r0, #1
 1390 006c 06D0     		beq	.L130
 506:Src/xl_320.c  ****   if(field_length[field] == 2){
 1391              		.loc 1 506 0
 1392 006e 6368     		ldr	r3, [r4, #4]
ARM GAS  /tmp/ccuthlll.s 			page 36


 1393 0070 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 1394 0074 2B80     		strh	r3, [r5]	@ movhi
 507:Src/xl_320.c  ****     *data |= servo->interface->status.params[1] << 8;
 1395              		.loc 1 507 0
 1396 0076 022E     		cmp	r6, #2
 1397 0078 02D0     		beq	.L135
 510:Src/xl_320.c  **** }
 1398              		.loc 1 510 0
 1399 007a 0020     		movs	r0, #0
 1400              	.L130:
 1401              		.loc 1 511 0
 1402 007c 04B0     		add	sp, sp, #16
 1403              	.LCFI18:
 1404              		.cfi_remember_state
 1405              		.cfi_def_cfa_offset 16
 1406              		@ sp needed
 1407 007e 70BD     		pop	{r4, r5, r6, pc}
 1408              	.LVL125:
 1409              	.L135:
 1410              	.LCFI19:
 1411              		.cfi_restore_state
 508:Src/xl_320.c  ****   }
 1412              		.loc 1 508 0
 1413 0080 6268     		ldr	r2, [r4, #4]
 1414 0082 92F84820 		ldrb	r2, [r2, #72]	@ zero_extendqisi2
 1415 0086 43EA0223 		orr	r3, r3, r2, lsl #8
 1416 008a 2B80     		strh	r3, [r5]	@ movhi
 510:Src/xl_320.c  **** }
 1417              		.loc 1 510 0
 1418 008c 0020     		movs	r0, #0
 1419 008e F5E7     		b	.L130
 1420              	.L137:
 1421              		.align	2
 1422              	.L136:
 1423 0090 00000000 		.word	.LANCHOR1
 1424 0094 00000000 		.word	.LANCHOR2
 1425 0098 00000000 		.word	.LANCHOR3
 1426              		.cfi_endproc
 1427              	.LFE23:
 1429              		.section	.text.XL_Factory_Reset,"ax",%progbits
 1430              		.align	1
 1431              		.global	XL_Factory_Reset
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	XL_Factory_Reset:
 1438              	.LFB25:
 512:Src/xl_320.c  **** 
 513:Src/xl_320.c  **** uint8_t XL_Action(XL *servo){
 514:Src/xl_320.c  ****   //Préparation de l'instruction
 515:Src/xl_320.c  ****   XL_Instruction_Packet packet;
 516:Src/xl_320.c  ****   packet.id = servo->id;
 517:Src/xl_320.c  ****   packet.instruction = XL_ACTION;
 518:Src/xl_320.c  ****   packet.nb_params = 0;
 519:Src/xl_320.c  ****   packet.params = 0;
 520:Src/xl_320.c  **** 
ARM GAS  /tmp/ccuthlll.s 			page 37


 521:Src/xl_320.c  ****   //Envoi de l'instruction
 522:Src/xl_320.c  ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 523:Src/xl_320.c  ****     return 1;
 524:Src/xl_320.c  ****   }
 525:Src/xl_320.c  **** 
 526:Src/xl_320.c  ****   //Réception de la réponse
 527:Src/xl_320.c  ****   if(XL_Receive(servo->interface, 11, XL_DEFAULT_TIMEOUT) == 1){
 528:Src/xl_320.c  ****     return 1;
 529:Src/xl_320.c  ****   }
 530:Src/xl_320.c  **** 
 531:Src/xl_320.c  ****   //En cas d'erreur matérielle
 532:Src/xl_320.c  ****   if(XL_Check_Alert(servo) == 1){
 533:Src/xl_320.c  ****     return 1;
 534:Src/xl_320.c  ****   }
 535:Src/xl_320.c  **** 
 536:Src/xl_320.c  ****   //Vérification du status
 537:Src/xl_320.c  ****   if(XL_Check_Status(servo) == 1){
 538:Src/xl_320.c  ****     return 1;
 539:Src/xl_320.c  ****   }
 540:Src/xl_320.c  **** 
 541:Src/xl_320.c  ****   //Action OK
 542:Src/xl_320.c  ****   return 0;
 543:Src/xl_320.c  **** }
 544:Src/xl_320.c  **** 
 545:Src/xl_320.c  **** uint8_t XL_Factory_Reset(XL *servo){
 1439              		.loc 1 545 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 16
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443              	.LVL126:
 1444 0000 10B5     		push	{r4, lr}
 1445              	.LCFI20:
 1446              		.cfi_def_cfa_offset 8
 1447              		.cfi_offset 4, -8
 1448              		.cfi_offset 14, -4
 1449 0002 84B0     		sub	sp, sp, #16
 1450              	.LCFI21:
 1451              		.cfi_def_cfa_offset 24
 1452 0004 0446     		mov	r4, r0
 546:Src/xl_320.c  ****   XL_Instruction_Packet packet;
 547:Src/xl_320.c  ****   packet.id = servo->id;
 1453              		.loc 1 547 0
 1454 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1455 0008 8DF80830 		strb	r3, [sp, #8]
 548:Src/xl_320.c  ****   packet.instruction = XL_FACTORY_RESET;
 1456              		.loc 1 548 0
 1457 000c 0623     		movs	r3, #6
 1458 000e 8DF80930 		strb	r3, [sp, #9]
 549:Src/xl_320.c  ****   packet.nb_params = 1;
 1459              		.loc 1 549 0
 1460 0012 0122     		movs	r2, #1
 1461 0014 8DF80A20 		strb	r2, [sp, #10]
 550:Src/xl_320.c  ****   uint8_t param = 0x02;
 1462              		.loc 1 550 0
 1463 0018 04AB     		add	r3, sp, #16
 1464 001a 0221     		movs	r1, #2
 1465 001c 03F8091D 		strb	r1, [r3, #-9]!
ARM GAS  /tmp/ccuthlll.s 			page 38


 551:Src/xl_320.c  ****   packet.params = &param;
 1466              		.loc 1 551 0
 1467 0020 0393     		str	r3, [sp, #12]
 552:Src/xl_320.c  **** 
 553:Src/xl_320.c  ****   //Envoi de l'instruction
 554:Src/xl_320.c  ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 1468              		.loc 1 554 0
 1469 0022 02A9     		add	r1, sp, #8
 1470 0024 4068     		ldr	r0, [r0, #4]
 1471              	.LVL127:
 1472 0026 FFF7FEFF 		bl	XL_Send
 1473              	.LVL128:
 1474 002a 0128     		cmp	r0, #1
 1475 002c 05D0     		beq	.L139
 555:Src/xl_320.c  ****     return 1;
 556:Src/xl_320.c  ****   }
 557:Src/xl_320.c  **** 
 558:Src/xl_320.c  ****   //Attente de la réinitialisation
 559:Src/xl_320.c  ****   servo->interface->delay(5000);
 1476              		.loc 1 559 0
 1477 002e 6368     		ldr	r3, [r4, #4]
 1478 0030 DB68     		ldr	r3, [r3, #12]
 1479 0032 41F28830 		movw	r0, #5000
 1480 0036 9847     		blx	r3
 1481              	.LVL129:
 560:Src/xl_320.c  ****   
 561:Src/xl_320.c  ****   return 0;
 1482              		.loc 1 561 0
 1483 0038 0020     		movs	r0, #0
 1484              	.L139:
 562:Src/xl_320.c  **** }
 1485              		.loc 1 562 0
 1486 003a 04B0     		add	sp, sp, #16
 1487              	.LCFI22:
 1488              		.cfi_def_cfa_offset 8
 1489              		@ sp needed
 1490 003c 10BD     		pop	{r4, pc}
 1491              		.cfi_endproc
 1492              	.LFE25:
 1494              		.section	.text.XL_Reboot,"ax",%progbits
 1495              		.align	1
 1496              		.global	XL_Reboot
 1497              		.syntax unified
 1498              		.thumb
 1499              		.thumb_func
 1500              		.fpu fpv4-sp-d16
 1502              	XL_Reboot:
 1503              	.LFB26:
 563:Src/xl_320.c  **** 
 564:Src/xl_320.c  **** uint8_t XL_Reboot(XL *servo){
 1504              		.loc 1 564 0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 8
 1507              		@ frame_needed = 0, uses_anonymous_args = 0
 1508              	.LVL130:
 1509 0000 10B5     		push	{r4, lr}
 1510              	.LCFI23:
ARM GAS  /tmp/ccuthlll.s 			page 39


 1511              		.cfi_def_cfa_offset 8
 1512              		.cfi_offset 4, -8
 1513              		.cfi_offset 14, -4
 1514 0002 82B0     		sub	sp, sp, #8
 1515              	.LCFI24:
 1516              		.cfi_def_cfa_offset 16
 1517 0004 0446     		mov	r4, r0
 565:Src/xl_320.c  ****   XL_Instruction_Packet packet;
 566:Src/xl_320.c  ****   packet.id = servo->id;
 1518              		.loc 1 566 0
 1519 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1520 0008 8DF80030 		strb	r3, [sp]
 567:Src/xl_320.c  ****   packet.instruction = XL_REBOOT;
 1521              		.loc 1 567 0
 1522 000c 0823     		movs	r3, #8
 1523 000e 8DF80130 		strb	r3, [sp, #1]
 568:Src/xl_320.c  ****   packet.nb_params = 0;
 1524              		.loc 1 568 0
 1525 0012 0023     		movs	r3, #0
 1526 0014 8DF80230 		strb	r3, [sp, #2]
 569:Src/xl_320.c  ****   packet.params = 0;
 1527              		.loc 1 569 0
 1528 0018 0193     		str	r3, [sp, #4]
 570:Src/xl_320.c  **** 
 571:Src/xl_320.c  ****   //Envoi de l'instruction
 572:Src/xl_320.c  ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 1529              		.loc 1 572 0
 1530 001a 0122     		movs	r2, #1
 1531 001c 6946     		mov	r1, sp
 1532 001e 4068     		ldr	r0, [r0, #4]
 1533              	.LVL131:
 1534 0020 FFF7FEFF 		bl	XL_Send
 1535              	.LVL132:
 1536 0024 0128     		cmp	r0, #1
 1537 0026 05D0     		beq	.L142
 573:Src/xl_320.c  ****     return 1;
 574:Src/xl_320.c  ****   }
 575:Src/xl_320.c  **** 
 576:Src/xl_320.c  ****   //Attente du redémarrage
 577:Src/xl_320.c  ****   servo->interface->delay(5000);
 1538              		.loc 1 577 0
 1539 0028 6368     		ldr	r3, [r4, #4]
 1540 002a DB68     		ldr	r3, [r3, #12]
 1541 002c 41F28830 		movw	r0, #5000
 1542 0030 9847     		blx	r3
 1543              	.LVL133:
 578:Src/xl_320.c  ****   
 579:Src/xl_320.c  ****   return 0;
 1544              		.loc 1 579 0
 1545 0032 0020     		movs	r0, #0
 1546              	.L142:
 580:Src/xl_320.c  **** }
 1547              		.loc 1 580 0
 1548 0034 02B0     		add	sp, sp, #8
 1549              	.LCFI25:
 1550              		.cfi_def_cfa_offset 8
 1551              		@ sp needed
ARM GAS  /tmp/ccuthlll.s 			page 40


 1552 0036 10BD     		pop	{r4, pc}
 1553              		.cfi_endproc
 1554              	.LFE26:
 1556              		.section	.text.XL_Configure_Baud_Rate,"ax",%progbits
 1557              		.align	1
 1558              		.global	XL_Configure_Baud_Rate
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1562              		.fpu fpv4-sp-d16
 1564              	XL_Configure_Baud_Rate:
 1565              	.LFB29:
 581:Src/xl_320.c  **** 
 582:Src/xl_320.c  **** uint8_t XL_Write(XL *servo, XL_Field field, uint16_t data, uint8_t size, uint8_t now){
 583:Src/xl_320.c  ****   if(servo == 0 || field > (XL_NB_FIELDS-1)){
 584:Src/xl_320.c  ****     return 1;
 585:Src/xl_320.c  ****   }
 586:Src/xl_320.c  **** 
 587:Src/xl_320.c  ****   //Préparation de l'instruction
 588:Src/xl_320.c  ****   static XL_Instruction_Packet packet;
 589:Src/xl_320.c  ****   static uint8_t params[4];
 590:Src/xl_320.c  ****   params[0] = field_addr[field];
 591:Src/xl_320.c  ****   params[1] = 0x00;
 592:Src/xl_320.c  ****   params[2] = data & 0xFF;
 593:Src/xl_320.c  ****   params[3] = data >> 8;
 594:Src/xl_320.c  ****   packet.id = servo->id;
 595:Src/xl_320.c  ****   packet.instruction = now?XL_WRITE:XL_REG_WRITE;
 596:Src/xl_320.c  ****   packet.nb_params = 2 + size;
 597:Src/xl_320.c  ****   packet.params = params;
 598:Src/xl_320.c  **** 
 599:Src/xl_320.c  ****   //Envoi de l'instruction
 600:Src/xl_320.c  ****   if(XL_Send(servo->interface, &packet, XL_DEFAULT_TIMEOUT) == 1){
 601:Src/xl_320.c  ****     return 1;
 602:Src/xl_320.c  ****   }
 603:Src/xl_320.c  **** 
 604:Src/xl_320.c  ****   //Réception de la réponse
 605:Src/xl_320.c  ****   if(XL_Receive(servo->interface, 11, XL_DEFAULT_TIMEOUT) == 1){
 606:Src/xl_320.c  ****     return 1;
 607:Src/xl_320.c  ****   }
 608:Src/xl_320.c  **** 
 609:Src/xl_320.c  ****   //En cas d'erreur matérielle
 610:Src/xl_320.c  ****   if(XL_Check_Alert(servo) == 1){
 611:Src/xl_320.c  ****     return 1;
 612:Src/xl_320.c  ****   }
 613:Src/xl_320.c  **** 
 614:Src/xl_320.c  ****   //Vérification du status
 615:Src/xl_320.c  ****   if(XL_Check_Status(servo) == 1){
 616:Src/xl_320.c  ****     return 1;
 617:Src/xl_320.c  ****   }
 618:Src/xl_320.c  **** 
 619:Src/xl_320.c  ****   //Write OK
 620:Src/xl_320.c  ****   return 0;
 621:Src/xl_320.c  **** }
 622:Src/xl_320.c  **** 
 623:Src/xl_320.c  **** //======================================
 624:Src/xl_320.c  **** //         CONFIGURATION EEPROM       
 625:Src/xl_320.c  **** //======================================
ARM GAS  /tmp/ccuthlll.s 			page 41


 626:Src/xl_320.c  **** uint8_t XL_Configure_ID(XL *servo, uint8_t id){
 627:Src/xl_320.c  ****   if(id > 252){
 628:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 629:Src/xl_320.c  ****     return 1;
 630:Src/xl_320.c  ****   }
 631:Src/xl_320.c  ****   return XL_Write(servo, XL_ID, id, 1, XL_NOW);
 632:Src/xl_320.c  **** }
 633:Src/xl_320.c  **** 
 634:Src/xl_320.c  **** uint8_t XL_Configure_Baud_Rate(XL *servo, XL_Baud_Rate baud_rate){
 1566              		.loc 1 634 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
 1571              	.LVL134:
 635:Src/xl_320.c  ****   if(baud_rate != XL_BAUD_RATE_9600 || baud_rate != XL_BAUD_RATE_57600 || baud_rate != XL_BAUD_RATE
 636:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1572              		.loc 1 636 0
 1573 0000 024B     		ldr	r3, .L145
 1574 0002 0022     		movs	r2, #0
 1575 0004 1A80     		strh	r2, [r3]	@ movhi
 637:Src/xl_320.c  ****     return 1;
 638:Src/xl_320.c  ****   }
 639:Src/xl_320.c  ****   return XL_Write(servo, XL_BAUD_RATE, baud_rate, 1, XL_NOW);
 640:Src/xl_320.c  **** }
 1576              		.loc 1 640 0
 1577 0006 0120     		movs	r0, #1
 1578              	.LVL135:
 1579 0008 7047     		bx	lr
 1580              	.L146:
 1581 000a 00BF     		.align	2
 1582              	.L145:
 1583 000c 00000000 		.word	.LANCHOR1
 1584              		.cfi_endproc
 1585              	.LFE29:
 1587              		.section	.text.XL_Configure_Control_Mode,"ax",%progbits
 1588              		.align	1
 1589              		.global	XL_Configure_Control_Mode
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu fpv4-sp-d16
 1595              	XL_Configure_Control_Mode:
 1596              	.LFB33:
 641:Src/xl_320.c  **** 
 642:Src/xl_320.c  **** uint8_t XL_Configure_Return_Delay_Time(XL *servo, uint8_t delay){
 643:Src/xl_320.c  ****   if(delay > 0xFE){
 644:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 645:Src/xl_320.c  ****     return 1;
 646:Src/xl_320.c  ****   }
 647:Src/xl_320.c  ****   return XL_Write(servo, XL_RETURN_DELAY_TIME, delay, 1, XL_NOW);
 648:Src/xl_320.c  **** }
 649:Src/xl_320.c  **** 
 650:Src/xl_320.c  **** uint8_t XL_Configure_CW_Angle_Limit(XL *servo, uint16_t angle){
 651:Src/xl_320.c  ****   if(angle > 0x3FF){
 652:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 653:Src/xl_320.c  ****     return 1;
ARM GAS  /tmp/ccuthlll.s 			page 42


 654:Src/xl_320.c  ****   }
 655:Src/xl_320.c  ****   return XL_Write(servo, XL_CW_ANGLE_LIMIT, angle, 2, XL_NOW);
 656:Src/xl_320.c  **** }
 657:Src/xl_320.c  **** 
 658:Src/xl_320.c  **** uint8_t XL_Configure_CCW_Angle_Limit(XL *servo, uint16_t angle){
 659:Src/xl_320.c  ****   if(angle > 0x3FF){
 660:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 661:Src/xl_320.c  ****     return 1;
 662:Src/xl_320.c  ****   }
 663:Src/xl_320.c  ****   return XL_Write(servo, XL_CCW_ANGLE_LIMIT, angle, 2, XL_NOW);
 664:Src/xl_320.c  **** }
 665:Src/xl_320.c  ****   
 666:Src/xl_320.c  **** uint8_t XL_Configure_Control_Mode(XL *servo, XL_Mode mode){
 1597              		.loc 1 666 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
 1600              		@ frame_needed = 0, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602              	.LVL136:
 667:Src/xl_320.c  ****   if(mode != XL_JOIN_MODE || mode != XL_WHEEL_MODE){
 668:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1603              		.loc 1 668 0
 1604 0000 024B     		ldr	r3, .L148
 1605 0002 0022     		movs	r2, #0
 1606 0004 1A80     		strh	r2, [r3]	@ movhi
 669:Src/xl_320.c  ****     return 1;
 670:Src/xl_320.c  ****   }
 671:Src/xl_320.c  ****   return XL_Write(servo, XL_CONTROL_MODE, mode, 1, XL_NOW);
 672:Src/xl_320.c  **** }
 1607              		.loc 1 672 0
 1608 0006 0120     		movs	r0, #1
 1609              	.LVL137:
 1610 0008 7047     		bx	lr
 1611              	.L149:
 1612 000a 00BF     		.align	2
 1613              	.L148:
 1614 000c 00000000 		.word	.LANCHOR1
 1615              		.cfi_endproc
 1616              	.LFE33:
 1618              		.section	.text.XL_Configure_Return_Level,"ax",%progbits
 1619              		.align	1
 1620              		.global	XL_Configure_Return_Level
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1624              		.fpu fpv4-sp-d16
 1626              	XL_Configure_Return_Level:
 1627              	.LFB38:
 673:Src/xl_320.c  **** 
 674:Src/xl_320.c  **** uint8_t XL_Configure_Limit_Temperature(XL *servo, uint8_t temp){
 675:Src/xl_320.c  ****   if(temp > 150){
 676:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 677:Src/xl_320.c  ****     return 1;
 678:Src/xl_320.c  ****   }
 679:Src/xl_320.c  ****   return XL_Write(servo, XL_LIMIT_TEMPERATURE, temp, 1, XL_NOW);
 680:Src/xl_320.c  **** }
 681:Src/xl_320.c  **** 
ARM GAS  /tmp/ccuthlll.s 			page 43


 682:Src/xl_320.c  **** uint8_t XL_Configure_Lower_Limit_Voltage(XL *servo, uint8_t voltage){
 683:Src/xl_320.c  ****   if(voltage < 50 || voltage > 250){
 684:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 685:Src/xl_320.c  ****     return 1;
 686:Src/xl_320.c  ****   }
 687:Src/xl_320.c  ****   return XL_Write(servo, XL_LOWER_LIMIT_VOLTAGE, voltage, 1, XL_NOW);
 688:Src/xl_320.c  **** }
 689:Src/xl_320.c  **** 
 690:Src/xl_320.c  **** uint8_t XL_Configure_Upper_Limit_Voltage(XL *servo, uint8_t voltage){
 691:Src/xl_320.c  ****   if(voltage < 50 || voltage > 250){
 692:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 693:Src/xl_320.c  ****     return 1;
 694:Src/xl_320.c  ****   }
 695:Src/xl_320.c  ****   return XL_Write(servo, XL_UPPER_LIMIT_VOLTAGE, voltage, 1, XL_NOW);
 696:Src/xl_320.c  **** }
 697:Src/xl_320.c  **** 
 698:Src/xl_320.c  **** uint8_t XL_Configure_Max_Torque(XL *servo, uint16_t max_torque){
 699:Src/xl_320.c  ****   if(max_torque > 1023){
 700:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 701:Src/xl_320.c  ****     return 1;
 702:Src/xl_320.c  ****   }
 703:Src/xl_320.c  ****   return XL_Write(servo, XL_MAX_TORQUE, max_torque, 2, XL_NOW);
 704:Src/xl_320.c  **** }
 705:Src/xl_320.c  **** 
 706:Src/xl_320.c  **** uint8_t XL_Configure_Return_Level(XL *servo, XL_Return_Level level){
 1628              		.loc 1 706 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
 1633              	.LVL138:
 707:Src/xl_320.c  ****   if(level != XL_PING_RETURN || level != XL_READ_RETURN || level != XL_ALL_RETURN){
 708:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 1634              		.loc 1 708 0
 1635 0000 024B     		ldr	r3, .L151
 1636 0002 0022     		movs	r2, #0
 1637 0004 1A80     		strh	r2, [r3]	@ movhi
 709:Src/xl_320.c  ****     return 1;
 710:Src/xl_320.c  ****   }
 711:Src/xl_320.c  ****   return XL_Write(servo, XL_RETURN_LEVEL, level, 1, XL_NOW);
 712:Src/xl_320.c  **** }
 1638              		.loc 1 712 0
 1639 0006 0120     		movs	r0, #1
 1640              	.LVL139:
 1641 0008 7047     		bx	lr
 1642              	.L152:
 1643 000a 00BF     		.align	2
 1644              	.L151:
 1645 000c 00000000 		.word	.LANCHOR1
 1646              		.cfi_endproc
 1647              	.LFE38:
 1649              		.section	.text.XL_Get_Current_Position,"ax",%progbits
 1650              		.align	1
 1651              		.global	XL_Get_Current_Position
 1652              		.syntax unified
 1653              		.thumb
 1654              		.thumb_func
ARM GAS  /tmp/ccuthlll.s 			page 44


 1655              		.fpu fpv4-sp-d16
 1657              	XL_Get_Current_Position:
 1658              	.LFB51:
 713:Src/xl_320.c  **** 
 714:Src/xl_320.c  **** uint8_t XL_Configure_Alarm_Shutdown(XL *servo, XL_Alarm_Shutdown alarm){
 715:Src/xl_320.c  ****   if(alarm > XL_ERROR_OVER_9000){
 716:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 717:Src/xl_320.c  ****     return 1;
 718:Src/xl_320.c  ****   }
 719:Src/xl_320.c  ****   return XL_Write(servo, XL_ALARM_SHUTDOWN, alarm, 1, XL_NOW);
 720:Src/xl_320.c  **** }
 721:Src/xl_320.c  **** 
 722:Src/xl_320.c  **** 
 723:Src/xl_320.c  **** //======================================
 724:Src/xl_320.c  **** //       COMMANDES SERVOMOTEUR       
 725:Src/xl_320.c  **** //======================================
 726:Src/xl_320.c  **** 
 727:Src/xl_320.c  **** uint8_t XL_Power_On(XL *servo, uint8_t now){
 728:Src/xl_320.c  ****   return XL_Write(servo, XL_TORQUE_ENABLE, 1, 1, now);
 729:Src/xl_320.c  **** }
 730:Src/xl_320.c  **** 
 731:Src/xl_320.c  **** uint8_t XL_Power_Off(XL *servo, uint8_t now){
 732:Src/xl_320.c  ****   return XL_Write(servo, XL_TORQUE_ENABLE, 0, 1, now);
 733:Src/xl_320.c  **** }
 734:Src/xl_320.c  **** 
 735:Src/xl_320.c  **** uint8_t XL_Set_LED(XL *servo, XL_LED_Color color, uint8_t now){
 736:Src/xl_320.c  ****   if((uint8_t) color > 7){
 737:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 738:Src/xl_320.c  ****     return 1;
 739:Src/xl_320.c  ****   }
 740:Src/xl_320.c  ****   return XL_Write(servo, XL_LED, color, 1, now);
 741:Src/xl_320.c  **** }
 742:Src/xl_320.c  **** 
 743:Src/xl_320.c  **** uint8_t XL_Set_D_Gain(XL *servo, uint8_t d_gain, uint8_t now){
 744:Src/xl_320.c  ****   if(d_gain > 254){
 745:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 746:Src/xl_320.c  ****     return 1;
 747:Src/xl_320.c  ****   }
 748:Src/xl_320.c  ****   return XL_Write(servo, XL_D_GAIN, d_gain, 1, now);
 749:Src/xl_320.c  **** }
 750:Src/xl_320.c  **** 
 751:Src/xl_320.c  **** uint8_t XL_Set_I_Gain(XL *servo, uint8_t i_gain, uint8_t now){
 752:Src/xl_320.c  ****   if(i_gain > 254){
 753:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 754:Src/xl_320.c  ****     return 1;
 755:Src/xl_320.c  ****   }
 756:Src/xl_320.c  ****   return XL_Write(servo, XL_I_GAIN, i_gain, 1, now);
 757:Src/xl_320.c  **** }
 758:Src/xl_320.c  **** 
 759:Src/xl_320.c  **** uint8_t XL_Set_P_Gain(XL *servo, uint8_t p_gain, uint8_t now){
 760:Src/xl_320.c  ****   if(p_gain > 254){
 761:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 762:Src/xl_320.c  ****     return 1;
 763:Src/xl_320.c  ****   }
 764:Src/xl_320.c  ****   return XL_Write(servo, XL_P_GAIN, p_gain, 1, now);
 765:Src/xl_320.c  **** }
 766:Src/xl_320.c  **** 
ARM GAS  /tmp/ccuthlll.s 			page 45


 767:Src/xl_320.c  **** uint8_t XL_Set_Goal_Position(XL *servo, uint16_t position, uint8_t now){
 768:Src/xl_320.c  ****   if(position > 1023){
 769:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 770:Src/xl_320.c  ****     return 1;
 771:Src/xl_320.c  ****   }
 772:Src/xl_320.c  ****   return XL_Write(servo, XL_GOAL_POSITION, position, 2, now);
 773:Src/xl_320.c  **** }
 774:Src/xl_320.c  **** 
 775:Src/xl_320.c  **** uint8_t XL_Set_Goal_Speed_Join(XL *servo, uint16_t speed, uint8_t now){
 776:Src/xl_320.c  ****   if(speed > 1023){
 777:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 778:Src/xl_320.c  ****     return 1;
 779:Src/xl_320.c  ****   }
 780:Src/xl_320.c  ****   return XL_Write(servo, XL_MOVING_SPEED, speed, 2, now); 
 781:Src/xl_320.c  **** }
 782:Src/xl_320.c  **** 
 783:Src/xl_320.c  **** uint8_t XL_Set_Goal_Speed_Wheel(XL *servo, uint16_t speed, XL_Wheel_Direction dir, uint8_t now){
 784:Src/xl_320.c  ****   if(speed > 1023){
 785:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 786:Src/xl_320.c  ****     return 1;
 787:Src/xl_320.c  ****   }
 788:Src/xl_320.c  ****   switch(dir){
 789:Src/xl_320.c  ****   case XL_CLOCKWISE:
 790:Src/xl_320.c  ****     speed += 1024;
 791:Src/xl_320.c  ****     break;
 792:Src/xl_320.c  ****   case XL_COUNTERCLOCKWISE:
 793:Src/xl_320.c  ****   break;
 794:Src/xl_320.c  ****   default:
 795:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 796:Src/xl_320.c  ****     return 1;
 797:Src/xl_320.c  ****     break;
 798:Src/xl_320.c  ****   }
 799:Src/xl_320.c  ****   return XL_Write(servo, XL_MOVING_SPEED, speed, 2, now);
 800:Src/xl_320.c  **** }
 801:Src/xl_320.c  **** 
 802:Src/xl_320.c  **** uint8_t XL_Set_Torque_Limit(XL *servo, uint16_t torque_limit, uint8_t now){
 803:Src/xl_320.c  ****   if(torque_limit > 1023){
 804:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 805:Src/xl_320.c  ****     return 1;
 806:Src/xl_320.c  ****   }
 807:Src/xl_320.c  ****   return XL_Write(servo, XL_TORQUE_LIMIT, torque_limit, 2, now);
 808:Src/xl_320.c  **** }
 809:Src/xl_320.c  **** 
 810:Src/xl_320.c  **** uint8_t XL_Set_Punch(XL *servo, uint16_t punch, uint8_t now){
 811:Src/xl_320.c  ****   if(punch < 0x20 || punch > 0x3FF){
 812:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 813:Src/xl_320.c  ****     return 1;
 814:Src/xl_320.c  ****   }
 815:Src/xl_320.c  ****   return XL_Write(servo, XL_PUNCH, punch, 2, now);
 816:Src/xl_320.c  **** }
 817:Src/xl_320.c  **** 
 818:Src/xl_320.c  **** //======================================
 819:Src/xl_320.c  **** //       LECTURE D'INFORMATIONS
 820:Src/xl_320.c  **** //======================================
 821:Src/xl_320.c  **** uint8_t XL_Get_Current_Position(XL *servo, uint16_t *position){
 1659              		.loc 1 821 0
 1660              		.cfi_startproc
ARM GAS  /tmp/ccuthlll.s 			page 46


 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              	.LVL140:
 1664 0000 08B5     		push	{r3, lr}
 1665              	.LCFI26:
 1666              		.cfi_def_cfa_offset 8
 1667              		.cfi_offset 3, -8
 1668              		.cfi_offset 14, -4
 822:Src/xl_320.c  ****   return XL_Read(servo, XL_CURRENT_POSITION, position);
 1669              		.loc 1 822 0
 1670 0002 0A46     		mov	r2, r1
 1671 0004 1721     		movs	r1, #23
 1672              	.LVL141:
 1673 0006 FFF7FEFF 		bl	XL_Read
 1674              	.LVL142:
 823:Src/xl_320.c  **** }
 1675              		.loc 1 823 0
 1676 000a 08BD     		pop	{r3, pc}
 1677              		.cfi_endproc
 1678              	.LFE51:
 1680              		.section	.text.XL_Get_Current_Speed,"ax",%progbits
 1681              		.align	1
 1682              		.global	XL_Get_Current_Speed
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu fpv4-sp-d16
 1688              	XL_Get_Current_Speed:
 1689              	.LFB52:
 824:Src/xl_320.c  **** 
 825:Src/xl_320.c  **** uint8_t XL_Get_Current_Speed(XL *servo, XL_Wheel_Direction *direction, uint16_t *speed){
 1690              		.loc 1 825 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694              	.LVL143:
 1695 0000 38B5     		push	{r3, r4, r5, lr}
 1696              	.LCFI27:
 1697              		.cfi_def_cfa_offset 16
 1698              		.cfi_offset 3, -16
 1699              		.cfi_offset 4, -12
 1700              		.cfi_offset 5, -8
 1701              		.cfi_offset 14, -4
 1702 0002 0D46     		mov	r5, r1
 1703 0004 1446     		mov	r4, r2
 826:Src/xl_320.c  ****   if(XL_Read(servo, XL_CURRENT_SPEED, speed) == 1){
 1704              		.loc 1 826 0
 1705 0006 1821     		movs	r1, #24
 1706              	.LVL144:
 1707 0008 FFF7FEFF 		bl	XL_Read
 1708              	.LVL145:
 1709 000c 0128     		cmp	r0, #1
 1710 000e 09D0     		beq	.L156
 827:Src/xl_320.c  ****     return 1;
 828:Src/xl_320.c  ****   }
 829:Src/xl_320.c  ****   *direction = (*speed > 1023)?XL_CLOCKWISE:XL_COUNTERCLOCKWISE;
 1711              		.loc 1 829 0
ARM GAS  /tmp/ccuthlll.s 			page 47


 1712 0010 2388     		ldrh	r3, [r4]
 1713 0012 B3F5806F 		cmp	r3, #1024
 1714 0016 2CBF     		ite	cs
 1715 0018 0023     		movcs	r3, #0
 1716 001a 0123     		movcc	r3, #1
 1717 001c 2B70     		strb	r3, [r5]
 830:Src/xl_320.c  ****   *speed &= 0xFF;
 1718              		.loc 1 830 0
 1719 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1720 0020 2380     		strh	r3, [r4]	@ movhi
 831:Src/xl_320.c  ****   return 0;
 1721              		.loc 1 831 0
 1722 0022 0020     		movs	r0, #0
 1723              	.L156:
 832:Src/xl_320.c  **** }
 1724              		.loc 1 832 0
 1725 0024 38BD     		pop	{r3, r4, r5, pc}
 1726              		.cfi_endproc
 1727              	.LFE52:
 1729              		.section	.text.XL_Get_Current_Load,"ax",%progbits
 1730              		.align	1
 1731              		.global	XL_Get_Current_Load
 1732              		.syntax unified
 1733              		.thumb
 1734              		.thumb_func
 1735              		.fpu fpv4-sp-d16
 1737              	XL_Get_Current_Load:
 1738              	.LFB53:
 833:Src/xl_320.c  **** 
 834:Src/xl_320.c  **** uint8_t XL_Get_Current_Load(XL *servo, XL_Wheel_Direction *direction, uint16_t *load){
 1739              		.loc 1 834 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 0
 1742              		@ frame_needed = 0, uses_anonymous_args = 0
 1743              	.LVL146:
 1744 0000 38B5     		push	{r3, r4, r5, lr}
 1745              	.LCFI28:
 1746              		.cfi_def_cfa_offset 16
 1747              		.cfi_offset 3, -16
 1748              		.cfi_offset 4, -12
 1749              		.cfi_offset 5, -8
 1750              		.cfi_offset 14, -4
 1751 0002 0D46     		mov	r5, r1
 1752 0004 1446     		mov	r4, r2
 835:Src/xl_320.c  ****   if(XL_Read(servo, XL_CURRENT_LOAD, load) == 1){
 1753              		.loc 1 835 0
 1754 0006 1921     		movs	r1, #25
 1755              	.LVL147:
 1756 0008 FFF7FEFF 		bl	XL_Read
 1757              	.LVL148:
 1758 000c 0128     		cmp	r0, #1
 1759 000e 09D0     		beq	.L159
 836:Src/xl_320.c  ****     return 1;
 837:Src/xl_320.c  ****   }
 838:Src/xl_320.c  ****   *direction = (*load > 1023)?XL_CLOCKWISE:XL_COUNTERCLOCKWISE;
 1760              		.loc 1 838 0
 1761 0010 2388     		ldrh	r3, [r4]
ARM GAS  /tmp/ccuthlll.s 			page 48


 1762 0012 B3F5806F 		cmp	r3, #1024
 1763 0016 2CBF     		ite	cs
 1764 0018 0023     		movcs	r3, #0
 1765 001a 0123     		movcc	r3, #1
 1766 001c 2B70     		strb	r3, [r5]
 839:Src/xl_320.c  ****   *load &= 0xFF;
 1767              		.loc 1 839 0
 1768 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1769 0020 2380     		strh	r3, [r4]	@ movhi
 840:Src/xl_320.c  ****   return 0;
 1770              		.loc 1 840 0
 1771 0022 0020     		movs	r0, #0
 1772              	.L159:
 841:Src/xl_320.c  **** }
 1773              		.loc 1 841 0
 1774 0024 38BD     		pop	{r3, r4, r5, pc}
 1775              		.cfi_endproc
 1776              	.LFE53:
 1778              		.section	.text.XL_Get_Current_Voltage,"ax",%progbits
 1779              		.align	1
 1780              		.global	XL_Get_Current_Voltage
 1781              		.syntax unified
 1782              		.thumb
 1783              		.thumb_func
 1784              		.fpu fpv4-sp-d16
 1786              	XL_Get_Current_Voltage:
 1787              	.LFB54:
 842:Src/xl_320.c  **** 
 843:Src/xl_320.c  **** uint8_t XL_Get_Current_Voltage(XL *servo, uint16_t *voltage){
 1788              		.loc 1 843 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 1792              	.LVL149:
 1793 0000 08B5     		push	{r3, lr}
 1794              	.LCFI29:
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 3, -8
 1797              		.cfi_offset 14, -4
 844:Src/xl_320.c  ****   return XL_Read(servo, XL_CURRENT_VOLTAGE, voltage);
 1798              		.loc 1 844 0
 1799 0002 0A46     		mov	r2, r1
 1800 0004 1A21     		movs	r1, #26
 1801              	.LVL150:
 1802 0006 FFF7FEFF 		bl	XL_Read
 1803              	.LVL151:
 845:Src/xl_320.c  **** }
 1804              		.loc 1 845 0
 1805 000a 08BD     		pop	{r3, pc}
 1806              		.cfi_endproc
 1807              	.LFE54:
 1809              		.section	.text.XL_Get_Current_Temperature,"ax",%progbits
 1810              		.align	1
 1811              		.global	XL_Get_Current_Temperature
 1812              		.syntax unified
 1813              		.thumb
 1814              		.thumb_func
ARM GAS  /tmp/ccuthlll.s 			page 49


 1815              		.fpu fpv4-sp-d16
 1817              	XL_Get_Current_Temperature:
 1818              	.LFB55:
 846:Src/xl_320.c  **** 
 847:Src/xl_320.c  **** uint8_t XL_Get_Current_Temperature(XL *servo, uint16_t *temperature){
 1819              		.loc 1 847 0
 1820              		.cfi_startproc
 1821              		@ args = 0, pretend = 0, frame = 0
 1822              		@ frame_needed = 0, uses_anonymous_args = 0
 1823              	.LVL152:
 1824 0000 08B5     		push	{r3, lr}
 1825              	.LCFI30:
 1826              		.cfi_def_cfa_offset 8
 1827              		.cfi_offset 3, -8
 1828              		.cfi_offset 14, -4
 848:Src/xl_320.c  ****   return XL_Read(servo, XL_CURRENT_TEMPERATURE, temperature);
 1829              		.loc 1 848 0
 1830 0002 0A46     		mov	r2, r1
 1831 0004 1B21     		movs	r1, #27
 1832              	.LVL153:
 1833 0006 FFF7FEFF 		bl	XL_Read
 1834              	.LVL154:
 849:Src/xl_320.c  **** }
 1835              		.loc 1 849 0
 1836 000a 08BD     		pop	{r3, pc}
 1837              		.cfi_endproc
 1838              	.LFE55:
 1840              		.section	.text.XL_Is_Working,"ax",%progbits
 1841              		.align	1
 1842              		.global	XL_Is_Working
 1843              		.syntax unified
 1844              		.thumb
 1845              		.thumb_func
 1846              		.fpu fpv4-sp-d16
 1848              	XL_Is_Working:
 1849              	.LFB56:
 850:Src/xl_320.c  **** 
 851:Src/xl_320.c  **** uint8_t XL_Is_Working(XL *servo, uint16_t *working){
 1850              		.loc 1 851 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 0
 1853              		@ frame_needed = 0, uses_anonymous_args = 0
 1854              	.LVL155:
 1855 0000 08B5     		push	{r3, lr}
 1856              	.LCFI31:
 1857              		.cfi_def_cfa_offset 8
 1858              		.cfi_offset 3, -8
 1859              		.cfi_offset 14, -4
 852:Src/xl_320.c  ****   return XL_Read(servo, XL_TORQUE_ENABLE, working);
 1860              		.loc 1 852 0
 1861 0002 0A46     		mov	r2, r1
 1862 0004 0E21     		movs	r1, #14
 1863              	.LVL156:
 1864 0006 FFF7FEFF 		bl	XL_Read
 1865              	.LVL157:
 853:Src/xl_320.c  **** }
 1866              		.loc 1 853 0
ARM GAS  /tmp/ccuthlll.s 			page 50


 1867 000a 08BD     		pop	{r3, pc}
 1868              		.cfi_endproc
 1869              	.LFE56:
 1871              		.section	.text.XL_Is_Moving,"ax",%progbits
 1872              		.align	1
 1873              		.global	XL_Is_Moving
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv4-sp-d16
 1879              	XL_Is_Moving:
 1880              	.LFB57:
 854:Src/xl_320.c  **** 
 855:Src/xl_320.c  **** uint8_t XL_Is_Moving(XL *servo, uint16_t *moving){
 1881              		.loc 1 855 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              	.LVL158:
 1886 0000 08B5     		push	{r3, lr}
 1887              	.LCFI32:
 1888              		.cfi_def_cfa_offset 8
 1889              		.cfi_offset 3, -8
 1890              		.cfi_offset 14, -4
 856:Src/xl_320.c  ****   return XL_Read(servo, XL_MOVING, moving);
 1891              		.loc 1 856 0
 1892 0002 0A46     		mov	r2, r1
 1893 0004 1D21     		movs	r1, #29
 1894              	.LVL159:
 1895 0006 FFF7FEFF 		bl	XL_Read
 1896              	.LVL160:
 857:Src/xl_320.c  **** }
 1897              		.loc 1 857 0
 1898 000a 08BD     		pop	{r3, pc}
 1899              		.cfi_endproc
 1900              	.LFE57:
 1902              		.section	.text.XL_Get_Hardware_Error,"ax",%progbits
 1903              		.align	1
 1904              		.global	XL_Get_Hardware_Error
 1905              		.syntax unified
 1906              		.thumb
 1907              		.thumb_func
 1908              		.fpu fpv4-sp-d16
 1910              	XL_Get_Hardware_Error:
 1911              	.LFB58:
 858:Src/xl_320.c  **** 
 859:Src/xl_320.c  **** uint8_t XL_Get_Hardware_Error(XL *servo, uint16_t *hw_error){
 1912              		.loc 1 859 0
 1913              		.cfi_startproc
 1914              		@ args = 0, pretend = 0, frame = 0
 1915              		@ frame_needed = 0, uses_anonymous_args = 0
 1916              	.LVL161:
 1917 0000 08B5     		push	{r3, lr}
 1918              	.LCFI33:
 1919              		.cfi_def_cfa_offset 8
 1920              		.cfi_offset 3, -8
 1921              		.cfi_offset 14, -4
ARM GAS  /tmp/ccuthlll.s 			page 51


 860:Src/xl_320.c  ****   return XL_Read(servo, XL_HARDWARE_ERROR_STATUS, hw_error);
 1922              		.loc 1 860 0
 1923 0002 0A46     		mov	r2, r1
 1924 0004 1E21     		movs	r1, #30
 1925              	.LVL162:
 1926 0006 FFF7FEFF 		bl	XL_Read
 1927              	.LVL163:
 861:Src/xl_320.c  **** }
 1928              		.loc 1 861 0
 1929 000a 08BD     		pop	{r3, pc}
 1930              		.cfi_endproc
 1931              	.LFE58:
 1933              		.section	.text.XL_Check_Alert,"ax",%progbits
 1934              		.align	1
 1935              		.global	XL_Check_Alert
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv4-sp-d16
 1941              	XL_Check_Alert:
 1942              	.LFB19:
 403:Src/xl_320.c  ****   if(XL_STATUS_ALERT(servo->interface->status.err) == 1){
 1943              		.loc 1 403 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 8
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              	.LVL164:
 404:Src/xl_320.c  ****     uint16_t hw_error;
 1948              		.loc 1 404 0
 1949 0000 4368     		ldr	r3, [r0, #4]
 1950 0002 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1951 0006 DB09     		lsrs	r3, r3, #7
 1952 0008 01D1     		bne	.L179
 412:Src/xl_320.c  **** }
 1953              		.loc 1 412 0
 1954 000a 0020     		movs	r0, #0
 1955              	.LVL165:
 413:Src/xl_320.c  **** 
 1956              		.loc 1 413 0
 1957 000c 7047     		bx	lr
 1958              	.LVL166:
 1959              	.L179:
 403:Src/xl_320.c  ****   if(XL_STATUS_ALERT(servo->interface->status.err) == 1){
 1960              		.loc 1 403 0
 1961 000e 00B5     		push	{lr}
 1962              	.LCFI34:
 1963              		.cfi_def_cfa_offset 4
 1964              		.cfi_offset 14, -4
 1965 0010 83B0     		sub	sp, sp, #12
 1966              	.LCFI35:
 1967              		.cfi_def_cfa_offset 16
 1968              	.LBB2:
 406:Src/xl_320.c  ****       return 1;
 1969              		.loc 1 406 0
 1970 0012 0DF10601 		add	r1, sp, #6
 1971 0016 FFF7FEFF 		bl	XL_Get_Hardware_Error
 1972              	.LVL167:
ARM GAS  /tmp/ccuthlll.s 			page 52


 1973 001a 0128     		cmp	r0, #1
 1974 001c 05D0     		beq	.L173
 409:Src/xl_320.c  ****     return 1;
 1975              		.loc 1 409 0
 1976 001e BDF80630 		ldrh	r3, [sp, #6]
 1977 0022 43F48063 		orr	r3, r3, #1024
 1978 0026 034A     		ldr	r2, .L180
 1979 0028 1380     		strh	r3, [r2]	@ movhi
 1980              	.L173:
 1981 002a 0120     		movs	r0, #1
 1982              	.LBE2:
 413:Src/xl_320.c  **** 
 1983              		.loc 1 413 0
 1984 002c 03B0     		add	sp, sp, #12
 1985              	.LCFI36:
 1986              		.cfi_def_cfa_offset 4
 1987              		@ sp needed
 1988 002e 5DF804FB 		ldr	pc, [sp], #4
 1989              	.L181:
 1990 0032 00BF     		.align	2
 1991              	.L180:
 1992 0034 00000000 		.word	.LANCHOR1
 1993              		.cfi_endproc
 1994              	.LFE19:
 1996              		.section	.text.XL_Action,"ax",%progbits
 1997              		.align	1
 1998              		.global	XL_Action
 1999              		.syntax unified
 2000              		.thumb
 2001              		.thumb_func
 2002              		.fpu fpv4-sp-d16
 2004              	XL_Action:
 2005              	.LFB24:
 513:Src/xl_320.c  ****   //Préparation de l'instruction
 2006              		.loc 1 513 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 8
 2009              		@ frame_needed = 0, uses_anonymous_args = 0
 2010              	.LVL168:
 2011 0000 10B5     		push	{r4, lr}
 2012              	.LCFI37:
 2013              		.cfi_def_cfa_offset 8
 2014              		.cfi_offset 4, -8
 2015              		.cfi_offset 14, -4
 2016 0002 82B0     		sub	sp, sp, #8
 2017              	.LCFI38:
 2018              		.cfi_def_cfa_offset 16
 2019 0004 0446     		mov	r4, r0
 516:Src/xl_320.c  ****   packet.instruction = XL_ACTION;
 2020              		.loc 1 516 0
 2021 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2022 0008 8DF80030 		strb	r3, [sp]
 517:Src/xl_320.c  ****   packet.nb_params = 0;
 2023              		.loc 1 517 0
 2024 000c 0523     		movs	r3, #5
 2025 000e 8DF80130 		strb	r3, [sp, #1]
 518:Src/xl_320.c  ****   packet.params = 0;
ARM GAS  /tmp/ccuthlll.s 			page 53


 2026              		.loc 1 518 0
 2027 0012 0023     		movs	r3, #0
 2028 0014 8DF80230 		strb	r3, [sp, #2]
 519:Src/xl_320.c  **** 
 2029              		.loc 1 519 0
 2030 0018 0193     		str	r3, [sp, #4]
 522:Src/xl_320.c  ****     return 1;
 2031              		.loc 1 522 0
 2032 001a 0122     		movs	r2, #1
 2033 001c 6946     		mov	r1, sp
 2034 001e 4068     		ldr	r0, [r0, #4]
 2035              	.LVL169:
 2036 0020 FFF7FEFF 		bl	XL_Send
 2037              	.LVL170:
 2038 0024 0128     		cmp	r0, #1
 2039 0026 11D0     		beq	.L183
 527:Src/xl_320.c  ****     return 1;
 2040              		.loc 1 527 0
 2041 0028 0122     		movs	r2, #1
 2042 002a 0B21     		movs	r1, #11
 2043 002c 6068     		ldr	r0, [r4, #4]
 2044 002e FFF7FEFF 		bl	XL_Receive
 2045              	.LVL171:
 2046 0032 0128     		cmp	r0, #1
 2047 0034 0AD0     		beq	.L183
 532:Src/xl_320.c  ****     return 1;
 2048              		.loc 1 532 0
 2049 0036 2046     		mov	r0, r4
 2050 0038 FFF7FEFF 		bl	XL_Check_Alert
 2051              	.LVL172:
 2052 003c 0128     		cmp	r0, #1
 2053 003e 05D0     		beq	.L183
 537:Src/xl_320.c  ****     return 1;
 2054              		.loc 1 537 0
 2055 0040 2046     		mov	r0, r4
 2056 0042 FFF7FEFF 		bl	XL_Check_Status
 2057              	.LVL173:
 2058 0046 0128     		cmp	r0, #1
 2059 0048 00D0     		beq	.L183
 542:Src/xl_320.c  **** }
 2060              		.loc 1 542 0
 2061 004a 0020     		movs	r0, #0
 2062              	.L183:
 543:Src/xl_320.c  **** 
 2063              		.loc 1 543 0
 2064 004c 02B0     		add	sp, sp, #8
 2065              	.LCFI39:
 2066              		.cfi_def_cfa_offset 8
 2067              		@ sp needed
 2068 004e 10BD     		pop	{r4, pc}
 2069              		.cfi_endproc
 2070              	.LFE24:
 2072              		.section	.text.XL_Write,"ax",%progbits
 2073              		.align	1
 2074              		.global	XL_Write
 2075              		.syntax unified
 2076              		.thumb
ARM GAS  /tmp/ccuthlll.s 			page 54


 2077              		.thumb_func
 2078              		.fpu fpv4-sp-d16
 2080              	XL_Write:
 2081              	.LFB27:
 582:Src/xl_320.c  ****   if(servo == 0 || field > (XL_NB_FIELDS-1)){
 2082              		.loc 1 582 0
 2083              		.cfi_startproc
 2084              		@ args = 4, pretend = 0, frame = 0
 2085              		@ frame_needed = 0, uses_anonymous_args = 0
 2086              	.LVL174:
 2087 0000 38B5     		push	{r3, r4, r5, lr}
 2088              	.LCFI40:
 2089              		.cfi_def_cfa_offset 16
 2090              		.cfi_offset 3, -16
 2091              		.cfi_offset 4, -12
 2092              		.cfi_offset 5, -8
 2093              		.cfi_offset 14, -4
 2094 0002 9DF81050 		ldrb	r5, [sp, #16]	@ zero_extendqisi2
 583:Src/xl_320.c  ****     return 1;
 2095              		.loc 1 583 0
 2096 0006 88B3     		cbz	r0, .L189
 2097 0008 0446     		mov	r4, r0
 583:Src/xl_320.c  ****     return 1;
 2098              		.loc 1 583 0 is_stmt 0 discriminator 1
 2099 000a 1E29     		cmp	r1, #30
 2100 000c 30D8     		bhi	.L190
 590:Src/xl_320.c  ****   params[1] = 0x00;
 2101              		.loc 1 590 0 is_stmt 1
 2102 000e 1948     		ldr	r0, .L194
 2103              	.LVL175:
 2104 0010 405C     		ldrb	r0, [r0, r1]	@ zero_extendqisi2
 2105 0012 1949     		ldr	r1, .L194+4
 2106              	.LVL176:
 2107 0014 0870     		strb	r0, [r1]
 591:Src/xl_320.c  ****   params[2] = data & 0xFF;
 2108              		.loc 1 591 0
 2109 0016 0020     		movs	r0, #0
 2110 0018 4870     		strb	r0, [r1, #1]
 592:Src/xl_320.c  ****   params[3] = data >> 8;
 2111              		.loc 1 592 0
 2112 001a 8A70     		strb	r2, [r1, #2]
 593:Src/xl_320.c  ****   packet.id = servo->id;
 2113              		.loc 1 593 0
 2114 001c 120A     		lsrs	r2, r2, #8
 2115              	.LVL177:
 2116 001e CA70     		strb	r2, [r1, #3]
 594:Src/xl_320.c  ****   packet.instruction = now?XL_WRITE:XL_REG_WRITE;
 2117              		.loc 1 594 0
 2118 0020 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 2119 0022 164A     		ldr	r2, .L194+8
 2120 0024 1170     		strb	r1, [r2]
 595:Src/xl_320.c  ****   packet.nb_params = 2 + size;
 2121              		.loc 1 595 0
 2122 0026 FDB1     		cbz	r5, .L191
 2123 0028 0322     		movs	r2, #3
 2124              	.L188:
 595:Src/xl_320.c  ****   packet.nb_params = 2 + size;
ARM GAS  /tmp/ccuthlll.s 			page 55


 2125              		.loc 1 595 0 is_stmt 0 discriminator 4
 2126 002a 1449     		ldr	r1, .L194+8
 2127 002c 4A70     		strb	r2, [r1, #1]
 596:Src/xl_320.c  ****   packet.params = params;
 2128              		.loc 1 596 0 is_stmt 1 discriminator 4
 2129 002e 0233     		adds	r3, r3, #2
 2130              	.LVL178:
 2131 0030 8B70     		strb	r3, [r1, #2]
 597:Src/xl_320.c  **** 
 2132              		.loc 1 597 0 discriminator 4
 2133 0032 114B     		ldr	r3, .L194+4
 2134 0034 4B60     		str	r3, [r1, #4]
 600:Src/xl_320.c  ****     return 1;
 2135              		.loc 1 600 0 discriminator 4
 2136 0036 0122     		movs	r2, #1
 2137 0038 6068     		ldr	r0, [r4, #4]
 2138 003a FFF7FEFF 		bl	XL_Send
 2139              	.LVL179:
 2140 003e 0128     		cmp	r0, #1
 2141 0040 17D0     		beq	.L187
 605:Src/xl_320.c  ****     return 1;
 2142              		.loc 1 605 0
 2143 0042 0122     		movs	r2, #1
 2144 0044 0B21     		movs	r1, #11
 2145 0046 6068     		ldr	r0, [r4, #4]
 2146 0048 FFF7FEFF 		bl	XL_Receive
 2147              	.LVL180:
 2148 004c 0128     		cmp	r0, #1
 2149 004e 10D0     		beq	.L187
 610:Src/xl_320.c  ****     return 1;
 2150              		.loc 1 610 0
 2151 0050 2046     		mov	r0, r4
 2152 0052 FFF7FEFF 		bl	XL_Check_Alert
 2153              	.LVL181:
 2154 0056 0128     		cmp	r0, #1
 2155 0058 0BD0     		beq	.L187
 615:Src/xl_320.c  ****     return 1;
 2156              		.loc 1 615 0
 2157 005a 2046     		mov	r0, r4
 2158 005c FFF7FEFF 		bl	XL_Check_Status
 2159              	.LVL182:
 2160 0060 0128     		cmp	r0, #1
 2161 0062 06D0     		beq	.L187
 620:Src/xl_320.c  **** }
 2162              		.loc 1 620 0
 2163 0064 0020     		movs	r0, #0
 2164 0066 04E0     		b	.L187
 2165              	.LVL183:
 2166              	.L191:
 595:Src/xl_320.c  ****   packet.nb_params = 2 + size;
 2167              		.loc 1 595 0
 2168 0068 0422     		movs	r2, #4
 2169 006a DEE7     		b	.L188
 2170              	.LVL184:
 2171              	.L189:
 584:Src/xl_320.c  ****   }
 2172              		.loc 1 584 0
ARM GAS  /tmp/ccuthlll.s 			page 56


 2173 006c 0120     		movs	r0, #1
 2174              	.LVL185:
 2175 006e 00E0     		b	.L187
 2176              	.LVL186:
 2177              	.L190:
 2178 0070 0120     		movs	r0, #1
 2179              	.LVL187:
 2180              	.L187:
 621:Src/xl_320.c  **** 
 2181              		.loc 1 621 0
 2182 0072 38BD     		pop	{r3, r4, r5, pc}
 2183              	.LVL188:
 2184              	.L195:
 2185              		.align	2
 2186              	.L194:
 2187 0074 00000000 		.word	.LANCHOR2
 2188 0078 00000000 		.word	.LANCHOR4
 2189 007c 00000000 		.word	.LANCHOR5
 2190              		.cfi_endproc
 2191              	.LFE27:
 2193              		.section	.text.XL_Configure_ID,"ax",%progbits
 2194              		.align	1
 2195              		.global	XL_Configure_ID
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu fpv4-sp-d16
 2201              	XL_Configure_ID:
 2202              	.LFB28:
 626:Src/xl_320.c  ****   if(id > 252){
 2203              		.loc 1 626 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 0
 2206              		@ frame_needed = 0, uses_anonymous_args = 0
 2207              	.LVL189:
 627:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2208              		.loc 1 627 0
 2209 0000 FC29     		cmp	r1, #252
 2210 0002 04D9     		bls	.L197
 628:Src/xl_320.c  ****     return 1;
 2211              		.loc 1 628 0
 2212 0004 074B     		ldr	r3, .L202
 2213 0006 0022     		movs	r2, #0
 2214 0008 1A80     		strh	r2, [r3]	@ movhi
 629:Src/xl_320.c  ****   }
 2215              		.loc 1 629 0
 2216 000a 0120     		movs	r0, #1
 2217              	.LVL190:
 632:Src/xl_320.c  **** 
 2218              		.loc 1 632 0
 2219 000c 7047     		bx	lr
 2220              	.LVL191:
 2221              	.L197:
 626:Src/xl_320.c  ****   if(id > 252){
 2222              		.loc 1 626 0
 2223 000e 00B5     		push	{lr}
 2224              	.LCFI41:
ARM GAS  /tmp/ccuthlll.s 			page 57


 2225              		.cfi_def_cfa_offset 4
 2226              		.cfi_offset 14, -4
 2227 0010 83B0     		sub	sp, sp, #12
 2228              	.LCFI42:
 2229              		.cfi_def_cfa_offset 16
 2230 0012 0A46     		mov	r2, r1
 631:Src/xl_320.c  **** }
 2231              		.loc 1 631 0
 2232 0014 0123     		movs	r3, #1
 2233 0016 0093     		str	r3, [sp]
 2234 0018 0021     		movs	r1, #0
 2235              	.LVL192:
 2236 001a FFF7FEFF 		bl	XL_Write
 2237              	.LVL193:
 632:Src/xl_320.c  **** 
 2238              		.loc 1 632 0
 2239 001e 03B0     		add	sp, sp, #12
 2240              	.LCFI43:
 2241              		.cfi_def_cfa_offset 4
 2242              		@ sp needed
 2243 0020 5DF804FB 		ldr	pc, [sp], #4
 2244              	.L203:
 2245              		.align	2
 2246              	.L202:
 2247 0024 00000000 		.word	.LANCHOR1
 2248              		.cfi_endproc
 2249              	.LFE28:
 2251              		.section	.text.XL_Configure_Return_Delay_Time,"ax",%progbits
 2252              		.align	1
 2253              		.global	XL_Configure_Return_Delay_Time
 2254              		.syntax unified
 2255              		.thumb
 2256              		.thumb_func
 2257              		.fpu fpv4-sp-d16
 2259              	XL_Configure_Return_Delay_Time:
 2260              	.LFB30:
 642:Src/xl_320.c  ****   if(delay > 0xFE){
 2261              		.loc 1 642 0
 2262              		.cfi_startproc
 2263              		@ args = 0, pretend = 0, frame = 0
 2264              		@ frame_needed = 0, uses_anonymous_args = 0
 2265              	.LVL194:
 643:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2266              		.loc 1 643 0
 2267 0000 FF29     		cmp	r1, #255
 2268 0002 0AD0     		beq	.L210
 642:Src/xl_320.c  ****   if(delay > 0xFE){
 2269              		.loc 1 642 0
 2270 0004 00B5     		push	{lr}
 2271              	.LCFI44:
 2272              		.cfi_def_cfa_offset 4
 2273              		.cfi_offset 14, -4
 2274 0006 83B0     		sub	sp, sp, #12
 2275              	.LCFI45:
 2276              		.cfi_def_cfa_offset 16
 2277 0008 0A46     		mov	r2, r1
 647:Src/xl_320.c  **** }
ARM GAS  /tmp/ccuthlll.s 			page 58


 2278              		.loc 1 647 0
 2279 000a 0123     		movs	r3, #1
 2280 000c 0093     		str	r3, [sp]
 2281 000e 0221     		movs	r1, #2
 2282              	.LVL195:
 2283 0010 FFF7FEFF 		bl	XL_Write
 2284              	.LVL196:
 648:Src/xl_320.c  **** 
 2285              		.loc 1 648 0
 2286 0014 03B0     		add	sp, sp, #12
 2287              	.LCFI46:
 2288              		.cfi_def_cfa_offset 4
 2289              		@ sp needed
 2290 0016 5DF804FB 		ldr	pc, [sp], #4
 2291              	.LVL197:
 2292              	.L210:
 2293              	.LCFI47:
 2294              		.cfi_def_cfa_offset 0
 2295              		.cfi_restore 14
 644:Src/xl_320.c  ****     return 1;
 2296              		.loc 1 644 0
 2297 001a 024B     		ldr	r3, .L211
 2298 001c 0022     		movs	r2, #0
 2299 001e 1A80     		strh	r2, [r3]	@ movhi
 645:Src/xl_320.c  ****   }
 2300              		.loc 1 645 0
 2301 0020 0120     		movs	r0, #1
 2302              	.LVL198:
 648:Src/xl_320.c  **** 
 2303              		.loc 1 648 0
 2304 0022 7047     		bx	lr
 2305              	.L212:
 2306              		.align	2
 2307              	.L211:
 2308 0024 00000000 		.word	.LANCHOR1
 2309              		.cfi_endproc
 2310              	.LFE30:
 2312              		.section	.text.XL_Configure_CW_Angle_Limit,"ax",%progbits
 2313              		.align	1
 2314              		.global	XL_Configure_CW_Angle_Limit
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2318              		.fpu fpv4-sp-d16
 2320              	XL_Configure_CW_Angle_Limit:
 2321              	.LFB31:
 650:Src/xl_320.c  ****   if(angle > 0x3FF){
 2322              		.loc 1 650 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326              	.LVL199:
 651:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2327              		.loc 1 651 0
 2328 0000 B1F5806F 		cmp	r1, #1024
 2329 0004 04D3     		bcc	.L214
 652:Src/xl_320.c  ****     return 1;
ARM GAS  /tmp/ccuthlll.s 			page 59


 2330              		.loc 1 652 0
 2331 0006 084B     		ldr	r3, .L219
 2332 0008 0022     		movs	r2, #0
 2333 000a 1A80     		strh	r2, [r3]	@ movhi
 653:Src/xl_320.c  ****   }
 2334              		.loc 1 653 0
 2335 000c 0120     		movs	r0, #1
 2336              	.LVL200:
 656:Src/xl_320.c  **** 
 2337              		.loc 1 656 0
 2338 000e 7047     		bx	lr
 2339              	.LVL201:
 2340              	.L214:
 650:Src/xl_320.c  ****   if(angle > 0x3FF){
 2341              		.loc 1 650 0
 2342 0010 00B5     		push	{lr}
 2343              	.LCFI48:
 2344              		.cfi_def_cfa_offset 4
 2345              		.cfi_offset 14, -4
 2346 0012 83B0     		sub	sp, sp, #12
 2347              	.LCFI49:
 2348              		.cfi_def_cfa_offset 16
 2349 0014 0A46     		mov	r2, r1
 655:Src/xl_320.c  **** }
 2350              		.loc 1 655 0
 2351 0016 0123     		movs	r3, #1
 2352 0018 0093     		str	r3, [sp]
 2353 001a 0223     		movs	r3, #2
 2354 001c 0321     		movs	r1, #3
 2355              	.LVL202:
 2356 001e FFF7FEFF 		bl	XL_Write
 2357              	.LVL203:
 656:Src/xl_320.c  **** 
 2358              		.loc 1 656 0
 2359 0022 03B0     		add	sp, sp, #12
 2360              	.LCFI50:
 2361              		.cfi_def_cfa_offset 4
 2362              		@ sp needed
 2363 0024 5DF804FB 		ldr	pc, [sp], #4
 2364              	.L220:
 2365              		.align	2
 2366              	.L219:
 2367 0028 00000000 		.word	.LANCHOR1
 2368              		.cfi_endproc
 2369              	.LFE31:
 2371              		.section	.text.XL_Configure_CCW_Angle_Limit,"ax",%progbits
 2372              		.align	1
 2373              		.global	XL_Configure_CCW_Angle_Limit
 2374              		.syntax unified
 2375              		.thumb
 2376              		.thumb_func
 2377              		.fpu fpv4-sp-d16
 2379              	XL_Configure_CCW_Angle_Limit:
 2380              	.LFB32:
 658:Src/xl_320.c  ****   if(angle > 0x3FF){
 2381              		.loc 1 658 0
 2382              		.cfi_startproc
ARM GAS  /tmp/ccuthlll.s 			page 60


 2383              		@ args = 0, pretend = 0, frame = 0
 2384              		@ frame_needed = 0, uses_anonymous_args = 0
 2385              	.LVL204:
 659:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2386              		.loc 1 659 0
 2387 0000 B1F5806F 		cmp	r1, #1024
 2388 0004 04D3     		bcc	.L222
 660:Src/xl_320.c  ****     return 1;
 2389              		.loc 1 660 0
 2390 0006 084B     		ldr	r3, .L227
 2391 0008 0022     		movs	r2, #0
 2392 000a 1A80     		strh	r2, [r3]	@ movhi
 661:Src/xl_320.c  ****   }
 2393              		.loc 1 661 0
 2394 000c 0120     		movs	r0, #1
 2395              	.LVL205:
 664:Src/xl_320.c  ****   
 2396              		.loc 1 664 0
 2397 000e 7047     		bx	lr
 2398              	.LVL206:
 2399              	.L222:
 658:Src/xl_320.c  ****   if(angle > 0x3FF){
 2400              		.loc 1 658 0
 2401 0010 00B5     		push	{lr}
 2402              	.LCFI51:
 2403              		.cfi_def_cfa_offset 4
 2404              		.cfi_offset 14, -4
 2405 0012 83B0     		sub	sp, sp, #12
 2406              	.LCFI52:
 2407              		.cfi_def_cfa_offset 16
 2408 0014 0A46     		mov	r2, r1
 663:Src/xl_320.c  **** }
 2409              		.loc 1 663 0
 2410 0016 0123     		movs	r3, #1
 2411 0018 0093     		str	r3, [sp]
 2412 001a 0223     		movs	r3, #2
 2413 001c 0421     		movs	r1, #4
 2414              	.LVL207:
 2415 001e FFF7FEFF 		bl	XL_Write
 2416              	.LVL208:
 664:Src/xl_320.c  ****   
 2417              		.loc 1 664 0
 2418 0022 03B0     		add	sp, sp, #12
 2419              	.LCFI53:
 2420              		.cfi_def_cfa_offset 4
 2421              		@ sp needed
 2422 0024 5DF804FB 		ldr	pc, [sp], #4
 2423              	.L228:
 2424              		.align	2
 2425              	.L227:
 2426 0028 00000000 		.word	.LANCHOR1
 2427              		.cfi_endproc
 2428              	.LFE32:
 2430              		.section	.text.XL_Configure_Limit_Temperature,"ax",%progbits
 2431              		.align	1
 2432              		.global	XL_Configure_Limit_Temperature
 2433              		.syntax unified
ARM GAS  /tmp/ccuthlll.s 			page 61


 2434              		.thumb
 2435              		.thumb_func
 2436              		.fpu fpv4-sp-d16
 2438              	XL_Configure_Limit_Temperature:
 2439              	.LFB34:
 674:Src/xl_320.c  ****   if(temp > 150){
 2440              		.loc 1 674 0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444              	.LVL209:
 675:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2445              		.loc 1 675 0
 2446 0000 9629     		cmp	r1, #150
 2447 0002 04D9     		bls	.L230
 676:Src/xl_320.c  ****     return 1;
 2448              		.loc 1 676 0
 2449 0004 074B     		ldr	r3, .L235
 2450 0006 0022     		movs	r2, #0
 2451 0008 1A80     		strh	r2, [r3]	@ movhi
 677:Src/xl_320.c  ****   }
 2452              		.loc 1 677 0
 2453 000a 0120     		movs	r0, #1
 2454              	.LVL210:
 680:Src/xl_320.c  **** 
 2455              		.loc 1 680 0
 2456 000c 7047     		bx	lr
 2457              	.LVL211:
 2458              	.L230:
 674:Src/xl_320.c  ****   if(temp > 150){
 2459              		.loc 1 674 0
 2460 000e 00B5     		push	{lr}
 2461              	.LCFI54:
 2462              		.cfi_def_cfa_offset 4
 2463              		.cfi_offset 14, -4
 2464 0010 83B0     		sub	sp, sp, #12
 2465              	.LCFI55:
 2466              		.cfi_def_cfa_offset 16
 2467 0012 0A46     		mov	r2, r1
 679:Src/xl_320.c  **** }
 2468              		.loc 1 679 0
 2469 0014 0123     		movs	r3, #1
 2470 0016 0093     		str	r3, [sp]
 2471 0018 0621     		movs	r1, #6
 2472              	.LVL212:
 2473 001a FFF7FEFF 		bl	XL_Write
 2474              	.LVL213:
 680:Src/xl_320.c  **** 
 2475              		.loc 1 680 0
 2476 001e 03B0     		add	sp, sp, #12
 2477              	.LCFI56:
 2478              		.cfi_def_cfa_offset 4
 2479              		@ sp needed
 2480 0020 5DF804FB 		ldr	pc, [sp], #4
 2481              	.L236:
 2482              		.align	2
 2483              	.L235:
ARM GAS  /tmp/ccuthlll.s 			page 62


 2484 0024 00000000 		.word	.LANCHOR1
 2485              		.cfi_endproc
 2486              	.LFE34:
 2488              		.section	.text.XL_Configure_Lower_Limit_Voltage,"ax",%progbits
 2489              		.align	1
 2490              		.global	XL_Configure_Lower_Limit_Voltage
 2491              		.syntax unified
 2492              		.thumb
 2493              		.thumb_func
 2494              		.fpu fpv4-sp-d16
 2496              	XL_Configure_Lower_Limit_Voltage:
 2497              	.LFB35:
 682:Src/xl_320.c  ****   if(voltage < 50 || voltage > 250){
 2498              		.loc 1 682 0
 2499              		.cfi_startproc
 2500              		@ args = 0, pretend = 0, frame = 0
 2501              		@ frame_needed = 0, uses_anonymous_args = 0
 2502              	.LVL214:
 683:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2503              		.loc 1 683 0
 2504 0000 A1F13203 		sub	r3, r1, #50
 2505 0004 DBB2     		uxtb	r3, r3
 2506 0006 C82B     		cmp	r3, #200
 2507 0008 04D9     		bls	.L238
 684:Src/xl_320.c  ****     return 1;
 2508              		.loc 1 684 0
 2509 000a 084B     		ldr	r3, .L243
 2510 000c 0022     		movs	r2, #0
 2511 000e 1A80     		strh	r2, [r3]	@ movhi
 685:Src/xl_320.c  ****   }
 2512              		.loc 1 685 0
 2513 0010 0120     		movs	r0, #1
 2514              	.LVL215:
 688:Src/xl_320.c  **** 
 2515              		.loc 1 688 0
 2516 0012 7047     		bx	lr
 2517              	.LVL216:
 2518              	.L238:
 682:Src/xl_320.c  ****   if(voltage < 50 || voltage > 250){
 2519              		.loc 1 682 0
 2520 0014 00B5     		push	{lr}
 2521              	.LCFI57:
 2522              		.cfi_def_cfa_offset 4
 2523              		.cfi_offset 14, -4
 2524 0016 83B0     		sub	sp, sp, #12
 2525              	.LCFI58:
 2526              		.cfi_def_cfa_offset 16
 2527 0018 0A46     		mov	r2, r1
 687:Src/xl_320.c  **** }
 2528              		.loc 1 687 0
 2529 001a 0123     		movs	r3, #1
 2530 001c 0093     		str	r3, [sp]
 2531 001e 0721     		movs	r1, #7
 2532              	.LVL217:
 2533 0020 FFF7FEFF 		bl	XL_Write
 2534              	.LVL218:
 688:Src/xl_320.c  **** 
ARM GAS  /tmp/ccuthlll.s 			page 63


 2535              		.loc 1 688 0
 2536 0024 03B0     		add	sp, sp, #12
 2537              	.LCFI59:
 2538              		.cfi_def_cfa_offset 4
 2539              		@ sp needed
 2540 0026 5DF804FB 		ldr	pc, [sp], #4
 2541              	.L244:
 2542 002a 00BF     		.align	2
 2543              	.L243:
 2544 002c 00000000 		.word	.LANCHOR1
 2545              		.cfi_endproc
 2546              	.LFE35:
 2548              		.section	.text.XL_Configure_Upper_Limit_Voltage,"ax",%progbits
 2549              		.align	1
 2550              		.global	XL_Configure_Upper_Limit_Voltage
 2551              		.syntax unified
 2552              		.thumb
 2553              		.thumb_func
 2554              		.fpu fpv4-sp-d16
 2556              	XL_Configure_Upper_Limit_Voltage:
 2557              	.LFB36:
 690:Src/xl_320.c  ****   if(voltage < 50 || voltage > 250){
 2558              		.loc 1 690 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 0
 2561              		@ frame_needed = 0, uses_anonymous_args = 0
 2562              	.LVL219:
 691:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2563              		.loc 1 691 0
 2564 0000 A1F13203 		sub	r3, r1, #50
 2565 0004 DBB2     		uxtb	r3, r3
 2566 0006 C82B     		cmp	r3, #200
 2567 0008 04D9     		bls	.L246
 692:Src/xl_320.c  ****     return 1;
 2568              		.loc 1 692 0
 2569 000a 084B     		ldr	r3, .L251
 2570 000c 0022     		movs	r2, #0
 2571 000e 1A80     		strh	r2, [r3]	@ movhi
 693:Src/xl_320.c  ****   }
 2572              		.loc 1 693 0
 2573 0010 0120     		movs	r0, #1
 2574              	.LVL220:
 696:Src/xl_320.c  **** 
 2575              		.loc 1 696 0
 2576 0012 7047     		bx	lr
 2577              	.LVL221:
 2578              	.L246:
 690:Src/xl_320.c  ****   if(voltage < 50 || voltage > 250){
 2579              		.loc 1 690 0
 2580 0014 00B5     		push	{lr}
 2581              	.LCFI60:
 2582              		.cfi_def_cfa_offset 4
 2583              		.cfi_offset 14, -4
 2584 0016 83B0     		sub	sp, sp, #12
 2585              	.LCFI61:
 2586              		.cfi_def_cfa_offset 16
 2587 0018 0A46     		mov	r2, r1
ARM GAS  /tmp/ccuthlll.s 			page 64


 695:Src/xl_320.c  **** }
 2588              		.loc 1 695 0
 2589 001a 0123     		movs	r3, #1
 2590 001c 0093     		str	r3, [sp]
 2591 001e 0821     		movs	r1, #8
 2592              	.LVL222:
 2593 0020 FFF7FEFF 		bl	XL_Write
 2594              	.LVL223:
 696:Src/xl_320.c  **** 
 2595              		.loc 1 696 0
 2596 0024 03B0     		add	sp, sp, #12
 2597              	.LCFI62:
 2598              		.cfi_def_cfa_offset 4
 2599              		@ sp needed
 2600 0026 5DF804FB 		ldr	pc, [sp], #4
 2601              	.L252:
 2602 002a 00BF     		.align	2
 2603              	.L251:
 2604 002c 00000000 		.word	.LANCHOR1
 2605              		.cfi_endproc
 2606              	.LFE36:
 2608              		.section	.text.XL_Configure_Max_Torque,"ax",%progbits
 2609              		.align	1
 2610              		.global	XL_Configure_Max_Torque
 2611              		.syntax unified
 2612              		.thumb
 2613              		.thumb_func
 2614              		.fpu fpv4-sp-d16
 2616              	XL_Configure_Max_Torque:
 2617              	.LFB37:
 698:Src/xl_320.c  ****   if(max_torque > 1023){
 2618              		.loc 1 698 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622              	.LVL224:
 699:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2623              		.loc 1 699 0
 2624 0000 B1F5806F 		cmp	r1, #1024
 2625 0004 04D3     		bcc	.L254
 700:Src/xl_320.c  ****     return 1;
 2626              		.loc 1 700 0
 2627 0006 084B     		ldr	r3, .L259
 2628 0008 0022     		movs	r2, #0
 2629 000a 1A80     		strh	r2, [r3]	@ movhi
 701:Src/xl_320.c  ****   }
 2630              		.loc 1 701 0
 2631 000c 0120     		movs	r0, #1
 2632              	.LVL225:
 704:Src/xl_320.c  **** 
 2633              		.loc 1 704 0
 2634 000e 7047     		bx	lr
 2635              	.LVL226:
 2636              	.L254:
 698:Src/xl_320.c  ****   if(max_torque > 1023){
 2637              		.loc 1 698 0
 2638 0010 00B5     		push	{lr}
ARM GAS  /tmp/ccuthlll.s 			page 65


 2639              	.LCFI63:
 2640              		.cfi_def_cfa_offset 4
 2641              		.cfi_offset 14, -4
 2642 0012 83B0     		sub	sp, sp, #12
 2643              	.LCFI64:
 2644              		.cfi_def_cfa_offset 16
 2645 0014 0A46     		mov	r2, r1
 703:Src/xl_320.c  **** }
 2646              		.loc 1 703 0
 2647 0016 0123     		movs	r3, #1
 2648 0018 0093     		str	r3, [sp]
 2649 001a 0223     		movs	r3, #2
 2650 001c 0921     		movs	r1, #9
 2651              	.LVL227:
 2652 001e FFF7FEFF 		bl	XL_Write
 2653              	.LVL228:
 704:Src/xl_320.c  **** 
 2654              		.loc 1 704 0
 2655 0022 03B0     		add	sp, sp, #12
 2656              	.LCFI65:
 2657              		.cfi_def_cfa_offset 4
 2658              		@ sp needed
 2659 0024 5DF804FB 		ldr	pc, [sp], #4
 2660              	.L260:
 2661              		.align	2
 2662              	.L259:
 2663 0028 00000000 		.word	.LANCHOR1
 2664              		.cfi_endproc
 2665              	.LFE37:
 2667              		.section	.text.XL_Configure_Alarm_Shutdown,"ax",%progbits
 2668              		.align	1
 2669              		.global	XL_Configure_Alarm_Shutdown
 2670              		.syntax unified
 2671              		.thumb
 2672              		.thumb_func
 2673              		.fpu fpv4-sp-d16
 2675              	XL_Configure_Alarm_Shutdown:
 2676              	.LFB39:
 714:Src/xl_320.c  ****   if(alarm > XL_ERROR_OVER_9000){
 2677              		.loc 1 714 0
 2678              		.cfi_startproc
 2679              		@ args = 0, pretend = 0, frame = 0
 2680              		@ frame_needed = 0, uses_anonymous_args = 0
 2681              	.LVL229:
 715:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2682              		.loc 1 715 0
 2683 0000 0729     		cmp	r1, #7
 2684 0002 04D9     		bls	.L262
 716:Src/xl_320.c  ****     return 1;
 2685              		.loc 1 716 0
 2686 0004 074B     		ldr	r3, .L267
 2687 0006 0022     		movs	r2, #0
 2688 0008 1A80     		strh	r2, [r3]	@ movhi
 717:Src/xl_320.c  ****   }
 2689              		.loc 1 717 0
 2690 000a 0120     		movs	r0, #1
 2691              	.LVL230:
ARM GAS  /tmp/ccuthlll.s 			page 66


 720:Src/xl_320.c  **** 
 2692              		.loc 1 720 0
 2693 000c 7047     		bx	lr
 2694              	.LVL231:
 2695              	.L262:
 714:Src/xl_320.c  ****   if(alarm > XL_ERROR_OVER_9000){
 2696              		.loc 1 714 0
 2697 000e 00B5     		push	{lr}
 2698              	.LCFI66:
 2699              		.cfi_def_cfa_offset 4
 2700              		.cfi_offset 14, -4
 2701 0010 83B0     		sub	sp, sp, #12
 2702              	.LCFI67:
 2703              		.cfi_def_cfa_offset 16
 2704 0012 0A46     		mov	r2, r1
 719:Src/xl_320.c  **** }
 2705              		.loc 1 719 0
 2706 0014 0123     		movs	r3, #1
 2707 0016 0093     		str	r3, [sp]
 2708 0018 0B21     		movs	r1, #11
 2709              	.LVL232:
 2710 001a FFF7FEFF 		bl	XL_Write
 2711              	.LVL233:
 720:Src/xl_320.c  **** 
 2712              		.loc 1 720 0
 2713 001e 03B0     		add	sp, sp, #12
 2714              	.LCFI68:
 2715              		.cfi_def_cfa_offset 4
 2716              		@ sp needed
 2717 0020 5DF804FB 		ldr	pc, [sp], #4
 2718              	.L268:
 2719              		.align	2
 2720              	.L267:
 2721 0024 00000000 		.word	.LANCHOR1
 2722              		.cfi_endproc
 2723              	.LFE39:
 2725              		.section	.text.XL_Power_On,"ax",%progbits
 2726              		.align	1
 2727              		.global	XL_Power_On
 2728              		.syntax unified
 2729              		.thumb
 2730              		.thumb_func
 2731              		.fpu fpv4-sp-d16
 2733              	XL_Power_On:
 2734              	.LFB40:
 727:Src/xl_320.c  ****   return XL_Write(servo, XL_TORQUE_ENABLE, 1, 1, now);
 2735              		.loc 1 727 0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 2739              	.LVL234:
 2740 0000 00B5     		push	{lr}
 2741              	.LCFI69:
 2742              		.cfi_def_cfa_offset 4
 2743              		.cfi_offset 14, -4
 2744 0002 83B0     		sub	sp, sp, #12
 2745              	.LCFI70:
ARM GAS  /tmp/ccuthlll.s 			page 67


 2746              		.cfi_def_cfa_offset 16
 728:Src/xl_320.c  **** }
 2747              		.loc 1 728 0
 2748 0004 0091     		str	r1, [sp]
 2749 0006 0123     		movs	r3, #1
 2750 0008 1A46     		mov	r2, r3
 2751 000a 0E21     		movs	r1, #14
 2752              	.LVL235:
 2753 000c FFF7FEFF 		bl	XL_Write
 2754              	.LVL236:
 729:Src/xl_320.c  **** 
 2755              		.loc 1 729 0
 2756 0010 03B0     		add	sp, sp, #12
 2757              	.LCFI71:
 2758              		.cfi_def_cfa_offset 4
 2759              		@ sp needed
 2760 0012 5DF804FB 		ldr	pc, [sp], #4
 2761              		.cfi_endproc
 2762              	.LFE40:
 2764              		.section	.text.XL_Power_Off,"ax",%progbits
 2765              		.align	1
 2766              		.global	XL_Power_Off
 2767              		.syntax unified
 2768              		.thumb
 2769              		.thumb_func
 2770              		.fpu fpv4-sp-d16
 2772              	XL_Power_Off:
 2773              	.LFB41:
 731:Src/xl_320.c  ****   return XL_Write(servo, XL_TORQUE_ENABLE, 0, 1, now);
 2774              		.loc 1 731 0
 2775              		.cfi_startproc
 2776              		@ args = 0, pretend = 0, frame = 0
 2777              		@ frame_needed = 0, uses_anonymous_args = 0
 2778              	.LVL237:
 2779 0000 00B5     		push	{lr}
 2780              	.LCFI72:
 2781              		.cfi_def_cfa_offset 4
 2782              		.cfi_offset 14, -4
 2783 0002 83B0     		sub	sp, sp, #12
 2784              	.LCFI73:
 2785              		.cfi_def_cfa_offset 16
 732:Src/xl_320.c  **** }
 2786              		.loc 1 732 0
 2787 0004 0091     		str	r1, [sp]
 2788 0006 0123     		movs	r3, #1
 2789 0008 0022     		movs	r2, #0
 2790 000a 0E21     		movs	r1, #14
 2791              	.LVL238:
 2792 000c FFF7FEFF 		bl	XL_Write
 2793              	.LVL239:
 733:Src/xl_320.c  **** 
 2794              		.loc 1 733 0
 2795 0010 03B0     		add	sp, sp, #12
 2796              	.LCFI74:
 2797              		.cfi_def_cfa_offset 4
 2798              		@ sp needed
 2799 0012 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccuthlll.s 			page 68


 2800              		.cfi_endproc
 2801              	.LFE41:
 2803              		.section	.text.XL_Set_LED,"ax",%progbits
 2804              		.align	1
 2805              		.global	XL_Set_LED
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2809              		.fpu fpv4-sp-d16
 2811              	XL_Set_LED:
 2812              	.LFB42:
 735:Src/xl_320.c  ****   if((uint8_t) color > 7){
 2813              		.loc 1 735 0
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 0
 2816              		@ frame_needed = 0, uses_anonymous_args = 0
 2817              	.LVL240:
 736:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2818              		.loc 1 736 0
 2819 0000 0729     		cmp	r1, #7
 2820 0002 04D9     		bls	.L274
 737:Src/xl_320.c  ****     return 1;
 2821              		.loc 1 737 0
 2822 0004 084B     		ldr	r3, .L279
 2823 0006 0022     		movs	r2, #0
 2824              	.LVL241:
 2825 0008 1A80     		strh	r2, [r3]	@ movhi
 738:Src/xl_320.c  ****   }
 2826              		.loc 1 738 0
 2827 000a 0120     		movs	r0, #1
 2828              	.LVL242:
 741:Src/xl_320.c  **** 
 2829              		.loc 1 741 0
 2830 000c 7047     		bx	lr
 2831              	.LVL243:
 2832              	.L274:
 735:Src/xl_320.c  ****   if((uint8_t) color > 7){
 2833              		.loc 1 735 0
 2834 000e 00B5     		push	{lr}
 2835              	.LCFI75:
 2836              		.cfi_def_cfa_offset 4
 2837              		.cfi_offset 14, -4
 2838 0010 83B0     		sub	sp, sp, #12
 2839              	.LCFI76:
 2840              		.cfi_def_cfa_offset 16
 2841 0012 1346     		mov	r3, r2
 2842 0014 0A46     		mov	r2, r1
 2843              	.LVL244:
 740:Src/xl_320.c  **** }
 2844              		.loc 1 740 0
 2845 0016 0093     		str	r3, [sp]
 2846 0018 0123     		movs	r3, #1
 2847 001a 0F21     		movs	r1, #15
 2848              	.LVL245:
 2849 001c FFF7FEFF 		bl	XL_Write
 2850              	.LVL246:
 741:Src/xl_320.c  **** 
ARM GAS  /tmp/ccuthlll.s 			page 69


 2851              		.loc 1 741 0
 2852 0020 03B0     		add	sp, sp, #12
 2853              	.LCFI77:
 2854              		.cfi_def_cfa_offset 4
 2855              		@ sp needed
 2856 0022 5DF804FB 		ldr	pc, [sp], #4
 2857              	.L280:
 2858 0026 00BF     		.align	2
 2859              	.L279:
 2860 0028 00000000 		.word	.LANCHOR1
 2861              		.cfi_endproc
 2862              	.LFE42:
 2864              		.section	.text.XL_Say_Hello,"ax",%progbits
 2865              		.align	1
 2866              		.global	XL_Say_Hello
 2867              		.syntax unified
 2868              		.thumb
 2869              		.thumb_func
 2870              		.fpu fpv4-sp-d16
 2872              	XL_Say_Hello:
 2873              	.LFB22:
 459:Src/xl_320.c  ****   if(XL_Ping(servo) == 1){
 2874              		.loc 1 459 0
 2875              		.cfi_startproc
 2876              		@ args = 0, pretend = 0, frame = 0
 2877              		@ frame_needed = 0, uses_anonymous_args = 0
 2878              	.LVL247:
 2879 0000 70B5     		push	{r4, r5, r6, lr}
 2880              	.LCFI78:
 2881              		.cfi_def_cfa_offset 16
 2882              		.cfi_offset 4, -16
 2883              		.cfi_offset 5, -12
 2884              		.cfi_offset 6, -8
 2885              		.cfi_offset 14, -4
 2886 0002 0446     		mov	r4, r0
 460:Src/xl_320.c  ****     return 1;
 2887              		.loc 1 460 0
 2888 0004 FFF7FEFF 		bl	XL_Ping
 2889              	.LVL248:
 2890 0008 0128     		cmp	r0, #1
 2891 000a 22D0     		beq	.L282
 464:Src/xl_320.c  ****   uint8_t i;
 2892              		.loc 1 464 0
 2893 000c 6368     		ldr	r3, [r4, #4]
 2894 000e 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 2895 0012 13B9     		cbnz	r3, .L286
 2896 0014 0226     		movs	r6, #2
 2897              	.L283:
 2898              	.LVL249:
 466:Src/xl_320.c  ****     XL_Set_LED(servo, color, XL_NOW);
 2899              		.loc 1 466 0 discriminator 4
 2900 0016 0025     		movs	r5, #0
 2901 0018 17E0     		b	.L284
 2902              	.LVL250:
 2903              	.L286:
 464:Src/xl_320.c  ****   uint8_t i;
 2904              		.loc 1 464 0
ARM GAS  /tmp/ccuthlll.s 			page 70


 2905 001a 0126     		movs	r6, #1
 2906 001c FBE7     		b	.L283
 2907              	.LVL251:
 2908              	.L285:
 467:Src/xl_320.c  ****     servo->interface->delay(500);
 2909              		.loc 1 467 0 discriminator 3
 2910 001e 0122     		movs	r2, #1
 2911 0020 3146     		mov	r1, r6
 2912 0022 2046     		mov	r0, r4
 2913 0024 FFF7FEFF 		bl	XL_Set_LED
 2914              	.LVL252:
 468:Src/xl_320.c  ****     XL_Set_LED(servo, XL_LED_OFF, XL_NOW);
 2915              		.loc 1 468 0 discriminator 3
 2916 0028 6368     		ldr	r3, [r4, #4]
 2917 002a DB68     		ldr	r3, [r3, #12]
 2918 002c 4FF4FA70 		mov	r0, #500
 2919 0030 9847     		blx	r3
 2920              	.LVL253:
 469:Src/xl_320.c  ****     servo->interface->delay(500);
 2921              		.loc 1 469 0 discriminator 3
 2922 0032 0122     		movs	r2, #1
 2923 0034 0021     		movs	r1, #0
 2924 0036 2046     		mov	r0, r4
 2925 0038 FFF7FEFF 		bl	XL_Set_LED
 2926              	.LVL254:
 470:Src/xl_320.c  ****   }
 2927              		.loc 1 470 0 discriminator 3
 2928 003c 6368     		ldr	r3, [r4, #4]
 2929 003e DB68     		ldr	r3, [r3, #12]
 2930 0040 4FF4FA70 		mov	r0, #500
 2931 0044 9847     		blx	r3
 2932              	.LVL255:
 466:Src/xl_320.c  ****     XL_Set_LED(servo, color, XL_NOW);
 2933              		.loc 1 466 0 discriminator 3
 2934 0046 0135     		adds	r5, r5, #1
 2935              	.LVL256:
 2936 0048 EDB2     		uxtb	r5, r5
 2937              	.LVL257:
 2938              	.L284:
 466:Src/xl_320.c  ****     XL_Set_LED(servo, color, XL_NOW);
 2939              		.loc 1 466 0 is_stmt 0 discriminator 1
 2940 004a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2941 004c AB42     		cmp	r3, r5
 2942 004e E6D8     		bhi	.L285
 473:Src/xl_320.c  **** }
 2943              		.loc 1 473 0 is_stmt 1
 2944 0050 0020     		movs	r0, #0
 2945              	.LVL258:
 2946              	.L282:
 474:Src/xl_320.c  **** 
 2947              		.loc 1 474 0
 2948 0052 70BD     		pop	{r4, r5, r6, pc}
 2949              		.cfi_endproc
 2950              	.LFE22:
 2952              		.section	.text.XL_Set_D_Gain,"ax",%progbits
 2953              		.align	1
 2954              		.global	XL_Set_D_Gain
ARM GAS  /tmp/ccuthlll.s 			page 71


 2955              		.syntax unified
 2956              		.thumb
 2957              		.thumb_func
 2958              		.fpu fpv4-sp-d16
 2960              	XL_Set_D_Gain:
 2961              	.LFB43:
 743:Src/xl_320.c  ****   if(d_gain > 254){
 2962              		.loc 1 743 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 0
 2965              		@ frame_needed = 0, uses_anonymous_args = 0
 2966              	.LVL259:
 744:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 2967              		.loc 1 744 0
 2968 0000 FF29     		cmp	r1, #255
 2969 0002 0BD0     		beq	.L294
 743:Src/xl_320.c  ****   if(d_gain > 254){
 2970              		.loc 1 743 0
 2971 0004 00B5     		push	{lr}
 2972              	.LCFI79:
 2973              		.cfi_def_cfa_offset 4
 2974              		.cfi_offset 14, -4
 2975 0006 83B0     		sub	sp, sp, #12
 2976              	.LCFI80:
 2977              		.cfi_def_cfa_offset 16
 2978 0008 1346     		mov	r3, r2
 2979 000a 0A46     		mov	r2, r1
 2980              	.LVL260:
 748:Src/xl_320.c  **** }
 2981              		.loc 1 748 0
 2982 000c 0093     		str	r3, [sp]
 2983 000e 0123     		movs	r3, #1
 2984 0010 1021     		movs	r1, #16
 2985              	.LVL261:
 2986 0012 FFF7FEFF 		bl	XL_Write
 2987              	.LVL262:
 749:Src/xl_320.c  **** 
 2988              		.loc 1 749 0
 2989 0016 03B0     		add	sp, sp, #12
 2990              	.LCFI81:
 2991              		.cfi_def_cfa_offset 4
 2992              		@ sp needed
 2993 0018 5DF804FB 		ldr	pc, [sp], #4
 2994              	.LVL263:
 2995              	.L294:
 2996              	.LCFI82:
 2997              		.cfi_def_cfa_offset 0
 2998              		.cfi_restore 14
 745:Src/xl_320.c  ****     return 1;
 2999              		.loc 1 745 0
 3000 001c 024B     		ldr	r3, .L295
 3001 001e 0022     		movs	r2, #0
 3002              	.LVL264:
 3003 0020 1A80     		strh	r2, [r3]	@ movhi
 746:Src/xl_320.c  ****   }
 3004              		.loc 1 746 0
 3005 0022 0120     		movs	r0, #1
ARM GAS  /tmp/ccuthlll.s 			page 72


 3006              	.LVL265:
 749:Src/xl_320.c  **** 
 3007              		.loc 1 749 0
 3008 0024 7047     		bx	lr
 3009              	.L296:
 3010 0026 00BF     		.align	2
 3011              	.L295:
 3012 0028 00000000 		.word	.LANCHOR1
 3013              		.cfi_endproc
 3014              	.LFE43:
 3016              		.section	.text.XL_Set_I_Gain,"ax",%progbits
 3017              		.align	1
 3018              		.global	XL_Set_I_Gain
 3019              		.syntax unified
 3020              		.thumb
 3021              		.thumb_func
 3022              		.fpu fpv4-sp-d16
 3024              	XL_Set_I_Gain:
 3025              	.LFB44:
 751:Src/xl_320.c  ****   if(i_gain > 254){
 3026              		.loc 1 751 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 0, uses_anonymous_args = 0
 3030              	.LVL266:
 752:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3031              		.loc 1 752 0
 3032 0000 FF29     		cmp	r1, #255
 3033 0002 0BD0     		beq	.L303
 751:Src/xl_320.c  ****   if(i_gain > 254){
 3034              		.loc 1 751 0
 3035 0004 00B5     		push	{lr}
 3036              	.LCFI83:
 3037              		.cfi_def_cfa_offset 4
 3038              		.cfi_offset 14, -4
 3039 0006 83B0     		sub	sp, sp, #12
 3040              	.LCFI84:
 3041              		.cfi_def_cfa_offset 16
 3042 0008 1346     		mov	r3, r2
 3043 000a 0A46     		mov	r2, r1
 3044              	.LVL267:
 756:Src/xl_320.c  **** }
 3045              		.loc 1 756 0
 3046 000c 0093     		str	r3, [sp]
 3047 000e 0123     		movs	r3, #1
 3048 0010 1121     		movs	r1, #17
 3049              	.LVL268:
 3050 0012 FFF7FEFF 		bl	XL_Write
 3051              	.LVL269:
 757:Src/xl_320.c  **** 
 3052              		.loc 1 757 0
 3053 0016 03B0     		add	sp, sp, #12
 3054              	.LCFI85:
 3055              		.cfi_def_cfa_offset 4
 3056              		@ sp needed
 3057 0018 5DF804FB 		ldr	pc, [sp], #4
 3058              	.LVL270:
ARM GAS  /tmp/ccuthlll.s 			page 73


 3059              	.L303:
 3060              	.LCFI86:
 3061              		.cfi_def_cfa_offset 0
 3062              		.cfi_restore 14
 753:Src/xl_320.c  ****     return 1;
 3063              		.loc 1 753 0
 3064 001c 024B     		ldr	r3, .L304
 3065 001e 0022     		movs	r2, #0
 3066              	.LVL271:
 3067 0020 1A80     		strh	r2, [r3]	@ movhi
 754:Src/xl_320.c  ****   }
 3068              		.loc 1 754 0
 3069 0022 0120     		movs	r0, #1
 3070              	.LVL272:
 757:Src/xl_320.c  **** 
 3071              		.loc 1 757 0
 3072 0024 7047     		bx	lr
 3073              	.L305:
 3074 0026 00BF     		.align	2
 3075              	.L304:
 3076 0028 00000000 		.word	.LANCHOR1
 3077              		.cfi_endproc
 3078              	.LFE44:
 3080              		.section	.text.XL_Set_P_Gain,"ax",%progbits
 3081              		.align	1
 3082              		.global	XL_Set_P_Gain
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3086              		.fpu fpv4-sp-d16
 3088              	XL_Set_P_Gain:
 3089              	.LFB45:
 759:Src/xl_320.c  ****   if(p_gain > 254){
 3090              		.loc 1 759 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094              	.LVL273:
 760:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3095              		.loc 1 760 0
 3096 0000 FF29     		cmp	r1, #255
 3097 0002 0BD0     		beq	.L312
 759:Src/xl_320.c  ****   if(p_gain > 254){
 3098              		.loc 1 759 0
 3099 0004 00B5     		push	{lr}
 3100              	.LCFI87:
 3101              		.cfi_def_cfa_offset 4
 3102              		.cfi_offset 14, -4
 3103 0006 83B0     		sub	sp, sp, #12
 3104              	.LCFI88:
 3105              		.cfi_def_cfa_offset 16
 3106 0008 1346     		mov	r3, r2
 3107 000a 0A46     		mov	r2, r1
 3108              	.LVL274:
 764:Src/xl_320.c  **** }
 3109              		.loc 1 764 0
 3110 000c 0093     		str	r3, [sp]
ARM GAS  /tmp/ccuthlll.s 			page 74


 3111 000e 0123     		movs	r3, #1
 3112 0010 1221     		movs	r1, #18
 3113              	.LVL275:
 3114 0012 FFF7FEFF 		bl	XL_Write
 3115              	.LVL276:
 765:Src/xl_320.c  **** 
 3116              		.loc 1 765 0
 3117 0016 03B0     		add	sp, sp, #12
 3118              	.LCFI89:
 3119              		.cfi_def_cfa_offset 4
 3120              		@ sp needed
 3121 0018 5DF804FB 		ldr	pc, [sp], #4
 3122              	.LVL277:
 3123              	.L312:
 3124              	.LCFI90:
 3125              		.cfi_def_cfa_offset 0
 3126              		.cfi_restore 14
 761:Src/xl_320.c  ****     return 1;
 3127              		.loc 1 761 0
 3128 001c 024B     		ldr	r3, .L313
 3129 001e 0022     		movs	r2, #0
 3130              	.LVL278:
 3131 0020 1A80     		strh	r2, [r3]	@ movhi
 762:Src/xl_320.c  ****   }
 3132              		.loc 1 762 0
 3133 0022 0120     		movs	r0, #1
 3134              	.LVL279:
 765:Src/xl_320.c  **** 
 3135              		.loc 1 765 0
 3136 0024 7047     		bx	lr
 3137              	.L314:
 3138 0026 00BF     		.align	2
 3139              	.L313:
 3140 0028 00000000 		.word	.LANCHOR1
 3141              		.cfi_endproc
 3142              	.LFE45:
 3144              		.section	.text.XL_Set_Goal_Position,"ax",%progbits
 3145              		.align	1
 3146              		.global	XL_Set_Goal_Position
 3147              		.syntax unified
 3148              		.thumb
 3149              		.thumb_func
 3150              		.fpu fpv4-sp-d16
 3152              	XL_Set_Goal_Position:
 3153              	.LFB46:
 767:Src/xl_320.c  ****   if(position > 1023){
 3154              		.loc 1 767 0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 0
 3157              		@ frame_needed = 0, uses_anonymous_args = 0
 3158              	.LVL280:
 768:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3159              		.loc 1 768 0
 3160 0000 B1F5806F 		cmp	r1, #1024
 3161 0004 04D3     		bcc	.L316
 769:Src/xl_320.c  ****     return 1;
 3162              		.loc 1 769 0
ARM GAS  /tmp/ccuthlll.s 			page 75


 3163 0006 084B     		ldr	r3, .L321
 3164 0008 0022     		movs	r2, #0
 3165              	.LVL281:
 3166 000a 1A80     		strh	r2, [r3]	@ movhi
 770:Src/xl_320.c  ****   }
 3167              		.loc 1 770 0
 3168 000c 0120     		movs	r0, #1
 3169              	.LVL282:
 773:Src/xl_320.c  **** 
 3170              		.loc 1 773 0
 3171 000e 7047     		bx	lr
 3172              	.LVL283:
 3173              	.L316:
 767:Src/xl_320.c  ****   if(position > 1023){
 3174              		.loc 1 767 0
 3175 0010 00B5     		push	{lr}
 3176              	.LCFI91:
 3177              		.cfi_def_cfa_offset 4
 3178              		.cfi_offset 14, -4
 3179 0012 83B0     		sub	sp, sp, #12
 3180              	.LCFI92:
 3181              		.cfi_def_cfa_offset 16
 3182 0014 1346     		mov	r3, r2
 3183 0016 0A46     		mov	r2, r1
 3184              	.LVL284:
 772:Src/xl_320.c  **** }
 3185              		.loc 1 772 0
 3186 0018 0093     		str	r3, [sp]
 3187 001a 0223     		movs	r3, #2
 3188 001c 1321     		movs	r1, #19
 3189              	.LVL285:
 3190 001e FFF7FEFF 		bl	XL_Write
 3191              	.LVL286:
 773:Src/xl_320.c  **** 
 3192              		.loc 1 773 0
 3193 0022 03B0     		add	sp, sp, #12
 3194              	.LCFI93:
 3195              		.cfi_def_cfa_offset 4
 3196              		@ sp needed
 3197 0024 5DF804FB 		ldr	pc, [sp], #4
 3198              	.L322:
 3199              		.align	2
 3200              	.L321:
 3201 0028 00000000 		.word	.LANCHOR1
 3202              		.cfi_endproc
 3203              	.LFE46:
 3205              		.section	.text.XL_Set_Goal_Speed_Join,"ax",%progbits
 3206              		.align	1
 3207              		.global	XL_Set_Goal_Speed_Join
 3208              		.syntax unified
 3209              		.thumb
 3210              		.thumb_func
 3211              		.fpu fpv4-sp-d16
 3213              	XL_Set_Goal_Speed_Join:
 3214              	.LFB47:
 775:Src/xl_320.c  ****   if(speed > 1023){
 3215              		.loc 1 775 0
ARM GAS  /tmp/ccuthlll.s 			page 76


 3216              		.cfi_startproc
 3217              		@ args = 0, pretend = 0, frame = 0
 3218              		@ frame_needed = 0, uses_anonymous_args = 0
 3219              	.LVL287:
 776:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3220              		.loc 1 776 0
 3221 0000 B1F5806F 		cmp	r1, #1024
 3222 0004 04D3     		bcc	.L324
 777:Src/xl_320.c  ****     return 1;
 3223              		.loc 1 777 0
 3224 0006 084B     		ldr	r3, .L329
 3225 0008 0022     		movs	r2, #0
 3226              	.LVL288:
 3227 000a 1A80     		strh	r2, [r3]	@ movhi
 778:Src/xl_320.c  ****   }
 3228              		.loc 1 778 0
 3229 000c 0120     		movs	r0, #1
 3230              	.LVL289:
 781:Src/xl_320.c  **** 
 3231              		.loc 1 781 0
 3232 000e 7047     		bx	lr
 3233              	.LVL290:
 3234              	.L324:
 775:Src/xl_320.c  ****   if(speed > 1023){
 3235              		.loc 1 775 0
 3236 0010 00B5     		push	{lr}
 3237              	.LCFI94:
 3238              		.cfi_def_cfa_offset 4
 3239              		.cfi_offset 14, -4
 3240 0012 83B0     		sub	sp, sp, #12
 3241              	.LCFI95:
 3242              		.cfi_def_cfa_offset 16
 3243 0014 1346     		mov	r3, r2
 3244 0016 0A46     		mov	r2, r1
 3245              	.LVL291:
 780:Src/xl_320.c  **** }
 3246              		.loc 1 780 0
 3247 0018 0093     		str	r3, [sp]
 3248 001a 0223     		movs	r3, #2
 3249 001c 1421     		movs	r1, #20
 3250              	.LVL292:
 3251 001e FFF7FEFF 		bl	XL_Write
 3252              	.LVL293:
 781:Src/xl_320.c  **** 
 3253              		.loc 1 781 0
 3254 0022 03B0     		add	sp, sp, #12
 3255              	.LCFI96:
 3256              		.cfi_def_cfa_offset 4
 3257              		@ sp needed
 3258 0024 5DF804FB 		ldr	pc, [sp], #4
 3259              	.L330:
 3260              		.align	2
 3261              	.L329:
 3262 0028 00000000 		.word	.LANCHOR1
 3263              		.cfi_endproc
 3264              	.LFE47:
 3266              		.section	.text.XL_Set_Goal_Speed_Wheel,"ax",%progbits
ARM GAS  /tmp/ccuthlll.s 			page 77


 3267              		.align	1
 3268              		.global	XL_Set_Goal_Speed_Wheel
 3269              		.syntax unified
 3270              		.thumb
 3271              		.thumb_func
 3272              		.fpu fpv4-sp-d16
 3274              	XL_Set_Goal_Speed_Wheel:
 3275              	.LFB48:
 783:Src/xl_320.c  ****   if(speed > 1023){
 3276              		.loc 1 783 0
 3277              		.cfi_startproc
 3278              		@ args = 0, pretend = 0, frame = 0
 3279              		@ frame_needed = 0, uses_anonymous_args = 0
 3280              	.LVL294:
 784:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3281              		.loc 1 784 0
 3282 0000 B1F5806F 		cmp	r1, #1024
 3283 0004 07D2     		bcs	.L341
 788:Src/xl_320.c  ****   case XL_CLOCKWISE:
 3284              		.loc 1 788 0
 3285 0006 5AB1     		cbz	r2, .L335
 3286 0008 012A     		cmp	r2, #1
 3287 000a 0CD0     		beq	.L336
 795:Src/xl_320.c  ****     return 1;
 3288              		.loc 1 795 0
 3289 000c 0B4B     		ldr	r3, .L342
 3290              	.LVL295:
 3291 000e 0022     		movs	r2, #0
 3292              	.LVL296:
 3293 0010 1A80     		strh	r2, [r3]	@ movhi
 796:Src/xl_320.c  ****     break;
 3294              		.loc 1 796 0
 3295 0012 0120     		movs	r0, #1
 3296              	.LVL297:
 800:Src/xl_320.c  **** 
 3297              		.loc 1 800 0
 3298 0014 7047     		bx	lr
 3299              	.LVL298:
 3300              	.L341:
 785:Src/xl_320.c  ****     return 1;
 3301              		.loc 1 785 0
 3302 0016 094B     		ldr	r3, .L342
 3303              	.LVL299:
 3304 0018 0022     		movs	r2, #0
 3305              	.LVL300:
 3306 001a 1A80     		strh	r2, [r3]	@ movhi
 786:Src/xl_320.c  ****   }
 3307              		.loc 1 786 0
 3308 001c 0120     		movs	r0, #1
 3309              	.LVL301:
 3310 001e 7047     		bx	lr
 3311              	.LVL302:
 3312              	.L335:
 790:Src/xl_320.c  ****     break;
 3313              		.loc 1 790 0
 3314 0020 01F58061 		add	r1, r1, #1024
 3315              	.LVL303:
ARM GAS  /tmp/ccuthlll.s 			page 78


 3316 0024 89B2     		uxth	r1, r1
 3317              	.LVL304:
 3318              	.L336:
 783:Src/xl_320.c  ****   if(speed > 1023){
 3319              		.loc 1 783 0
 3320 0026 00B5     		push	{lr}
 3321              	.LCFI97:
 3322              		.cfi_def_cfa_offset 4
 3323              		.cfi_offset 14, -4
 3324 0028 83B0     		sub	sp, sp, #12
 3325              	.LCFI98:
 3326              		.cfi_def_cfa_offset 16
 799:Src/xl_320.c  **** }
 3327              		.loc 1 799 0
 3328 002a 0093     		str	r3, [sp]
 3329 002c 0223     		movs	r3, #2
 3330              	.LVL305:
 3331 002e 0A46     		mov	r2, r1
 3332              	.LVL306:
 3333 0030 1421     		movs	r1, #20
 3334              	.LVL307:
 3335 0032 FFF7FEFF 		bl	XL_Write
 3336              	.LVL308:
 800:Src/xl_320.c  **** 
 3337              		.loc 1 800 0
 3338 0036 03B0     		add	sp, sp, #12
 3339              	.LCFI99:
 3340              		.cfi_def_cfa_offset 4
 3341              		@ sp needed
 3342 0038 5DF804FB 		ldr	pc, [sp], #4
 3343              	.L343:
 3344              		.align	2
 3345              	.L342:
 3346 003c 00000000 		.word	.LANCHOR1
 3347              		.cfi_endproc
 3348              	.LFE48:
 3350              		.section	.text.XL_Set_Torque_Limit,"ax",%progbits
 3351              		.align	1
 3352              		.global	XL_Set_Torque_Limit
 3353              		.syntax unified
 3354              		.thumb
 3355              		.thumb_func
 3356              		.fpu fpv4-sp-d16
 3358              	XL_Set_Torque_Limit:
 3359              	.LFB49:
 802:Src/xl_320.c  ****   if(torque_limit > 1023){
 3360              		.loc 1 802 0
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 0
 3363              		@ frame_needed = 0, uses_anonymous_args = 0
 3364              	.LVL309:
 803:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3365              		.loc 1 803 0
 3366 0000 B1F5806F 		cmp	r1, #1024
 3367 0004 04D3     		bcc	.L345
 804:Src/xl_320.c  ****     return 1;
 3368              		.loc 1 804 0
ARM GAS  /tmp/ccuthlll.s 			page 79


 3369 0006 084B     		ldr	r3, .L350
 3370 0008 0022     		movs	r2, #0
 3371              	.LVL310:
 3372 000a 1A80     		strh	r2, [r3]	@ movhi
 805:Src/xl_320.c  ****   }
 3373              		.loc 1 805 0
 3374 000c 0120     		movs	r0, #1
 3375              	.LVL311:
 808:Src/xl_320.c  **** 
 3376              		.loc 1 808 0
 3377 000e 7047     		bx	lr
 3378              	.LVL312:
 3379              	.L345:
 802:Src/xl_320.c  ****   if(torque_limit > 1023){
 3380              		.loc 1 802 0
 3381 0010 00B5     		push	{lr}
 3382              	.LCFI100:
 3383              		.cfi_def_cfa_offset 4
 3384              		.cfi_offset 14, -4
 3385 0012 83B0     		sub	sp, sp, #12
 3386              	.LCFI101:
 3387              		.cfi_def_cfa_offset 16
 3388 0014 1346     		mov	r3, r2
 3389 0016 0A46     		mov	r2, r1
 3390              	.LVL313:
 807:Src/xl_320.c  **** }
 3391              		.loc 1 807 0
 3392 0018 0093     		str	r3, [sp]
 3393 001a 0223     		movs	r3, #2
 3394 001c 1521     		movs	r1, #21
 3395              	.LVL314:
 3396 001e FFF7FEFF 		bl	XL_Write
 3397              	.LVL315:
 808:Src/xl_320.c  **** 
 3398              		.loc 1 808 0
 3399 0022 03B0     		add	sp, sp, #12
 3400              	.LCFI102:
 3401              		.cfi_def_cfa_offset 4
 3402              		@ sp needed
 3403 0024 5DF804FB 		ldr	pc, [sp], #4
 3404              	.L351:
 3405              		.align	2
 3406              	.L350:
 3407 0028 00000000 		.word	.LANCHOR1
 3408              		.cfi_endproc
 3409              	.LFE49:
 3411              		.section	.text.XL_Set_Punch,"ax",%progbits
 3412              		.align	1
 3413              		.global	XL_Set_Punch
 3414              		.syntax unified
 3415              		.thumb
 3416              		.thumb_func
 3417              		.fpu fpv4-sp-d16
 3419              	XL_Set_Punch:
 3420              	.LFB50:
 810:Src/xl_320.c  ****   if(punch < 0x20 || punch > 0x3FF){
 3421              		.loc 1 810 0
ARM GAS  /tmp/ccuthlll.s 			page 80


 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 0
 3424              		@ frame_needed = 0, uses_anonymous_args = 0
 3425              	.LVL316:
 811:Src/xl_320.c  ****     err = XL_ERR_INTERNAL | XL_ERR_ILLEGAL_ARGUMENTS;
 3426              		.loc 1 811 0
 3427 0000 A1F12003 		sub	r3, r1, #32
 3428 0004 9BB2     		uxth	r3, r3
 3429 0006 B3F5787F 		cmp	r3, #992
 3430 000a 04D3     		bcc	.L353
 812:Src/xl_320.c  ****     return 1;
 3431              		.loc 1 812 0
 3432 000c 084B     		ldr	r3, .L358
 3433 000e 0022     		movs	r2, #0
 3434              	.LVL317:
 3435 0010 1A80     		strh	r2, [r3]	@ movhi
 813:Src/xl_320.c  ****   }
 3436              		.loc 1 813 0
 3437 0012 0120     		movs	r0, #1
 3438              	.LVL318:
 816:Src/xl_320.c  **** 
 3439              		.loc 1 816 0
 3440 0014 7047     		bx	lr
 3441              	.LVL319:
 3442              	.L353:
 810:Src/xl_320.c  ****   if(punch < 0x20 || punch > 0x3FF){
 3443              		.loc 1 810 0
 3444 0016 00B5     		push	{lr}
 3445              	.LCFI103:
 3446              		.cfi_def_cfa_offset 4
 3447              		.cfi_offset 14, -4
 3448 0018 83B0     		sub	sp, sp, #12
 3449              	.LCFI104:
 3450              		.cfi_def_cfa_offset 16
 3451 001a 1346     		mov	r3, r2
 3452 001c 0A46     		mov	r2, r1
 3453              	.LVL320:
 815:Src/xl_320.c  **** }
 3454              		.loc 1 815 0
 3455 001e 0093     		str	r3, [sp]
 3456 0020 0223     		movs	r3, #2
 3457 0022 1621     		movs	r1, #22
 3458              	.LVL321:
 3459 0024 FFF7FEFF 		bl	XL_Write
 3460              	.LVL322:
 816:Src/xl_320.c  **** 
 3461              		.loc 1 816 0
 3462 0028 03B0     		add	sp, sp, #12
 3463              	.LCFI105:
 3464              		.cfi_def_cfa_offset 4
 3465              		@ sp needed
 3466 002a 5DF804FB 		ldr	pc, [sp], #4
 3467              	.L359:
 3468 002e 00BF     		.align	2
 3469              	.L358:
 3470 0030 00000000 		.word	.LANCHOR1
 3471              		.cfi_endproc
ARM GAS  /tmp/ccuthlll.s 			page 81


 3472              	.LFE50:
 3474              		.section	.rodata
 3475              		.align	2
 3476              		.set	.LANCHOR0,. + 0
 3477              	.LC0:
 3478 0000 0000     		.short	0
 3479 0002 0580     		.short	-32763
 3480 0004 0F80     		.short	-32753
 3481 0006 0A00     		.short	10
 3482 0008 1B80     		.short	-32741
 3483 000a 1E00     		.short	30
 3484 000c 1400     		.short	20
 3485 000e 1180     		.short	-32751
 3486 0010 3380     		.short	-32717
 3487 0012 3600     		.short	54
 3488 0014 3C00     		.short	60
 3489 0016 3980     		.short	-32711
 3490 0018 2800     		.short	40
 3491 001a 2D80     		.short	-32723
 3492 001c 2780     		.short	-32729
 3493 001e 2200     		.short	34
 3494 0020 6380     		.short	-32669
 3495 0022 6600     		.short	102
 3496 0024 6C00     		.short	108
 3497 0026 6980     		.short	-32663
 3498 0028 7800     		.short	120
 3499 002a 7D80     		.short	-32643
 3500 002c 7780     		.short	-32649
 3501 002e 7200     		.short	114
 3502 0030 5000     		.short	80
 3503 0032 5580     		.short	-32683
 3504 0034 5F80     		.short	-32673
 3505 0036 5A00     		.short	90
 3506 0038 4B80     		.short	-32693
 3507 003a 4E00     		.short	78
 3508 003c 4400     		.short	68
 3509 003e 4180     		.short	-32703
 3510 0040 C380     		.short	-32573
 3511 0042 C600     		.short	198
 3512 0044 CC00     		.short	204
 3513 0046 C980     		.short	-32567
 3514 0048 D800     		.short	216
 3515 004a DD80     		.short	-32547
 3516 004c D780     		.short	-32553
 3517 004e D200     		.short	210
 3518 0050 F000     		.short	240
 3519 0052 F580     		.short	-32523
 3520 0054 FF80     		.short	-32513
 3521 0056 FA00     		.short	250
 3522 0058 EB80     		.short	-32533
 3523 005a EE00     		.short	238
 3524 005c E400     		.short	228
 3525 005e E180     		.short	-32543
 3526 0060 A000     		.short	160
 3527 0062 A580     		.short	-32603
 3528 0064 AF80     		.short	-32593
 3529 0066 AA00     		.short	170
ARM GAS  /tmp/ccuthlll.s 			page 82


 3530 0068 BB80     		.short	-32581
 3531 006a BE00     		.short	190
 3532 006c B400     		.short	180
 3533 006e B180     		.short	-32591
 3534 0070 9380     		.short	-32621
 3535 0072 9600     		.short	150
 3536 0074 9C00     		.short	156
 3537 0076 9980     		.short	-32615
 3538 0078 8800     		.short	136
 3539 007a 8D80     		.short	-32627
 3540 007c 8780     		.short	-32633
 3541 007e 8200     		.short	130
 3542 0080 8381     		.short	-32381
 3543 0082 8601     		.short	390
 3544 0084 8C01     		.short	396
 3545 0086 8981     		.short	-32375
 3546 0088 9801     		.short	408
 3547 008a 9D81     		.short	-32355
 3548 008c 9781     		.short	-32361
 3549 008e 9201     		.short	402
 3550 0090 B001     		.short	432
 3551 0092 B581     		.short	-32331
 3552 0094 BF81     		.short	-32321
 3553 0096 BA01     		.short	442
 3554 0098 AB81     		.short	-32341
 3555 009a AE01     		.short	430
 3556 009c A401     		.short	420
 3557 009e A181     		.short	-32351
 3558 00a0 E001     		.short	480
 3559 00a2 E581     		.short	-32283
 3560 00a4 EF81     		.short	-32273
 3561 00a6 EA01     		.short	490
 3562 00a8 FB81     		.short	-32261
 3563 00aa FE01     		.short	510
 3564 00ac F401     		.short	500
 3565 00ae F181     		.short	-32271
 3566 00b0 D381     		.short	-32301
 3567 00b2 D601     		.short	470
 3568 00b4 DC01     		.short	476
 3569 00b6 D981     		.short	-32295
 3570 00b8 C801     		.short	456
 3571 00ba CD81     		.short	-32307
 3572 00bc C781     		.short	-32313
 3573 00be C201     		.short	450
 3574 00c0 4001     		.short	320
 3575 00c2 4581     		.short	-32443
 3576 00c4 4F81     		.short	-32433
 3577 00c6 4A01     		.short	330
 3578 00c8 5B81     		.short	-32421
 3579 00ca 5E01     		.short	350
 3580 00cc 5401     		.short	340
 3581 00ce 5181     		.short	-32431
 3582 00d0 7381     		.short	-32397
 3583 00d2 7601     		.short	374
 3584 00d4 7C01     		.short	380
 3585 00d6 7981     		.short	-32391
 3586 00d8 6801     		.short	360
ARM GAS  /tmp/ccuthlll.s 			page 83


 3587 00da 6D81     		.short	-32403
 3588 00dc 6781     		.short	-32409
 3589 00de 6201     		.short	354
 3590 00e0 2381     		.short	-32477
 3591 00e2 2601     		.short	294
 3592 00e4 2C01     		.short	300
 3593 00e6 2981     		.short	-32471
 3594 00e8 3801     		.short	312
 3595 00ea 3D81     		.short	-32451
 3596 00ec 3781     		.short	-32457
 3597 00ee 3201     		.short	306
 3598 00f0 1001     		.short	272
 3599 00f2 1581     		.short	-32491
 3600 00f4 1F81     		.short	-32481
 3601 00f6 1A01     		.short	282
 3602 00f8 0B81     		.short	-32501
 3603 00fa 0E01     		.short	270
 3604 00fc 0401     		.short	260
 3605 00fe 0181     		.short	-32511
 3606 0100 0383     		.short	-31997
 3607 0102 0603     		.short	774
 3608 0104 0C03     		.short	780
 3609 0106 0983     		.short	-31991
 3610 0108 1803     		.short	792
 3611 010a 1D83     		.short	-31971
 3612 010c 1783     		.short	-31977
 3613 010e 1203     		.short	786
 3614 0110 3003     		.short	816
 3615 0112 3583     		.short	-31947
 3616 0114 3F83     		.short	-31937
 3617 0116 3A03     		.short	826
 3618 0118 2B83     		.short	-31957
 3619 011a 2E03     		.short	814
 3620 011c 2403     		.short	804
 3621 011e 2183     		.short	-31967
 3622 0120 6003     		.short	864
 3623 0122 6583     		.short	-31899
 3624 0124 6F83     		.short	-31889
 3625 0126 6A03     		.short	874
 3626 0128 7B83     		.short	-31877
 3627 012a 7E03     		.short	894
 3628 012c 7403     		.short	884
 3629 012e 7183     		.short	-31887
 3630 0130 5383     		.short	-31917
 3631 0132 5603     		.short	854
 3632 0134 5C03     		.short	860
 3633 0136 5983     		.short	-31911
 3634 0138 4803     		.short	840
 3635 013a 4D83     		.short	-31923
 3636 013c 4783     		.short	-31929
 3637 013e 4203     		.short	834
 3638 0140 C003     		.short	960
 3639 0142 C583     		.short	-31803
 3640 0144 CF83     		.short	-31793
 3641 0146 CA03     		.short	970
 3642 0148 DB83     		.short	-31781
 3643 014a DE03     		.short	990
ARM GAS  /tmp/ccuthlll.s 			page 84


 3644 014c D403     		.short	980
 3645 014e D183     		.short	-31791
 3646 0150 F383     		.short	-31757
 3647 0152 F603     		.short	1014
 3648 0154 FC03     		.short	1020
 3649 0156 F983     		.short	-31751
 3650 0158 E803     		.short	1000
 3651 015a ED83     		.short	-31763
 3652 015c E783     		.short	-31769
 3653 015e E203     		.short	994
 3654 0160 A383     		.short	-31837
 3655 0162 A603     		.short	934
 3656 0164 AC03     		.short	940
 3657 0166 A983     		.short	-31831
 3658 0168 B803     		.short	952
 3659 016a BD83     		.short	-31811
 3660 016c B783     		.short	-31817
 3661 016e B203     		.short	946
 3662 0170 9003     		.short	912
 3663 0172 9583     		.short	-31851
 3664 0174 9F83     		.short	-31841
 3665 0176 9A03     		.short	922
 3666 0178 8B83     		.short	-31861
 3667 017a 8E03     		.short	910
 3668 017c 8403     		.short	900
 3669 017e 8183     		.short	-31871
 3670 0180 8002     		.short	640
 3671 0182 8582     		.short	-32123
 3672 0184 8F82     		.short	-32113
 3673 0186 8A02     		.short	650
 3674 0188 9B82     		.short	-32101
 3675 018a 9E02     		.short	670
 3676 018c 9402     		.short	660
 3677 018e 9182     		.short	-32111
 3678 0190 B382     		.short	-32077
 3679 0192 B602     		.short	694
 3680 0194 BC02     		.short	700
 3681 0196 B982     		.short	-32071
 3682 0198 A802     		.short	680
 3683 019a AD82     		.short	-32083
 3684 019c A782     		.short	-32089
 3685 019e A202     		.short	674
 3686 01a0 E382     		.short	-32029
 3687 01a2 E602     		.short	742
 3688 01a4 EC02     		.short	748
 3689 01a6 E982     		.short	-32023
 3690 01a8 F802     		.short	760
 3691 01aa FD82     		.short	-32003
 3692 01ac F782     		.short	-32009
 3693 01ae F202     		.short	754
 3694 01b0 D002     		.short	720
 3695 01b2 D582     		.short	-32043
 3696 01b4 DF82     		.short	-32033
 3697 01b6 DA02     		.short	730
 3698 01b8 CB82     		.short	-32053
 3699 01ba CE02     		.short	718
 3700 01bc C402     		.short	708
ARM GAS  /tmp/ccuthlll.s 			page 85


 3701 01be C182     		.short	-32063
 3702 01c0 4382     		.short	-32189
 3703 01c2 4602     		.short	582
 3704 01c4 4C02     		.short	588
 3705 01c6 4982     		.short	-32183
 3706 01c8 5802     		.short	600
 3707 01ca 5D82     		.short	-32163
 3708 01cc 5782     		.short	-32169
 3709 01ce 5202     		.short	594
 3710 01d0 7002     		.short	624
 3711 01d2 7582     		.short	-32139
 3712 01d4 7F82     		.short	-32129
 3713 01d6 7A02     		.short	634
 3714 01d8 6B82     		.short	-32149
 3715 01da 6E02     		.short	622
 3716 01dc 6402     		.short	612
 3717 01de 6182     		.short	-32159
 3718 01e0 2002     		.short	544
 3719 01e2 2582     		.short	-32219
 3720 01e4 2F82     		.short	-32209
 3721 01e6 2A02     		.short	554
 3722 01e8 3B82     		.short	-32197
 3723 01ea 3E02     		.short	574
 3724 01ec 3402     		.short	564
 3725 01ee 3182     		.short	-32207
 3726 01f0 1382     		.short	-32237
 3727 01f2 1602     		.short	534
 3728 01f4 1C02     		.short	540
 3729 01f6 1982     		.short	-32231
 3730 01f8 0802     		.short	520
 3731 01fa 0D82     		.short	-32243
 3732 01fc 0782     		.short	-32249
 3733 01fe 0202     		.short	514
 3734              		.section	.bss.err,"aw",%nobits
 3735              		.align	1
 3736              		.set	.LANCHOR1,. + 0
 3739              	err:
 3740 0000 0000     		.space	2
 3741              		.section	.bss.packet.6890,"aw",%nobits
 3742              		.align	2
 3743              		.set	.LANCHOR5,. + 0
 3746              	packet.6890:
 3747 0000 00000000 		.space	8
 3747      00000000 
 3748              		.section	.bss.params.6891,"aw",%nobits
 3749              		.align	2
 3750              		.set	.LANCHOR4,. + 0
 3753              	params.6891:
 3754 0000 00000000 		.space	4
 3755              		.section	.rodata.field_addr,"a",%progbits
 3756              		.align	2
 3757              		.set	.LANCHOR2,. + 0
 3760              	field_addr:
 3761 0000 03       		.byte	3
 3762 0001 04       		.byte	4
 3763 0002 05       		.byte	5
 3764 0003 06       		.byte	6
ARM GAS  /tmp/ccuthlll.s 			page 86


 3765 0004 08       		.byte	8
 3766 0005 0B       		.byte	11
 3767 0006 0C       		.byte	12
 3768 0007 0D       		.byte	13
 3769 0008 0E       		.byte	14
 3770 0009 0F       		.byte	15
 3771 000a 11       		.byte	17
 3772 000b 12       		.byte	18
 3773 000c 00       		.byte	0
 3774 000d 02       		.byte	2
 3775 000e 18       		.byte	24
 3776 000f 19       		.byte	25
 3777 0010 1B       		.byte	27
 3778 0011 1C       		.byte	28
 3779 0012 1D       		.byte	29
 3780 0013 1E       		.byte	30
 3781 0014 20       		.byte	32
 3782 0015 23       		.byte	35
 3783 0016 33       		.byte	51
 3784 0017 25       		.byte	37
 3785 0018 27       		.byte	39
 3786 0019 29       		.byte	41
 3787 001a 2D       		.byte	45
 3788 001b 2E       		.byte	46
 3789 001c 2F       		.byte	47
 3790 001d 31       		.byte	49
 3791 001e 32       		.byte	50
 3792              		.section	.rodata.field_length,"a",%progbits
 3793              		.align	2
 3794              		.set	.LANCHOR3,. + 0
 3797              	field_length:
 3798 0000 01       		.byte	1
 3799 0001 01       		.byte	1
 3800 0002 01       		.byte	1
 3801 0003 02       		.byte	2
 3802 0004 02       		.byte	2
 3803 0005 01       		.byte	1
 3804 0006 01       		.byte	1
 3805 0007 01       		.byte	1
 3806 0008 01       		.byte	1
 3807 0009 02       		.byte	2
 3808 000a 01       		.byte	1
 3809 000b 01       		.byte	1
 3810 000c 02       		.byte	2
 3811 000d 01       		.byte	1
 3812 000e 01       		.byte	1
 3813 000f 01       		.byte	1
 3814 0010 01       		.byte	1
 3815 0011 01       		.byte	1
 3816 0012 01       		.byte	1
 3817 0013 02       		.byte	2
 3818 0014 02       		.byte	2
 3819 0015 02       		.byte	2
 3820 0016 02       		.byte	2
 3821 0017 02       		.byte	2
 3822 0018 02       		.byte	2
 3823 0019 02       		.byte	2
ARM GAS  /tmp/ccuthlll.s 			page 87


 3824 001a 01       		.byte	1
 3825 001b 01       		.byte	1
 3826 001c 01       		.byte	1
 3827 001d 01       		.byte	1
 3828 001e 01       		.byte	1
 3829              		.text
 3830              	.Letext0:
 3831              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3832              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3833              		.file 4 "Inc/xl_320.h"
 3834              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 3835              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 3836              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 3837              		.file 8 "/usr/arm-none-eabi/include/sys/reent.h"
 3838              		.file 9 "<built-in>"
ARM GAS  /tmp/ccuthlll.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xl_320.c
     /tmp/ccuthlll.s:18     .text.XL_FSM_HEADER_0:0000000000000000 $t
     /tmp/ccuthlll.s:25     .text.XL_FSM_HEADER_0:0000000000000000 XL_FSM_HEADER_0
     /tmp/ccuthlll.s:54     .text.XL_FSM_HEADER_0:0000000000000014 $d
     /tmp/ccuthlll.s:66     .text.XL_FSM_HEADER_1:0000000000000000 XL_FSM_HEADER_1
     /tmp/ccuthlll.s:59     .text.XL_FSM_HEADER_1:0000000000000000 $t
     /tmp/ccuthlll.s:97     .text.XL_FSM_HEADER_1:000000000000001c $d
     /tmp/ccuthlll.s:110    .text.XL_FSM_HEADER_2:0000000000000000 XL_FSM_HEADER_2
     /tmp/ccuthlll.s:103    .text.XL_FSM_HEADER_2:0000000000000000 $t
     /tmp/ccuthlll.s:141    .text.XL_FSM_HEADER_2:000000000000001c $d
     /tmp/ccuthlll.s:154    .text.XL_FSM_HEADER_3:0000000000000000 XL_FSM_HEADER_3
     /tmp/ccuthlll.s:147    .text.XL_FSM_HEADER_3:0000000000000000 $t
     /tmp/ccuthlll.s:185    .text.XL_FSM_HEADER_3:000000000000001c $d
     /tmp/ccuthlll.s:198    .text.XL_FSM_ID:0000000000000000 XL_FSM_ID
     /tmp/ccuthlll.s:191    .text.XL_FSM_ID:0000000000000000 $t
     /tmp/ccuthlll.s:232    .text.XL_FSM_ID:0000000000000020 $d
     /tmp/ccuthlll.s:245    .text.XL_FSM_LENGTH_LOW:0000000000000000 XL_FSM_LENGTH_LOW
     /tmp/ccuthlll.s:238    .text.XL_FSM_LENGTH_LOW:0000000000000000 $t
     /tmp/ccuthlll.s:267    .text.XL_FSM_LENGTH_LOW:0000000000000010 $d
     /tmp/ccuthlll.s:279    .text.XL_FSM_LENGTH_HIGH:0000000000000000 XL_FSM_LENGTH_HIGH
     /tmp/ccuthlll.s:272    .text.XL_FSM_LENGTH_HIGH:0000000000000000 $t
     /tmp/ccuthlll.s:321    .text.XL_FSM_LENGTH_HIGH:000000000000002c $d
     /tmp/ccuthlll.s:334    .text.XL_FSM_INSTRUCTION:0000000000000000 XL_FSM_INSTRUCTION
     /tmp/ccuthlll.s:327    .text.XL_FSM_INSTRUCTION:0000000000000000 $t
     /tmp/ccuthlll.s:369    .text.XL_FSM_INSTRUCTION:0000000000000024 $d
     /tmp/ccuthlll.s:382    .text.XL_FSM_RECEIVING:0000000000000000 XL_FSM_RECEIVING
     /tmp/ccuthlll.s:375    .text.XL_FSM_RECEIVING:0000000000000000 $t
     /tmp/ccuthlll.s:411    .text.XL_Update_CRC:0000000000000000 $t
     /tmp/ccuthlll.s:418    .text.XL_Update_CRC:0000000000000000 XL_Update_CRC
     /tmp/ccuthlll.s:483    .text.XL_Update_CRC:000000000000003c $d
     /tmp/ccuthlll.s:488    .text.XL_Extract_Status_Packet:0000000000000000 $t
     /tmp/ccuthlll.s:495    .text.XL_Extract_Status_Packet:0000000000000000 XL_Extract_Status_Packet
     /tmp/ccuthlll.s:627    .text.XL_Extract_Status_Packet:000000000000008c $d
     /tmp/ccuthlll.s:632    .text.XL_Receive:0000000000000000 $t
     /tmp/ccuthlll.s:639    .text.XL_Receive:0000000000000000 XL_Receive
     /tmp/ccuthlll.s:765    .text.XL_Receive:0000000000000094 $d
     /tmp/ccuthlll.s:771    .text.XL_Build_Frame:0000000000000000 $t
     /tmp/ccuthlll.s:778    .text.XL_Build_Frame:0000000000000000 XL_Build_Frame
     /tmp/ccuthlll.s:980    .text.XL_Build_Frame:00000000000000c4 $d
     /tmp/ccuthlll.s:986    .text.XL_Send:0000000000000000 $t
     /tmp/ccuthlll.s:993    .text.XL_Send:0000000000000000 XL_Send
     /tmp/ccuthlll.s:1059   .text.XL_Send:000000000000003c $d
     /tmp/ccuthlll.s:1064   .text.XL_Get_Error:0000000000000000 $t
     /tmp/ccuthlll.s:1071   .text.XL_Get_Error:0000000000000000 XL_Get_Error
     /tmp/ccuthlll.s:1085   .text.XL_Get_Error:0000000000000008 $d
     /tmp/ccuthlll.s:1090   .text.XL_Check_Status:0000000000000000 $t
     /tmp/ccuthlll.s:1097   .text.XL_Check_Status:0000000000000000 XL_Check_Status
     /tmp/ccuthlll.s:1128   .text.XL_Check_Status:000000000000001c $d
     /tmp/ccuthlll.s:1133   .text.XL_Ping:0000000000000000 $t
     /tmp/ccuthlll.s:1140   .text.XL_Ping:0000000000000000 XL_Ping
     /tmp/ccuthlll.s:1215   .text.XL_Ping:000000000000004c $d
     /tmp/ccuthlll.s:1220   .text.XL_Discover:0000000000000000 $t
     /tmp/ccuthlll.s:1227   .text.XL_Discover:0000000000000000 XL_Discover
     /tmp/ccuthlll.s:1302   .text.XL_Read:0000000000000000 $t
     /tmp/ccuthlll.s:1309   .text.XL_Read:0000000000000000 XL_Read
     /tmp/ccuthlll.s:1423   .text.XL_Read:0000000000000090 $d
ARM GAS  /tmp/ccuthlll.s 			page 89


     /tmp/ccuthlll.s:1430   .text.XL_Factory_Reset:0000000000000000 $t
     /tmp/ccuthlll.s:1437   .text.XL_Factory_Reset:0000000000000000 XL_Factory_Reset
     /tmp/ccuthlll.s:1495   .text.XL_Reboot:0000000000000000 $t
     /tmp/ccuthlll.s:1502   .text.XL_Reboot:0000000000000000 XL_Reboot
     /tmp/ccuthlll.s:1557   .text.XL_Configure_Baud_Rate:0000000000000000 $t
     /tmp/ccuthlll.s:1564   .text.XL_Configure_Baud_Rate:0000000000000000 XL_Configure_Baud_Rate
     /tmp/ccuthlll.s:1583   .text.XL_Configure_Baud_Rate:000000000000000c $d
     /tmp/ccuthlll.s:1588   .text.XL_Configure_Control_Mode:0000000000000000 $t
     /tmp/ccuthlll.s:1595   .text.XL_Configure_Control_Mode:0000000000000000 XL_Configure_Control_Mode
     /tmp/ccuthlll.s:1614   .text.XL_Configure_Control_Mode:000000000000000c $d
     /tmp/ccuthlll.s:1619   .text.XL_Configure_Return_Level:0000000000000000 $t
     /tmp/ccuthlll.s:1626   .text.XL_Configure_Return_Level:0000000000000000 XL_Configure_Return_Level
     /tmp/ccuthlll.s:1645   .text.XL_Configure_Return_Level:000000000000000c $d
     /tmp/ccuthlll.s:1650   .text.XL_Get_Current_Position:0000000000000000 $t
     /tmp/ccuthlll.s:1657   .text.XL_Get_Current_Position:0000000000000000 XL_Get_Current_Position
     /tmp/ccuthlll.s:1681   .text.XL_Get_Current_Speed:0000000000000000 $t
     /tmp/ccuthlll.s:1688   .text.XL_Get_Current_Speed:0000000000000000 XL_Get_Current_Speed
     /tmp/ccuthlll.s:1730   .text.XL_Get_Current_Load:0000000000000000 $t
     /tmp/ccuthlll.s:1737   .text.XL_Get_Current_Load:0000000000000000 XL_Get_Current_Load
     /tmp/ccuthlll.s:1779   .text.XL_Get_Current_Voltage:0000000000000000 $t
     /tmp/ccuthlll.s:1786   .text.XL_Get_Current_Voltage:0000000000000000 XL_Get_Current_Voltage
     /tmp/ccuthlll.s:1810   .text.XL_Get_Current_Temperature:0000000000000000 $t
     /tmp/ccuthlll.s:1817   .text.XL_Get_Current_Temperature:0000000000000000 XL_Get_Current_Temperature
     /tmp/ccuthlll.s:1841   .text.XL_Is_Working:0000000000000000 $t
     /tmp/ccuthlll.s:1848   .text.XL_Is_Working:0000000000000000 XL_Is_Working
     /tmp/ccuthlll.s:1872   .text.XL_Is_Moving:0000000000000000 $t
     /tmp/ccuthlll.s:1879   .text.XL_Is_Moving:0000000000000000 XL_Is_Moving
     /tmp/ccuthlll.s:1903   .text.XL_Get_Hardware_Error:0000000000000000 $t
     /tmp/ccuthlll.s:1910   .text.XL_Get_Hardware_Error:0000000000000000 XL_Get_Hardware_Error
     /tmp/ccuthlll.s:1934   .text.XL_Check_Alert:0000000000000000 $t
     /tmp/ccuthlll.s:1941   .text.XL_Check_Alert:0000000000000000 XL_Check_Alert
     /tmp/ccuthlll.s:1992   .text.XL_Check_Alert:0000000000000034 $d
     /tmp/ccuthlll.s:1997   .text.XL_Action:0000000000000000 $t
     /tmp/ccuthlll.s:2004   .text.XL_Action:0000000000000000 XL_Action
     /tmp/ccuthlll.s:2073   .text.XL_Write:0000000000000000 $t
     /tmp/ccuthlll.s:2080   .text.XL_Write:0000000000000000 XL_Write
     /tmp/ccuthlll.s:2187   .text.XL_Write:0000000000000074 $d
     /tmp/ccuthlll.s:2194   .text.XL_Configure_ID:0000000000000000 $t
     /tmp/ccuthlll.s:2201   .text.XL_Configure_ID:0000000000000000 XL_Configure_ID
     /tmp/ccuthlll.s:2247   .text.XL_Configure_ID:0000000000000024 $d
     /tmp/ccuthlll.s:2252   .text.XL_Configure_Return_Delay_Time:0000000000000000 $t
     /tmp/ccuthlll.s:2259   .text.XL_Configure_Return_Delay_Time:0000000000000000 XL_Configure_Return_Delay_Time
     /tmp/ccuthlll.s:2308   .text.XL_Configure_Return_Delay_Time:0000000000000024 $d
     /tmp/ccuthlll.s:2313   .text.XL_Configure_CW_Angle_Limit:0000000000000000 $t
     /tmp/ccuthlll.s:2320   .text.XL_Configure_CW_Angle_Limit:0000000000000000 XL_Configure_CW_Angle_Limit
     /tmp/ccuthlll.s:2367   .text.XL_Configure_CW_Angle_Limit:0000000000000028 $d
     /tmp/ccuthlll.s:2372   .text.XL_Configure_CCW_Angle_Limit:0000000000000000 $t
     /tmp/ccuthlll.s:2379   .text.XL_Configure_CCW_Angle_Limit:0000000000000000 XL_Configure_CCW_Angle_Limit
     /tmp/ccuthlll.s:2426   .text.XL_Configure_CCW_Angle_Limit:0000000000000028 $d
     /tmp/ccuthlll.s:2431   .text.XL_Configure_Limit_Temperature:0000000000000000 $t
     /tmp/ccuthlll.s:2438   .text.XL_Configure_Limit_Temperature:0000000000000000 XL_Configure_Limit_Temperature
     /tmp/ccuthlll.s:2484   .text.XL_Configure_Limit_Temperature:0000000000000024 $d
     /tmp/ccuthlll.s:2489   .text.XL_Configure_Lower_Limit_Voltage:0000000000000000 $t
     /tmp/ccuthlll.s:2496   .text.XL_Configure_Lower_Limit_Voltage:0000000000000000 XL_Configure_Lower_Limit_Voltage
     /tmp/ccuthlll.s:2544   .text.XL_Configure_Lower_Limit_Voltage:000000000000002c $d
     /tmp/ccuthlll.s:2549   .text.XL_Configure_Upper_Limit_Voltage:0000000000000000 $t
     /tmp/ccuthlll.s:2556   .text.XL_Configure_Upper_Limit_Voltage:0000000000000000 XL_Configure_Upper_Limit_Voltage
ARM GAS  /tmp/ccuthlll.s 			page 90


     /tmp/ccuthlll.s:2604   .text.XL_Configure_Upper_Limit_Voltage:000000000000002c $d
     /tmp/ccuthlll.s:2609   .text.XL_Configure_Max_Torque:0000000000000000 $t
     /tmp/ccuthlll.s:2616   .text.XL_Configure_Max_Torque:0000000000000000 XL_Configure_Max_Torque
     /tmp/ccuthlll.s:2663   .text.XL_Configure_Max_Torque:0000000000000028 $d
     /tmp/ccuthlll.s:2668   .text.XL_Configure_Alarm_Shutdown:0000000000000000 $t
     /tmp/ccuthlll.s:2675   .text.XL_Configure_Alarm_Shutdown:0000000000000000 XL_Configure_Alarm_Shutdown
     /tmp/ccuthlll.s:2721   .text.XL_Configure_Alarm_Shutdown:0000000000000024 $d
     /tmp/ccuthlll.s:2726   .text.XL_Power_On:0000000000000000 $t
     /tmp/ccuthlll.s:2733   .text.XL_Power_On:0000000000000000 XL_Power_On
     /tmp/ccuthlll.s:2765   .text.XL_Power_Off:0000000000000000 $t
     /tmp/ccuthlll.s:2772   .text.XL_Power_Off:0000000000000000 XL_Power_Off
     /tmp/ccuthlll.s:2804   .text.XL_Set_LED:0000000000000000 $t
     /tmp/ccuthlll.s:2811   .text.XL_Set_LED:0000000000000000 XL_Set_LED
     /tmp/ccuthlll.s:2860   .text.XL_Set_LED:0000000000000028 $d
     /tmp/ccuthlll.s:2865   .text.XL_Say_Hello:0000000000000000 $t
     /tmp/ccuthlll.s:2872   .text.XL_Say_Hello:0000000000000000 XL_Say_Hello
     /tmp/ccuthlll.s:2953   .text.XL_Set_D_Gain:0000000000000000 $t
     /tmp/ccuthlll.s:2960   .text.XL_Set_D_Gain:0000000000000000 XL_Set_D_Gain
     /tmp/ccuthlll.s:3012   .text.XL_Set_D_Gain:0000000000000028 $d
     /tmp/ccuthlll.s:3017   .text.XL_Set_I_Gain:0000000000000000 $t
     /tmp/ccuthlll.s:3024   .text.XL_Set_I_Gain:0000000000000000 XL_Set_I_Gain
     /tmp/ccuthlll.s:3076   .text.XL_Set_I_Gain:0000000000000028 $d
     /tmp/ccuthlll.s:3081   .text.XL_Set_P_Gain:0000000000000000 $t
     /tmp/ccuthlll.s:3088   .text.XL_Set_P_Gain:0000000000000000 XL_Set_P_Gain
     /tmp/ccuthlll.s:3140   .text.XL_Set_P_Gain:0000000000000028 $d
     /tmp/ccuthlll.s:3145   .text.XL_Set_Goal_Position:0000000000000000 $t
     /tmp/ccuthlll.s:3152   .text.XL_Set_Goal_Position:0000000000000000 XL_Set_Goal_Position
     /tmp/ccuthlll.s:3201   .text.XL_Set_Goal_Position:0000000000000028 $d
     /tmp/ccuthlll.s:3206   .text.XL_Set_Goal_Speed_Join:0000000000000000 $t
     /tmp/ccuthlll.s:3213   .text.XL_Set_Goal_Speed_Join:0000000000000000 XL_Set_Goal_Speed_Join
     /tmp/ccuthlll.s:3262   .text.XL_Set_Goal_Speed_Join:0000000000000028 $d
     /tmp/ccuthlll.s:3267   .text.XL_Set_Goal_Speed_Wheel:0000000000000000 $t
     /tmp/ccuthlll.s:3274   .text.XL_Set_Goal_Speed_Wheel:0000000000000000 XL_Set_Goal_Speed_Wheel
     /tmp/ccuthlll.s:3346   .text.XL_Set_Goal_Speed_Wheel:000000000000003c $d
     /tmp/ccuthlll.s:3351   .text.XL_Set_Torque_Limit:0000000000000000 $t
     /tmp/ccuthlll.s:3358   .text.XL_Set_Torque_Limit:0000000000000000 XL_Set_Torque_Limit
     /tmp/ccuthlll.s:3407   .text.XL_Set_Torque_Limit:0000000000000028 $d
     /tmp/ccuthlll.s:3412   .text.XL_Set_Punch:0000000000000000 $t
     /tmp/ccuthlll.s:3419   .text.XL_Set_Punch:0000000000000000 XL_Set_Punch
     /tmp/ccuthlll.s:3470   .text.XL_Set_Punch:0000000000000030 $d
     /tmp/ccuthlll.s:3475   .rodata:0000000000000000 $d
     /tmp/ccuthlll.s:3735   .bss.err:0000000000000000 $d
     /tmp/ccuthlll.s:3739   .bss.err:0000000000000000 err
     /tmp/ccuthlll.s:3742   .bss.packet.6890:0000000000000000 $d
     /tmp/ccuthlll.s:3746   .bss.packet.6890:0000000000000000 packet.6890
     /tmp/ccuthlll.s:3749   .bss.params.6891:0000000000000000 $d
     /tmp/ccuthlll.s:3753   .bss.params.6891:0000000000000000 params.6891
     /tmp/ccuthlll.s:3756   .rodata.field_addr:0000000000000000 $d
     /tmp/ccuthlll.s:3760   .rodata.field_addr:0000000000000000 field_addr
     /tmp/ccuthlll.s:3793   .rodata.field_length:0000000000000000 $d
     /tmp/ccuthlll.s:3797   .rodata.field_length:0000000000000000 field_length
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
