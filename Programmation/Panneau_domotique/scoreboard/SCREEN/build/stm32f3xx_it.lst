ARM GAS  /tmp/ccwAtqmE.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NMI_Handler:
  26              	.LFB695:
  27              		.file 1 "Src/stm32f3xx_it.c"
   1:Src/stm32f3xx_it.c **** /**
   2:Src/stm32f3xx_it.c ****   ******************************************************************************
   3:Src/stm32f3xx_it.c ****   * @file    stm32f3xx_it.c
   4:Src/stm32f3xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f3xx_it.c ****   ******************************************************************************
   6:Src/stm32f3xx_it.c ****   *
   7:Src/stm32f3xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f3xx_it.c ****   *
   9:Src/stm32f3xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f3xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f3xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f3xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f3xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f3xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f3xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f3xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f3xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f3xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f3xx_it.c ****   *
  20:Src/stm32f3xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f3xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f3xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f3xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f3xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f3xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f3xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f3xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f3xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f3xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f3xx_it.c ****   *
  31:Src/stm32f3xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccwAtqmE.s 			page 2


  32:Src/stm32f3xx_it.c ****   */
  33:Src/stm32f3xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f3xx_it.c **** #include "stm32f3xx_hal.h"
  35:Src/stm32f3xx_it.c **** #include "stm32f3xx.h"
  36:Src/stm32f3xx_it.c **** #include "stm32f3xx_it.h"
  37:Src/stm32f3xx_it.c **** 
  38:Src/stm32f3xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f3xx_it.c **** #include "robotronik_protocol_stm32.h"
  40:Src/stm32f3xx_it.c **** #include "usart.h"
  41:Src/stm32f3xx_it.c **** /* USER CODE END 0 */
  42:Src/stm32f3xx_it.c **** 
  43:Src/stm32f3xx_it.c **** /* External variables --------------------------------------------------------*/
  44:Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim2;
  45:Src/stm32f3xx_it.c **** 
  46:Src/stm32f3xx_it.c **** /******************************************************************************/
  47:Src/stm32f3xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  48:Src/stm32f3xx_it.c **** /******************************************************************************/
  49:Src/stm32f3xx_it.c **** 
  50:Src/stm32f3xx_it.c **** /**
  51:Src/stm32f3xx_it.c **** * @brief This function handles Non maskable interrupt.
  52:Src/stm32f3xx_it.c **** */
  53:Src/stm32f3xx_it.c **** void NMI_Handler(void)
  54:Src/stm32f3xx_it.c **** {
  28              		.loc 1 54 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  55:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  56:Src/stm32f3xx_it.c **** 
  57:Src/stm32f3xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  58:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  59:Src/stm32f3xx_it.c **** 
  60:Src/stm32f3xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  61:Src/stm32f3xx_it.c **** }
  33              		.loc 1 61 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE695:
  38              		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	1
  40              		.global	HardFault_Handler
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv4-sp-d16
  46              	HardFault_Handler:
  47              	.LFB696:
  62:Src/stm32f3xx_it.c **** 
  63:Src/stm32f3xx_it.c **** /**
  64:Src/stm32f3xx_it.c **** * @brief This function handles Hard fault interrupt.
  65:Src/stm32f3xx_it.c **** */
  66:Src/stm32f3xx_it.c **** void HardFault_Handler(void)
  67:Src/stm32f3xx_it.c **** {
  48              		.loc 1 67 0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
ARM GAS  /tmp/ccwAtqmE.s 			page 3


  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.L3:
  55 0000 FEE7     		b	.L3
  56              		.cfi_endproc
  57              	.LFE696:
  59              		.section	.text.MemManage_Handler,"ax",%progbits
  60              		.align	1
  61              		.global	MemManage_Handler
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	MemManage_Handler:
  68              	.LFB697:
  68:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  69:Src/stm32f3xx_it.c **** 
  70:Src/stm32f3xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  71:Src/stm32f3xx_it.c ****   while (1)
  72:Src/stm32f3xx_it.c ****   {
  73:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  74:Src/stm32f3xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  75:Src/stm32f3xx_it.c ****   }
  76:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  77:Src/stm32f3xx_it.c **** 
  78:Src/stm32f3xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  79:Src/stm32f3xx_it.c **** }
  80:Src/stm32f3xx_it.c **** 
  81:Src/stm32f3xx_it.c **** /**
  82:Src/stm32f3xx_it.c **** * @brief This function handles Memory management fault.
  83:Src/stm32f3xx_it.c **** */
  84:Src/stm32f3xx_it.c **** void MemManage_Handler(void)
  85:Src/stm32f3xx_it.c **** {
  69              		.loc 1 85 0
  70              		.cfi_startproc
  71              		@ Volatile: function does not return.
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75              	.L5:
  76 0000 FEE7     		b	.L5
  77              		.cfi_endproc
  78              	.LFE697:
  80              		.section	.text.BusFault_Handler,"ax",%progbits
  81              		.align	1
  82              		.global	BusFault_Handler
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv4-sp-d16
  88              	BusFault_Handler:
  89              	.LFB698:
  86:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  87:Src/stm32f3xx_it.c **** 
  88:Src/stm32f3xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  89:Src/stm32f3xx_it.c ****   while (1)
ARM GAS  /tmp/ccwAtqmE.s 			page 4


  90:Src/stm32f3xx_it.c ****   {
  91:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  92:Src/stm32f3xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  93:Src/stm32f3xx_it.c ****   }
  94:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  95:Src/stm32f3xx_it.c **** 
  96:Src/stm32f3xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  97:Src/stm32f3xx_it.c **** }
  98:Src/stm32f3xx_it.c **** 
  99:Src/stm32f3xx_it.c **** /**
 100:Src/stm32f3xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 101:Src/stm32f3xx_it.c **** */
 102:Src/stm32f3xx_it.c **** void BusFault_Handler(void)
 103:Src/stm32f3xx_it.c **** {
  90              		.loc 1 103 0
  91              		.cfi_startproc
  92              		@ Volatile: function does not return.
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.L7:
  97 0000 FEE7     		b	.L7
  98              		.cfi_endproc
  99              	.LFE698:
 101              		.section	.text.UsageFault_Handler,"ax",%progbits
 102              		.align	1
 103              		.global	UsageFault_Handler
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu fpv4-sp-d16
 109              	UsageFault_Handler:
 110              	.LFB699:
 104:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 105:Src/stm32f3xx_it.c **** 
 106:Src/stm32f3xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 107:Src/stm32f3xx_it.c ****   while (1)
 108:Src/stm32f3xx_it.c ****   {
 109:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 110:Src/stm32f3xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 111:Src/stm32f3xx_it.c ****   }
 112:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 113:Src/stm32f3xx_it.c **** 
 114:Src/stm32f3xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 115:Src/stm32f3xx_it.c **** }
 116:Src/stm32f3xx_it.c **** 
 117:Src/stm32f3xx_it.c **** /**
 118:Src/stm32f3xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 119:Src/stm32f3xx_it.c **** */
 120:Src/stm32f3xx_it.c **** void UsageFault_Handler(void)
 121:Src/stm32f3xx_it.c **** {
 111              		.loc 1 121 0
 112              		.cfi_startproc
 113              		@ Volatile: function does not return.
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
ARM GAS  /tmp/ccwAtqmE.s 			page 5


 117              	.L9:
 118 0000 FEE7     		b	.L9
 119              		.cfi_endproc
 120              	.LFE699:
 122              		.section	.text.SVC_Handler,"ax",%progbits
 123              		.align	1
 124              		.global	SVC_Handler
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu fpv4-sp-d16
 130              	SVC_Handler:
 131              	.LFB700:
 122:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 123:Src/stm32f3xx_it.c **** 
 124:Src/stm32f3xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 125:Src/stm32f3xx_it.c ****   while (1)
 126:Src/stm32f3xx_it.c ****   {
 127:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 128:Src/stm32f3xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 129:Src/stm32f3xx_it.c ****   }
 130:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 131:Src/stm32f3xx_it.c **** 
 132:Src/stm32f3xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 133:Src/stm32f3xx_it.c **** }
 134:Src/stm32f3xx_it.c **** 
 135:Src/stm32f3xx_it.c **** /**
 136:Src/stm32f3xx_it.c **** * @brief This function handles System service call via SWI instruction.
 137:Src/stm32f3xx_it.c **** */
 138:Src/stm32f3xx_it.c **** void SVC_Handler(void)
 139:Src/stm32f3xx_it.c **** {
 132              		.loc 1 139 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 140:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 141:Src/stm32f3xx_it.c **** 
 142:Src/stm32f3xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 143:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 144:Src/stm32f3xx_it.c **** 
 145:Src/stm32f3xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 146:Src/stm32f3xx_it.c **** }
 137              		.loc 1 146 0
 138 0000 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE700:
 142              		.section	.text.DebugMon_Handler,"ax",%progbits
 143              		.align	1
 144              		.global	DebugMon_Handler
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	DebugMon_Handler:
 151              	.LFB701:
 147:Src/stm32f3xx_it.c **** 
ARM GAS  /tmp/ccwAtqmE.s 			page 6


 148:Src/stm32f3xx_it.c **** /**
 149:Src/stm32f3xx_it.c **** * @brief This function handles Debug monitor.
 150:Src/stm32f3xx_it.c **** */
 151:Src/stm32f3xx_it.c **** void DebugMon_Handler(void)
 152:Src/stm32f3xx_it.c **** {
 152              		.loc 1 152 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 153:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 154:Src/stm32f3xx_it.c **** 
 155:Src/stm32f3xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 156:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 157:Src/stm32f3xx_it.c **** 
 158:Src/stm32f3xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 159:Src/stm32f3xx_it.c **** }
 157              		.loc 1 159 0
 158 0000 7047     		bx	lr
 159              		.cfi_endproc
 160              	.LFE701:
 162              		.section	.text.PendSV_Handler,"ax",%progbits
 163              		.align	1
 164              		.global	PendSV_Handler
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu fpv4-sp-d16
 170              	PendSV_Handler:
 171              	.LFB702:
 160:Src/stm32f3xx_it.c **** 
 161:Src/stm32f3xx_it.c **** /**
 162:Src/stm32f3xx_it.c **** * @brief This function handles Pendable request for system service.
 163:Src/stm32f3xx_it.c **** */
 164:Src/stm32f3xx_it.c **** void PendSV_Handler(void)
 165:Src/stm32f3xx_it.c **** {
 172              		.loc 1 165 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 166:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 167:Src/stm32f3xx_it.c **** 
 168:Src/stm32f3xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 169:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 170:Src/stm32f3xx_it.c **** 
 171:Src/stm32f3xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 172:Src/stm32f3xx_it.c **** }
 177              		.loc 1 172 0
 178 0000 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE702:
 182              		.section	.text.SysTick_Handler,"ax",%progbits
 183              		.align	1
 184              		.global	SysTick_Handler
 185              		.syntax unified
 186              		.thumb
ARM GAS  /tmp/ccwAtqmE.s 			page 7


 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	SysTick_Handler:
 191              	.LFB703:
 173:Src/stm32f3xx_it.c **** 
 174:Src/stm32f3xx_it.c **** /**
 175:Src/stm32f3xx_it.c **** * @brief This function handles System tick timer.
 176:Src/stm32f3xx_it.c **** */
 177:Src/stm32f3xx_it.c **** void SysTick_Handler(void)
 178:Src/stm32f3xx_it.c **** {
 192              		.loc 1 178 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196 0000 08B5     		push	{r3, lr}
 197              	.LCFI0:
 198              		.cfi_def_cfa_offset 8
 199              		.cfi_offset 3, -8
 200              		.cfi_offset 14, -4
 179:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 180:Src/stm32f3xx_it.c **** 
 181:Src/stm32f3xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 182:Src/stm32f3xx_it.c ****   HAL_IncTick();
 201              		.loc 1 182 0
 202 0002 FFF7FEFF 		bl	HAL_IncTick
 203              	.LVL0:
 183:Src/stm32f3xx_it.c ****   HAL_SYSTICK_IRQHandler();
 204              		.loc 1 183 0
 205 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 206              	.LVL1:
 184:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 185:Src/stm32f3xx_it.c **** 
 186:Src/stm32f3xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 187:Src/stm32f3xx_it.c **** }
 207              		.loc 1 187 0
 208 000a 08BD     		pop	{r3, pc}
 209              		.cfi_endproc
 210              	.LFE703:
 212              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 213              		.align	1
 214              		.global	DMA1_Channel5_IRQHandler
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv4-sp-d16
 220              	DMA1_Channel5_IRQHandler:
 221              	.LFB704:
 188:Src/stm32f3xx_it.c **** 
 189:Src/stm32f3xx_it.c **** /******************************************************************************/
 190:Src/stm32f3xx_it.c **** /* STM32F3xx Peripheral Interrupt Handlers                                    */
 191:Src/stm32f3xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 192:Src/stm32f3xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 193:Src/stm32f3xx_it.c **** /* please refer to the startup file (startup_stm32f3xx.s).                    */
 194:Src/stm32f3xx_it.c **** /******************************************************************************/
 195:Src/stm32f3xx_it.c **** 
 196:Src/stm32f3xx_it.c **** /**
 197:Src/stm32f3xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
ARM GAS  /tmp/ccwAtqmE.s 			page 8


 198:Src/stm32f3xx_it.c **** */
 199:Src/stm32f3xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 200:Src/stm32f3xx_it.c **** {
 222              		.loc 1 200 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226 0000 38B5     		push	{r3, r4, r5, lr}
 227              	.LCFI1:
 228              		.cfi_def_cfa_offset 16
 229              		.cfi_offset 3, -16
 230              		.cfi_offset 4, -12
 231              		.cfi_offset 5, -8
 232              		.cfi_offset 14, -4
 233              	.LVL2:
 234              	.LBB19:
 235              	.LBB20:
 236              		.file 2 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h"
   1:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @file    stm32f3xx_ll_dma.h
   4:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @attention
   8:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
   9:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
  11:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      without specific prior written permission.
  21:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
  22:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
  33:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   ******************************************************************************
  34:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  35:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  36:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #ifndef __STM32F3xx_LL_DMA_H
  38:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __STM32F3xx_LL_DMA_H
  39:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
ARM GAS  /tmp/ccwAtqmE.s 			page 9


  40:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #ifdef __cplusplus
  41:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** extern "C" {
  42:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
  43:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  44:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #include "stm32f3xx.h"
  46:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  47:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @addtogroup STM32F3xx_LL_Driver
  48:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  49:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  50:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  51:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  52:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  53:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  54:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  55:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  56:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  57:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  60:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  61:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  62:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  63:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  64:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
  65:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  66:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  67:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  68:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  69:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  70:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE),
  71:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  72:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** };
  73:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
  74:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
  75:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  76:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  77:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  78:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  79:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  80:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  81:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  82:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  83:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
  84:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
  85:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  86:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
  87:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  88:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  89:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  90:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  91:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  92:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  93:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** typedef struct
  94:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
  95:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  96:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
ARM GAS  /tmp/ccwAtqmE.s 			page 10


  97:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  98:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  99:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
 106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
 114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
 115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         is incremented or not.
 120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         is incremented or not.
 126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
ARM GAS  /tmp/ccwAtqmE.s 			page 11


 154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
 175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
 205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
ARM GAS  /tmp/ccwAtqmE.s 			page 12


 211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
 215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
 217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
 224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000001U /*!< DMA Channel 1 */
 251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000002U /*!< DMA Channel 2 */
 252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000003U /*!< DMA Channel 3 */
 253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000004U /*!< DMA Channel 4 */
 254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000005U /*!< DMA Channel 5 */
 255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000006U /*!< DMA Channel 6 */
 256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000007U /*!< DMA Channel 7 */
 257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
ARM GAS  /tmp/ccwAtqmE.s 			page 13


 268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
ARM GAS  /tmp/ccwAtqmE.s 			page 14


 325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Write a value in DMA register
 347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __REG__ Register to be written
 349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Read a value in DMA register
 356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __REG__ Register to be read
 358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Register value
 359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval DMAx
 372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(DMA2)
 374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
 375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel7)) ?  DMA2 : DMA1)
 376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
 378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
ARM GAS  /tmp/ccwAtqmE.s 			page 15


 382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2)
 386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel6)) ? LL_DMA_CHANNEL_6 : \
 400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval DMAx_Channely
 432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2)
 434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
ARM GAS  /tmp/ccwAtqmE.s 			page 16


 439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  DMA2_Channel7)
 450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  DMA1_Channel7)
 464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  DMA1_Channel7)
 474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  * @{
 487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  */
 488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Enable DMA channel.
 494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 17


 496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))-
 509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Disable DMA channel.
 513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
 528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_EN) == (DMA_CCR_EN));
 548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
ARM GAS  /tmp/ccwAtqmE.s 			page 18


 553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              Configuration);
 584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
 590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
ARM GAS  /tmp/ccwAtqmE.s 			page 19


 610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              Mode);
 658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  /tmp/ccwAtqmE.s 			page 20


 667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
 677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_CIRC));
 680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
ARM GAS  /tmp/ccwAtqmE.s 			page 21


 724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_PINC));
 725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_MINC));
 770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Peripheral size.
 774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
ARM GAS  /tmp/ccwAtqmE.s 			page 22


 781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Peripheral size.
 798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Memory size.
 821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
ARM GAS  /tmp/ccwAtqmE.s 			page 23


 838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Memory size.
 845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Channel priority level.
 868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
 869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 888:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              Priority);
 889:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 890:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 891:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 892:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel priority level.
 893:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
 894:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 24


 895:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 896:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 897:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 898:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 899:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 900:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 901:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 902:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 903:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 904:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 905:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 906:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 907:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 908:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 909:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
 910:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 911:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 912:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_PL));
 913:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 914:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 915:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 916:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Number of data to transfer.
 917:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   This action has no effect if
 918:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         channel is enabled.
 919:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
 920:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 921:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 922:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 923:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 924:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 925:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 926:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 927:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 928:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 929:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
 930:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 931:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 932:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
 933:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 934:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 935:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 936:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 937:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 938:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 939:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Number of data to transfer.
 940:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Once the channel is enabled, the return value indicate the
 941:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         remaining bytes to be transmitted.
 942:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
 943:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 944:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 945:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 946:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 947:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 948:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 949:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 950:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 951:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
ARM GAS  /tmp/ccwAtqmE.s 			page 25


 952:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 953:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 954:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
 955:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 957:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 958:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 959:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 960:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 961:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Configure the Source and Destination addresses.
 962:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
 963:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Each IP using DMA provides an API to get directly the register adress (LL_PPP_DMA_GetRe
 964:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
 965:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CMAR         MA            LL_DMA_ConfigAddresses
 966:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 967:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 968:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 969:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 970:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 971:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 972:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 973:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 974:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 975:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 976:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
 977:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 978:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 979:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 980:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 981:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 982:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 983:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddres
 984:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                             uint32_t DstAddress, uint32_t Direction)
 985:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 986:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   /* Direction Memory to Periph */
 987:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 988:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   {
 989:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
 990:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
 991:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   }
 992:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
 993:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   else
 994:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   {
 995:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
 996:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]
 997:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   }
 998:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 999:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1000:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1001:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set the Memory address.
1002:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1003:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1004:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetMemoryAddress
1005:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1006:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1007:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1008:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  /tmp/ccwAtqmE.s 			page 26


1009:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1010:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1011:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1012:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1013:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1014:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1015:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1016:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1017:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1018:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1019:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1020:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1021:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1022:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1023:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set the Peripheral address.
1024:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1025:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1026:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetPeriphAddress
1027:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1028:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1029:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1030:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1031:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1032:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1033:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1034:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1035:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1036:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1037:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1038:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1039:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAd
1040:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1041:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1042:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1043:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1044:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1045:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Memory address.
1046:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1047:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetMemoryAddress
1048:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1049:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1050:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1051:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1052:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1053:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1054:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1055:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1056:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1057:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1058:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1059:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1060:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1061:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1062:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1063:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1064:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1065:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Peripheral address.
ARM GAS  /tmp/ccwAtqmE.s 			page 27


1066:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1067:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetPeriphAddress
1068:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1069:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1070:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1071:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1072:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1073:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1074:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1075:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1076:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1077:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1078:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1079:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1080:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1081:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1082:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1083:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1084:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1085:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1086:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1087:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1088:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetM2MSrcAddress
1089:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1090:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1091:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1092:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1093:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1094:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1095:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1096:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1097:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1098:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1099:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetM2MDstAddress
1111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
ARM GAS  /tmp/ccwAtqmE.s 			page 28


1123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
1126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
1130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetM2MSrcAddress
1132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetM2MDstAddress
1152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
1166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
1171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
1174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
1175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 1 global interrupt flag.
1179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF1          LL_DMA_IsActiveFlag_GI1
ARM GAS  /tmp/ccwAtqmE.s 			page 29


1180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI1(DMA_TypeDef *DMAx)
1184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1));
1186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 2 global interrupt flag.
1190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF2          LL_DMA_IsActiveFlag_GI2
1191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI2(DMA_TypeDef *DMAx)
1195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2));
1197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 3 global interrupt flag.
1201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF3          LL_DMA_IsActiveFlag_GI3
1202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI3(DMA_TypeDef *DMAx)
1206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3));
1208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 4 global interrupt flag.
1212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF4          LL_DMA_IsActiveFlag_GI4
1213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI4(DMA_TypeDef *DMAx)
1217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4));
1219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 5 global interrupt flag.
1223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF5          LL_DMA_IsActiveFlag_GI5
1224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI5(DMA_TypeDef *DMAx)
1228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5));
1230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 6 global interrupt flag.
1234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF6          LL_DMA_IsActiveFlag_GI6
1235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccwAtqmE.s 			page 30


1237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI6(DMA_TypeDef *DMAx)
1239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6));
1241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 7 global interrupt flag.
1245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          GIF7          LL_DMA_IsActiveFlag_GI7
1246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI7(DMA_TypeDef *DMAx)
1250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7));
1252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 1 transfer complete flag.
1256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
1257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
1261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
1263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 2 transfer complete flag.
1267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
1268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
1272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
1274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 3 transfer complete flag.
1278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
1279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
1283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
1285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 4 transfer complete flag.
1289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
1290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
ARM GAS  /tmp/ccwAtqmE.s 			page 31


1294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
1296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 5 transfer complete flag.
1300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
1301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
1305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 237              		.loc 2 1306 0
 238 0002 1B4B     		ldr	r3, .L21
 239 0004 1B68     		ldr	r3, [r3]
 240              	.LVL3:
 241              	.LBE20:
 242              	.LBE19:
 201:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 202:Src/stm32f3xx_it.c ****   DMAx_Streamx_IRQHandler(1, 5, esp_interface);
 243              		.loc 1 202 0
 244 0006 13F4003F 		tst	r3, #131072
 245 000a 05D1     		bne	.L19
 246              	.LVL4:
 247              	.LBB21:
 248              	.LBB22:
1307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 6 transfer complete flag.
1311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
1312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
1316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
1318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 7 transfer complete flag.
1322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
1323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
1327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
1329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 1 half transfer flag.
1333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
1334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
ARM GAS  /tmp/ccwAtqmE.s 			page 32


1337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
1338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
1340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 2 half transfer flag.
1344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF2         LL_DMA_IsActiveFlag_HT2
1345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
1349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2));
1351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 3 half transfer flag.
1355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
1356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
1360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3));
1362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 4 half transfer flag.
1366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF4         LL_DMA_IsActiveFlag_HT4
1367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
1371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4));
1373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 5 half transfer flag.
1377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
1378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
1382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5));
 249              		.loc 2 1383 0
 250 000c 184B     		ldr	r3, .L21
 251 000e 1B68     		ldr	r3, [r3]
 252              	.LVL5:
 253              	.LBE22:
 254              	.LBE21:
 255              		.loc 1 202 0
 256 0010 13F4802F 		tst	r3, #262144
 257 0014 14D1     		bne	.L20
 258              	.L15:
ARM GAS  /tmp/ccwAtqmE.s 			page 33


 203:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 204:Src/stm32f3xx_it.c ****   
 205:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 206:Src/stm32f3xx_it.c **** 
 207:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 208:Src/stm32f3xx_it.c **** }
 259              		.loc 1 208 0
 260 0016 38BD     		pop	{r3, r4, r5, pc}
 261              	.L19:
 262              	.LVL6:
 263              	.LBB23:
 264              	.LBB24:
1384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 6 half transfer flag.
1388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
1389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
1393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
1395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 7 half transfer flag.
1399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          HTIF7         LL_DMA_IsActiveFlag_HT7
1400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
1404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7));
1406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 1 transfer error flag.
1410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
1411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
1415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
1417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 2 transfer error flag.
1421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
1422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
1426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2));
1428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
ARM GAS  /tmp/ccwAtqmE.s 			page 34


1429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 3 transfer error flag.
1432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
1433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
1437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
1439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 4 transfer error flag.
1443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
1444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
1448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
1450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 5 transfer error flag.
1454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
1455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
1459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5));
1461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 6 transfer error flag.
1465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
1466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
1470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6));
1472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Channel 7 transfer error flag.
1476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll ISR          TEIF7         LL_DMA_IsActiveFlag_TE7
1477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
1481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7));
1483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
ARM GAS  /tmp/ccwAtqmE.s 			page 35


1486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 1 global interrupt flag.
1487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF1         LL_DMA_ClearFlag_GI1
1488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
1492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
1494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 2 global interrupt flag.
1498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
1499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
1503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
1505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 3 global interrupt flag.
1509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
1510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
1514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
1516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 4 global interrupt flag.
1520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
1521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
1525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
1527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 5 global interrupt flag.
1531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
1532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
1536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
1538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 6 global interrupt flag.
1542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF6         LL_DMA_ClearFlag_GI6
ARM GAS  /tmp/ccwAtqmE.s 			page 36


1543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
1547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
1549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 7 global interrupt flag.
1553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CGIF7         LL_DMA_ClearFlag_GI7
1554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
1558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
1560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 1  transfer complete flag.
1564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
1565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
1569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
1571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 2  transfer complete flag.
1575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
1576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
1580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
1582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 3  transfer complete flag.
1586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
1587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
1591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
1593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 4  transfer complete flag.
1597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
1598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
ARM GAS  /tmp/ccwAtqmE.s 			page 37


1600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
1602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
1604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 5  transfer complete flag.
1608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
1609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
1613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 265              		.loc 2 1614 0
 266 0018 154B     		ldr	r3, .L21
 267 001a 4FF40032 		mov	r2, #131072
 268 001e 5A60     		str	r2, [r3, #4]
 269              	.LVL7:
 270              	.LBE24:
 271              	.LBE23:
 202:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 272              		.loc 1 202 0
 273 0020 144C     		ldr	r4, .L21+4
 274 0022 B4F81434 		ldrh	r3, [r4, #1044]
 275 0026 C3F58072 		rsb	r2, r3, #256
 276 002a 04F10801 		add	r1, r4, #8
 277 002e 92B2     		uxth	r2, r2
 278 0030 1944     		add	r1, r1, r3
 279 0032 2046     		mov	r0, r4
 280 0034 FFF7FEFF 		bl	RP_Process_Data
 281              	.LVL8:
 282 0038 0023     		movs	r3, #0
 283 003a A4F81434 		strh	r3, [r4, #1044]	@ movhi
 284 003e EAE7     		b	.L15
 285              	.L20:
 286              	.LVL9:
 287              	.LBB25:
 288              	.LBB26:
1615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 6  transfer complete flag.
1619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
1620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
1624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
1626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 7  transfer complete flag.
1630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
1631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 38


1632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
1635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
1637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 1  half transfer flag.
1641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
1642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
1646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
1648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 2  half transfer flag.
1652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF2        LL_DMA_ClearFlag_HT2
1653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
1657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
1659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 3  half transfer flag.
1663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF3        LL_DMA_ClearFlag_HT3
1664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
1668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
1670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 4  half transfer flag.
1674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF4        LL_DMA_ClearFlag_HT4
1675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
1678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
1679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
1681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
1682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
1683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
1684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Clear Channel 5  half transfer flag.
1685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
1686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
1688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
ARM GAS  /tmp/ccwAtqmE.s 			page 39


1689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
1690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
1691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 289              		.loc 2 1691 0
 290 0040 0B4B     		ldr	r3, .L21
 291 0042 4FF48022 		mov	r2, #262144
 292 0046 5A60     		str	r2, [r3, #4]
 293              	.LVL10:
 294              	.LBE26:
 295              	.LBE25:
 296              	.LBB27:
 297              	.LBB28:
 956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 298              		.loc 2 956 0
 299 0048 5833     		adds	r3, r3, #88
 300 004a 5C68     		ldr	r4, [r3, #4]
 301              	.LVL11:
 302              	.LBE28:
 303              	.LBE27:
 202:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 304              		.loc 1 202 0
 305 004c A4B2     		uxth	r4, r4
 306 004e C4F58074 		rsb	r4, r4, #256
 307 0052 A4B2     		uxth	r4, r4
 308              	.LVL12:
 309 0054 074D     		ldr	r5, .L21+4
 310 0056 B5F81434 		ldrh	r3, [r5, #1044]
 311 005a E21A     		subs	r2, r4, r3
 312 005c 05F10801 		add	r1, r5, #8
 313 0060 92B2     		uxth	r2, r2
 314 0062 1944     		add	r1, r1, r3
 315 0064 2846     		mov	r0, r5
 316 0066 FFF7FEFF 		bl	RP_Process_Data
 317              	.LVL13:
 318 006a A5F81444 		strh	r4, [r5, #1044]	@ movhi
 319              		.loc 1 208 0
 320 006e D2E7     		b	.L15
 321              	.L22:
 322              		.align	2
 323              	.L21:
 324 0070 00000240 		.word	1073872896
 325 0074 00000000 		.word	esp_interface
 326              		.cfi_endproc
 327              	.LFE704:
 329              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 330              		.align	1
 331              		.global	TIM2_IRQHandler
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu fpv4-sp-d16
 337              	TIM2_IRQHandler:
 338              	.LFB705:
 209:Src/stm32f3xx_it.c **** 
 210:Src/stm32f3xx_it.c **** /**
 211:Src/stm32f3xx_it.c **** * @brief This function handles TIM2 global interrupt.
 212:Src/stm32f3xx_it.c **** */
ARM GAS  /tmp/ccwAtqmE.s 			page 40


 213:Src/stm32f3xx_it.c **** void TIM2_IRQHandler(void)
 214:Src/stm32f3xx_it.c **** {
 339              		.loc 1 214 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 08B5     		push	{r3, lr}
 344              	.LCFI2:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 3, -8
 347              		.cfi_offset 14, -4
 215:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 216:Src/stm32f3xx_it.c **** 
 217:Src/stm32f3xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 218:Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 348              		.loc 1 218 0
 349 0002 0248     		ldr	r0, .L25
 350 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 351              	.LVL14:
 219:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 220:Src/stm32f3xx_it.c **** 
 221:Src/stm32f3xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 222:Src/stm32f3xx_it.c **** }
 352              		.loc 1 222 0
 353 0008 08BD     		pop	{r3, pc}
 354              	.L26:
 355 000a 00BF     		.align	2
 356              	.L25:
 357 000c 00000000 		.word	htim2
 358              		.cfi_endproc
 359              	.LFE705:
 361              		.section	.text.USART1_IRQHandler,"ax",%progbits
 362              		.align	1
 363              		.global	USART1_IRQHandler
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv4-sp-d16
 369              	USART1_IRQHandler:
 370              	.LFB706:
 223:Src/stm32f3xx_it.c **** 
 224:Src/stm32f3xx_it.c **** /**
 225:Src/stm32f3xx_it.c **** * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 
 226:Src/stm32f3xx_it.c **** */
 227:Src/stm32f3xx_it.c **** void USART1_IRQHandler(void)
 228:Src/stm32f3xx_it.c **** {
 371              		.loc 1 228 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL15:
 376              	.LBB29:
 377              	.LBB30:
 378              		.file 3 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h"
   1:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @file    stm32f3xx_ll_usart.h
ARM GAS  /tmp/ccwAtqmE.s 			page 41


   4:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
   9:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
  11:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      without specific prior written permission.
  21:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
  22:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
  33:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   ******************************************************************************
  34:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  35:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  36:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #ifndef __STM32F3xx_LL_USART_H
  38:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define __STM32F3xx_LL_USART_H
  39:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  40:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #ifdef __cplusplus
  41:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** extern "C" {
  42:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif
  43:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  44:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #include "stm32f3xx.h"
  46:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  47:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @addtogroup STM32F3xx_LL_Driver
  48:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  49:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  50:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  51:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
  52:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  53:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL USART
  54:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  55:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  56:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  57:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  60:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
ARM GAS  /tmp/ccwAtqmE.s 			page 42


  61:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  62:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  63:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  64:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
  65:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
  66:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  67:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  68:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  69:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  70:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  71:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  72:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  73:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
  74:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
  75:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  76:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  77:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  78:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  79:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  80:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  81:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  82:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  83:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  84:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
  85:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  86:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  87:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** typedef struct
  88:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
  89:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  90:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  91:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  92:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  93:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  94:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  95:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  96:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  97:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  98:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  99:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
ARM GAS  /tmp/ccwAtqmE.s 			page 43


 118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** } LL_USART_InitTypeDef;
 124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** typedef struct
 129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_NCF                        USART_ICR_NCF                 /*!< Noise detected f
ARM GAS  /tmp/ccwAtqmE.s 			page 44


 175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
ARM GAS  /tmp/ccwAtqmE.s 			page 45


 232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USART_7BITS_SUPPORT)
 272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #else
 276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif
 279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccwAtqmE.s 			page 46


 289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
ARM GAS  /tmp/ccwAtqmE.s 			page 47


 346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
ARM GAS  /tmp/ccwAtqmE.s 			page 48


 403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
ARM GAS  /tmp/ccwAtqmE.s 			page 49


 460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Write a value in USART register
 479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __REG__ Register to be written
 481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Read a value in USART register
 488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __REG__ Register to be read
 490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Register value
 491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2) + ((__BAUDRATE_
 509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccwAtqmE.s 			page 50


 517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART Enable
 539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccwAtqmE.s 			page 51


 574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UESM);
 586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM));
 613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Receiver Disable
 628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccwAtqmE.s 			page 52


 631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Transmitter Enable
 639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Transmitter Disable
 650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         of Transmitter and Receiver
 662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccwAtqmE.s 			page 53


 688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 54


 745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
 761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
 764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (*) Values not available on all devices
 765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
 775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
 776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
 779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
 782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (*) Values not available on all devices
 783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
 791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
 792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
 796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_MME);
 798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
ARM GAS  /tmp/ccwAtqmE.s 			page 55


 802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
 803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
 807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
 809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
 813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
 814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
 818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME));
 820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Oversampling mode
 838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccwAtqmE.s 			page 56


 859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 888:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 889:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 890:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 891:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 892:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 893:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 894:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 895:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 896:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 897:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 898:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 899:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 900:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 901:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 902:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 903:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 904:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 905:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 906:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 907:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 908:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 909:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 910:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 911:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 912:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 913:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 914:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 915:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
ARM GAS  /tmp/ccwAtqmE.s 			page 57


 916:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 917:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 918:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 919:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 920:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 921:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 922:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 923:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 924:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 925:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 926:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 927:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 928:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 929:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 930:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 931:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 932:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 933:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 934:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 935:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 936:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 937:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 938:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 939:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 940:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 941:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 942:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 943:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 944:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 945:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 946:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 947:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 948:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 949:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 950:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 951:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 952:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 953:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 954:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 955:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 957:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 958:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 959:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 960:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 961:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 962:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 963:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 964:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 965:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 966:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 967:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 968:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 969:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 970:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 971:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 972:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
ARM GAS  /tmp/ccwAtqmE.s 			page 58


 973:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 974:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 975:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 976:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 977:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 978:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 979:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 980:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 981:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 982:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 983:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 984:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 985:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 986:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 987:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 988:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 989:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 990:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 991:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 992:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 993:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 994:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 995:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 996:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 997:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 998:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 999:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1000:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1001:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1002:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1003:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1004:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1005:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1006:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1007:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
1008:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1009:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1010:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1011:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1012:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1013:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1014:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1015:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1016:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1017:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1018:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1019:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1020:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1021:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1022:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1023:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1024:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1025:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1026:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1027:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1028:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1029:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 59


1030:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1031:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1032:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1033:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1034:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1035:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1036:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1037:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1038:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1039:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1040:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1041:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1042:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1043:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1044:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1045:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1046:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1047:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1048:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1049:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1050:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1051:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1052:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1053:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1054:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
1055:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1056:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1057:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1058:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1059:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1060:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1061:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1062:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1063:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1064:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1065:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1066:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
1067:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (*) Values not available on all devices
1068:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1069:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1070:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1071:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                               uint32_t StopBits)
1072:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1073:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1074:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1075:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1076:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1077:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1078:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1079:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1080:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1081:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1082:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1083:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1084:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1085:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1086:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
ARM GAS  /tmp/ccwAtqmE.s 			page 60


1087:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1088:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1089:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1090:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1091:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1092:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1093:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1094:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1095:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1096:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1097:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1098:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1099:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
ARM GAS  /tmp/ccwAtqmE.s 			page 61


1144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
ARM GAS  /tmp/ccwAtqmE.s 			page 62


1201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN));
1255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccwAtqmE.s 			page 63


1258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccwAtqmE.s 			page 64


1315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN));
1323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         for wake up with address mark detection.
1329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         value and CMF flag is set on match)
1339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
ARM GAS  /tmp/ccwAtqmE.s 			page 65


1372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccwAtqmE.s 			page 66


1429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 67


1486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Overrun detection
1506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Overrun detection
1517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS);
1535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 68


1543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (Baud rate value != 0)
1576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                           uint32_t BaudRate)
1588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t brrtemp = 0x0U;
1591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     USARTx->BRR = brrtemp;
1598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   else
ARM GAS  /tmp/ccwAtqmE.s 			page 69


1600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Baud Rate
1617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     {
1629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     }
1632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   else
1634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     {
1637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     }
1639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (brrresult);
1641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
ARM GAS  /tmp/ccwAtqmE.s 			page 70


1657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Block Length value in reception
1668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Get Block Length value in reception
1680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
1687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
1691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
1695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable IrDA mode
1699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable IrDA mode
1712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
ARM GAS  /tmp/ccwAtqmE.s 			page 71


1714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccwAtqmE.s 			page 72


1771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
1798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
1802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
ARM GAS  /tmp/ccwAtqmE.s 			page 73


1828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccwAtqmE.s 			page 74


1885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
1887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
1888:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
1889:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
1890:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
1891:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
1892:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1893:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
1894:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1895:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1896:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
1897:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1898:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
1899:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1900:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1901:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1902:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1903:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1904:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1905:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
1906:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1907:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
1908:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1909:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
1910:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1911:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
1912:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1913:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1914:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1915:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1916:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1917:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1918:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1919:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1920:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1921:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1922:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1923:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1924:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1925:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1926:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1927:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1928:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1929:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1930:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1931:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1932:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1933:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1934:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1935:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1936:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1937:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1938:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1939:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1940:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1941:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
ARM GAS  /tmp/ccwAtqmE.s 			page 75


1942:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1943:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1944:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1945:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1946:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1947:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1948:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1949:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1950:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1951:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1952:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1953:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1954:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1955:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_GTPR_GT_Pos);
1956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1957:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1958:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1959:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1960:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1961:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1962:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1963:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1964:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1965:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1966:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1967:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1968:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1969:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
1970:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1971:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1972:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1973:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
1974:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1975:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1976:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1977:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
1978:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1979:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1980:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1981:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1982:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1983:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1984:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1985:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1986:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1987:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1988:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1989:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1990:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1991:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1992:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1993:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1994:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1995:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1996:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1997:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1998:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 76


1999:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2000:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2001:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2002:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2003:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2004:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2005:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2006:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2007:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2008:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2009:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2010:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2011:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2012:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2013:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2014:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2015:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2016:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
2017:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2018:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2019:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2020:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2021:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2022:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2023:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2024:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2025:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2026:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2027:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2028:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2029:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2030:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2031:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2032:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2033:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2034:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2035:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2036:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2037:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2038:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2039:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2040:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2041:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2042:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2043:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2044:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2045:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2046:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2047:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2048:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2049:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2050:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2051:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2052:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2053:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2054:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2055:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
ARM GAS  /tmp/ccwAtqmE.s 			page 77


2056:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2057:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2058:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2059:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable LIN mode
2060:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2061:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2062:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2063:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2064:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2065:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2066:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2067:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2068:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2069:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2070:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2071:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2072:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable LIN mode
2073:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2074:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2075:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2076:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2077:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2078:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2079:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2080:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2081:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2082:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2083:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2084:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2085:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2086:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2087:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2088:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2089:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2090:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2091:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2092:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2093:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2094:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
2095:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2096:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2097:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2098:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2099:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccwAtqmE.s 			page 78


2113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
ARM GAS  /tmp/ccwAtqmE.s 			page 79


2170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM));
2196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
ARM GAS  /tmp/ccwAtqmE.s 			page 80


2227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
2280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
ARM GAS  /tmp/ccwAtqmE.s 			page 81


2284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
ARM GAS  /tmp/ccwAtqmE.s 			page 82


2341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
2381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /tmp/ccwAtqmE.s 			page 83


2398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
2421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
ARM GAS  /tmp/ccwAtqmE.s 			page 84


2455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
2464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
2487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
2511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccwAtqmE.s 			page 85


2512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
2521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE));
2523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
2532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE));
2534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          NF            LL_USART_IsActiveFlag_NE
2539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
2543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE));
2545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
2554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
2556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
2560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
2561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
2565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 379              		.loc 3 2566 0
 380 0000 114B     		ldr	r3, .L35
ARM GAS  /tmp/ccwAtqmE.s 			page 86


 381 0002 DB69     		ldr	r3, [r3, #28]
 382              	.LVL16:
 383              	.LBE30:
 384              	.LBE29:
 229:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 230:Src/stm32f3xx_it.c ****   USARTx_IRQHandler(1, 1, 5, esp_interface);
 385              		.loc 1 230 0
 386 0004 13F0100F 		tst	r3, #16
 387 0008 1CD0     		beq	.L31
 228:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 388              		.loc 1 228 0
 389 000a 10B5     		push	{r4, lr}
 390              	.LCFI3:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 4, -8
 393              		.cfi_offset 14, -4
 394              	.LVL17:
 395              	.LBB31:
 396              	.LBB32:
 397              	.LBB33:
2567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
2571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
2572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
2576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
2578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
2582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
2583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
2587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
2589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
2593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
2594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
2598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
2600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
ARM GAS  /tmp/ccwAtqmE.s 			page 87


2604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
2607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
2611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF));
2613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
2617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
2620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
2624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF));
2626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
2630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
2633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
2637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS));
2639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
2643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
2644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
2648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF));
2650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
2654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
2657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccwAtqmE.s 			page 88


2661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF));
2663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
2667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
2668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
2670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
2674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE));
2676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
2680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
2681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
2683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
2687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF));
2689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
2693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
2694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
2698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY));
2700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
2704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
2705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
2709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF));
2711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
2715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
2716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccwAtqmE.s 			page 89


2718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
2720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF));
2722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
2726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
2727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
2731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU));
2733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
2737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
2738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
2739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
2740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
2744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF));
2746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
2750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
2751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
2755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK));
2757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
2761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
2762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
2766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK));
2768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
2773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
2774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccwAtqmE.s 			page 90


2775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
2778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
2780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
2784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
2785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
2789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
2791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
2795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
2796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
2800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NCF);
2802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
2806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
2807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
2811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
2813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
2817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
2818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
2822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 398              		.loc 3 2823 0
 399 000c 0E4B     		ldr	r3, .L35
 400 000e 1022     		movs	r2, #16
 401 0010 1A62     		str	r2, [r3, #32]
 402              	.LVL18:
 403              	.LBE33:
 404              	.LBE32:
 405              	.LBB34:
ARM GAS  /tmp/ccwAtqmE.s 			page 91


 406              	.LBB35:
 956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 407              		.loc 2 956 0
 408 0012 03F54843 		add	r3, r3, #51200
 409 0016 5833     		adds	r3, r3, #88
 410 0018 5C68     		ldr	r4, [r3, #4]
 411              	.LVL19:
 412              	.LBE35:
 413              	.LBE34:
 414              		.loc 1 230 0
 415 001a A4B2     		uxth	r4, r4
 416 001c C4F58074 		rsb	r4, r4, #256
 417 0020 A4B2     		uxth	r4, r4
 418              	.LVL20:
 419 0022 0A4B     		ldr	r3, .L35+4
 420 0024 B3F81414 		ldrh	r1, [r3, #1044]
 421 0028 621A     		subs	r2, r4, r1
 422 002a 92B2     		uxth	r2, r2
 423              	.LVL21:
 424 002c 1AB9     		cbnz	r2, .L34
 425              	.LVL22:
 426              	.L29:
 427              		.loc 1 230 0 is_stmt 0 discriminator 4
 428 002e 074B     		ldr	r3, .L35+4
 429 0030 A3F81444 		strh	r4, [r3, #1044]	@ movhi
 430              	.LBE31:
 231:Src/stm32f3xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 232:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 233:Src/stm32f3xx_it.c **** 
 234:Src/stm32f3xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 235:Src/stm32f3xx_it.c **** }
 431              		.loc 1 235 0 is_stmt 1 discriminator 4
 432 0034 10BD     		pop	{r4, pc}
 433              	.LVL23:
 434              	.L34:
 435              	.LBB36:
 230:Src/stm32f3xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 436              		.loc 1 230 0 discriminator 2
 437 0036 03F10800 		add	r0, r3, #8
 438 003a 0144     		add	r1, r1, r0
 439 003c 0838     		subs	r0, r0, #8
 440 003e FFF7FEFF 		bl	RP_Process_Data
 441              	.LVL24:
 442 0042 F4E7     		b	.L29
 443              	.LVL25:
 444              	.L31:
 445              	.LCFI4:
 446              		.cfi_def_cfa_offset 0
 447              		.cfi_restore 4
 448              		.cfi_restore 14
 449 0044 7047     		bx	lr
 450              	.L36:
 451 0046 00BF     		.align	2
 452              	.L35:
 453 0048 00380140 		.word	1073821696
 454 004c 00000000 		.word	esp_interface
 455              	.LBE36:
ARM GAS  /tmp/ccwAtqmE.s 			page 92


 456              		.cfi_endproc
 457              	.LFE706:
 459              		.text
 460              	.Letext0:
 461              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 462              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 463              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 464              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 465              		.file 8 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 466              		.file 9 "Inc/main.h"
 467              		.file 10 "/usr/arm-none-eabi/include/sys/lock.h"
 468              		.file 11 "/usr/arm-none-eabi/include/sys/_types.h"
 469              		.file 12 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 470              		.file 13 "/usr/arm-none-eabi/include/sys/reent.h"
 471              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 472              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 473              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 474              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 475              		.file 18 "Inc/crc_16.h"
 476              		.file 19 "Inc/robotronik_protocol.h"
 477              		.file 20 "Inc/usart.h"
 478              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 479              		.file 22 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
ARM GAS  /tmp/ccwAtqmE.s 			page 93


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_it.c
     /tmp/ccwAtqmE.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccwAtqmE.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:46     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccwAtqmE.s:60     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:67     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccwAtqmE.s:81     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:88     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccwAtqmE.s:102    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:109    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccwAtqmE.s:123    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:130    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccwAtqmE.s:143    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:150    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccwAtqmE.s:163    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:170    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccwAtqmE.s:183    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccwAtqmE.s:190    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccwAtqmE.s:213    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccwAtqmE.s:220    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccwAtqmE.s:324    .text.DMA1_Channel5_IRQHandler:0000000000000070 $d
     /tmp/ccwAtqmE.s:330    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccwAtqmE.s:337    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccwAtqmE.s:357    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccwAtqmE.s:362    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccwAtqmE.s:369    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccwAtqmE.s:453    .text.USART1_IRQHandler:0000000000000048 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
RP_Process_Data
esp_interface
HAL_TIM_IRQHandler
htim2
