ARM GAS  /tmp/cclxg7K3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"ax_12a.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.AX_FSM_HEADER_0,"ax",%progbits
  21              		.align	2
  22              		.global	AX_FSM_HEADER_0
  23              		.thumb
  24              		.thumb_func
  26              	AX_FSM_HEADER_0:
  27              	.LFB0:
  28              		.file 1 "Src/ax_12a.c"
   1:Src/ax_12a.c  **** #include "ax_12a.h"
   2:Src/ax_12a.c  **** #include <stdio.h>
   3:Src/ax_12a.c  **** 
   4:Src/ax_12a.c  **** //========================================
   5:Src/ax_12a.c  **** //    CONSTANTES ET VARIABLES GLOBALES
   6:Src/ax_12a.c  **** //========================================
   7:Src/ax_12a.c  **** static const uint8_t header[2] = {0xFF, 0xFF};
   8:Src/ax_12a.c  **** static const uint8_t field_addr[] = {
   9:Src/ax_12a.c  ****   //EEPROM - Configuration  
  10:Src/ax_12a.c  ****   [AX_ID] = 0x03,
  11:Src/ax_12a.c  ****   [AX_BAUD_RATE] = 0x04,
  12:Src/ax_12a.c  ****   [AX_RETURN_DELAY_TIME] = 0x05,
  13:Src/ax_12a.c  ****   [AX_CW_ANGLE_LIMIT] = 0x06,
  14:Src/ax_12a.c  ****   [AX_CCW_ANGLE_LIMIT] = 0x08,
  15:Src/ax_12a.c  ****   [AX_LIMIT_TEMPERATURE] = 0x0B,
  16:Src/ax_12a.c  ****   [AX_LOWER_LIMIT_VOLTAGE] = 0x0C,
  17:Src/ax_12a.c  ****   [AX_UPPER_LIMIT_VOLTAGE] = 0x0D,
  18:Src/ax_12a.c  ****   [AX_MAX_TORQUE] = 0x0E,
  19:Src/ax_12a.c  ****   [AX_RETURN_LEVEL] = 0x10,
  20:Src/ax_12a.c  ****   [AX_ALARM_LED] = 0x11,
  21:Src/ax_12a.c  ****   [AX_ALARM_SHUTDOWN] = 0x12,
  22:Src/ax_12a.c  ****   //EEPROM - Info
  23:Src/ax_12a.c  ****   [AX_MODEL_NUMBER] = 0x00,
  24:Src/ax_12a.c  ****   [AX_FIRMWARE_VERSION] = 0x02,
  25:Src/ax_12a.c  ****   //RAM - Contrôle
  26:Src/ax_12a.c  ****   [AX_TORQUE_ENABLE] = 0x18,
  27:Src/ax_12a.c  ****   [AX_LED] = 0x19,
  28:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_MARGIN] = 0x1A,
  29:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_MARGIN] = 0x1B,
  30:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_SLOPE] = 0x1C,
ARM GAS  /tmp/cclxg7K3.s 			page 2


  31:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_SLOPE] = 0x1D,
  32:Src/ax_12a.c  ****   [AX_GOAL_POSITION] = 0x1E,
  33:Src/ax_12a.c  ****   [AX_MOVING_SPEED] = 0x20,
  34:Src/ax_12a.c  ****   [AX_TORQUE_LIMIT] = 0x22,
  35:Src/ax_12a.c  ****   [AX_EEPROM_LOCK] = 0x2F,
  36:Src/ax_12a.c  ****   [AX_PUNCH] = 0x30,
  37:Src/ax_12a.c  ****   //RAM - Info
  38:Src/ax_12a.c  ****   [AX_CURRENT_POSITION] = 0x24,
  39:Src/ax_12a.c  ****   [AX_CURRENT_SPEED] = 0x26,
  40:Src/ax_12a.c  ****   [AX_CURRENT_LOAD] = 0x28,
  41:Src/ax_12a.c  ****   [AX_CURRENT_VOLTAGE] = 0x2A,
  42:Src/ax_12a.c  ****   [AX_CURRENT_TEMPERATURE] = 0x2B,
  43:Src/ax_12a.c  ****   [AX_REGISTERED_INSTRUCTION] = 0x2C,
  44:Src/ax_12a.c  ****   [AX_MOVING] = 0x2E,
  45:Src/ax_12a.c  **** };
  46:Src/ax_12a.c  **** static const uint8_t field_length[] = {
  47:Src/ax_12a.c  ****   //EEPROM - Configuration  
  48:Src/ax_12a.c  ****   [AX_ID] = 1,
  49:Src/ax_12a.c  ****   [AX_BAUD_RATE] = 1,
  50:Src/ax_12a.c  ****   [AX_RETURN_DELAY_TIME] = 1,
  51:Src/ax_12a.c  ****   [AX_CW_ANGLE_LIMIT] = 2,
  52:Src/ax_12a.c  ****   [AX_CCW_ANGLE_LIMIT] = 2,
  53:Src/ax_12a.c  ****   [AX_LIMIT_TEMPERATURE] = 1,
  54:Src/ax_12a.c  ****   [AX_LOWER_LIMIT_VOLTAGE] = 1,
  55:Src/ax_12a.c  ****   [AX_UPPER_LIMIT_VOLTAGE] = 1,
  56:Src/ax_12a.c  ****   [AX_MAX_TORQUE] = 2,
  57:Src/ax_12a.c  ****   [AX_RETURN_LEVEL] = 1,
  58:Src/ax_12a.c  ****   [AX_ALARM_LED] = 1,
  59:Src/ax_12a.c  ****   [AX_ALARM_SHUTDOWN] = 1,
  60:Src/ax_12a.c  ****   //EEPROM - Info
  61:Src/ax_12a.c  ****   [AX_MODEL_NUMBER] = 2,
  62:Src/ax_12a.c  ****   [AX_FIRMWARE_VERSION] = 1,
  63:Src/ax_12a.c  ****   //RAM - Contrôle
  64:Src/ax_12a.c  ****   [AX_TORQUE_ENABLE] = 1,
  65:Src/ax_12a.c  ****   [AX_LED] = 1,
  66:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_MARGIN] = 1,
  67:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_MARGIN] = 1,
  68:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_SLOPE] = 1,
  69:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_SLOPE] = 1,
  70:Src/ax_12a.c  ****   [AX_GOAL_POSITION] = 2,
  71:Src/ax_12a.c  ****   [AX_MOVING_SPEED] = 2,
  72:Src/ax_12a.c  ****   [AX_TORQUE_LIMIT] = 2,
  73:Src/ax_12a.c  ****   [AX_EEPROM_LOCK] = 1,
  74:Src/ax_12a.c  ****   [AX_PUNCH] = 2,
  75:Src/ax_12a.c  ****   //RAM - Info
  76:Src/ax_12a.c  ****   [AX_CURRENT_POSITION] = 2,
  77:Src/ax_12a.c  ****   [AX_CURRENT_SPEED] = 2,
  78:Src/ax_12a.c  ****   [AX_CURRENT_LOAD] = 2,
  79:Src/ax_12a.c  ****   [AX_CURRENT_VOLTAGE] = 1,
  80:Src/ax_12a.c  ****   [AX_CURRENT_TEMPERATURE] = 1,
  81:Src/ax_12a.c  ****   [AX_REGISTERED_INSTRUCTION] = 1,
  82:Src/ax_12a.c  ****   [AX_MOVING] = 1,
  83:Src/ax_12a.c  **** };
  84:Src/ax_12a.c  **** static uint16_t err;
  85:Src/ax_12a.c  **** 
  86:Src/ax_12a.c  **** //========================================
  87:Src/ax_12a.c  **** //        FONCTIONS DE RECEPTION
ARM GAS  /tmp/cclxg7K3.s 			page 3


  88:Src/ax_12a.c  **** //========================================
  89:Src/ax_12a.c  **** #define FSM_BYTE *(fsm->p_buffer)
  90:Src/ax_12a.c  **** #define FSM_NEXT fsm->p_buffer++
  91:Src/ax_12a.c  **** #define FSM_RESET fsm->update_state = AX_FSM_HEADER_0; fsm->p_buffer = fsm->buffer
  92:Src/ax_12a.c  **** #define FSM_UPDATE(state_function) fsm->update_state = state_function
  93:Src/ax_12a.c  **** 
  94:Src/ax_12a.c  **** void AX_FSM_HEADER_0(AX_Receiver_FSM *fsm){
  29              		.loc 1 94 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  95:Src/ax_12a.c  ****   if(FSM_BYTE == header[0]){
  35              		.loc 1 95 0
  36 0000 C368     		ldr	r3, [r0, #12]
  37 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  38 0004 FF2A     		cmp	r2, #255
  39 0006 03D1     		bne	.L1
  96:Src/ax_12a.c  ****     FSM_NEXT;
  40              		.loc 1 96 0
  41 0008 0133     		adds	r3, r3, #1
  97:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_HEADER_1);
  42              		.loc 1 97 0
  43 000a 024A     		ldr	r2, .L4
  96:Src/ax_12a.c  ****     FSM_NEXT;
  44              		.loc 1 96 0
  45 000c C360     		str	r3, [r0, #12]
  46              		.loc 1 97 0
  47 000e 0260     		str	r2, [r0]
  48              	.L1:
  49 0010 7047     		bx	lr
  50              	.L5:
  51 0012 00BF     		.align	2
  52              	.L4:
  53 0014 00000000 		.word	AX_FSM_HEADER_1
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.section	.text.AX_FSM_HEADER_1,"ax",%progbits
  58              		.align	2
  59              		.global	AX_FSM_HEADER_1
  60              		.thumb
  61              		.thumb_func
  63              	AX_FSM_HEADER_1:
  64              	.LFB1:
  98:Src/ax_12a.c  ****   }
  99:Src/ax_12a.c  **** }
 100:Src/ax_12a.c  **** 
 101:Src/ax_12a.c  **** void AX_FSM_HEADER_1(AX_Receiver_FSM *fsm){
  65              		.loc 1 101 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.LVL1:
 102:Src/ax_12a.c  ****   if(FSM_BYTE == header[1]){
  71              		.loc 1 102 0
ARM GAS  /tmp/cclxg7K3.s 			page 4


  72 0000 C368     		ldr	r3, [r0, #12]
  73 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  74 0004 FF2A     		cmp	r2, #255
  75 0006 04D0     		beq	.L9
 103:Src/ax_12a.c  ****     FSM_NEXT;
 104:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_ID);
 105:Src/ax_12a.c  ****   }
 106:Src/ax_12a.c  ****   else{
 107:Src/ax_12a.c  ****     FSM_RESET;
  76              		.loc 1 107 0
  77 0008 044A     		ldr	r2, .L10
  78 000a 8368     		ldr	r3, [r0, #8]
  79 000c 0260     		str	r2, [r0]
  80 000e C360     		str	r3, [r0, #12]
  81 0010 7047     		bx	lr
  82              	.L9:
 103:Src/ax_12a.c  ****     FSM_NEXT;
  83              		.loc 1 103 0
  84 0012 0133     		adds	r3, r3, #1
 104:Src/ax_12a.c  ****   }
  85              		.loc 1 104 0
  86 0014 024A     		ldr	r2, .L10+4
 103:Src/ax_12a.c  ****     FSM_NEXT;
  87              		.loc 1 103 0
  88 0016 C360     		str	r3, [r0, #12]
 104:Src/ax_12a.c  ****   }
  89              		.loc 1 104 0
  90 0018 0260     		str	r2, [r0]
  91 001a 7047     		bx	lr
  92              	.L11:
  93              		.align	2
  94              	.L10:
  95 001c 00000000 		.word	AX_FSM_HEADER_0
  96 0020 00000000 		.word	AX_FSM_ID
  97              		.cfi_endproc
  98              	.LFE1:
 100              		.section	.text.AX_FSM_ID,"ax",%progbits
 101              		.align	2
 102              		.global	AX_FSM_ID
 103              		.thumb
 104              		.thumb_func
 106              	AX_FSM_ID:
 107              	.LFB2:
 108:Src/ax_12a.c  ****   }
 109:Src/ax_12a.c  **** }
 110:Src/ax_12a.c  **** 
 111:Src/ax_12a.c  **** void AX_FSM_ID(AX_Receiver_FSM *fsm){
 108              		.loc 1 111 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL2:
 112:Src/ax_12a.c  ****   if(FSM_BYTE != 0xFF){
 114              		.loc 1 112 0
 115 0000 C368     		ldr	r3, [r0, #12]
 116 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/cclxg7K3.s 			page 5


 117 0004 FF2A     		cmp	r2, #255
 118 0006 04D0     		beq	.L13
 113:Src/ax_12a.c  ****     FSM_NEXT;
 119              		.loc 1 113 0
 120 0008 0133     		adds	r3, r3, #1
 114:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_LENGTH);
 121              		.loc 1 114 0
 122 000a 044A     		ldr	r2, .L15
 113:Src/ax_12a.c  ****     FSM_NEXT;
 123              		.loc 1 113 0
 124 000c C360     		str	r3, [r0, #12]
 125              		.loc 1 114 0
 126 000e 0260     		str	r2, [r0]
 127 0010 7047     		bx	lr
 128              	.L13:
 115:Src/ax_12a.c  ****   }
 116:Src/ax_12a.c  ****   else{
 117:Src/ax_12a.c  ****     FSM_RESET;
 129              		.loc 1 117 0
 130 0012 034A     		ldr	r2, .L15+4
 131 0014 8368     		ldr	r3, [r0, #8]
 132 0016 0260     		str	r2, [r0]
 133 0018 C360     		str	r3, [r0, #12]
 134 001a 7047     		bx	lr
 135              	.L16:
 136              		.align	2
 137              	.L15:
 138 001c 00000000 		.word	AX_FSM_LENGTH
 139 0020 00000000 		.word	AX_FSM_HEADER_0
 140              		.cfi_endproc
 141              	.LFE2:
 143              		.section	.text.AX_FSM_LENGTH,"ax",%progbits
 144              		.align	2
 145              		.global	AX_FSM_LENGTH
 146              		.thumb
 147              		.thumb_func
 149              	AX_FSM_LENGTH:
 150              	.LFB3:
 118:Src/ax_12a.c  ****   }
 119:Src/ax_12a.c  **** }
 120:Src/ax_12a.c  **** 
 121:Src/ax_12a.c  **** void AX_FSM_LENGTH(AX_Receiver_FSM *fsm){
 151              		.loc 1 121 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              	.LVL3:
 122:Src/ax_12a.c  ****   fsm->remaining_bytes = FSM_BYTE;
 157              		.loc 1 122 0
 158 0000 C268     		ldr	r2, [r0, #12]
 159 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 160 0004 0371     		strb	r3, [r0, #4]
 161              	.LVL4:
 123:Src/ax_12a.c  ****   const uint8_t remaining_bytes = fsm->remaining_bytes;
 124:Src/ax_12a.c  ****   if((remaining_bytes >= 2) && (4 + remaining_bytes <= AX_BUFFER_SIZE)){
 162              		.loc 1 124 0
ARM GAS  /tmp/cclxg7K3.s 			page 6


 163 0006 023B     		subs	r3, r3, #2
 164              	.LVL5:
 165 0008 1A2B     		cmp	r3, #26
 166 000a 04D9     		bls	.L20
 125:Src/ax_12a.c  ****     FSM_NEXT;
 126:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_RECEIVING);
 127:Src/ax_12a.c  ****   }
 128:Src/ax_12a.c  ****   else{
 129:Src/ax_12a.c  ****     FSM_RESET;
 167              		.loc 1 129 0
 168 000c 044A     		ldr	r2, .L21
 169 000e 8368     		ldr	r3, [r0, #8]
 170 0010 0260     		str	r2, [r0]
 171 0012 C360     		str	r3, [r0, #12]
 172 0014 7047     		bx	lr
 173              	.L20:
 125:Src/ax_12a.c  ****     FSM_NEXT;
 174              		.loc 1 125 0
 175 0016 0132     		adds	r2, r2, #1
 126:Src/ax_12a.c  ****   }
 176              		.loc 1 126 0
 177 0018 024B     		ldr	r3, .L21+4
 125:Src/ax_12a.c  ****     FSM_NEXT;
 178              		.loc 1 125 0
 179 001a C260     		str	r2, [r0, #12]
 126:Src/ax_12a.c  ****   }
 180              		.loc 1 126 0
 181 001c 0360     		str	r3, [r0]
 182 001e 7047     		bx	lr
 183              	.L22:
 184              		.align	2
 185              	.L21:
 186 0020 00000000 		.word	AX_FSM_HEADER_0
 187 0024 00000000 		.word	AX_FSM_RECEIVING
 188              		.cfi_endproc
 189              	.LFE3:
 191              		.section	.text.AX_FSM_RECEIVING,"ax",%progbits
 192              		.align	2
 193              		.global	AX_FSM_RECEIVING
 194              		.thumb
 195              		.thumb_func
 197              	AX_FSM_RECEIVING:
 198              	.LFB4:
 130:Src/ax_12a.c  ****   }
 131:Src/ax_12a.c  **** }
 132:Src/ax_12a.c  **** 
 133:Src/ax_12a.c  **** void AX_FSM_RECEIVING(AX_Receiver_FSM *fsm){
 199              		.loc 1 133 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204              	.LVL6:
 134:Src/ax_12a.c  ****   FSM_NEXT;
 135:Src/ax_12a.c  ****   fsm->remaining_bytes--;
 205              		.loc 1 135 0
 206 0000 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
ARM GAS  /tmp/cclxg7K3.s 			page 7


 134:Src/ax_12a.c  ****   FSM_NEXT;
 207              		.loc 1 134 0
 208 0002 C268     		ldr	r2, [r0, #12]
 209              		.loc 1 135 0
 210 0004 013B     		subs	r3, r3, #1
 134:Src/ax_12a.c  ****   FSM_NEXT;
 211              		.loc 1 134 0
 212 0006 0132     		adds	r2, r2, #1
 213              		.loc 1 135 0
 214 0008 DBB2     		uxtb	r3, r3
 134:Src/ax_12a.c  ****   FSM_NEXT;
 215              		.loc 1 134 0
 216 000a C260     		str	r2, [r0, #12]
 217              		.loc 1 135 0
 218 000c 0371     		strb	r3, [r0, #4]
 136:Src/ax_12a.c  ****   if(fsm->remaining_bytes == 0){
 219              		.loc 1 136 0
 220 000e 0BB9     		cbnz	r3, .L23
 137:Src/ax_12a.c  ****     fsm->done = 1;
 221              		.loc 1 137 0
 222 0010 0123     		movs	r3, #1
 223 0012 0374     		strb	r3, [r0, #16]
 224              	.L23:
 225 0014 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE4:
 229 0016 00BF     		.section	.text.AX_Extract_Status_Packet,"ax",%progbits
 230              		.align	2
 231              		.global	AX_Extract_Status_Packet
 232              		.thumb
 233              		.thumb_func
 235              	AX_Extract_Status_Packet:
 236              	.LFB5:
 138:Src/ax_12a.c  ****   }
 139:Src/ax_12a.c  **** }
 140:Src/ax_12a.c  **** 
 141:Src/ax_12a.c  **** uint8_t AX_Extract_Status_Packet(AX_Status_Packet *packet, uint8_t frame[AX_BUFFER_SIZE], uint16_t 
 237              		.loc 1 141 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242              	.LVL7:
 243              	.LBB54:
 244              	.LBB55:
 142:Src/ax_12a.c  ****   //The packet size is supposed to be checked in AX_Receive function.
 143:Src/ax_12a.c  ****   //Checksum
 144:Src/ax_12a.c  ****   if(AX_Compute_Checksum(frame+2, packet_size-3) != frame[packet_size-1]){
 145:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 146:Src/ax_12a.c  ****     return 1;
 147:Src/ax_12a.c  ****   }
 148:Src/ax_12a.c  **** 
 149:Src/ax_12a.c  ****   packet->id = frame[2];
 150:Src/ax_12a.c  ****   packet->err = frame[4];
 151:Src/ax_12a.c  ****   
 152:Src/ax_12a.c  ****   //Paramètres
 153:Src/ax_12a.c  ****   packet->nb_params = 0;
ARM GAS  /tmp/cclxg7K3.s 			page 8


 154:Src/ax_12a.c  ****   uint8_t *p_frame = frame+5;
 155:Src/ax_12a.c  ****   uint8_t *end_frame = frame+(packet_size-1);
 156:Src/ax_12a.c  ****   while(p_frame != end_frame){
 157:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 158:Src/ax_12a.c  ****   }
 159:Src/ax_12a.c  ****   
 160:Src/ax_12a.c  ****   return 0;
 161:Src/ax_12a.c  **** }
 162:Src/ax_12a.c  **** 
 163:Src/ax_12a.c  **** uint8_t AX_Receive(AX_Interface *interface, uint16_t packet_size, uint32_t timeout){
 164:Src/ax_12a.c  ****   //Avoid overflow
 165:Src/ax_12a.c  ****   if(packet_size > AX_BUFFER_SIZE){
 166:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 167:Src/ax_12a.c  ****     return 1;
 168:Src/ax_12a.c  ****   }
 169:Src/ax_12a.c  ****   
 170:Src/ax_12a.c  ****   //Préparation de la réception
 171:Src/ax_12a.c  ****   interface->set_direction(AX_RECEIVE);
 172:Src/ax_12a.c  **** 
 173:Src/ax_12a.c  ****   //FSM initialization
 174:Src/ax_12a.c  ****   interface->fsm.update_state = AX_FSM_HEADER_0;
 175:Src/ax_12a.c  ****   interface->fsm.remaining_bytes = 0;
 176:Src/ax_12a.c  ****   interface->fsm.buffer = interface->buffer;
 177:Src/ax_12a.c  ****   interface->fsm.p_buffer = interface->buffer;
 178:Src/ax_12a.c  ****   interface->fsm.done = 0;
 179:Src/ax_12a.c  **** 
 180:Src/ax_12a.c  ****   //Reception
 181:Src/ax_12a.c  ****   if(interface->receive(interface->fsm.p_buffer, packet_size, timeout) != 0){
 182:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 183:Src/ax_12a.c  ****     return 1;
 184:Src/ax_12a.c  ****   }
 185:Src/ax_12a.c  **** 
 186:Src/ax_12a.c  ****   //FSM
 187:Src/ax_12a.c  ****   do{
 188:Src/ax_12a.c  ****     interface->fsm.update_state(&(interface->fsm));
 189:Src/ax_12a.c  **** 
 190:Src/ax_12a.c  ****     /*uint8_t *p;
 191:Src/ax_12a.c  ****     printf("Buffer : ");
 192:Src/ax_12a.c  ****     for(p = interface->buffer; p < interface->fsm.p_buffer; p++){
 193:Src/ax_12a.c  ****       printf("0x%2.2X ", *p);
 194:Src/ax_12a.c  ****     }
 195:Src/ax_12a.c  ****     printf("\n");*/
 196:Src/ax_12a.c  ****   }while(interface->fsm.p_buffer != interface->fsm.buffer && interface->fsm.done != 1);//If FSM is 
 197:Src/ax_12a.c  **** 
 198:Src/ax_12a.c  ****   //Checking that the frame is valid
 199:Src/ax_12a.c  ****   if(interface->fsm.done == 0){
 200:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 201:Src/ax_12a.c  ****     return 1;
 202:Src/ax_12a.c  ****   }
 203:Src/ax_12a.c  **** 
 204:Src/ax_12a.c  ****   //Checking the length of the packet
 205:Src/ax_12a.c  ****   uint16_t r_packet_size = interface->fsm.p_buffer - interface->fsm.buffer;
 206:Src/ax_12a.c  ****   if(r_packet_size != packet_size){
 207:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 208:Src/ax_12a.c  ****     return 1;
 209:Src/ax_12a.c  ****   }
 210:Src/ax_12a.c  **** 
ARM GAS  /tmp/cclxg7K3.s 			page 9


 211:Src/ax_12a.c  ****   //Extract the packet, then return
 212:Src/ax_12a.c  ****   return AX_Extract_Status_Packet(&interface->status, interface->buffer, packet_size);
 213:Src/ax_12a.c  **** }
 214:Src/ax_12a.c  **** 
 215:Src/ax_12a.c  **** //======================================
 216:Src/ax_12a.c  **** //           FONCTIONS D'ENVOI          
 217:Src/ax_12a.c  **** //======================================
 218:Src/ax_12a.c  **** uint8_t AX_Build_Frame(AX_Instruction_Packet *packet, uint8_t buffer[AX_BUFFER_SIZE]){
 219:Src/ax_12a.c  ****   //Verifying arguments
 220:Src/ax_12a.c  ****   if(packet == 0 || (packet->params == 0 && packet->nb_params > 0) || buffer == 0){
 221:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 222:Src/ax_12a.c  ****     return 0;
 223:Src/ax_12a.c  ****   }
 224:Src/ax_12a.c  ****   //and ID range
 225:Src/ax_12a.c  ****   if(packet->id == 0xFF){
 226:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 227:Src/ax_12a.c  ****     return 0;
 228:Src/ax_12a.c  ****   }
 229:Src/ax_12a.c  ****   //Avoid overflow
 230:Src/ax_12a.c  ****   if(6+packet->nb_params > AX_BUFFER_SIZE){
 231:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 232:Src/ax_12a.c  ****     return 0;
 233:Src/ax_12a.c  ****   }
 234:Src/ax_12a.c  **** 
 235:Src/ax_12a.c  ****   uint8_t *p_buffer = buffer;
 236:Src/ax_12a.c  ****   //Header
 237:Src/ax_12a.c  ****   *(p_buffer++) = header[0];
 238:Src/ax_12a.c  ****   *(p_buffer++) = header[1];
 239:Src/ax_12a.c  **** 
 240:Src/ax_12a.c  ****   //Packet ID
 241:Src/ax_12a.c  ****   *(p_buffer++) = packet->id;
 242:Src/ax_12a.c  **** 
 243:Src/ax_12a.c  ****   //Packet length
 244:Src/ax_12a.c  ****   *(p_buffer++) = packet->nb_params+2;
 245:Src/ax_12a.c  **** 
 246:Src/ax_12a.c  ****   //Instruction
 247:Src/ax_12a.c  ****   *(p_buffer++) = packet->instruction;
 248:Src/ax_12a.c  **** 
 249:Src/ax_12a.c  ****   //Parameters
 250:Src/ax_12a.c  ****   int i;
 251:Src/ax_12a.c  ****   for(i=0; i < packet->nb_params; i++){
 252:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 253:Src/ax_12a.c  ****   }
 254:Src/ax_12a.c  **** 
 255:Src/ax_12a.c  ****   //Checksum
 256:Src/ax_12a.c  ****   uint8_t checksum = AX_Compute_Checksum(buffer+2, p_buffer-buffer-2);
 257:Src/ax_12a.c  ****   *(p_buffer++) = checksum; 
 258:Src/ax_12a.c  ****   
 259:Src/ax_12a.c  ****   return p_buffer-buffer;    
 260:Src/ax_12a.c  **** }
 261:Src/ax_12a.c  **** 
 262:Src/ax_12a.c  **** uint8_t AX_Send(AX_Interface *interface, AX_Instruction_Packet *packet, uint32_t timeout){
 263:Src/ax_12a.c  ****   //Préparation de la trame
 264:Src/ax_12a.c  ****   uint8_t length = AX_Build_Frame(packet, interface->buffer);
 265:Src/ax_12a.c  ****   if(!length){
 266:Src/ax_12a.c  ****     return 1;
 267:Src/ax_12a.c  ****   }
ARM GAS  /tmp/cclxg7K3.s 			page 10


 268:Src/ax_12a.c  **** 
 269:Src/ax_12a.c  ****   //Envoi
 270:Src/ax_12a.c  ****   interface->set_direction(AX_SEND);
 271:Src/ax_12a.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 272:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 273:Src/ax_12a.c  ****     return 1;
 274:Src/ax_12a.c  ****   }
 275:Src/ax_12a.c  ****   return 0;
 276:Src/ax_12a.c  **** }
 277:Src/ax_12a.c  **** 
 278:Src/ax_12a.c  **** uint8_t AX_Compute_Checksum(uint8_t *data_blk_ptr, uint16_t data_blk_size){
 279:Src/ax_12a.c  ****   uint8_t checksum = 0;
 280:Src/ax_12a.c  ****   uint16_t i;
 281:Src/ax_12a.c  ****   for(i=0; i < data_blk_size; i++){
 245              		.loc 1 281 0
 246 0000 032A     		cmp	r2, #3
 247              	.LBE55:
 248              	.LBE54:
 141:Src/ax_12a.c  ****   //The packet size is supposed to be checked in AX_Receive function.
 249              		.loc 1 141 0
 250 0002 70B4     		push	{r4, r5, r6}
 251              	.LCFI0:
 252              		.cfi_def_cfa_offset 12
 253              		.cfi_offset 4, -12
 254              		.cfi_offset 5, -8
 255              		.cfi_offset 6, -4
 256              	.LBB58:
 257              	.LBB56:
 258              		.loc 1 281 0
 259 0004 2FD0     		beq	.L33
 260 0006 161F     		subs	r6, r2, #4
 261 0008 B6B2     		uxth	r6, r6
 262 000a 0236     		adds	r6, r6, #2
 263 000c 0E44     		add	r6, r6, r1
 264 000e 4C1C     		adds	r4, r1, #1
 265 0010 0023     		movs	r3, #0
 266              	.LVL8:
 267              	.L27:
 282:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 268              		.loc 1 282 0
 269 0012 14F8015F 		ldrb	r5, [r4, #1]!	@ zero_extendqisi2
 270 0016 2B44     		add	r3, r3, r5
 271              	.LVL9:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 272              		.loc 1 281 0
 273 0018 B442     		cmp	r4, r6
 274              		.loc 1 282 0
 275 001a DBB2     		uxtb	r3, r3
 276              	.LVL10:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 277              		.loc 1 281 0
 278 001c F9D1     		bne	.L27
 279 001e DB43     		mvns	r3, r3
 280              	.LVL11:
 281 0020 DBB2     		uxtb	r3, r3
 282              	.LVL12:
 283              	.L26:
ARM GAS  /tmp/cclxg7K3.s 			page 11


 284              	.LBE56:
 285              	.LBE58:
 144:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 286              		.loc 1 144 0
 287 0022 013A     		subs	r2, r2, #1
 288              	.LVL13:
 289 0024 8D18     		adds	r5, r1, r2
 290 0026 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 291 0028 9A42     		cmp	r2, r3
 292 002a 06D0     		beq	.L28
 145:Src/ax_12a.c  ****     return 1;
 293              		.loc 1 145 0
 294 002c 0F4B     		ldr	r3, .L37
 295 002e 4FF48072 		mov	r2, #256
 146:Src/ax_12a.c  ****   }
 296              		.loc 1 146 0
 297 0032 0120     		movs	r0, #1
 298              	.LVL14:
 145:Src/ax_12a.c  ****     return 1;
 299              		.loc 1 145 0
 300 0034 1A80     		strh	r2, [r3]	@ movhi
 161:Src/ax_12a.c  **** 
 301              		.loc 1 161 0
 302 0036 70BC     		pop	{r4, r5, r6}
 303              	.LCFI1:
 304              		.cfi_remember_state
 305              		.cfi_restore 6
 306              		.cfi_restore 5
 307              		.cfi_restore 4
 308              		.cfi_def_cfa_offset 0
 309 0038 7047     		bx	lr
 310              	.LVL15:
 311              	.L28:
 312              	.LCFI2:
 313              		.cfi_restore_state
 149:Src/ax_12a.c  ****   packet->err = frame[4];
 314              		.loc 1 149 0
 315 003a 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 316 003c 0370     		strb	r3, [r0]
 150:Src/ax_12a.c  ****   
 317              		.loc 1 150 0
 318 003e 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 319 0040 4370     		strb	r3, [r0, #1]
 154:Src/ax_12a.c  ****   uint8_t *end_frame = frame+(packet_size-1);
 320              		.loc 1 154 0
 321 0042 0531     		adds	r1, r1, #5
 322              	.LVL16:
 153:Src/ax_12a.c  ****   uint8_t *p_frame = frame+5;
 323              		.loc 1 153 0
 324 0044 0023     		movs	r3, #0
 156:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 325              		.loc 1 156 0
 326 0046 8D42     		cmp	r5, r1
 153:Src/ax_12a.c  ****   uint8_t *p_frame = frame+5;
 327              		.loc 1 153 0
 328 0048 8370     		strb	r3, [r0, #2]
 156:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
ARM GAS  /tmp/cclxg7K3.s 			page 12


 329              		.loc 1 156 0
 330 004a 09D0     		beq	.L32
 331              	.LVL17:
 332              	.L31:
 157:Src/ax_12a.c  ****   }
 333              		.loc 1 157 0
 334 004c 5A1C     		adds	r2, r3, #1
 335 004e D2B2     		uxtb	r2, r2
 336 0050 8270     		strb	r2, [r0, #2]
 337 0052 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
 338              	.LVL18:
 339 0056 0344     		add	r3, r3, r0
 156:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 340              		.loc 1 156 0
 341 0058 A942     		cmp	r1, r5
 157:Src/ax_12a.c  ****   }
 342              		.loc 1 157 0
 343 005a DC70     		strb	r4, [r3, #3]
 344              	.LVL19:
 345 005c 1346     		mov	r3, r2
 156:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 346              		.loc 1 156 0
 347 005e F5D1     		bne	.L31
 348              	.L32:
 160:Src/ax_12a.c  **** }
 349              		.loc 1 160 0
 350 0060 0020     		movs	r0, #0
 351              	.LVL20:
 161:Src/ax_12a.c  **** 
 352              		.loc 1 161 0
 353 0062 70BC     		pop	{r4, r5, r6}
 354              	.LCFI3:
 355              		.cfi_remember_state
 356              		.cfi_restore 4
 357              		.cfi_restore 5
 358              		.cfi_restore 6
 359              		.cfi_def_cfa_offset 0
 360              	.LVL21:
 361 0064 7047     		bx	lr
 362              	.LVL22:
 363              	.L33:
 364              	.LCFI4:
 365              		.cfi_restore_state
 366              	.LBB59:
 367              	.LBB57:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 368              		.loc 1 281 0
 369 0066 FF23     		movs	r3, #255
 370 0068 DBE7     		b	.L26
 371              	.L38:
 372 006a 00BF     		.align	2
 373              	.L37:
 374 006c 00000000 		.word	.LANCHOR0
 375              	.LBE57:
 376              	.LBE59:
 377              		.cfi_endproc
 378              	.LFE5:
ARM GAS  /tmp/cclxg7K3.s 			page 13


 380              		.section	.text.AX_Receive.part.0,"ax",%progbits
 381              		.align	2
 382              		.thumb
 383              		.thumb_func
 385              	AX_Receive.part.0:
 386              	.LFB48:
 163:Src/ax_12a.c  ****   //Avoid overflow
 387              		.loc 1 163 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              	.LVL23:
 392 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 393              	.LCFI5:
 394              		.cfi_def_cfa_offset 24
 395              		.cfi_offset 3, -24
 396              		.cfi_offset 4, -20
 397              		.cfi_offset 5, -16
 398              		.cfi_offset 6, -12
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 163:Src/ax_12a.c  ****   //Avoid overflow
 401              		.loc 1 163 0
 402 0002 0446     		mov	r4, r0
 171:Src/ax_12a.c  **** 
 403              		.loc 1 171 0
 404 0004 0120     		movs	r0, #1
 405              	.LVL24:
 406 0006 A368     		ldr	r3, [r4, #8]
 163:Src/ax_12a.c  ****   //Avoid overflow
 407              		.loc 1 163 0
 408 0008 0E46     		mov	r6, r1
 409 000a 1746     		mov	r7, r2
 171:Src/ax_12a.c  **** 
 410              		.loc 1 171 0
 411 000c 9847     		blx	r3
 412              	.LVL25:
 174:Src/ax_12a.c  ****   interface->fsm.remaining_bytes = 0;
 413              		.loc 1 174 0
 414 000e 1D4B     		ldr	r3, .L56
 415 0010 2361     		str	r3, [r4, #16]
 176:Src/ax_12a.c  ****   interface->fsm.p_buffer = interface->buffer;
 416              		.loc 1 176 0
 417 0012 04F12405 		add	r5, r4, #36
 175:Src/ax_12a.c  ****   interface->fsm.buffer = interface->buffer;
 418              		.loc 1 175 0
 419 0016 0023     		movs	r3, #0
 420 0018 2375     		strb	r3, [r4, #20]
 178:Src/ax_12a.c  **** 
 421              		.loc 1 178 0
 422 001a 84F82030 		strb	r3, [r4, #32]
 181:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 423              		.loc 1 181 0
 424 001e 3A46     		mov	r2, r7
 176:Src/ax_12a.c  ****   interface->fsm.p_buffer = interface->buffer;
 425              		.loc 1 176 0
 426 0020 A561     		str	r5, [r4, #24]
ARM GAS  /tmp/cclxg7K3.s 			page 14


 177:Src/ax_12a.c  ****   interface->fsm.done = 0;
 427              		.loc 1 177 0
 428 0022 E561     		str	r5, [r4, #28]
 181:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 429              		.loc 1 181 0
 430 0024 2846     		mov	r0, r5
 431 0026 6368     		ldr	r3, [r4, #4]
 432 0028 3146     		mov	r1, r6
 433 002a 9847     		blx	r3
 434              	.LVL26:
 435 002c B0B9     		cbnz	r0, .L53
 436 002e 04F11007 		add	r7, r4, #16
 437              	.LVL27:
 438 0032 03E0     		b	.L43
 439              	.L55:
 196:Src/ax_12a.c  **** 
 440              		.loc 1 196 0
 441 0034 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 442 0038 0129     		cmp	r1, #1
 443 003a 15D0     		beq	.L54
 444              	.L43:
 188:Src/ax_12a.c  **** 
 445              		.loc 1 188 0
 446 003c 2369     		ldr	r3, [r4, #16]
 447 003e 3846     		mov	r0, r7
 448 0040 9847     		blx	r3
 449              	.LVL28:
 196:Src/ax_12a.c  **** 
 450              		.loc 1 196 0
 451 0042 E369     		ldr	r3, [r4, #28]
 452 0044 A269     		ldr	r2, [r4, #24]
 453 0046 9342     		cmp	r3, r2
 454 0048 F4D1     		bne	.L55
 199:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 455              		.loc 1 199 0
 456 004a 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 457 004e BBB9     		cbnz	r3, .L47
 458              	.L46:
 200:Src/ax_12a.c  ****     return 1;
 459              		.loc 1 200 0
 460 0050 0D4B     		ldr	r3, .L56+4
 461 0052 4FF48072 		mov	r2, #256
 462 0056 1A80     		strh	r2, [r3]	@ movhi
 213:Src/ax_12a.c  **** 
 463              		.loc 1 213 0
 464 0058 0120     		movs	r0, #1
 465 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 466              	.LVL29:
 467              	.L53:
 182:Src/ax_12a.c  ****     return 1;
 468              		.loc 1 182 0
 469 005c 0A4B     		ldr	r3, .L56+4
 470 005e 40F20112 		movw	r2, #257
 471 0062 1A80     		strh	r2, [r3]	@ movhi
 213:Src/ax_12a.c  **** 
 472              		.loc 1 213 0
 473 0064 0120     		movs	r0, #1
ARM GAS  /tmp/cclxg7K3.s 			page 15


 474 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 475              	.LVL30:
 476              	.L54:
 477 0068 9B1A     		subs	r3, r3, r2
 478 006a 9BB2     		uxth	r3, r3
 479              	.L45:
 480              	.LVL31:
 206:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 481              		.loc 1 206 0
 482 006c 9E42     		cmp	r6, r3
 483 006e EFD1     		bne	.L46
 212:Src/ax_12a.c  **** }
 484              		.loc 1 212 0
 485 0070 04F14400 		add	r0, r4, #68
 486 0074 2946     		mov	r1, r5
 487 0076 3246     		mov	r2, r6
 213:Src/ax_12a.c  **** 
 488              		.loc 1 213 0
 489 0078 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 490              	.LCFI6:
 491              		.cfi_remember_state
 492              		.cfi_restore 14
 493              		.cfi_restore 7
 494              		.cfi_restore 6
 495              		.cfi_restore 5
 496              		.cfi_restore 4
 497              		.cfi_restore 3
 498              		.cfi_def_cfa_offset 0
 499              	.LVL32:
 212:Src/ax_12a.c  **** }
 500              		.loc 1 212 0
 501 007c FFF7FEBF 		b	AX_Extract_Status_Packet
 502              	.LVL33:
 503              	.L47:
 504              	.LCFI7:
 505              		.cfi_restore_state
 199:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 506              		.loc 1 199 0
 507 0080 0023     		movs	r3, #0
 508 0082 F3E7     		b	.L45
 509              	.L57:
 510              		.align	2
 511              	.L56:
 512 0084 00000000 		.word	AX_FSM_HEADER_0
 513 0088 00000000 		.word	.LANCHOR0
 514              		.cfi_endproc
 515              	.LFE48:
 517              		.section	.text.AX_Receive,"ax",%progbits
 518              		.align	2
 519              		.global	AX_Receive
 520              		.thumb
 521              		.thumb_func
 523              	AX_Receive:
 524              	.LFB6:
 163:Src/ax_12a.c  ****   //Avoid overflow
 525              		.loc 1 163 0
 526              		.cfi_startproc
ARM GAS  /tmp/cclxg7K3.s 			page 16


 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530              	.LVL34:
 165:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 531              		.loc 1 165 0
 532 0000 2029     		cmp	r1, #32
 533 0002 03D9     		bls	.L63
 166:Src/ax_12a.c  ****     return 1;
 534              		.loc 1 166 0
 535 0004 024B     		ldr	r3, .L64
 536 0006 0120     		movs	r0, #1
 537              	.LVL35:
 538 0008 1880     		strh	r0, [r3]	@ movhi
 213:Src/ax_12a.c  **** 
 539              		.loc 1 213 0
 540 000a 7047     		bx	lr
 541              	.LVL36:
 542              	.L63:
 543 000c FFF7FEBF 		b	AX_Receive.part.0
 544              	.LVL37:
 545              	.L65:
 546              		.align	2
 547              	.L64:
 548 0010 00000000 		.word	.LANCHOR0
 549              		.cfi_endproc
 550              	.LFE6:
 552              		.section	.text.AX_Build_Frame,"ax",%progbits
 553              		.align	2
 554              		.global	AX_Build_Frame
 555              		.thumb
 556              		.thumb_func
 558              	AX_Build_Frame:
 559              	.LFB7:
 218:Src/ax_12a.c  ****   //Verifying arguments
 560              		.loc 1 218 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565              	.LVL38:
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 566              		.loc 1 220 0
 567 0000 0028     		cmp	r0, #0
 568 0002 41D0     		beq	.L67
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 569              		.loc 1 220 0 is_stmt 0 discriminator 1
 570 0004 4368     		ldr	r3, [r0, #4]
 571 0006 002B     		cmp	r3, #0
 572 0008 3BD0     		beq	.L90
 573              	.L68:
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 574              		.loc 1 220 0 discriminator 4
 575 000a 0029     		cmp	r1, #0
 576 000c 3CD0     		beq	.L67
 225:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 577              		.loc 1 225 0 is_stmt 1
ARM GAS  /tmp/cclxg7K3.s 			page 17


 578 000e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 579 0010 FF2B     		cmp	r3, #255
 580 0012 39D0     		beq	.L67
 230:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 581              		.loc 1 230 0
 582 0014 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 583 0016 1A2B     		cmp	r3, #26
 584 0018 2EDC     		bgt	.L91
 585              	.LVL39:
 218:Src/ax_12a.c  ****   //Verifying arguments
 586              		.loc 1 218 0
 587 001a 30B4     		push	{r4, r5}
 588              	.LCFI8:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 4, -8
 591              		.cfi_offset 5, -4
 592              	.LBB64:
 593              	.LBB65:
 237:Src/ax_12a.c  ****   *(p_buffer++) = header[1];
 594              		.loc 1 237 0
 595 001c FF23     		movs	r3, #255
 596 001e 0B70     		strb	r3, [r1]
 597              	.LVL40:
 238:Src/ax_12a.c  **** 
 598              		.loc 1 238 0
 599 0020 4B70     		strb	r3, [r1, #1]
 600              	.LVL41:
 241:Src/ax_12a.c  **** 
 601              		.loc 1 241 0
 602 0022 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 603 0024 8B70     		strb	r3, [r1, #2]
 604              	.LVL42:
 244:Src/ax_12a.c  **** 
 605              		.loc 1 244 0
 606 0026 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 607 0028 0233     		adds	r3, r3, #2
 608 002a CB70     		strb	r3, [r1, #3]
 247:Src/ax_12a.c  **** 
 609              		.loc 1 247 0
 610 002c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 611 002e 0B71     		strb	r3, [r1, #4]
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 612              		.loc 1 251 0
 613 0030 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 247:Src/ax_12a.c  **** 
 614              		.loc 1 247 0
 615 0032 4A1D     		adds	r2, r1, #5
 616              	.LVL43:
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 617              		.loc 1 251 0
 618 0034 43B1     		cbz	r3, .L72
 619 0036 0023     		movs	r3, #0
 620              	.LVL44:
 621              	.L73:
 252:Src/ax_12a.c  ****   }
 622              		.loc 1 252 0
 623 0038 4468     		ldr	r4, [r0, #4]
ARM GAS  /tmp/cclxg7K3.s 			page 18


 624 003a E45C     		ldrb	r4, [r4, r3]	@ zero_extendqisi2
 625 003c 02F8014B 		strb	r4, [r2], #1
 626              	.LVL45:
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 627              		.loc 1 251 0
 628 0040 8478     		ldrb	r4, [r0, #2]	@ zero_extendqisi2
 629 0042 0133     		adds	r3, r3, #1
 630              	.LVL46:
 631 0044 A342     		cmp	r3, r4
 632 0046 F7DB     		blt	.L73
 633              	.LVL47:
 634              	.L72:
 256:Src/ax_12a.c  ****   *(p_buffer++) = checksum; 
 635              		.loc 1 256 0
 636 0048 531A     		subs	r3, r2, r1
 637 004a 9BB2     		uxth	r3, r3
 638              	.LVL48:
 639              	.LBB66:
 640              	.LBB67:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 641              		.loc 1 281 0
 642 004c 022B     		cmp	r3, #2
 643 004e 1FD0     		beq	.L76
 644 0050 DC1E     		subs	r4, r3, #3
 645 0052 A4B2     		uxth	r4, r4
 646 0054 0234     		adds	r4, r4, #2
 647 0056 0C44     		add	r4, r4, r1
 648 0058 481C     		adds	r0, r1, #1
 649              	.LVL49:
 650 005a 0023     		movs	r3, #0
 651              	.LVL50:
 652              	.L75:
 653              		.loc 1 282 0
 654 005c 10F8015F 		ldrb	r5, [r0, #1]!	@ zero_extendqisi2
 655              	.LVL51:
 656 0060 2B44     		add	r3, r3, r5
 657              	.LVL52:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 658              		.loc 1 281 0
 659 0062 A042     		cmp	r0, r4
 660              		.loc 1 282 0
 661 0064 DBB2     		uxtb	r3, r3
 662              	.LVL53:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 663              		.loc 1 281 0
 664 0066 F9D1     		bne	.L75
 665 0068 DB43     		mvns	r3, r3
 666              	.LVL54:
 667 006a DBB2     		uxtb	r3, r3
 668              	.LVL55:
 669              	.L74:
 670              	.LBE67:
 671              	.LBE66:
 257:Src/ax_12a.c  ****   
 672              		.loc 1 257 0
 673 006c 02F8013B 		strb	r3, [r2], #1
 674              	.LVL56:
ARM GAS  /tmp/cclxg7K3.s 			page 19


 259:Src/ax_12a.c  **** }
 675              		.loc 1 259 0
 676 0070 521A     		subs	r2, r2, r1
 677              	.LVL57:
 678 0072 D0B2     		uxtb	r0, r2
 679              	.LBE65:
 680              	.LBE64:
 260:Src/ax_12a.c  **** 
 681              		.loc 1 260 0
 682 0074 30BC     		pop	{r4, r5}
 683              	.LCFI9:
 684              		.cfi_restore 5
 685              		.cfi_restore 4
 686              		.cfi_def_cfa_offset 0
 687 0076 7047     		bx	lr
 688              	.LVL58:
 689              	.L91:
 231:Src/ax_12a.c  ****     return 0;
 690              		.loc 1 231 0
 691 0078 064B     		ldr	r3, .L92
 692 007a 0122     		movs	r2, #1
 693 007c 1A80     		strh	r2, [r3]	@ movhi
 232:Src/ax_12a.c  ****   }
 694              		.loc 1 232 0
 695 007e 0020     		movs	r0, #0
 696              	.LVL59:
 697 0080 7047     		bx	lr
 698              	.LVL60:
 699              	.L90:
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 700              		.loc 1 220 0 discriminator 2
 701 0082 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 702 0084 002B     		cmp	r3, #0
 703 0086 C0D0     		beq	.L68
 704              	.L67:
 221:Src/ax_12a.c  ****     return 0;
 705              		.loc 1 221 0
 706 0088 024B     		ldr	r3, .L92
 707 008a 0020     		movs	r0, #0
 708              	.LVL61:
 709 008c 1880     		strh	r0, [r3]	@ movhi
 260:Src/ax_12a.c  **** 
 710              		.loc 1 260 0
 711 008e 7047     		bx	lr
 712              	.LVL62:
 713              	.L76:
 714              	.LCFI10:
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 4, -8
 717              		.cfi_offset 5, -4
 718              	.LBB71:
 719              	.LBB70:
 720              	.LBB69:
 721              	.LBB68:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 722              		.loc 1 281 0
 723 0090 FF23     		movs	r3, #255
ARM GAS  /tmp/cclxg7K3.s 			page 20


 724              	.LVL63:
 725 0092 EBE7     		b	.L74
 726              	.L93:
 727              		.align	2
 728              	.L92:
 729 0094 00000000 		.word	.LANCHOR0
 730              	.LBE68:
 731              	.LBE69:
 732              	.LBE70:
 733              	.LBE71:
 734              		.cfi_endproc
 735              	.LFE7:
 737              		.section	.text.AX_Send,"ax",%progbits
 738              		.align	2
 739              		.global	AX_Send
 740              		.thumb
 741              		.thumb_func
 743              	AX_Send:
 744              	.LFB8:
 262:Src/ax_12a.c  ****   //Préparation de la trame
 745              		.loc 1 262 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              	.LVL64:
 750 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 751              	.LCFI11:
 752              		.cfi_def_cfa_offset 24
 753              		.cfi_offset 3, -24
 754              		.cfi_offset 4, -20
 755              		.cfi_offset 5, -16
 756              		.cfi_offset 6, -12
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 264:Src/ax_12a.c  ****   if(!length){
 759              		.loc 1 264 0
 760 0002 00F12406 		add	r6, r0, #36
 262:Src/ax_12a.c  ****   //Préparation de la trame
 761              		.loc 1 262 0
 762 0006 0446     		mov	r4, r0
 264:Src/ax_12a.c  ****   if(!length){
 763              		.loc 1 264 0
 764 0008 0846     		mov	r0, r1
 765              	.LVL65:
 766 000a 3146     		mov	r1, r6
 767              	.LVL66:
 262:Src/ax_12a.c  ****   //Préparation de la trame
 768              		.loc 1 262 0
 769 000c 1746     		mov	r7, r2
 264:Src/ax_12a.c  ****   if(!length){
 770              		.loc 1 264 0
 771 000e FFF7FEFF 		bl	AX_Build_Frame
 772              	.LVL67:
 265:Src/ax_12a.c  ****     return 1;
 773              		.loc 1 265 0
 774 0012 0546     		mov	r5, r0
 775 0014 08B9     		cbnz	r0, .L99
ARM GAS  /tmp/cclxg7K3.s 			page 21


 266:Src/ax_12a.c  ****   }
 776              		.loc 1 266 0
 777 0016 0120     		movs	r0, #1
 778              	.LVL68:
 779 0018 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 780              	.LVL69:
 781              	.L99:
 270:Src/ax_12a.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 782              		.loc 1 270 0
 783 001a A368     		ldr	r3, [r4, #8]
 784 001c 0020     		movs	r0, #0
 785              	.LVL70:
 786 001e 9847     		blx	r3
 787              	.LVL71:
 271:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 788              		.loc 1 271 0
 789 0020 2368     		ldr	r3, [r4]
 790 0022 3046     		mov	r0, r6
 791 0024 A9B2     		uxth	r1, r5
 792 0026 3A46     		mov	r2, r7
 793 0028 9847     		blx	r3
 794              	.LVL72:
 795 002a 0128     		cmp	r0, #1
 796 002c 01D0     		beq	.L100
 275:Src/ax_12a.c  **** }
 797              		.loc 1 275 0
 798 002e 0020     		movs	r0, #0
 276:Src/ax_12a.c  **** 
 799              		.loc 1 276 0
 800 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 801              	.LVL73:
 802              	.L100:
 272:Src/ax_12a.c  ****     return 1;
 803              		.loc 1 272 0
 804 0032 024B     		ldr	r3, .L101
 805 0034 40F20112 		movw	r2, #257
 806 0038 1A80     		strh	r2, [r3]	@ movhi
 273:Src/ax_12a.c  ****   }
 807              		.loc 1 273 0
 808 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 809              	.LVL74:
 810              	.L102:
 811              		.align	2
 812              	.L101:
 813 003c 00000000 		.word	.LANCHOR0
 814              		.cfi_endproc
 815              	.LFE8:
 817              		.section	.text.AX_Read.part.3,"ax",%progbits
 818              		.align	2
 819              		.thumb
 820              		.thumb_func
 822              	AX_Read.part.3:
 823              	.LFB51:
 283:Src/ax_12a.c  ****   }
 284:Src/ax_12a.c  ****   return ~checksum;
 285:Src/ax_12a.c  **** }
 286:Src/ax_12a.c  **** 
ARM GAS  /tmp/cclxg7K3.s 			page 22


 287:Src/ax_12a.c  **** //======================================
 288:Src/ax_12a.c  **** //         ERROR HANDLING  
 289:Src/ax_12a.c  **** //======================================
 290:Src/ax_12a.c  **** uint16_t AX_Get_Error(){
 291:Src/ax_12a.c  ****   return err;
 292:Src/ax_12a.c  **** }
 293:Src/ax_12a.c  **** 
 294:Src/ax_12a.c  **** uint8_t AX_Check_Status(AX *servo){
 295:Src/ax_12a.c  ****   if(AX_STATUS_ERROR(servo->interface->status.err) != 0){
 296:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 297:Src/ax_12a.c  ****     return 1;
 298:Src/ax_12a.c  ****   }
 299:Src/ax_12a.c  ****   return 0;
 300:Src/ax_12a.c  **** }
 301:Src/ax_12a.c  **** 
 302:Src/ax_12a.c  **** //======================================
 303:Src/ax_12a.c  **** //         INSTRUCTION SET   
 304:Src/ax_12a.c  **** //======================================
 305:Src/ax_12a.c  **** uint8_t AX_Ping(AX *servo){
 306:Src/ax_12a.c  ****   if(servo == 0){
 307:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 308:Src/ax_12a.c  ****     return 1;
 309:Src/ax_12a.c  ****   }
 310:Src/ax_12a.c  ****   
 311:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 312:Src/ax_12a.c  ****   packet.id = servo->id;
 313:Src/ax_12a.c  ****   packet.instruction = AX_PING;
 314:Src/ax_12a.c  ****   packet.nb_params = 0;
 315:Src/ax_12a.c  ****   packet.params = 0;
 316:Src/ax_12a.c  **** 
 317:Src/ax_12a.c  ****   //Sending the instruction
 318:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 319:Src/ax_12a.c  ****     return 1;
 320:Src/ax_12a.c  ****   }
 321:Src/ax_12a.c  **** 
 322:Src/ax_12a.c  ****   //Receiving status
 323:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 324:Src/ax_12a.c  ****     return 1;
 325:Src/ax_12a.c  ****   }
 326:Src/ax_12a.c  **** 
 327:Src/ax_12a.c  ****   //Vérification de la réponse
 328:Src/ax_12a.c  ****   return AX_Check_Status(servo);
 329:Src/ax_12a.c  **** }
 330:Src/ax_12a.c  **** 
 331:Src/ax_12a.c  **** uint8_t AX_Discover(AX_Interface *interface, AX *buffer_servos, uint8_t len_buffer, uint16_t *nb_se
 332:Src/ax_12a.c  ****   AX servo;
 333:Src/ax_12a.c  ****   servo.interface = interface;
 334:Src/ax_12a.c  **** 
 335:Src/ax_12a.c  ****   *nb_servos = 0;
 336:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 337:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 338:Src/ax_12a.c  ****       buffer_servos[(*nb_servos)++] = servo;
 339:Src/ax_12a.c  ****     }
 340:Src/ax_12a.c  ****   }
 341:Src/ax_12a.c  ****   
 342:Src/ax_12a.c  ****   return (*nb_servos > 0)?0:1;
 343:Src/ax_12a.c  **** }
ARM GAS  /tmp/cclxg7K3.s 			page 23


 344:Src/ax_12a.c  **** 
 345:Src/ax_12a.c  **** uint8_t AX_Say_Hello(AX *servo){
 346:Src/ax_12a.c  ****   if(AX_Ping(servo) == 1){
 347:Src/ax_12a.c  ****     return 1;
 348:Src/ax_12a.c  ****   }
 349:Src/ax_12a.c  **** 
 350:Src/ax_12a.c  ****   uint8_t i;
 351:Src/ax_12a.c  ****   for(i = 0; i < servo->id; i++){
 352:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 353:Src/ax_12a.c  ****     servo->interface->delay(500);
 354:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_OFF, AX_NOW);
 355:Src/ax_12a.c  ****     servo->interface->delay(500);
 356:Src/ax_12a.c  ****   }
 357:Src/ax_12a.c  **** 
 358:Src/ax_12a.c  ****   return 0;
 359:Src/ax_12a.c  **** }
 360:Src/ax_12a.c  **** 
 361:Src/ax_12a.c  **** uint8_t AX_Read(AX *servo, AX_Field field, uint16_t *data){
 824              		.loc 1 361 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 16
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              	.LVL75:
 829 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 830              	.LCFI12:
 831              		.cfi_def_cfa_offset 24
 832              		.cfi_offset 4, -24
 833              		.cfi_offset 5, -20
 834              		.cfi_offset 6, -16
 835              		.cfi_offset 7, -12
 836              		.cfi_offset 8, -8
 837              		.cfi_offset 14, -4
 838 0004 0446     		mov	r4, r0
 839 0006 84B0     		sub	sp, sp, #16
 840              	.LCFI13:
 841              		.cfi_def_cfa_offset 40
 362:Src/ax_12a.c  ****   if(field > AX_NB_FIELDS-1){
 363:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 364:Src/ax_12a.c  ****     return 1;
 365:Src/ax_12a.c  ****   }
 366:Src/ax_12a.c  ****   
 367:Src/ax_12a.c  ****   //Preparation of READ instruction
 368:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 369:Src/ax_12a.c  ****   packet.id = servo->id;
 370:Src/ax_12a.c  ****   packet.instruction = AX_READ;
 371:Src/ax_12a.c  ****   packet.nb_params = 2;
 372:Src/ax_12a.c  ****   uint8_t params[2] = {field_addr[field], field_length[field]};
 842              		.loc 1 372 0
 843 0008 224D     		ldr	r5, .L116
 844 000a 2348     		ldr	r0, .L116+4
 845              	.LVL76:
 369:Src/ax_12a.c  ****   packet.instruction = AX_READ;
 846              		.loc 1 369 0
 847 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 848              		.loc 1 372 0
 849 000e 6F5C     		ldrb	r7, [r5, r1]	@ zero_extendqisi2
 369:Src/ax_12a.c  ****   packet.instruction = AX_READ;
ARM GAS  /tmp/cclxg7K3.s 			page 24


 850              		.loc 1 369 0
 851 0010 8DF80830 		strb	r3, [sp, #8]
 852              		.loc 1 372 0
 853 0014 455C     		ldrb	r5, [r0, r1]	@ zero_extendqisi2
 373:Src/ax_12a.c  ****   packet.params = params;
 374:Src/ax_12a.c  **** 
 375:Src/ax_12a.c  ****   //Sending the instruction
 376:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 854              		.loc 1 376 0
 855 0016 6068     		ldr	r0, [r4, #4]
 372:Src/ax_12a.c  ****   packet.params = params;
 856              		.loc 1 372 0
 857 0018 8DF80470 		strb	r7, [sp, #4]
 370:Src/ax_12a.c  ****   packet.nb_params = 2;
 858              		.loc 1 370 0
 859 001c 0223     		movs	r3, #2
 361:Src/ax_12a.c  ****   if(field > AX_NB_FIELDS-1){
 860              		.loc 1 361 0
 861 001e 9046     		mov	r8, r2
 373:Src/ax_12a.c  **** 
 862              		.loc 1 373 0
 863 0020 01AE     		add	r6, sp, #4
 864              		.loc 1 376 0
 865 0022 02A9     		add	r1, sp, #8
 866              	.LVL77:
 867 0024 0122     		movs	r2, #1
 868              	.LVL78:
 372:Src/ax_12a.c  ****   packet.params = params;
 869              		.loc 1 372 0
 870 0026 8DF80550 		strb	r5, [sp, #5]
 370:Src/ax_12a.c  ****   packet.nb_params = 2;
 871              		.loc 1 370 0
 872 002a 8DF80930 		strb	r3, [sp, #9]
 371:Src/ax_12a.c  ****   uint8_t params[2] = {field_addr[field], field_length[field]};
 873              		.loc 1 371 0
 874 002e 8DF80A30 		strb	r3, [sp, #10]
 373:Src/ax_12a.c  **** 
 875              		.loc 1 373 0
 876 0032 0396     		str	r6, [sp, #12]
 877              		.loc 1 376 0
 878 0034 FFF7FEFF 		bl	AX_Send
 879              	.LVL79:
 880 0038 0128     		cmp	r0, #1
 881 003a 18D0     		beq	.L115
 377:Src/ax_12a.c  ****     return 1;
 378:Src/ax_12a.c  ****   }
 379:Src/ax_12a.c  ****   
 380:Src/ax_12a.c  ****   //Receiving status packet
 381:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6+field_length[field], AX_DEFAULT_TIMEOUT) == 1){
 882              		.loc 1 381 0
 883 003c A91D     		adds	r1, r5, #6
 884              	.LBB72:
 885              	.LBB73:
 165:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 886              		.loc 1 165 0
 887 003e 2029     		cmp	r1, #32
 888              	.LBE73:
ARM GAS  /tmp/cclxg7K3.s 			page 25


 889              	.LBE72:
 890              		.loc 1 381 0
 891 0040 6068     		ldr	r0, [r4, #4]
 892              	.LVL80:
 893              	.LBB76:
 894              	.LBB74:
 165:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 895              		.loc 1 165 0
 896 0042 05D9     		bls	.L106
 166:Src/ax_12a.c  ****     return 1;
 897              		.loc 1 166 0
 898 0044 154B     		ldr	r3, .L116+8
 899 0046 0120     		movs	r0, #1
 900              	.LVL81:
 901 0048 1880     		strh	r0, [r3]	@ movhi
 902              	.LVL82:
 903              	.L113:
 904              	.LBE74:
 905              	.LBE76:
 382:Src/ax_12a.c  ****     return 1;
 383:Src/ax_12a.c  ****   }
 384:Src/ax_12a.c  **** 
 385:Src/ax_12a.c  ****   //Checking for errors
 386:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 387:Src/ax_12a.c  ****     return 1;
 388:Src/ax_12a.c  ****   }
 389:Src/ax_12a.c  ****   
 390:Src/ax_12a.c  ****   //Gathering data
 391:Src/ax_12a.c  ****   *data = servo->interface->status.params[0];
 392:Src/ax_12a.c  ****   if(field_length[field] == 2){
 393:Src/ax_12a.c  ****     *data |= servo->interface->status.params[1] << 8;
 394:Src/ax_12a.c  ****   }
 395:Src/ax_12a.c  ****   return 0;
 396:Src/ax_12a.c  **** }
 906              		.loc 1 396 0
 907 004a 04B0     		add	sp, sp, #16
 908              	.LCFI14:
 909              		.cfi_remember_state
 910              		.cfi_def_cfa_offset 24
 911              		@ sp needed
 912 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 913              	.LVL83:
 914              	.L106:
 915              	.LCFI15:
 916              		.cfi_restore_state
 917              	.LBB77:
 918              	.LBB75:
 919 0050 0122     		movs	r2, #1
 920 0052 FFF7FEFF 		bl	AX_Receive.part.0
 921              	.LVL84:
 922              	.LBE75:
 923              	.LBE77:
 381:Src/ax_12a.c  ****     return 1;
 924              		.loc 1 381 0
 925 0056 0128     		cmp	r0, #1
 926 0058 09D0     		beq	.L115
 927              	.LVL85:
ARM GAS  /tmp/cclxg7K3.s 			page 26


 928              	.LBB78:
 929              	.LBB79:
 295:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 930              		.loc 1 295 0
 931 005a 6368     		ldr	r3, [r4, #4]
 932 005c 93F84500 		ldrb	r0, [r3, #69]	@ zero_extendqisi2
 933 0060 10F03F00 		ands	r0, r0, #63
 934 0064 07D0     		beq	.L108
 296:Src/ax_12a.c  ****     return 1;
 935              		.loc 1 296 0
 936 0066 0D4B     		ldr	r3, .L116+8
 937 0068 40F40070 		orr	r0, r0, #512
 938 006c 1880     		strh	r0, [r3]	@ movhi
 939              	.LVL86:
 940              	.L115:
 941              	.LBE79:
 942              	.LBE78:
 387:Src/ax_12a.c  ****   }
 943              		.loc 1 387 0
 944 006e 0120     		movs	r0, #1
 945              		.loc 1 396 0
 946 0070 04B0     		add	sp, sp, #16
 947              	.LCFI16:
 948              		.cfi_remember_state
 949              		.cfi_def_cfa_offset 24
 950              		@ sp needed
 951 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 952              	.LVL87:
 953              	.L108:
 954              	.LCFI17:
 955              		.cfi_restore_state
 391:Src/ax_12a.c  ****   if(field_length[field] == 2){
 956              		.loc 1 391 0
 957 0076 93F84720 		ldrb	r2, [r3, #71]	@ zero_extendqisi2
 958 007a A8F80020 		strh	r2, [r8]	@ movhi
 392:Src/ax_12a.c  ****     *data |= servo->interface->status.params[1] << 8;
 959              		.loc 1 392 0
 960 007e 022D     		cmp	r5, #2
 961 0080 E3D1     		bne	.L113
 393:Src/ax_12a.c  ****   }
 962              		.loc 1 393 0
 963 0082 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 964 0086 42EA0322 		orr	r2, r2, r3, lsl #8
 965 008a A8F80020 		strh	r2, [r8]	@ movhi
 966              		.loc 1 396 0
 967 008e 04B0     		add	sp, sp, #16
 968              	.LCFI18:
 969              		.cfi_def_cfa_offset 24
 970              		@ sp needed
 971 0090 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 972              	.LVL88:
 973              	.L117:
 974              		.align	2
 975              	.L116:
 976 0094 00000000 		.word	.LANCHOR1
 977 0098 00000000 		.word	.LANCHOR2
 978 009c 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cclxg7K3.s 			page 27


 979              		.cfi_endproc
 980              	.LFE51:
 982              		.section	.text.AX_Compute_Checksum,"ax",%progbits
 983              		.align	2
 984              		.global	AX_Compute_Checksum
 985              		.thumb
 986              		.thumb_func
 988              	AX_Compute_Checksum:
 989              	.LFB9:
 278:Src/ax_12a.c  ****   uint8_t checksum = 0;
 990              		.loc 1 278 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995              	.LVL89:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 996              		.loc 1 281 0
 997 0000 69B1     		cbz	r1, .L121
 998 0002 0139     		subs	r1, r1, #1
 999              	.LVL90:
 1000 0004 10FA81F1 		uxtah	r1, r0, r1
 1001 0008 0023     		movs	r3, #0
 1002 000a 0138     		subs	r0, r0, #1
 1003              	.LVL91:
 1004              	.L120:
 282:Src/ax_12a.c  ****   }
 1005              		.loc 1 282 0 discriminator 3
 1006 000c 10F8012F 		ldrb	r2, [r0, #1]!	@ zero_extendqisi2
 1007              	.LVL92:
 1008 0010 1344     		add	r3, r3, r2
 1009              	.LVL93:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 1010              		.loc 1 281 0 discriminator 3
 1011 0012 8842     		cmp	r0, r1
 282:Src/ax_12a.c  ****   }
 1012              		.loc 1 282 0 discriminator 3
 1013 0014 DBB2     		uxtb	r3, r3
 1014              	.LVL94:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 1015              		.loc 1 281 0 discriminator 3
 1016 0016 F9D1     		bne	.L120
 1017 0018 D843     		mvns	r0, r3
 1018              	.LVL95:
 1019 001a C0B2     		uxtb	r0, r0
 1020 001c 7047     		bx	lr
 1021              	.LVL96:
 1022              	.L121:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 1023              		.loc 1 281 0 is_stmt 0
 1024 001e FF20     		movs	r0, #255
 1025              	.LVL97:
 285:Src/ax_12a.c  **** 
 1026              		.loc 1 285 0 is_stmt 1
 1027 0020 7047     		bx	lr
 1028              		.cfi_endproc
 1029              	.LFE9:
ARM GAS  /tmp/cclxg7K3.s 			page 28


 1031 0022 00BF     		.section	.text.AX_Get_Error,"ax",%progbits
 1032              		.align	2
 1033              		.global	AX_Get_Error
 1034              		.thumb
 1035              		.thumb_func
 1037              	AX_Get_Error:
 1038              	.LFB10:
 290:Src/ax_12a.c  ****   return err;
 1039              		.loc 1 290 0
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 0
 1042              		@ frame_needed = 0, uses_anonymous_args = 0
 1043              		@ link register save eliminated.
 291:Src/ax_12a.c  **** }
 1044              		.loc 1 291 0
 1045 0000 014B     		ldr	r3, .L124
 292:Src/ax_12a.c  **** 
 1046              		.loc 1 292 0
 1047 0002 1888     		ldrh	r0, [r3]
 1048 0004 7047     		bx	lr
 1049              	.L125:
 1050 0006 00BF     		.align	2
 1051              	.L124:
 1052 0008 00000000 		.word	.LANCHOR0
 1053              		.cfi_endproc
 1054              	.LFE10:
 1056              		.section	.text.AX_Check_Status,"ax",%progbits
 1057              		.align	2
 1058              		.global	AX_Check_Status
 1059              		.thumb
 1060              		.thumb_func
 1062              	AX_Check_Status:
 1063              	.LFB11:
 294:Src/ax_12a.c  ****   if(AX_STATUS_ERROR(servo->interface->status.err) != 0){
 1064              		.loc 1 294 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069              	.LVL98:
 295:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 1070              		.loc 1 295 0
 1071 0000 4368     		ldr	r3, [r0, #4]
 1072 0002 93F84500 		ldrb	r0, [r3, #69]	@ zero_extendqisi2
 1073              	.LVL99:
 1074 0006 10F03F00 		ands	r0, r0, #63
 1075 000a 04D0     		beq	.L127
 296:Src/ax_12a.c  ****     return 1;
 1076              		.loc 1 296 0
 1077 000c 024B     		ldr	r3, .L131
 1078 000e 40F40070 		orr	r0, r0, #512
 1079 0012 1880     		strh	r0, [r3]	@ movhi
 297:Src/ax_12a.c  ****   }
 1080              		.loc 1 297 0
 1081 0014 0120     		movs	r0, #1
 1082              	.L127:
 300:Src/ax_12a.c  **** 
ARM GAS  /tmp/cclxg7K3.s 			page 29


 1083              		.loc 1 300 0
 1084 0016 7047     		bx	lr
 1085              	.L132:
 1086              		.align	2
 1087              	.L131:
 1088 0018 00000000 		.word	.LANCHOR0
 1089              		.cfi_endproc
 1090              	.LFE11:
 1092              		.section	.text.AX_Ping,"ax",%progbits
 1093              		.align	2
 1094              		.global	AX_Ping
 1095              		.thumb
 1096              		.thumb_func
 1098              	AX_Ping:
 1099              	.LFB12:
 305:Src/ax_12a.c  ****   if(servo == 0){
 1100              		.loc 1 305 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 8
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              	.LVL100:
 1105 0000 70B5     		push	{r4, r5, r6, lr}
 1106              	.LCFI19:
 1107              		.cfi_def_cfa_offset 16
 1108              		.cfi_offset 4, -16
 1109              		.cfi_offset 5, -12
 1110              		.cfi_offset 6, -8
 1111              		.cfi_offset 14, -4
 306:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1112              		.loc 1 306 0
 1113 0002 0446     		mov	r4, r0
 305:Src/ax_12a.c  ****   if(servo == 0){
 1114              		.loc 1 305 0
 1115 0004 82B0     		sub	sp, sp, #8
 1116              	.LCFI20:
 1117              		.cfi_def_cfa_offset 24
 306:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1118              		.loc 1 306 0
 1119 0006 38B3     		cbz	r0, .L145
 313:Src/ax_12a.c  ****   packet.nb_params = 0;
 1120              		.loc 1 313 0
 1121 0008 0125     		movs	r5, #1
 312:Src/ax_12a.c  ****   packet.instruction = AX_PING;
 1122              		.loc 1 312 0
 1123 000a 0678     		ldrb	r6, [r0]	@ zero_extendqisi2
 318:Src/ax_12a.c  ****     return 1;
 1124              		.loc 1 318 0
 1125 000c 4068     		ldr	r0, [r0, #4]
 1126              	.LVL101:
 313:Src/ax_12a.c  ****   packet.nb_params = 0;
 1127              		.loc 1 313 0
 1128 000e 8DF80150 		strb	r5, [sp, #1]
 314:Src/ax_12a.c  ****   packet.params = 0;
 1129              		.loc 1 314 0
 1130 0012 0023     		movs	r3, #0
 318:Src/ax_12a.c  ****     return 1;
 1131              		.loc 1 318 0
ARM GAS  /tmp/cclxg7K3.s 			page 30


 1132 0014 2A46     		mov	r2, r5
 1133 0016 6946     		mov	r1, sp
 312:Src/ax_12a.c  ****   packet.instruction = AX_PING;
 1134              		.loc 1 312 0
 1135 0018 8DF80060 		strb	r6, [sp]
 314:Src/ax_12a.c  ****   packet.params = 0;
 1136              		.loc 1 314 0
 1137 001c 8DF80230 		strb	r3, [sp, #2]
 315:Src/ax_12a.c  **** 
 1138              		.loc 1 315 0
 1139 0020 0193     		str	r3, [sp, #4]
 318:Src/ax_12a.c  ****     return 1;
 1140              		.loc 1 318 0
 1141 0022 FFF7FEFF 		bl	AX_Send
 1142              	.LVL102:
 1143 0026 A842     		cmp	r0, r5
 1144 0028 13D0     		beq	.L137
 1145              	.LVL103:
 1146              	.LBB88:
 1147              	.LBB89:
 1148 002a 6068     		ldr	r0, [r4, #4]
 1149 002c 0621     		movs	r1, #6
 1150 002e 2A46     		mov	r2, r5
 1151 0030 FFF7FEFF 		bl	AX_Receive.part.0
 1152              	.LVL104:
 1153              	.LBE89:
 1154              	.LBE88:
 323:Src/ax_12a.c  ****     return 1;
 1155              		.loc 1 323 0
 1156 0034 0128     		cmp	r0, #1
 1157 0036 0CD0     		beq	.L137
 1158              	.LVL105:
 1159              	.LBB90:
 1160              	.LBB91:
 1161              	.LBB92:
 1162              	.LBB93:
 295:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 1163              		.loc 1 295 0
 1164 0038 6368     		ldr	r3, [r4, #4]
 1165 003a 93F84500 		ldrb	r0, [r3, #69]	@ zero_extendqisi2
 1166 003e 10F03F00 		ands	r0, r0, #63
 1167 0042 07D0     		beq	.L135
 296:Src/ax_12a.c  ****     return 1;
 1168              		.loc 1 296 0
 1169 0044 074B     		ldr	r3, .L146
 1170 0046 40F40070 		orr	r0, r0, #512
 1171 004a 1880     		strh	r0, [r3]	@ movhi
 297:Src/ax_12a.c  ****   }
 1172              		.loc 1 297 0
 1173 004c 2846     		mov	r0, r5
 1174              	.LBE93:
 1175              	.LBE92:
 1176              	.LBE91:
 1177              	.LBE90:
 329:Src/ax_12a.c  **** 
 1178              		.loc 1 329 0
 1179 004e 02B0     		add	sp, sp, #8
ARM GAS  /tmp/cclxg7K3.s 			page 31


 1180              	.LCFI21:
 1181              		.cfi_remember_state
 1182              		.cfi_def_cfa_offset 16
 1183              		@ sp needed
 1184 0050 70BD     		pop	{r4, r5, r6, pc}
 1185              	.LVL106:
 1186              	.L137:
 1187              	.LCFI22:
 1188              		.cfi_restore_state
 319:Src/ax_12a.c  ****   }
 1189              		.loc 1 319 0
 1190 0052 0120     		movs	r0, #1
 1191              	.L135:
 329:Src/ax_12a.c  **** 
 1192              		.loc 1 329 0
 1193 0054 02B0     		add	sp, sp, #8
 1194              	.LCFI23:
 1195              		.cfi_remember_state
 1196              		.cfi_def_cfa_offset 16
 1197              		@ sp needed
 1198 0056 70BD     		pop	{r4, r5, r6, pc}
 1199              	.LVL107:
 1200              	.L145:
 1201              	.LCFI24:
 1202              		.cfi_restore_state
 307:Src/ax_12a.c  ****     return 1;
 1203              		.loc 1 307 0
 1204 0058 024B     		ldr	r3, .L146
 308:Src/ax_12a.c  ****   }
 1205              		.loc 1 308 0
 1206 005a 0120     		movs	r0, #1
 1207              	.LVL108:
 307:Src/ax_12a.c  ****     return 1;
 1208              		.loc 1 307 0
 1209 005c 1C80     		strh	r4, [r3]	@ movhi
 329:Src/ax_12a.c  **** 
 1210              		.loc 1 329 0
 1211 005e 02B0     		add	sp, sp, #8
 1212              	.LCFI25:
 1213              		.cfi_def_cfa_offset 16
 1214              		@ sp needed
 1215 0060 70BD     		pop	{r4, r5, r6, pc}
 1216              	.LVL109:
 1217              	.L147:
 1218 0062 00BF     		.align	2
 1219              	.L146:
 1220 0064 00000000 		.word	.LANCHOR0
 1221              		.cfi_endproc
 1222              	.LFE12:
 1224              		.section	.text.AX_Discover,"ax",%progbits
 1225              		.align	2
 1226              		.global	AX_Discover
 1227              		.thumb
 1228              		.thumb_func
 1230              	AX_Discover:
 1231              	.LFB13:
 331:Src/ax_12a.c  ****   AX servo;
ARM GAS  /tmp/cclxg7K3.s 			page 32


 1232              		.loc 1 331 0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 8
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 1236              	.LVL110:
 1237 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1238              	.LCFI26:
 1239              		.cfi_def_cfa_offset 28
 1240              		.cfi_offset 4, -28
 1241              		.cfi_offset 5, -24
 1242              		.cfi_offset 6, -20
 1243              		.cfi_offset 7, -16
 1244              		.cfi_offset 8, -12
 1245              		.cfi_offset 9, -8
 1246              		.cfi_offset 14, -4
 1247 0004 83B0     		sub	sp, sp, #12
 1248              	.LCFI27:
 1249              		.cfi_def_cfa_offset 40
 335:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1250              		.loc 1 335 0
 1251 0006 0024     		movs	r4, #0
 333:Src/ax_12a.c  **** 
 1252              		.loc 1 333 0
 1253 0008 0190     		str	r0, [sp, #4]
 335:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1254              		.loc 1 335 0
 1255 000a 1C80     		strh	r4, [r3]	@ movhi
 336:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 1256              		.loc 1 336 0
 1257 000c 8DF80040 		strb	r4, [sp]
 1258 0010 5AB3     		cbz	r2, .L153
 1259 0012 1746     		mov	r7, r2
 1260 0014 8846     		mov	r8, r1
 1261 0016 9946     		mov	r9, r3
 1262 0018 6E46     		mov	r6, sp
 1263 001a 03E0     		b	.L152
 1264              	.LVL111:
 1265              	.L151:
 336:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 1266              		.loc 1 336 0 is_stmt 0 discriminator 3
 1267 001c B9F80030 		ldrh	r3, [r9]
 1268 0020 BB42     		cmp	r3, r7
 1269 0022 1ED2     		bcs	.L156
 1270              	.L152:
 337:Src/ax_12a.c  ****       buffer_servos[(*nb_servos)++] = servo;
 1271              		.loc 1 337 0 is_stmt 1
 1272 0024 3046     		mov	r0, r6
 1273 0026 FFF7FEFF 		bl	AX_Ping
 1274              	.LVL112:
 336:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 1275              		.loc 1 336 0
 1276 002a 9DF80040 		ldrb	r4, [sp]	@ zero_extendqisi2
 1277 002e 0134     		adds	r4, r4, #1
 1278 0030 E4B2     		uxtb	r4, r4
 337:Src/ax_12a.c  ****       buffer_servos[(*nb_servos)++] = servo;
 1279              		.loc 1 337 0
 1280 0032 50B9     		cbnz	r0, .L150
ARM GAS  /tmp/cclxg7K3.s 			page 33


 338:Src/ax_12a.c  ****     }
 1281              		.loc 1 338 0
 1282 0034 B9F80050 		ldrh	r5, [r9]
 1283 0038 96E80300 		ldmia	r6, {r0, r1}
 1284 003c 6B1C     		adds	r3, r5, #1
 1285 003e 08EBC505 		add	r5, r8, r5, lsl #3
 1286 0042 A9F80030 		strh	r3, [r9]	@ movhi
 1287 0046 85E80300 		stmia	r5, {r0, r1}
 1288              	.L150:
 336:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 1289              		.loc 1 336 0 discriminator 2
 1290 004a FC2C     		cmp	r4, #252
 1291 004c 8DF80040 		strb	r4, [sp]
 1292 0050 E4D9     		bls	.L151
 1293 0052 B9F80000 		ldrh	r0, [r9]
 1294 0056 B0FA80F0 		clz	r0, r0
 1295 005a 4009     		lsrs	r0, r0, #5
 1296              	.LVL113:
 1297              	.L149:
 343:Src/ax_12a.c  **** 
 1298              		.loc 1 343 0
 1299 005c 03B0     		add	sp, sp, #12
 1300              	.LCFI28:
 1301              		.cfi_remember_state
 1302              		.cfi_def_cfa_offset 28
 1303              		@ sp needed
 1304 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1305              	.LVL114:
 1306              	.L156:
 1307              	.LCFI29:
 1308              		.cfi_restore_state
 1309 0062 0020     		movs	r0, #0
 1310 0064 03B0     		add	sp, sp, #12
 1311              	.LCFI30:
 1312              		.cfi_remember_state
 1313              		.cfi_def_cfa_offset 28
 1314              		@ sp needed
 1315 0066 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1316              	.LVL115:
 1317              	.L153:
 1318              	.LCFI31:
 1319              		.cfi_restore_state
 336:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 1320              		.loc 1 336 0
 1321 006a 0120     		movs	r0, #1
 1322              	.LVL116:
 1323 006c F6E7     		b	.L149
 1324              		.cfi_endproc
 1325              	.LFE13:
 1327 006e 00BF     		.section	.text.AX_Read,"ax",%progbits
 1328              		.align	2
 1329              		.global	AX_Read
 1330              		.thumb
 1331              		.thumb_func
 1333              	AX_Read:
 1334              	.LFB15:
 361:Src/ax_12a.c  ****   if(field > AX_NB_FIELDS-1){
ARM GAS  /tmp/cclxg7K3.s 			page 34


 1335              		.loc 1 361 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 1340              	.LVL117:
 362:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1341              		.loc 1 362 0
 1342 0000 1F29     		cmp	r1, #31
 1343 0002 04D9     		bls	.L162
 363:Src/ax_12a.c  ****     return 1;
 1344              		.loc 1 363 0
 1345 0004 034B     		ldr	r3, .L163
 1346 0006 0022     		movs	r2, #0
 1347              	.LVL118:
 1348 0008 1A80     		strh	r2, [r3]	@ movhi
 1349              		.loc 1 396 0
 1350 000a 0120     		movs	r0, #1
 1351              	.LVL119:
 1352 000c 7047     		bx	lr
 1353              	.LVL120:
 1354              	.L162:
 1355 000e FFF7FEBF 		b	AX_Read.part.3
 1356              	.LVL121:
 1357              	.L164:
 1358 0012 00BF     		.align	2
 1359              	.L163:
 1360 0014 00000000 		.word	.LANCHOR0
 1361              		.cfi_endproc
 1362              	.LFE15:
 1364              		.section	.text.AX_Action,"ax",%progbits
 1365              		.align	2
 1366              		.global	AX_Action
 1367              		.thumb
 1368              		.thumb_func
 1370              	AX_Action:
 1371              	.LFB16:
 397:Src/ax_12a.c  **** 
 398:Src/ax_12a.c  **** uint8_t AX_Action(AX *servo){
 1372              		.loc 1 398 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 8
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376              	.LVL122:
 1377 0000 30B5     		push	{r4, r5, lr}
 1378              	.LCFI32:
 1379              		.cfi_def_cfa_offset 12
 1380              		.cfi_offset 4, -12
 1381              		.cfi_offset 5, -8
 1382              		.cfi_offset 14, -4
 1383 0002 83B0     		sub	sp, sp, #12
 1384              	.LCFI33:
 1385              		.cfi_def_cfa_offset 24
 399:Src/ax_12a.c  ****   //Preparing instruction
 400:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 401:Src/ax_12a.c  ****   packet.id = servo->id;
 1386              		.loc 1 401 0
ARM GAS  /tmp/cclxg7K3.s 			page 35


 1387 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1388 0006 8DF80030 		strb	r3, [sp]
 398:Src/ax_12a.c  ****   //Preparing instruction
 1389              		.loc 1 398 0
 1390 000a 0446     		mov	r4, r0
 402:Src/ax_12a.c  ****   packet.instruction = AX_ACTION;
 403:Src/ax_12a.c  ****   packet.nb_params = 0;
 1391              		.loc 1 403 0
 1392 000c 0023     		movs	r3, #0
 402:Src/ax_12a.c  ****   packet.instruction = AX_ACTION;
 1393              		.loc 1 402 0
 1394 000e 0525     		movs	r5, #5
 404:Src/ax_12a.c  ****   packet.params = 0;
 405:Src/ax_12a.c  **** 
 406:Src/ax_12a.c  ****   //Sending instruction
 407:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1395              		.loc 1 407 0
 1396 0010 4068     		ldr	r0, [r0, #4]
 1397              	.LVL123:
 402:Src/ax_12a.c  ****   packet.instruction = AX_ACTION;
 1398              		.loc 1 402 0
 1399 0012 8DF80150 		strb	r5, [sp, #1]
 1400              		.loc 1 407 0
 1401 0016 6946     		mov	r1, sp
 1402 0018 0122     		movs	r2, #1
 403:Src/ax_12a.c  ****   packet.params = 0;
 1403              		.loc 1 403 0
 1404 001a 8DF80230 		strb	r3, [sp, #2]
 404:Src/ax_12a.c  ****   packet.params = 0;
 1405              		.loc 1 404 0
 1406 001e 0193     		str	r3, [sp, #4]
 1407              		.loc 1 407 0
 1408 0020 FFF7FEFF 		bl	AX_Send
 1409              	.LVL124:
 1410 0024 0128     		cmp	r0, #1
 1411 0026 10D0     		beq	.L176
 1412              	.LVL125:
 1413              	.LBB94:
 1414              	.LBB95:
 1415 0028 6068     		ldr	r0, [r4, #4]
 1416 002a 0621     		movs	r1, #6
 1417 002c 0122     		movs	r2, #1
 1418 002e FFF7FEFF 		bl	AX_Receive.part.0
 1419              	.LVL126:
 1420              	.LBE95:
 1421              	.LBE94:
 408:Src/ax_12a.c  ****     return 1;
 409:Src/ax_12a.c  ****   }
 410:Src/ax_12a.c  **** 
 411:Src/ax_12a.c  ****   //Receiving status
 412:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1422              		.loc 1 412 0
 1423 0032 0128     		cmp	r0, #1
 1424 0034 09D0     		beq	.L176
 1425              	.LVL127:
 1426              	.LBB96:
 1427              	.LBB97:
ARM GAS  /tmp/cclxg7K3.s 			page 36


 295:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 1428              		.loc 1 295 0
 1429 0036 6368     		ldr	r3, [r4, #4]
 1430 0038 93F84500 		ldrb	r0, [r3, #69]	@ zero_extendqisi2
 1431 003c 10F03F00 		ands	r0, r0, #63
 1432 0040 04D0     		beq	.L167
 296:Src/ax_12a.c  ****     return 1;
 1433              		.loc 1 296 0
 1434 0042 034B     		ldr	r3, .L177
 1435 0044 40F40070 		orr	r0, r0, #512
 1436 0048 1880     		strh	r0, [r3]	@ movhi
 1437              	.LVL128:
 1438              	.L176:
 1439              	.LBE97:
 1440              	.LBE96:
 413:Src/ax_12a.c  ****     return 1;
 414:Src/ax_12a.c  ****   }
 415:Src/ax_12a.c  **** 
 416:Src/ax_12a.c  ****   //Checking status
 417:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 418:Src/ax_12a.c  ****     return 1;
 1441              		.loc 1 418 0
 1442 004a 0120     		movs	r0, #1
 1443              	.L167:
 419:Src/ax_12a.c  ****   }
 420:Src/ax_12a.c  **** 
 421:Src/ax_12a.c  ****   //Action OK
 422:Src/ax_12a.c  ****   return 0;
 423:Src/ax_12a.c  **** }
 1444              		.loc 1 423 0
 1445 004c 03B0     		add	sp, sp, #12
 1446              	.LCFI34:
 1447              		.cfi_def_cfa_offset 12
 1448              		@ sp needed
 1449 004e 30BD     		pop	{r4, r5, pc}
 1450              	.LVL129:
 1451              	.L178:
 1452              		.align	2
 1453              	.L177:
 1454 0050 00000000 		.word	.LANCHOR0
 1455              		.cfi_endproc
 1456              	.LFE16:
 1458              		.section	.text.AX_Factory_Reset,"ax",%progbits
 1459              		.align	2
 1460              		.global	AX_Factory_Reset
 1461              		.thumb
 1462              		.thumb_func
 1464              	AX_Factory_Reset:
 1465              	.LFB17:
 424:Src/ax_12a.c  **** 
 425:Src/ax_12a.c  **** uint8_t AX_Factory_Reset(AX *servo){
 1466              		.loc 1 425 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 8
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470              	.LVL130:
 1471 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/cclxg7K3.s 			page 37


 1472              	.LCFI35:
 1473              		.cfi_def_cfa_offset 12
 1474              		.cfi_offset 4, -12
 1475              		.cfi_offset 5, -8
 1476              		.cfi_offset 14, -4
 1477 0002 83B0     		sub	sp, sp, #12
 1478              	.LCFI36:
 1479              		.cfi_def_cfa_offset 24
 426:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 427:Src/ax_12a.c  ****   packet.id = servo->id;
 1480              		.loc 1 427 0
 1481 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1482 0006 8DF80020 		strb	r2, [sp]
 428:Src/ax_12a.c  ****   packet.instruction = AX_FACTORY_RESET;
 1483              		.loc 1 428 0
 1484 000a 0623     		movs	r3, #6
 425:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 1485              		.loc 1 425 0
 1486 000c 0446     		mov	r4, r0
 429:Src/ax_12a.c  ****   packet.nb_params = 0;
 1487              		.loc 1 429 0
 1488 000e 0025     		movs	r5, #0
 430:Src/ax_12a.c  **** 
 431:Src/ax_12a.c  ****   //Envoi de l'instruction
 432:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1489              		.loc 1 432 0
 1490 0010 4068     		ldr	r0, [r0, #4]
 1491              	.LVL131:
 428:Src/ax_12a.c  ****   packet.nb_params = 0;
 1492              		.loc 1 428 0
 1493 0012 8DF80130 		strb	r3, [sp, #1]
 1494              		.loc 1 432 0
 1495 0016 6946     		mov	r1, sp
 1496 0018 0122     		movs	r2, #1
 429:Src/ax_12a.c  ****   packet.nb_params = 0;
 1497              		.loc 1 429 0
 1498 001a 8DF80250 		strb	r5, [sp, #2]
 1499              		.loc 1 432 0
 1500 001e FFF7FEFF 		bl	AX_Send
 1501              	.LVL132:
 1502 0022 0128     		cmp	r0, #1
 1503 0024 05D0     		beq	.L180
 433:Src/ax_12a.c  ****     return 1;
 434:Src/ax_12a.c  ****   }
 435:Src/ax_12a.c  **** 
 436:Src/ax_12a.c  ****   //Attente de la réinitialisation
 437:Src/ax_12a.c  ****   servo->interface->delay(5000);
 1504              		.loc 1 437 0
 1505 0026 6368     		ldr	r3, [r4, #4]
 1506 0028 41F28830 		movw	r0, #5000
 1507 002c DB68     		ldr	r3, [r3, #12]
 1508 002e 9847     		blx	r3
 1509              	.LVL133:
 438:Src/ax_12a.c  ****   
 439:Src/ax_12a.c  ****   return 0;
 1510              		.loc 1 439 0
 1511 0030 2846     		mov	r0, r5
ARM GAS  /tmp/cclxg7K3.s 			page 38


 1512              	.L180:
 440:Src/ax_12a.c  **** }
 1513              		.loc 1 440 0
 1514 0032 03B0     		add	sp, sp, #12
 1515              	.LCFI37:
 1516              		.cfi_def_cfa_offset 12
 1517              		@ sp needed
 1518 0034 30BD     		pop	{r4, r5, pc}
 1519              		.cfi_endproc
 1520              	.LFE17:
 1522 0036 00BF     		.section	.text.AX_Write,"ax",%progbits
 1523              		.align	2
 1524              		.global	AX_Write
 1525              		.thumb
 1526              		.thumb_func
 1528              	AX_Write:
 1529              	.LFB18:
 441:Src/ax_12a.c  **** 
 442:Src/ax_12a.c  **** uint8_t AX_Write(AX *servo, AX_Field field, uint8_t *data, uint8_t size, uint8_t now){
 1530              		.loc 1 442 0
 1531              		.cfi_startproc
 1532              		@ args = 4, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534              	.LVL134:
 1535 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1536              	.LCFI38:
 1537              		.cfi_def_cfa_offset 24
 1538              		.cfi_offset 3, -24
 1539              		.cfi_offset 4, -20
 1540              		.cfi_offset 5, -16
 1541              		.cfi_offset 6, -12
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544              		.loc 1 442 0
 1545 0002 9DF81870 		ldrb	r7, [sp, #24]	@ zero_extendqisi2
 443:Src/ax_12a.c  ****   if(servo == 0 || field > (AX_NB_FIELDS-1) || ((6+size+1) > AX_BUFFER_SIZE)){
 1546              		.loc 1 443 0
 1547 0006 0028     		cmp	r0, #0
 1548 0008 36D0     		beq	.L206
 1549              		.loc 1 443 0 is_stmt 0 discriminator 1
 1550 000a 1F29     		cmp	r1, #31
 1551 000c 34D8     		bhi	.L206
 1552              		.loc 1 443 0 discriminator 2
 1553 000e 192B     		cmp	r3, #25
 1554 0010 32DC     		bgt	.L206
 444:Src/ax_12a.c  ****     return 1;
 445:Src/ax_12a.c  ****   }
 446:Src/ax_12a.c  **** 
 447:Src/ax_12a.c  ****   //Preparing instruction
 448:Src/ax_12a.c  ****   static AX_Instruction_Packet packet;
 449:Src/ax_12a.c  ****   static uint8_t params[AX_BUFFER_SIZE];
 450:Src/ax_12a.c  ****   params[0] = field_addr[field];
 1555              		.loc 1 450 0 is_stmt 1
 1556 0012 1A4C     		ldr	r4, .L207
 1557 0014 1A4E     		ldr	r6, .L207+4
 1558 0016 615C     		ldrb	r1, [r4, r1]	@ zero_extendqisi2
 1559              	.LVL135:
ARM GAS  /tmp/cclxg7K3.s 			page 39


 1560 0018 3170     		strb	r1, [r6]
 1561              	.LVL136:
 451:Src/ax_12a.c  ****   int i;
 452:Src/ax_12a.c  ****   for(i=0; i < size; i++){
 1562              		.loc 1 452 0
 1563 001a 4BB1     		cbz	r3, .L192
 1564 001c 5D1E     		subs	r5, r3, #1
 1565 001e 1544     		add	r5, r5, r2
 1566 0020 3146     		mov	r1, r6
 1567 0022 013A     		subs	r2, r2, #1
 1568              	.LVL137:
 1569              	.L191:
 453:Src/ax_12a.c  ****     params[i+1] = data[i];
 1570              		.loc 1 453 0 discriminator 3
 1571 0024 12F8014F 		ldrb	r4, [r2, #1]!	@ zero_extendqisi2
 1572              	.LVL138:
 1573 0028 01F8014F 		strb	r4, [r1, #1]!
 1574              	.LVL139:
 452:Src/ax_12a.c  ****     params[i+1] = data[i];
 1575              		.loc 1 452 0 discriminator 3
 1576 002c AA42     		cmp	r2, r5
 1577 002e F9D1     		bne	.L191
 1578              	.LVL140:
 1579              	.L192:
 454:Src/ax_12a.c  ****   }
 455:Src/ax_12a.c  ****   packet.id = servo->id;
 1580              		.loc 1 455 0
 1581 0030 144D     		ldr	r5, .L207+8
 1582 0032 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1583 0034 2A70     		strb	r2, [r5]
 456:Src/ax_12a.c  ****   packet.instruction = (now==AX_NOW)?AX_WRITE:AX_REG_WRITE;
 1584              		.loc 1 456 0
 1585 0036 012F     		cmp	r7, #1
 1586 0038 0CBF     		ite	eq
 1587 003a 0327     		moveq	r7, #3
 1588 003c 0427     		movne	r7, #4
 457:Src/ax_12a.c  ****   packet.nb_params = 1 + size;
 1589              		.loc 1 457 0
 1590 003e 0133     		adds	r3, r3, #1
 1591              	.LVL141:
 1592 0040 0446     		mov	r4, r0
 458:Src/ax_12a.c  ****   packet.params = params;
 459:Src/ax_12a.c  **** 
 460:Src/ax_12a.c  ****   //Sending instruction
 461:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1593              		.loc 1 461 0
 1594 0042 2946     		mov	r1, r5
 1595 0044 4068     		ldr	r0, [r0, #4]
 1596              	.LVL142:
 457:Src/ax_12a.c  ****   packet.nb_params = 1 + size;
 1597              		.loc 1 457 0
 1598 0046 AB70     		strb	r3, [r5, #2]
 1599              		.loc 1 461 0
 1600 0048 0122     		movs	r2, #1
 458:Src/ax_12a.c  ****   packet.params = params;
 1601              		.loc 1 458 0
 1602 004a 6E60     		str	r6, [r5, #4]
ARM GAS  /tmp/cclxg7K3.s 			page 40


 456:Src/ax_12a.c  ****   packet.nb_params = 1 + size;
 1603              		.loc 1 456 0
 1604 004c 6F70     		strb	r7, [r5, #1]
 1605              		.loc 1 461 0
 1606 004e FFF7FEFF 		bl	AX_Send
 1607              	.LVL143:
 1608 0052 0128     		cmp	r0, #1
 1609 0054 10D0     		beq	.L206
 1610              	.LVL144:
 1611              	.LBB104:
 1612              	.LBB105:
 1613              	.LBB106:
 1614              	.LBB107:
 1615 0056 6068     		ldr	r0, [r4, #4]
 1616 0058 0621     		movs	r1, #6
 1617 005a 0122     		movs	r2, #1
 1618 005c FFF7FEFF 		bl	AX_Receive.part.0
 1619              	.LVL145:
 1620              	.LBE107:
 1621              	.LBE106:
 462:Src/ax_12a.c  ****     return 1;
 463:Src/ax_12a.c  ****   }
 464:Src/ax_12a.c  **** 
 465:Src/ax_12a.c  ****   //Receiving status
 466:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1622              		.loc 1 466 0
 1623 0060 0128     		cmp	r0, #1
 1624 0062 09D0     		beq	.L206
 1625              	.LVL146:
 1626              	.LBB108:
 1627              	.LBB109:
 295:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 1628              		.loc 1 295 0
 1629 0064 6368     		ldr	r3, [r4, #4]
 1630 0066 93F84500 		ldrb	r0, [r3, #69]	@ zero_extendqisi2
 1631 006a 10F03F00 		ands	r0, r0, #63
 1632 006e 04D0     		beq	.L187
 296:Src/ax_12a.c  ****     return 1;
 1633              		.loc 1 296 0
 1634 0070 054B     		ldr	r3, .L207+12
 1635 0072 40F40070 		orr	r0, r0, #512
 1636 0076 1880     		strh	r0, [r3]	@ movhi
 1637              	.LVL147:
 1638              	.L206:
 1639              	.LBE109:
 1640              	.LBE108:
 467:Src/ax_12a.c  ****     return 1;
 468:Src/ax_12a.c  ****   }
 469:Src/ax_12a.c  **** 
 470:Src/ax_12a.c  ****   //Checking status
 471:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 472:Src/ax_12a.c  ****     return 1;
 1641              		.loc 1 472 0
 1642 0078 0120     		movs	r0, #1
 1643              	.L187:
 1644              	.LBE105:
 1645              	.LBE104:
ARM GAS  /tmp/cclxg7K3.s 			page 41


 473:Src/ax_12a.c  ****   }
 474:Src/ax_12a.c  **** 
 475:Src/ax_12a.c  ****   //Write OK
 476:Src/ax_12a.c  ****   return 0;
 477:Src/ax_12a.c  **** }
 1646              		.loc 1 477 0
 1647 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1648              	.LVL148:
 1649              	.L208:
 1650              		.align	2
 1651              	.L207:
 1652 007c 00000000 		.word	.LANCHOR1
 1653 0080 00000000 		.word	.LANCHOR3
 1654 0084 00000000 		.word	.LANCHOR4
 1655 0088 00000000 		.word	.LANCHOR0
 1656              		.cfi_endproc
 1657              	.LFE18:
 1659              		.section	.text.AX_Say_Hello,"ax",%progbits
 1660              		.align	2
 1661              		.global	AX_Say_Hello
 1662              		.thumb
 1663              		.thumb_func
 1665              	AX_Say_Hello:
 1666              	.LFB14:
 345:Src/ax_12a.c  ****   if(AX_Ping(servo) == 1){
 1667              		.loc 1 345 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 8
 1670              		@ frame_needed = 0, uses_anonymous_args = 0
 1671              	.LVL149:
 1672 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1673              	.LCFI39:
 1674              		.cfi_def_cfa_offset 20
 1675              		.cfi_offset 4, -20
 1676              		.cfi_offset 5, -16
 1677              		.cfi_offset 6, -12
 1678              		.cfi_offset 7, -8
 1679              		.cfi_offset 14, -4
 1680 0002 85B0     		sub	sp, sp, #20
 1681              	.LCFI40:
 1682              		.cfi_def_cfa_offset 40
 345:Src/ax_12a.c  ****   if(AX_Ping(servo) == 1){
 1683              		.loc 1 345 0
 1684 0004 0446     		mov	r4, r0
 346:Src/ax_12a.c  ****     return 1;
 1685              		.loc 1 346 0
 1686 0006 FFF7FEFF 		bl	AX_Ping
 1687              	.LVL150:
 1688 000a 0128     		cmp	r0, #1
 1689 000c 28D0     		beq	.L210
 1690              	.LVL151:
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 1691              		.loc 1 351 0 discriminator 1
 1692 000e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1693 0010 2BB3     		cbz	r3, .L212
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 1694              		.loc 1 351 0 is_stmt 0
ARM GAS  /tmp/cclxg7K3.s 			page 42


 1695 0012 0025     		movs	r5, #0
 1696              	.LBB118:
 1697              	.LBB119:
 1698              	.LBB120:
 1699              	.LBB121:
 478:Src/ax_12a.c  **** 
 479:Src/ax_12a.c  **** //======================================
 480:Src/ax_12a.c  **** //         CONFIGURATION EEPROM       
 481:Src/ax_12a.c  **** //======================================
 482:Src/ax_12a.c  **** uint8_t AX_Configure_ID(AX *servo, uint8_t id){
 483:Src/ax_12a.c  ****   if(id > 252){
 484:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 485:Src/ax_12a.c  ****     return 1;
 486:Src/ax_12a.c  ****   }
 487:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ID, &id, 1, AX_NOW);
 488:Src/ax_12a.c  ****   servo->interface->delay(10);
 489:Src/ax_12a.c  ****   return r;
 490:Src/ax_12a.c  **** }
 491:Src/ax_12a.c  **** 
 492:Src/ax_12a.c  **** uint8_t AX_Configure_Baud_Rate(AX *servo, AX_Baud_Rate baud_rate){
 493:Src/ax_12a.c  ****   if(baud_rate != AX_BAUD_RATE_9600 && baud_rate != AX_BAUD_RATE_57600 && baud_rate != AX_BAUD_RATE
 494:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 495:Src/ax_12a.c  ****     return 1;
 496:Src/ax_12a.c  ****   }
 497:Src/ax_12a.c  ****   uint8_t value = baud_rate;
 498:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_BAUD_RATE, &value, 1, AX_NOW);
 499:Src/ax_12a.c  ****   servo->interface->delay(10);
 500:Src/ax_12a.c  ****   return r;
 501:Src/ax_12a.c  **** }
 502:Src/ax_12a.c  **** 
 503:Src/ax_12a.c  **** uint8_t AX_Configure_Return_Delay_Time(AX *servo, uint8_t delay){
 504:Src/ax_12a.c  ****   if(delay > 0xFE){
 505:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 506:Src/ax_12a.c  ****     return 1;
 507:Src/ax_12a.c  ****   }
 508:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_DELAY_TIME, &delay, 1, AX_NOW);
 509:Src/ax_12a.c  ****   servo->interface->delay(10);
 510:Src/ax_12a.c  ****   return r;
 511:Src/ax_12a.c  **** }
 512:Src/ax_12a.c  **** 
 513:Src/ax_12a.c  **** uint8_t AX_Configure_Angle_Limit(AX *servo, uint16_t cw_angle, uint16_t ccw_angle){
 514:Src/ax_12a.c  ****   if(cw_angle > 0x3FF || ccw_angle > 0x3FF){
 515:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 516:Src/ax_12a.c  ****     return 1;
 517:Src/ax_12a.c  ****   }
 518:Src/ax_12a.c  ****   uint8_t data[4] = {cw_angle&0xFF, cw_angle>>8, ccw_angle&0xFF, ccw_angle>>8};
 519:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_CW_ANGLE_LIMIT, data, 4, AX_NOW);
 520:Src/ax_12a.c  ****   servo->interface->delay(10);
 521:Src/ax_12a.c  ****   return r;
 522:Src/ax_12a.c  **** }
 523:Src/ax_12a.c  **** 
 524:Src/ax_12a.c  **** uint8_t AX_Configure_Limit_Temperature(AX *servo, uint8_t temp){
 525:Src/ax_12a.c  ****   if(temp > 150){
 526:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 527:Src/ax_12a.c  ****     return 1;
 528:Src/ax_12a.c  ****   }
 529:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_LIMIT_TEMPERATURE, &temp, 1, AX_NOW);
ARM GAS  /tmp/cclxg7K3.s 			page 43


 530:Src/ax_12a.c  ****   servo->interface->delay(10);
 531:Src/ax_12a.c  ****   return r;
 532:Src/ax_12a.c  **** }
 533:Src/ax_12a.c  **** 
 534:Src/ax_12a.c  **** uint8_t AX_Configure_Lower_Limit_Voltage(AX *servo, uint8_t voltage){
 535:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 536:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 537:Src/ax_12a.c  ****     return 1;
 538:Src/ax_12a.c  ****   }
 539:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_LOWER_LIMIT_VOLTAGE, &voltage, 1, AX_NOW);
 540:Src/ax_12a.c  ****   servo->interface->delay(10);
 541:Src/ax_12a.c  ****   return r;
 542:Src/ax_12a.c  **** }
 543:Src/ax_12a.c  **** 
 544:Src/ax_12a.c  **** uint8_t AX_Configure_Upper_Limit_Voltage(AX *servo, uint8_t voltage){
 545:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 546:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 547:Src/ax_12a.c  ****     return 1;
 548:Src/ax_12a.c  ****   }
 549:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_UPPER_LIMIT_VOLTAGE, &voltage, 1, AX_NOW);
 550:Src/ax_12a.c  ****   servo->interface->delay(10);
 551:Src/ax_12a.c  ****   return r;
 552:Src/ax_12a.c  **** }
 553:Src/ax_12a.c  **** 
 554:Src/ax_12a.c  **** uint8_t AX_Configure_Max_Torque(AX *servo, uint16_t max_torque){
 555:Src/ax_12a.c  ****   if(max_torque > 1023){
 556:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 557:Src/ax_12a.c  ****     return 1;
 558:Src/ax_12a.c  ****   }
 559:Src/ax_12a.c  ****   uint8_t data[2] = {max_torque&0xFF, max_torque>>8};
 560:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_MAX_TORQUE, data, 2, AX_NOW);
 561:Src/ax_12a.c  ****   servo->interface->delay(10);
 562:Src/ax_12a.c  ****   return r;
 563:Src/ax_12a.c  **** }
 564:Src/ax_12a.c  **** 
 565:Src/ax_12a.c  **** uint8_t AX_Configure_Return_Level(AX *servo, AX_Return_Level level){
 566:Src/ax_12a.c  ****   if(level != AX_PING_RETURN && level != AX_READ_RETURN && level != AX_ALL_RETURN){
 567:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 568:Src/ax_12a.c  ****     return 1;
 569:Src/ax_12a.c  ****   }
 570:Src/ax_12a.c  ****   uint8_t lvl = level;
 571:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_LEVEL, &lvl, 1, AX_NOW);
 572:Src/ax_12a.c  ****   servo->interface->delay(10);
 573:Src/ax_12a.c  ****   return r;
 574:Src/ax_12a.c  **** }
 575:Src/ax_12a.c  **** 
 576:Src/ax_12a.c  **** uint8_t AX_Configure_Alarm_LED(AX *servo, AX_Status_Error errors){
 577:Src/ax_12a.c  ****   if(errors&10000000){
 578:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 579:Src/ax_12a.c  ****     return 1;
 580:Src/ax_12a.c  ****   }
 581:Src/ax_12a.c  ****   uint8_t value = errors;
 582:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_LED, &value, 1, AX_NOW);
 583:Src/ax_12a.c  ****   servo->interface->delay(10);
 584:Src/ax_12a.c  ****   return r;
 585:Src/ax_12a.c  **** }
 586:Src/ax_12a.c  **** 
ARM GAS  /tmp/cclxg7K3.s 			page 44


 587:Src/ax_12a.c  **** uint8_t AX_Configure_Alarm_Shutdown(AX *servo, AX_Status_Error errors){
 588:Src/ax_12a.c  ****   if(errors&10000000){
 589:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 590:Src/ax_12a.c  ****     return 1;
 591:Src/ax_12a.c  ****   }
 592:Src/ax_12a.c  ****   uint8_t value = errors;
 593:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_SHUTDOWN, &value, 1, AX_NOW);
 594:Src/ax_12a.c  ****   servo->interface->delay(10);
 595:Src/ax_12a.c  ****   return r;
 596:Src/ax_12a.c  **** }
 597:Src/ax_12a.c  **** 
 598:Src/ax_12a.c  **** 
 599:Src/ax_12a.c  **** //======================================
 600:Src/ax_12a.c  **** //       COMMANDES SERVOMOTEUR       
 601:Src/ax_12a.c  **** //======================================
 602:Src/ax_12a.c  **** 
 603:Src/ax_12a.c  **** uint8_t AX_Power_On(AX *servo, uint8_t now){
 604:Src/ax_12a.c  ****   uint8_t value = 1;
 605:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 606:Src/ax_12a.c  **** }
 607:Src/ax_12a.c  **** 
 608:Src/ax_12a.c  **** uint8_t AX_Power_Off(AX *servo, uint8_t now){
 609:Src/ax_12a.c  ****   uint8_t value = 0;
 610:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 611:Src/ax_12a.c  **** }
 612:Src/ax_12a.c  **** 
 613:Src/ax_12a.c  **** uint8_t AX_Set_LED(AX *servo, AX_LED_State state, uint8_t now){
 614:Src/ax_12a.c  ****   if((state != AX_LED_OFF) && (state != AX_LED_ON)){
 615:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 616:Src/ax_12a.c  ****     return 1;
 617:Src/ax_12a.c  ****   }
 618:Src/ax_12a.c  ****   uint8_t value = state;
 1700              		.loc 1 618 0 is_stmt 1
 1701 0014 0126     		movs	r6, #1
 1702              	.LVL152:
 1703              	.L211:
 619:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 1704              		.loc 1 619 0
 1705 0016 0F21     		movs	r1, #15
 1706 0018 0DEB0102 		add	r2, sp, r1
 1707 001c 0123     		movs	r3, #1
 1708 001e 0096     		str	r6, [sp]
 1709 0020 2046     		mov	r0, r4
 618:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 1710              		.loc 1 618 0
 1711 0022 8DF80F60 		strb	r6, [sp, #15]
 1712              		.loc 1 619 0
 1713 0026 FFF7FEFF 		bl	AX_Write
 1714              	.LVL153:
 1715              	.LBE121:
 1716              	.LBE120:
 1717              	.LBE119:
 1718              	.LBE118:
 353:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_OFF, AX_NOW);
 1719              		.loc 1 353 0
 1720 002a 6368     		ldr	r3, [r4, #4]
 1721 002c 4FF4FA70 		mov	r0, #500
ARM GAS  /tmp/cclxg7K3.s 			page 45


 1722 0030 DB68     		ldr	r3, [r3, #12]
 1723 0032 9847     		blx	r3
 1724              	.LVL154:
 1725              	.LBB122:
 1726              	.LBB123:
 1727              	.LBB124:
 1728              	.LBB125:
 1729              		.loc 1 619 0
 1730 0034 0F21     		movs	r1, #15
 1731 0036 0DEB0102 		add	r2, sp, r1
 1732 003a 0123     		movs	r3, #1
 1733 003c 0096     		str	r6, [sp]
 618:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 1734              		.loc 1 618 0
 1735 003e 0027     		movs	r7, #0
 1736              		.loc 1 619 0
 1737 0040 2046     		mov	r0, r4
 618:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 1738              		.loc 1 618 0
 1739 0042 8DF80F70 		strb	r7, [sp, #15]
 1740              		.loc 1 619 0
 1741 0046 FFF7FEFF 		bl	AX_Write
 1742              	.LVL155:
 1743              	.LBE125:
 1744              	.LBE124:
 1745              	.LBE123:
 1746              	.LBE122:
 355:Src/ax_12a.c  ****   }
 1747              		.loc 1 355 0
 1748 004a 6368     		ldr	r3, [r4, #4]
 1749 004c 4FF4FA70 		mov	r0, #500
 1750 0050 DB68     		ldr	r3, [r3, #12]
 1751 0052 9847     		blx	r3
 1752              	.LVL156:
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 1753              		.loc 1 351 0
 1754 0054 0135     		adds	r5, r5, #1
 1755              	.LVL157:
 1756 0056 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1757 0058 EDB2     		uxtb	r5, r5
 1758              	.LVL158:
 1759 005a AB42     		cmp	r3, r5
 1760 005c DBD8     		bhi	.L211
 1761              	.LVL159:
 1762              	.L212:
 358:Src/ax_12a.c  **** }
 1763              		.loc 1 358 0
 1764 005e 0020     		movs	r0, #0
 1765              	.L210:
 359:Src/ax_12a.c  **** 
 1766              		.loc 1 359 0
 1767 0060 05B0     		add	sp, sp, #20
 1768              	.LCFI41:
 1769              		.cfi_def_cfa_offset 20
 1770              		@ sp needed
 1771 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1772              		.cfi_endproc
ARM GAS  /tmp/cclxg7K3.s 			page 46


 1773              	.LFE14:
 1775              		.section	.text.AX_Configure_ID,"ax",%progbits
 1776              		.align	2
 1777              		.global	AX_Configure_ID
 1778              		.thumb
 1779              		.thumb_func
 1781              	AX_Configure_ID:
 1782              	.LFB19:
 482:Src/ax_12a.c  ****   if(id > 252){
 1783              		.loc 1 482 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 8
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787              	.LVL160:
 1788 0000 30B5     		push	{r4, r5, lr}
 1789              	.LCFI42:
 1790              		.cfi_def_cfa_offset 12
 1791              		.cfi_offset 4, -12
 1792              		.cfi_offset 5, -8
 1793              		.cfi_offset 14, -4
 1794 0002 85B0     		sub	sp, sp, #20
 1795              	.LCFI43:
 1796              		.cfi_def_cfa_offset 32
 483:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1797              		.loc 1 483 0
 1798 0004 FC29     		cmp	r1, #252
 482:Src/ax_12a.c  ****   if(id > 252){
 1799              		.loc 1 482 0
 1800 0006 8DF80F10 		strb	r1, [sp, #15]
 483:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1801              		.loc 1 483 0
 1802 000a 05D9     		bls	.L220
 484:Src/ax_12a.c  ****     return 1;
 1803              		.loc 1 484 0
 1804 000c 0A4B     		ldr	r3, .L223
 1805 000e 0022     		movs	r2, #0
 485:Src/ax_12a.c  ****   }
 1806              		.loc 1 485 0
 1807 0010 0120     		movs	r0, #1
 1808              	.LVL161:
 484:Src/ax_12a.c  ****     return 1;
 1809              		.loc 1 484 0
 1810 0012 1A80     		strh	r2, [r3]	@ movhi
 490:Src/ax_12a.c  **** 
 1811              		.loc 1 490 0
 1812 0014 05B0     		add	sp, sp, #20
 1813              	.LCFI44:
 1814              		.cfi_remember_state
 1815              		.cfi_def_cfa_offset 12
 1816              		@ sp needed
 1817 0016 30BD     		pop	{r4, r5, pc}
 1818              	.LVL162:
 1819              	.L220:
 1820              	.LCFI45:
 1821              		.cfi_restore_state
 487:Src/ax_12a.c  ****   servo->interface->delay(10);
 1822              		.loc 1 487 0
ARM GAS  /tmp/cclxg7K3.s 			page 47


 1823 0018 0123     		movs	r3, #1
 1824 001a 0546     		mov	r5, r0
 1825 001c 0093     		str	r3, [sp]
 1826 001e 0021     		movs	r1, #0
 1827              	.LVL163:
 1828 0020 0DF10F02 		add	r2, sp, #15
 1829              	.LVL164:
 1830 0024 FFF7FEFF 		bl	AX_Write
 1831              	.LVL165:
 488:Src/ax_12a.c  ****   return r;
 1832              		.loc 1 488 0
 1833 0028 6B68     		ldr	r3, [r5, #4]
 487:Src/ax_12a.c  ****   servo->interface->delay(10);
 1834              		.loc 1 487 0
 1835 002a 0446     		mov	r4, r0
 1836              	.LVL166:
 488:Src/ax_12a.c  ****   return r;
 1837              		.loc 1 488 0
 1838 002c DB68     		ldr	r3, [r3, #12]
 1839 002e 0A20     		movs	r0, #10
 1840 0030 9847     		blx	r3
 1841              	.LVL167:
 489:Src/ax_12a.c  **** }
 1842              		.loc 1 489 0
 1843 0032 2046     		mov	r0, r4
 490:Src/ax_12a.c  **** 
 1844              		.loc 1 490 0
 1845 0034 05B0     		add	sp, sp, #20
 1846              	.LCFI46:
 1847              		.cfi_def_cfa_offset 12
 1848              		@ sp needed
 1849 0036 30BD     		pop	{r4, r5, pc}
 1850              	.LVL168:
 1851              	.L224:
 1852              		.align	2
 1853              	.L223:
 1854 0038 00000000 		.word	.LANCHOR0
 1855              		.cfi_endproc
 1856              	.LFE19:
 1858              		.section	.text.AX_Configure_Baud_Rate,"ax",%progbits
 1859              		.align	2
 1860              		.global	AX_Configure_Baud_Rate
 1861              		.thumb
 1862              		.thumb_func
 1864              	AX_Configure_Baud_Rate:
 1865              	.LFB20:
 492:Src/ax_12a.c  ****   if(baud_rate != AX_BAUD_RATE_9600 && baud_rate != AX_BAUD_RATE_57600 && baud_rate != AX_BAUD_RATE
 1866              		.loc 1 492 0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 8
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
 1870              	.LVL169:
 1871 0000 30B5     		push	{r4, r5, lr}
 1872              	.LCFI47:
 1873              		.cfi_def_cfa_offset 12
 1874              		.cfi_offset 4, -12
 1875              		.cfi_offset 5, -8
ARM GAS  /tmp/cclxg7K3.s 			page 48


 1876              		.cfi_offset 14, -4
 493:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1877              		.loc 1 493 0
 1878 0002 CF29     		cmp	r1, #207
 492:Src/ax_12a.c  ****   if(baud_rate != AX_BAUD_RATE_9600 && baud_rate != AX_BAUD_RATE_57600 && baud_rate != AX_BAUD_RATE
 1879              		.loc 1 492 0
 1880 0004 85B0     		sub	sp, sp, #20
 1881              	.LCFI48:
 1882              		.cfi_def_cfa_offset 32
 492:Src/ax_12a.c  ****   if(baud_rate != AX_BAUD_RATE_9600 && baud_rate != AX_BAUD_RATE_57600 && baud_rate != AX_BAUD_RATE
 1883              		.loc 1 492 0
 1884 0006 0546     		mov	r5, r0
 493:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1885              		.loc 1 493 0
 1886 0008 0BD0     		beq	.L226
 493:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1887              		.loc 1 493 0 is_stmt 0 discriminator 1
 1888 000a 2229     		cmp	r1, #34
 1889 000c 09D0     		beq	.L226
 493:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1890              		.loc 1 493 0 discriminator 2
 1891 000e 1029     		cmp	r1, #16
 1892 0010 07D0     		beq	.L226
 493:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1893              		.loc 1 493 0 discriminator 3
 1894 0012 0129     		cmp	r1, #1
 1895 0014 05D0     		beq	.L226
 494:Src/ax_12a.c  ****     return 1;
 1896              		.loc 1 494 0 is_stmt 1
 1897 0016 0B4B     		ldr	r3, .L241
 1898 0018 0022     		movs	r2, #0
 495:Src/ax_12a.c  ****   }
 1899              		.loc 1 495 0
 1900 001a 0120     		movs	r0, #1
 1901              	.LVL170:
 494:Src/ax_12a.c  ****     return 1;
 1902              		.loc 1 494 0
 1903 001c 1A80     		strh	r2, [r3]	@ movhi
 501:Src/ax_12a.c  **** 
 1904              		.loc 1 501 0
 1905 001e 05B0     		add	sp, sp, #20
 1906              	.LCFI49:
 1907              		.cfi_remember_state
 1908              		.cfi_def_cfa_offset 12
 1909              		@ sp needed
 1910 0020 30BD     		pop	{r4, r5, pc}
 1911              	.LVL171:
 1912              	.L226:
 1913              	.LCFI50:
 1914              		.cfi_restore_state
 497:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_BAUD_RATE, &value, 1, AX_NOW);
 1915              		.loc 1 497 0
 1916 0022 04AA     		add	r2, sp, #16
 498:Src/ax_12a.c  ****   servo->interface->delay(10);
 1917              		.loc 1 498 0
 1918 0024 0123     		movs	r3, #1
 497:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_BAUD_RATE, &value, 1, AX_NOW);
ARM GAS  /tmp/cclxg7K3.s 			page 49


 1919              		.loc 1 497 0
 1920 0026 02F8011D 		strb	r1, [r2, #-1]!
 498:Src/ax_12a.c  ****   servo->interface->delay(10);
 1921              		.loc 1 498 0
 1922 002a 2846     		mov	r0, r5
 1923              	.LVL172:
 1924 002c 1946     		mov	r1, r3
 1925              	.LVL173:
 1926 002e 0093     		str	r3, [sp]
 1927 0030 FFF7FEFF 		bl	AX_Write
 1928              	.LVL174:
 499:Src/ax_12a.c  ****   return r;
 1929              		.loc 1 499 0
 1930 0034 6B68     		ldr	r3, [r5, #4]
 498:Src/ax_12a.c  ****   servo->interface->delay(10);
 1931              		.loc 1 498 0
 1932 0036 0446     		mov	r4, r0
 1933              	.LVL175:
 499:Src/ax_12a.c  ****   return r;
 1934              		.loc 1 499 0
 1935 0038 DB68     		ldr	r3, [r3, #12]
 1936 003a 0A20     		movs	r0, #10
 1937 003c 9847     		blx	r3
 1938              	.LVL176:
 500:Src/ax_12a.c  **** }
 1939              		.loc 1 500 0
 1940 003e 2046     		mov	r0, r4
 501:Src/ax_12a.c  **** 
 1941              		.loc 1 501 0
 1942 0040 05B0     		add	sp, sp, #20
 1943              	.LCFI51:
 1944              		.cfi_def_cfa_offset 12
 1945              		@ sp needed
 1946 0042 30BD     		pop	{r4, r5, pc}
 1947              	.LVL177:
 1948              	.L242:
 1949              		.align	2
 1950              	.L241:
 1951 0044 00000000 		.word	.LANCHOR0
 1952              		.cfi_endproc
 1953              	.LFE20:
 1955              		.section	.text.AX_Configure_Return_Delay_Time,"ax",%progbits
 1956              		.align	2
 1957              		.global	AX_Configure_Return_Delay_Time
 1958              		.thumb
 1959              		.thumb_func
 1961              	AX_Configure_Return_Delay_Time:
 1962              	.LFB21:
 503:Src/ax_12a.c  ****   if(delay > 0xFE){
 1963              		.loc 1 503 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 8
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 1967              	.LVL178:
 1968 0000 30B5     		push	{r4, r5, lr}
 1969              	.LCFI52:
 1970              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cclxg7K3.s 			page 50


 1971              		.cfi_offset 4, -12
 1972              		.cfi_offset 5, -8
 1973              		.cfi_offset 14, -4
 1974 0002 85B0     		sub	sp, sp, #20
 1975              	.LCFI53:
 1976              		.cfi_def_cfa_offset 32
 504:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1977              		.loc 1 504 0
 1978 0004 FF29     		cmp	r1, #255
 503:Src/ax_12a.c  ****   if(delay > 0xFE){
 1979              		.loc 1 503 0
 1980 0006 8DF80F10 		strb	r1, [sp, #15]
 504:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1981              		.loc 1 504 0
 1982 000a 0FD0     		beq	.L247
 508:Src/ax_12a.c  ****   servo->interface->delay(10);
 1983              		.loc 1 508 0
 1984 000c 0123     		movs	r3, #1
 1985 000e 0546     		mov	r5, r0
 1986 0010 0093     		str	r3, [sp]
 1987 0012 0221     		movs	r1, #2
 1988              	.LVL179:
 1989 0014 0DF10F02 		add	r2, sp, #15
 1990              	.LVL180:
 1991 0018 FFF7FEFF 		bl	AX_Write
 1992              	.LVL181:
 509:Src/ax_12a.c  ****   return r;
 1993              		.loc 1 509 0
 1994 001c 6B68     		ldr	r3, [r5, #4]
 508:Src/ax_12a.c  ****   servo->interface->delay(10);
 1995              		.loc 1 508 0
 1996 001e 0446     		mov	r4, r0
 1997              	.LVL182:
 509:Src/ax_12a.c  ****   return r;
 1998              		.loc 1 509 0
 1999 0020 DB68     		ldr	r3, [r3, #12]
 2000 0022 0A20     		movs	r0, #10
 2001 0024 9847     		blx	r3
 2002              	.LVL183:
 510:Src/ax_12a.c  **** }
 2003              		.loc 1 510 0
 2004 0026 2046     		mov	r0, r4
 511:Src/ax_12a.c  **** 
 2005              		.loc 1 511 0
 2006 0028 05B0     		add	sp, sp, #20
 2007              	.LCFI54:
 2008              		.cfi_remember_state
 2009              		.cfi_def_cfa_offset 12
 2010              		@ sp needed
 2011 002a 30BD     		pop	{r4, r5, pc}
 2012              	.LVL184:
 2013              	.L247:
 2014              	.LCFI55:
 2015              		.cfi_restore_state
 505:Src/ax_12a.c  ****     return 1;
 2016              		.loc 1 505 0
 2017 002c 024B     		ldr	r3, .L248
ARM GAS  /tmp/cclxg7K3.s 			page 51


 2018 002e 0022     		movs	r2, #0
 506:Src/ax_12a.c  ****   }
 2019              		.loc 1 506 0
 2020 0030 0120     		movs	r0, #1
 2021              	.LVL185:
 505:Src/ax_12a.c  ****     return 1;
 2022              		.loc 1 505 0
 2023 0032 1A80     		strh	r2, [r3]	@ movhi
 511:Src/ax_12a.c  **** 
 2024              		.loc 1 511 0
 2025 0034 05B0     		add	sp, sp, #20
 2026              	.LCFI56:
 2027              		.cfi_def_cfa_offset 12
 2028              		@ sp needed
 2029 0036 30BD     		pop	{r4, r5, pc}
 2030              	.L249:
 2031              		.align	2
 2032              	.L248:
 2033 0038 00000000 		.word	.LANCHOR0
 2034              		.cfi_endproc
 2035              	.LFE21:
 2037              		.section	.text.AX_Configure_Angle_Limit,"ax",%progbits
 2038              		.align	2
 2039              		.global	AX_Configure_Angle_Limit
 2040              		.thumb
 2041              		.thumb_func
 2043              	AX_Configure_Angle_Limit:
 2044              	.LFB22:
 513:Src/ax_12a.c  ****   if(cw_angle > 0x3FF || ccw_angle > 0x3FF){
 2045              		.loc 1 513 0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 8
 2048              		@ frame_needed = 0, uses_anonymous_args = 0
 2049              	.LVL186:
 2050 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2051              	.LCFI57:
 2052              		.cfi_def_cfa_offset 20
 2053              		.cfi_offset 4, -20
 2054              		.cfi_offset 5, -16
 2055              		.cfi_offset 6, -12
 2056              		.cfi_offset 7, -8
 2057              		.cfi_offset 14, -4
 514:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2058              		.loc 1 514 0
 2059 0002 B1F5806F 		cmp	r1, #1024
 513:Src/ax_12a.c  ****   if(cw_angle > 0x3FF || ccw_angle > 0x3FF){
 2060              		.loc 1 513 0
 2061 0006 85B0     		sub	sp, sp, #20
 2062              	.LCFI58:
 2063              		.cfi_def_cfa_offset 40
 513:Src/ax_12a.c  ****   if(cw_angle > 0x3FF || ccw_angle > 0x3FF){
 2064              		.loc 1 513 0
 2065 0008 0C46     		mov	r4, r1
 514:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2066              		.loc 1 514 0
 2067 000a 03D2     		bcs	.L251
 514:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
ARM GAS  /tmp/cclxg7K3.s 			page 52


 2068              		.loc 1 514 0 is_stmt 0 discriminator 1
 2069 000c B2F5806F 		cmp	r2, #1024
 2070 0010 1546     		mov	r5, r2
 2071 0012 05D3     		bcc	.L252
 2072              	.L251:
 515:Src/ax_12a.c  ****     return 1;
 2073              		.loc 1 515 0 is_stmt 1
 2074 0014 104B     		ldr	r3, .L255
 2075 0016 0022     		movs	r2, #0
 2076              	.LVL187:
 516:Src/ax_12a.c  ****   }
 2077              		.loc 1 516 0
 2078 0018 0120     		movs	r0, #1
 2079              	.LVL188:
 515:Src/ax_12a.c  ****     return 1;
 2080              		.loc 1 515 0
 2081 001a 1A80     		strh	r2, [r3]	@ movhi
 522:Src/ax_12a.c  **** 
 2082              		.loc 1 522 0
 2083 001c 05B0     		add	sp, sp, #20
 2084              	.LCFI59:
 2085              		.cfi_remember_state
 2086              		.cfi_def_cfa_offset 20
 2087              		@ sp needed
 2088 001e F0BD     		pop	{r4, r5, r6, r7, pc}
 2089              	.LVL189:
 2090              	.L252:
 2091              	.LCFI60:
 2092              		.cfi_restore_state
 519:Src/ax_12a.c  ****   servo->interface->delay(10);
 2093              		.loc 1 519 0
 2094 0020 0123     		movs	r3, #1
 518:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_CW_ANGLE_LIMIT, data, 4, AX_NOW);
 2095              		.loc 1 518 0
 2096 0022 4FEA112E 		lsr	lr, r1, #8
 2097 0026 0646     		mov	r6, r0
 2098 0028 170A     		lsrs	r7, r2, #8
 519:Src/ax_12a.c  ****   servo->interface->delay(10);
 2099              		.loc 1 519 0
 2100 002a 0093     		str	r3, [sp]
 2101 002c 0321     		movs	r1, #3
 2102              	.LVL190:
 2103 002e 03AA     		add	r2, sp, #12
 2104              	.LVL191:
 2105 0030 0423     		movs	r3, #4
 518:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_CW_ANGLE_LIMIT, data, 4, AX_NOW);
 2106              		.loc 1 518 0
 2107 0032 8DF80C40 		strb	r4, [sp, #12]
 2108 0036 8DF80DE0 		strb	lr, [sp, #13]
 2109 003a 8DF80E50 		strb	r5, [sp, #14]
 2110 003e 8DF80F70 		strb	r7, [sp, #15]
 519:Src/ax_12a.c  ****   servo->interface->delay(10);
 2111              		.loc 1 519 0
 2112 0042 FFF7FEFF 		bl	AX_Write
 2113              	.LVL192:
 520:Src/ax_12a.c  ****   return r;
 2114              		.loc 1 520 0
ARM GAS  /tmp/cclxg7K3.s 			page 53


 2115 0046 7368     		ldr	r3, [r6, #4]
 519:Src/ax_12a.c  ****   servo->interface->delay(10);
 2116              		.loc 1 519 0
 2117 0048 0446     		mov	r4, r0
 2118              	.LVL193:
 520:Src/ax_12a.c  ****   return r;
 2119              		.loc 1 520 0
 2120 004a DB68     		ldr	r3, [r3, #12]
 2121 004c 0A20     		movs	r0, #10
 2122 004e 9847     		blx	r3
 2123              	.LVL194:
 521:Src/ax_12a.c  **** }
 2124              		.loc 1 521 0
 2125 0050 2046     		mov	r0, r4
 522:Src/ax_12a.c  **** 
 2126              		.loc 1 522 0
 2127 0052 05B0     		add	sp, sp, #20
 2128              	.LCFI61:
 2129              		.cfi_def_cfa_offset 20
 2130              		@ sp needed
 2131 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 2132              	.LVL195:
 2133              	.L256:
 2134 0056 00BF     		.align	2
 2135              	.L255:
 2136 0058 00000000 		.word	.LANCHOR0
 2137              		.cfi_endproc
 2138              	.LFE22:
 2140              		.section	.text.AX_Configure_Limit_Temperature,"ax",%progbits
 2141              		.align	2
 2142              		.global	AX_Configure_Limit_Temperature
 2143              		.thumb
 2144              		.thumb_func
 2146              	AX_Configure_Limit_Temperature:
 2147              	.LFB23:
 524:Src/ax_12a.c  ****   if(temp > 150){
 2148              		.loc 1 524 0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 8
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 2152              	.LVL196:
 2153 0000 30B5     		push	{r4, r5, lr}
 2154              	.LCFI62:
 2155              		.cfi_def_cfa_offset 12
 2156              		.cfi_offset 4, -12
 2157              		.cfi_offset 5, -8
 2158              		.cfi_offset 14, -4
 2159 0002 85B0     		sub	sp, sp, #20
 2160              	.LCFI63:
 2161              		.cfi_def_cfa_offset 32
 525:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2162              		.loc 1 525 0
 2163 0004 9629     		cmp	r1, #150
 524:Src/ax_12a.c  ****   if(temp > 150){
 2164              		.loc 1 524 0
 2165 0006 8DF80F10 		strb	r1, [sp, #15]
 525:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
ARM GAS  /tmp/cclxg7K3.s 			page 54


 2166              		.loc 1 525 0
 2167 000a 05D9     		bls	.L258
 526:Src/ax_12a.c  ****     return 1;
 2168              		.loc 1 526 0
 2169 000c 0A4B     		ldr	r3, .L261
 2170 000e 0022     		movs	r2, #0
 527:Src/ax_12a.c  ****   }
 2171              		.loc 1 527 0
 2172 0010 0120     		movs	r0, #1
 2173              	.LVL197:
 526:Src/ax_12a.c  ****     return 1;
 2174              		.loc 1 526 0
 2175 0012 1A80     		strh	r2, [r3]	@ movhi
 532:Src/ax_12a.c  **** 
 2176              		.loc 1 532 0
 2177 0014 05B0     		add	sp, sp, #20
 2178              	.LCFI64:
 2179              		.cfi_remember_state
 2180              		.cfi_def_cfa_offset 12
 2181              		@ sp needed
 2182 0016 30BD     		pop	{r4, r5, pc}
 2183              	.LVL198:
 2184              	.L258:
 2185              	.LCFI65:
 2186              		.cfi_restore_state
 529:Src/ax_12a.c  ****   servo->interface->delay(10);
 2187              		.loc 1 529 0
 2188 0018 0123     		movs	r3, #1
 2189 001a 0546     		mov	r5, r0
 2190 001c 0093     		str	r3, [sp]
 2191 001e 0521     		movs	r1, #5
 2192              	.LVL199:
 2193 0020 0DF10F02 		add	r2, sp, #15
 2194              	.LVL200:
 2195 0024 FFF7FEFF 		bl	AX_Write
 2196              	.LVL201:
 530:Src/ax_12a.c  ****   return r;
 2197              		.loc 1 530 0
 2198 0028 6B68     		ldr	r3, [r5, #4]
 529:Src/ax_12a.c  ****   servo->interface->delay(10);
 2199              		.loc 1 529 0
 2200 002a 0446     		mov	r4, r0
 2201              	.LVL202:
 530:Src/ax_12a.c  ****   return r;
 2202              		.loc 1 530 0
 2203 002c DB68     		ldr	r3, [r3, #12]
 2204 002e 0A20     		movs	r0, #10
 2205 0030 9847     		blx	r3
 2206              	.LVL203:
 531:Src/ax_12a.c  **** }
 2207              		.loc 1 531 0
 2208 0032 2046     		mov	r0, r4
 532:Src/ax_12a.c  **** 
 2209              		.loc 1 532 0
 2210 0034 05B0     		add	sp, sp, #20
 2211              	.LCFI66:
 2212              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cclxg7K3.s 			page 55


 2213              		@ sp needed
 2214 0036 30BD     		pop	{r4, r5, pc}
 2215              	.LVL204:
 2216              	.L262:
 2217              		.align	2
 2218              	.L261:
 2219 0038 00000000 		.word	.LANCHOR0
 2220              		.cfi_endproc
 2221              	.LFE23:
 2223              		.section	.text.AX_Configure_Lower_Limit_Voltage,"ax",%progbits
 2224              		.align	2
 2225              		.global	AX_Configure_Lower_Limit_Voltage
 2226              		.thumb
 2227              		.thumb_func
 2229              	AX_Configure_Lower_Limit_Voltage:
 2230              	.LFB24:
 534:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2231              		.loc 1 534 0
 2232              		.cfi_startproc
 2233              		@ args = 0, pretend = 0, frame = 8
 2234              		@ frame_needed = 0, uses_anonymous_args = 0
 2235              	.LVL205:
 2236 0000 30B5     		push	{r4, r5, lr}
 2237              	.LCFI67:
 2238              		.cfi_def_cfa_offset 12
 2239              		.cfi_offset 4, -12
 2240              		.cfi_offset 5, -8
 2241              		.cfi_offset 14, -4
 535:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2242              		.loc 1 535 0
 2243 0002 A1F13203 		sub	r3, r1, #50
 534:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2244              		.loc 1 534 0
 2245 0006 85B0     		sub	sp, sp, #20
 2246              	.LCFI68:
 2247              		.cfi_def_cfa_offset 32
 535:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2248              		.loc 1 535 0
 2249 0008 DBB2     		uxtb	r3, r3
 2250 000a C82B     		cmp	r3, #200
 534:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2251              		.loc 1 534 0
 2252 000c 8DF80F10 		strb	r1, [sp, #15]
 535:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2253              		.loc 1 535 0
 2254 0010 05D9     		bls	.L264
 536:Src/ax_12a.c  ****     return 1;
 2255              		.loc 1 536 0
 2256 0012 0B4B     		ldr	r3, .L267
 2257 0014 0022     		movs	r2, #0
 537:Src/ax_12a.c  ****   }
 2258              		.loc 1 537 0
 2259 0016 0120     		movs	r0, #1
 2260              	.LVL206:
 536:Src/ax_12a.c  ****     return 1;
 2261              		.loc 1 536 0
 2262 0018 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/cclxg7K3.s 			page 56


 542:Src/ax_12a.c  **** 
 2263              		.loc 1 542 0
 2264 001a 05B0     		add	sp, sp, #20
 2265              	.LCFI69:
 2266              		.cfi_remember_state
 2267              		.cfi_def_cfa_offset 12
 2268              		@ sp needed
 2269 001c 30BD     		pop	{r4, r5, pc}
 2270              	.LVL207:
 2271              	.L264:
 2272              	.LCFI70:
 2273              		.cfi_restore_state
 539:Src/ax_12a.c  ****   servo->interface->delay(10);
 2274              		.loc 1 539 0
 2275 001e 0123     		movs	r3, #1
 2276 0020 0546     		mov	r5, r0
 2277 0022 0093     		str	r3, [sp]
 2278 0024 0621     		movs	r1, #6
 2279              	.LVL208:
 2280 0026 0DF10F02 		add	r2, sp, #15
 2281              	.LVL209:
 2282 002a FFF7FEFF 		bl	AX_Write
 2283              	.LVL210:
 540:Src/ax_12a.c  ****   return r;
 2284              		.loc 1 540 0
 2285 002e 6B68     		ldr	r3, [r5, #4]
 539:Src/ax_12a.c  ****   servo->interface->delay(10);
 2286              		.loc 1 539 0
 2287 0030 0446     		mov	r4, r0
 2288              	.LVL211:
 540:Src/ax_12a.c  ****   return r;
 2289              		.loc 1 540 0
 2290 0032 DB68     		ldr	r3, [r3, #12]
 2291 0034 0A20     		movs	r0, #10
 2292 0036 9847     		blx	r3
 2293              	.LVL212:
 541:Src/ax_12a.c  **** }
 2294              		.loc 1 541 0
 2295 0038 2046     		mov	r0, r4
 542:Src/ax_12a.c  **** 
 2296              		.loc 1 542 0
 2297 003a 05B0     		add	sp, sp, #20
 2298              	.LCFI71:
 2299              		.cfi_def_cfa_offset 12
 2300              		@ sp needed
 2301 003c 30BD     		pop	{r4, r5, pc}
 2302              	.LVL213:
 2303              	.L268:
 2304 003e 00BF     		.align	2
 2305              	.L267:
 2306 0040 00000000 		.word	.LANCHOR0
 2307              		.cfi_endproc
 2308              	.LFE24:
 2310              		.section	.text.AX_Configure_Upper_Limit_Voltage,"ax",%progbits
 2311              		.align	2
 2312              		.global	AX_Configure_Upper_Limit_Voltage
 2313              		.thumb
ARM GAS  /tmp/cclxg7K3.s 			page 57


 2314              		.thumb_func
 2316              	AX_Configure_Upper_Limit_Voltage:
 2317              	.LFB25:
 544:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2318              		.loc 1 544 0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 8
 2321              		@ frame_needed = 0, uses_anonymous_args = 0
 2322              	.LVL214:
 2323 0000 30B5     		push	{r4, r5, lr}
 2324              	.LCFI72:
 2325              		.cfi_def_cfa_offset 12
 2326              		.cfi_offset 4, -12
 2327              		.cfi_offset 5, -8
 2328              		.cfi_offset 14, -4
 545:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2329              		.loc 1 545 0
 2330 0002 A1F13203 		sub	r3, r1, #50
 544:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2331              		.loc 1 544 0
 2332 0006 85B0     		sub	sp, sp, #20
 2333              	.LCFI73:
 2334              		.cfi_def_cfa_offset 32
 545:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2335              		.loc 1 545 0
 2336 0008 DBB2     		uxtb	r3, r3
 2337 000a C82B     		cmp	r3, #200
 544:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2338              		.loc 1 544 0
 2339 000c 8DF80F10 		strb	r1, [sp, #15]
 545:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2340              		.loc 1 545 0
 2341 0010 05D9     		bls	.L270
 546:Src/ax_12a.c  ****     return 1;
 2342              		.loc 1 546 0
 2343 0012 0B4B     		ldr	r3, .L273
 2344 0014 0022     		movs	r2, #0
 547:Src/ax_12a.c  ****   }
 2345              		.loc 1 547 0
 2346 0016 0120     		movs	r0, #1
 2347              	.LVL215:
 546:Src/ax_12a.c  ****     return 1;
 2348              		.loc 1 546 0
 2349 0018 1A80     		strh	r2, [r3]	@ movhi
 552:Src/ax_12a.c  **** 
 2350              		.loc 1 552 0
 2351 001a 05B0     		add	sp, sp, #20
 2352              	.LCFI74:
 2353              		.cfi_remember_state
 2354              		.cfi_def_cfa_offset 12
 2355              		@ sp needed
 2356 001c 30BD     		pop	{r4, r5, pc}
 2357              	.LVL216:
 2358              	.L270:
 2359              	.LCFI75:
 2360              		.cfi_restore_state
 549:Src/ax_12a.c  ****   servo->interface->delay(10);
ARM GAS  /tmp/cclxg7K3.s 			page 58


 2361              		.loc 1 549 0
 2362 001e 0123     		movs	r3, #1
 2363 0020 0546     		mov	r5, r0
 2364 0022 0093     		str	r3, [sp]
 2365 0024 0721     		movs	r1, #7
 2366              	.LVL217:
 2367 0026 0DF10F02 		add	r2, sp, #15
 2368              	.LVL218:
 2369 002a FFF7FEFF 		bl	AX_Write
 2370              	.LVL219:
 550:Src/ax_12a.c  ****   return r;
 2371              		.loc 1 550 0
 2372 002e 6B68     		ldr	r3, [r5, #4]
 549:Src/ax_12a.c  ****   servo->interface->delay(10);
 2373              		.loc 1 549 0
 2374 0030 0446     		mov	r4, r0
 2375              	.LVL220:
 550:Src/ax_12a.c  ****   return r;
 2376              		.loc 1 550 0
 2377 0032 DB68     		ldr	r3, [r3, #12]
 2378 0034 0A20     		movs	r0, #10
 2379 0036 9847     		blx	r3
 2380              	.LVL221:
 551:Src/ax_12a.c  **** }
 2381              		.loc 1 551 0
 2382 0038 2046     		mov	r0, r4
 552:Src/ax_12a.c  **** 
 2383              		.loc 1 552 0
 2384 003a 05B0     		add	sp, sp, #20
 2385              	.LCFI76:
 2386              		.cfi_def_cfa_offset 12
 2387              		@ sp needed
 2388 003c 30BD     		pop	{r4, r5, pc}
 2389              	.LVL222:
 2390              	.L274:
 2391 003e 00BF     		.align	2
 2392              	.L273:
 2393 0040 00000000 		.word	.LANCHOR0
 2394              		.cfi_endproc
 2395              	.LFE25:
 2397              		.section	.text.AX_Configure_Max_Torque,"ax",%progbits
 2398              		.align	2
 2399              		.global	AX_Configure_Max_Torque
 2400              		.thumb
 2401              		.thumb_func
 2403              	AX_Configure_Max_Torque:
 2404              	.LFB26:
 554:Src/ax_12a.c  ****   if(max_torque > 1023){
 2405              		.loc 1 554 0
 2406              		.cfi_startproc
 2407              		@ args = 0, pretend = 0, frame = 8
 2408              		@ frame_needed = 0, uses_anonymous_args = 0
 2409              	.LVL223:
 2410 0000 70B5     		push	{r4, r5, r6, lr}
 2411              	.LCFI77:
 2412              		.cfi_def_cfa_offset 16
 2413              		.cfi_offset 4, -16
ARM GAS  /tmp/cclxg7K3.s 			page 59


 2414              		.cfi_offset 5, -12
 2415              		.cfi_offset 6, -8
 2416              		.cfi_offset 14, -4
 555:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2417              		.loc 1 555 0
 2418 0002 B1F5806F 		cmp	r1, #1024
 554:Src/ax_12a.c  ****   if(max_torque > 1023){
 2419              		.loc 1 554 0
 2420 0006 84B0     		sub	sp, sp, #16
 2421              	.LCFI78:
 2422              		.cfi_def_cfa_offset 32
 554:Src/ax_12a.c  ****   if(max_torque > 1023){
 2423              		.loc 1 554 0
 2424 0008 0C46     		mov	r4, r1
 555:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2425              		.loc 1 555 0
 2426 000a 05D3     		bcc	.L276
 556:Src/ax_12a.c  ****     return 1;
 2427              		.loc 1 556 0
 2428 000c 0D4B     		ldr	r3, .L279
 2429 000e 0022     		movs	r2, #0
 557:Src/ax_12a.c  ****   }
 2430              		.loc 1 557 0
 2431 0010 0120     		movs	r0, #1
 2432              	.LVL224:
 556:Src/ax_12a.c  ****     return 1;
 2433              		.loc 1 556 0
 2434 0012 1A80     		strh	r2, [r3]	@ movhi
 563:Src/ax_12a.c  **** 
 2435              		.loc 1 563 0
 2436 0014 04B0     		add	sp, sp, #16
 2437              	.LCFI79:
 2438              		.cfi_remember_state
 2439              		.cfi_def_cfa_offset 16
 2440              		@ sp needed
 2441 0016 70BD     		pop	{r4, r5, r6, pc}
 2442              	.LVL225:
 2443              	.L276:
 2444              	.LCFI80:
 2445              		.cfi_restore_state
 560:Src/ax_12a.c  ****   servo->interface->delay(10);
 2446              		.loc 1 560 0
 2447 0018 0123     		movs	r3, #1
 2448 001a 0546     		mov	r5, r0
 559:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_MAX_TORQUE, data, 2, AX_NOW);
 2449              		.loc 1 559 0
 2450 001c 0E0A     		lsrs	r6, r1, #8
 560:Src/ax_12a.c  ****   servo->interface->delay(10);
 2451              		.loc 1 560 0
 2452 001e 0093     		str	r3, [sp]
 2453 0020 0821     		movs	r1, #8
 2454              	.LVL226:
 2455 0022 03AA     		add	r2, sp, #12
 2456 0024 0223     		movs	r3, #2
 559:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_MAX_TORQUE, data, 2, AX_NOW);
 2457              		.loc 1 559 0
 2458 0026 8DF80C40 		strb	r4, [sp, #12]
ARM GAS  /tmp/cclxg7K3.s 			page 60


 2459 002a 8DF80D60 		strb	r6, [sp, #13]
 560:Src/ax_12a.c  ****   servo->interface->delay(10);
 2460              		.loc 1 560 0
 2461 002e FFF7FEFF 		bl	AX_Write
 2462              	.LVL227:
 561:Src/ax_12a.c  ****   return r;
 2463              		.loc 1 561 0
 2464 0032 6B68     		ldr	r3, [r5, #4]
 560:Src/ax_12a.c  ****   servo->interface->delay(10);
 2465              		.loc 1 560 0
 2466 0034 0446     		mov	r4, r0
 2467              	.LVL228:
 561:Src/ax_12a.c  ****   return r;
 2468              		.loc 1 561 0
 2469 0036 DB68     		ldr	r3, [r3, #12]
 2470 0038 0A20     		movs	r0, #10
 2471 003a 9847     		blx	r3
 2472              	.LVL229:
 562:Src/ax_12a.c  **** }
 2473              		.loc 1 562 0
 2474 003c 2046     		mov	r0, r4
 563:Src/ax_12a.c  **** 
 2475              		.loc 1 563 0
 2476 003e 04B0     		add	sp, sp, #16
 2477              	.LCFI81:
 2478              		.cfi_def_cfa_offset 16
 2479              		@ sp needed
 2480 0040 70BD     		pop	{r4, r5, r6, pc}
 2481              	.LVL230:
 2482              	.L280:
 2483 0042 00BF     		.align	2
 2484              	.L279:
 2485 0044 00000000 		.word	.LANCHOR0
 2486              		.cfi_endproc
 2487              	.LFE26:
 2489              		.section	.text.AX_Configure_Return_Level,"ax",%progbits
 2490              		.align	2
 2491              		.global	AX_Configure_Return_Level
 2492              		.thumb
 2493              		.thumb_func
 2495              	AX_Configure_Return_Level:
 2496              	.LFB27:
 565:Src/ax_12a.c  ****   if(level != AX_PING_RETURN && level != AX_READ_RETURN && level != AX_ALL_RETURN){
 2497              		.loc 1 565 0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 8
 2500              		@ frame_needed = 0, uses_anonymous_args = 0
 2501              	.LVL231:
 566:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2502              		.loc 1 566 0
 2503 0000 0229     		cmp	r1, #2
 2504 0002 04D9     		bls	.L282
 567:Src/ax_12a.c  ****     return 1;
 2505              		.loc 1 567 0
 2506 0004 0B4B     		ldr	r3, .L285
 2507 0006 0022     		movs	r2, #0
 2508 0008 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/cclxg7K3.s 			page 61


 568:Src/ax_12a.c  ****   }
 2509              		.loc 1 568 0
 2510 000a 0120     		movs	r0, #1
 2511              	.LVL232:
 574:Src/ax_12a.c  **** 
 2512              		.loc 1 574 0
 2513 000c 7047     		bx	lr
 2514              	.LVL233:
 2515              	.L282:
 565:Src/ax_12a.c  ****   if(level != AX_PING_RETURN && level != AX_READ_RETURN && level != AX_ALL_RETURN){
 2516              		.loc 1 565 0
 2517 000e 30B5     		push	{r4, r5, lr}
 2518              	.LCFI82:
 2519              		.cfi_def_cfa_offset 12
 2520              		.cfi_offset 4, -12
 2521              		.cfi_offset 5, -8
 2522              		.cfi_offset 14, -4
 2523 0010 85B0     		sub	sp, sp, #20
 2524              	.LCFI83:
 2525              		.cfi_def_cfa_offset 32
 570:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_LEVEL, &lvl, 1, AX_NOW);
 2526              		.loc 1 570 0
 2527 0012 04AA     		add	r2, sp, #16
 571:Src/ax_12a.c  ****   servo->interface->delay(10);
 2528              		.loc 1 571 0
 2529 0014 0123     		movs	r3, #1
 570:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_LEVEL, &lvl, 1, AX_NOW);
 2530              		.loc 1 570 0
 2531 0016 02F8011D 		strb	r1, [r2, #-1]!
 2532 001a 0546     		mov	r5, r0
 571:Src/ax_12a.c  ****   servo->interface->delay(10);
 2533              		.loc 1 571 0
 2534 001c 0093     		str	r3, [sp]
 2535 001e 0921     		movs	r1, #9
 2536              	.LVL234:
 2537 0020 FFF7FEFF 		bl	AX_Write
 2538              	.LVL235:
 572:Src/ax_12a.c  ****   return r;
 2539              		.loc 1 572 0
 2540 0024 6B68     		ldr	r3, [r5, #4]
 571:Src/ax_12a.c  ****   servo->interface->delay(10);
 2541              		.loc 1 571 0
 2542 0026 0446     		mov	r4, r0
 2543              	.LVL236:
 572:Src/ax_12a.c  ****   return r;
 2544              		.loc 1 572 0
 2545 0028 DB68     		ldr	r3, [r3, #12]
 2546 002a 0A20     		movs	r0, #10
 2547 002c 9847     		blx	r3
 2548              	.LVL237:
 573:Src/ax_12a.c  **** }
 2549              		.loc 1 573 0
 2550 002e 2046     		mov	r0, r4
 574:Src/ax_12a.c  **** 
 2551              		.loc 1 574 0
 2552 0030 05B0     		add	sp, sp, #20
 2553              	.LCFI84:
ARM GAS  /tmp/cclxg7K3.s 			page 62


 2554              		.cfi_def_cfa_offset 12
 2555              		@ sp needed
 2556 0032 30BD     		pop	{r4, r5, pc}
 2557              	.LVL238:
 2558              	.L286:
 2559              		.align	2
 2560              	.L285:
 2561 0034 00000000 		.word	.LANCHOR0
 2562              		.cfi_endproc
 2563              	.LFE27:
 2565              		.section	.text.AX_Configure_Alarm_LED,"ax",%progbits
 2566              		.align	2
 2567              		.global	AX_Configure_Alarm_LED
 2568              		.thumb
 2569              		.thumb_func
 2571              	AX_Configure_Alarm_LED:
 2572              	.LFB28:
 576:Src/ax_12a.c  ****   if(errors&10000000){
 2573              		.loc 1 576 0
 2574              		.cfi_startproc
 2575              		@ args = 0, pretend = 0, frame = 8
 2576              		@ frame_needed = 0, uses_anonymous_args = 0
 2577              	.LVL239:
 577:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2578              		.loc 1 577 0
 2579 0000 0B06     		lsls	r3, r1, #24
 2580 0002 04D5     		bpl	.L288
 578:Src/ax_12a.c  ****     return 1;
 2581              		.loc 1 578 0
 2582 0004 0B4B     		ldr	r3, .L291
 2583 0006 0022     		movs	r2, #0
 2584 0008 1A80     		strh	r2, [r3]	@ movhi
 579:Src/ax_12a.c  ****   }
 2585              		.loc 1 579 0
 2586 000a 0120     		movs	r0, #1
 2587              	.LVL240:
 585:Src/ax_12a.c  **** 
 2588              		.loc 1 585 0
 2589 000c 7047     		bx	lr
 2590              	.LVL241:
 2591              	.L288:
 576:Src/ax_12a.c  ****   if(errors&10000000){
 2592              		.loc 1 576 0
 2593 000e 30B5     		push	{r4, r5, lr}
 2594              	.LCFI85:
 2595              		.cfi_def_cfa_offset 12
 2596              		.cfi_offset 4, -12
 2597              		.cfi_offset 5, -8
 2598              		.cfi_offset 14, -4
 2599 0010 85B0     		sub	sp, sp, #20
 2600              	.LCFI86:
 2601              		.cfi_def_cfa_offset 32
 581:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_LED, &value, 1, AX_NOW);
 2602              		.loc 1 581 0
 2603 0012 04AA     		add	r2, sp, #16
 582:Src/ax_12a.c  ****   servo->interface->delay(10);
 2604              		.loc 1 582 0
ARM GAS  /tmp/cclxg7K3.s 			page 63


 2605 0014 0123     		movs	r3, #1
 581:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_LED, &value, 1, AX_NOW);
 2606              		.loc 1 581 0
 2607 0016 02F8011D 		strb	r1, [r2, #-1]!
 2608 001a 0546     		mov	r5, r0
 582:Src/ax_12a.c  ****   servo->interface->delay(10);
 2609              		.loc 1 582 0
 2610 001c 0093     		str	r3, [sp]
 2611 001e 0A21     		movs	r1, #10
 2612              	.LVL242:
 2613 0020 FFF7FEFF 		bl	AX_Write
 2614              	.LVL243:
 583:Src/ax_12a.c  ****   return r;
 2615              		.loc 1 583 0
 2616 0024 6B68     		ldr	r3, [r5, #4]
 582:Src/ax_12a.c  ****   servo->interface->delay(10);
 2617              		.loc 1 582 0
 2618 0026 0446     		mov	r4, r0
 2619              	.LVL244:
 583:Src/ax_12a.c  ****   return r;
 2620              		.loc 1 583 0
 2621 0028 DB68     		ldr	r3, [r3, #12]
 2622 002a 0A20     		movs	r0, #10
 2623 002c 9847     		blx	r3
 2624              	.LVL245:
 584:Src/ax_12a.c  **** }
 2625              		.loc 1 584 0
 2626 002e 2046     		mov	r0, r4
 585:Src/ax_12a.c  **** 
 2627              		.loc 1 585 0
 2628 0030 05B0     		add	sp, sp, #20
 2629              	.LCFI87:
 2630              		.cfi_def_cfa_offset 12
 2631              		@ sp needed
 2632 0032 30BD     		pop	{r4, r5, pc}
 2633              	.LVL246:
 2634              	.L292:
 2635              		.align	2
 2636              	.L291:
 2637 0034 00000000 		.word	.LANCHOR0
 2638              		.cfi_endproc
 2639              	.LFE28:
 2641              		.section	.text.AX_Configure_Alarm_Shutdown,"ax",%progbits
 2642              		.align	2
 2643              		.global	AX_Configure_Alarm_Shutdown
 2644              		.thumb
 2645              		.thumb_func
 2647              	AX_Configure_Alarm_Shutdown:
 2648              	.LFB29:
 587:Src/ax_12a.c  ****   if(errors&10000000){
 2649              		.loc 1 587 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 8
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653              	.LVL247:
 588:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2654              		.loc 1 588 0
ARM GAS  /tmp/cclxg7K3.s 			page 64


 2655 0000 0B06     		lsls	r3, r1, #24
 2656 0002 04D5     		bpl	.L294
 589:Src/ax_12a.c  ****     return 1;
 2657              		.loc 1 589 0
 2658 0004 0B4B     		ldr	r3, .L297
 2659 0006 0022     		movs	r2, #0
 2660 0008 1A80     		strh	r2, [r3]	@ movhi
 590:Src/ax_12a.c  ****   }
 2661              		.loc 1 590 0
 2662 000a 0120     		movs	r0, #1
 2663              	.LVL248:
 596:Src/ax_12a.c  **** 
 2664              		.loc 1 596 0
 2665 000c 7047     		bx	lr
 2666              	.LVL249:
 2667              	.L294:
 587:Src/ax_12a.c  ****   if(errors&10000000){
 2668              		.loc 1 587 0
 2669 000e 30B5     		push	{r4, r5, lr}
 2670              	.LCFI88:
 2671              		.cfi_def_cfa_offset 12
 2672              		.cfi_offset 4, -12
 2673              		.cfi_offset 5, -8
 2674              		.cfi_offset 14, -4
 2675 0010 85B0     		sub	sp, sp, #20
 2676              	.LCFI89:
 2677              		.cfi_def_cfa_offset 32
 592:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_SHUTDOWN, &value, 1, AX_NOW);
 2678              		.loc 1 592 0
 2679 0012 04AA     		add	r2, sp, #16
 593:Src/ax_12a.c  ****   servo->interface->delay(10);
 2680              		.loc 1 593 0
 2681 0014 0123     		movs	r3, #1
 592:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_SHUTDOWN, &value, 1, AX_NOW);
 2682              		.loc 1 592 0
 2683 0016 02F8011D 		strb	r1, [r2, #-1]!
 2684 001a 0546     		mov	r5, r0
 593:Src/ax_12a.c  ****   servo->interface->delay(10);
 2685              		.loc 1 593 0
 2686 001c 0093     		str	r3, [sp]
 2687 001e 0B21     		movs	r1, #11
 2688              	.LVL250:
 2689 0020 FFF7FEFF 		bl	AX_Write
 2690              	.LVL251:
 594:Src/ax_12a.c  ****   return r;
 2691              		.loc 1 594 0
 2692 0024 6B68     		ldr	r3, [r5, #4]
 593:Src/ax_12a.c  ****   servo->interface->delay(10);
 2693              		.loc 1 593 0
 2694 0026 0446     		mov	r4, r0
 2695              	.LVL252:
 594:Src/ax_12a.c  ****   return r;
 2696              		.loc 1 594 0
 2697 0028 DB68     		ldr	r3, [r3, #12]
 2698 002a 0A20     		movs	r0, #10
 2699 002c 9847     		blx	r3
 2700              	.LVL253:
ARM GAS  /tmp/cclxg7K3.s 			page 65


 595:Src/ax_12a.c  **** }
 2701              		.loc 1 595 0
 2702 002e 2046     		mov	r0, r4
 596:Src/ax_12a.c  **** 
 2703              		.loc 1 596 0
 2704 0030 05B0     		add	sp, sp, #20
 2705              	.LCFI90:
 2706              		.cfi_def_cfa_offset 12
 2707              		@ sp needed
 2708 0032 30BD     		pop	{r4, r5, pc}
 2709              	.LVL254:
 2710              	.L298:
 2711              		.align	2
 2712              	.L297:
 2713 0034 00000000 		.word	.LANCHOR0
 2714              		.cfi_endproc
 2715              	.LFE29:
 2717              		.section	.text.AX_Power_On,"ax",%progbits
 2718              		.align	2
 2719              		.global	AX_Power_On
 2720              		.thumb
 2721              		.thumb_func
 2723              	AX_Power_On:
 2724              	.LFB30:
 603:Src/ax_12a.c  ****   uint8_t value = 1;
 2725              		.loc 1 603 0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 8
 2728              		@ frame_needed = 0, uses_anonymous_args = 0
 2729              	.LVL255:
 2730 0000 00B5     		push	{lr}
 2731              	.LCFI91:
 2732              		.cfi_def_cfa_offset 4
 2733              		.cfi_offset 14, -4
 2734 0002 85B0     		sub	sp, sp, #20
 2735              	.LCFI92:
 2736              		.cfi_def_cfa_offset 24
 604:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 2737              		.loc 1 604 0
 2738 0004 04AA     		add	r2, sp, #16
 2739 0006 0123     		movs	r3, #1
 2740 0008 02F8013D 		strb	r3, [r2, #-1]!
 605:Src/ax_12a.c  **** }
 2741              		.loc 1 605 0
 2742 000c 0091     		str	r1, [sp]
 2743 000e 0E21     		movs	r1, #14
 2744              	.LVL256:
 2745 0010 FFF7FEFF 		bl	AX_Write
 2746              	.LVL257:
 606:Src/ax_12a.c  **** 
 2747              		.loc 1 606 0
 2748 0014 05B0     		add	sp, sp, #20
 2749              	.LCFI93:
 2750              		.cfi_def_cfa_offset 4
 2751              		@ sp needed
 2752 0016 5DF804FB 		ldr	pc, [sp], #4
 2753              		.cfi_endproc
ARM GAS  /tmp/cclxg7K3.s 			page 66


 2754              	.LFE30:
 2756 001a 00BF     		.section	.text.AX_Power_Off,"ax",%progbits
 2757              		.align	2
 2758              		.global	AX_Power_Off
 2759              		.thumb
 2760              		.thumb_func
 2762              	AX_Power_Off:
 2763              	.LFB31:
 608:Src/ax_12a.c  ****   uint8_t value = 0;
 2764              		.loc 1 608 0
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 8
 2767              		@ frame_needed = 0, uses_anonymous_args = 0
 2768              	.LVL258:
 2769 0000 00B5     		push	{lr}
 2770              	.LCFI94:
 2771              		.cfi_def_cfa_offset 4
 2772              		.cfi_offset 14, -4
 2773 0002 85B0     		sub	sp, sp, #20
 2774              	.LCFI95:
 2775              		.cfi_def_cfa_offset 24
 609:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 2776              		.loc 1 609 0
 2777 0004 04AA     		add	r2, sp, #16
 2778 0006 0023     		movs	r3, #0
 2779 0008 02F8013D 		strb	r3, [r2, #-1]!
 610:Src/ax_12a.c  **** }
 2780              		.loc 1 610 0
 2781 000c 0091     		str	r1, [sp]
 2782 000e 0123     		movs	r3, #1
 2783 0010 0E21     		movs	r1, #14
 2784              	.LVL259:
 2785 0012 FFF7FEFF 		bl	AX_Write
 2786              	.LVL260:
 611:Src/ax_12a.c  **** 
 2787              		.loc 1 611 0
 2788 0016 05B0     		add	sp, sp, #20
 2789              	.LCFI96:
 2790              		.cfi_def_cfa_offset 4
 2791              		@ sp needed
 2792 0018 5DF804FB 		ldr	pc, [sp], #4
 2793              		.cfi_endproc
 2794              	.LFE31:
 2796              		.section	.text.AX_Set_LED,"ax",%progbits
 2797              		.align	2
 2798              		.global	AX_Set_LED
 2799              		.thumb
 2800              		.thumb_func
 2802              	AX_Set_LED:
 2803              	.LFB32:
 613:Src/ax_12a.c  ****   if((state != AX_LED_OFF) && (state != AX_LED_ON)){
 2804              		.loc 1 613 0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 8
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
 2808              	.LVL261:
 614:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
ARM GAS  /tmp/cclxg7K3.s 			page 67


 2809              		.loc 1 614 0
 2810 0000 0129     		cmp	r1, #1
 2811 0002 04D9     		bls	.L304
 615:Src/ax_12a.c  ****     return 1;
 2812              		.loc 1 615 0
 2813 0004 094B     		ldr	r3, .L307
 2814 0006 0022     		movs	r2, #0
 2815              	.LVL262:
 2816 0008 1A80     		strh	r2, [r3]	@ movhi
 616:Src/ax_12a.c  ****   }
 2817              		.loc 1 616 0
 2818 000a 0120     		movs	r0, #1
 2819              	.LVL263:
 620:Src/ax_12a.c  **** }
 2820              		.loc 1 620 0
 2821 000c 7047     		bx	lr
 2822              	.LVL264:
 2823              	.L304:
 613:Src/ax_12a.c  ****   if((state != AX_LED_OFF) && (state != AX_LED_ON)){
 2824              		.loc 1 613 0
 2825 000e 00B5     		push	{lr}
 2826              	.LCFI97:
 2827              		.cfi_def_cfa_offset 4
 2828              		.cfi_offset 14, -4
 2829 0010 85B0     		sub	sp, sp, #20
 2830              	.LCFI98:
 2831              		.cfi_def_cfa_offset 24
 2832              	.LBB128:
 2833              	.LBB129:
 618:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 2834              		.loc 1 618 0
 2835 0012 04AB     		add	r3, sp, #16
 619:Src/ax_12a.c  **** }
 2836              		.loc 1 619 0
 2837 0014 0092     		str	r2, [sp]
 618:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 2838              		.loc 1 618 0
 2839 0016 03F8011D 		strb	r1, [r3, #-1]!
 619:Src/ax_12a.c  **** }
 2840              		.loc 1 619 0
 2841 001a 0F21     		movs	r1, #15
 2842              	.LVL265:
 2843 001c 1A46     		mov	r2, r3
 2844              	.LVL266:
 2845 001e 0123     		movs	r3, #1
 2846              	.LVL267:
 2847 0020 FFF7FEFF 		bl	AX_Write
 2848              	.LVL268:
 2849              	.LBE129:
 2850              	.LBE128:
 2851              		.loc 1 620 0
 2852 0024 05B0     		add	sp, sp, #20
 2853              	.LCFI99:
 2854              		.cfi_def_cfa_offset 4
 2855              		@ sp needed
 2856 0026 5DF804FB 		ldr	pc, [sp], #4
 2857              	.L308:
ARM GAS  /tmp/cclxg7K3.s 			page 68


 2858 002a 00BF     		.align	2
 2859              	.L307:
 2860 002c 00000000 		.word	.LANCHOR0
 2861              		.cfi_endproc
 2862              	.LFE32:
 2864              		.section	.text.AX_Set_Compliance,"ax",%progbits
 2865              		.align	2
 2866              		.global	AX_Set_Compliance
 2867              		.thumb
 2868              		.thumb_func
 2870              	AX_Set_Compliance:
 2871              	.LFB33:
 621:Src/ax_12a.c  **** 
 622:Src/ax_12a.c  **** uint8_t AX_Set_Compliance(AX *servo, AX_Compliance compliance, uint8_t now){
 2872              		.loc 1 622 0
 2873              		.cfi_startproc
 2874              		@ args = 0, pretend = 0, frame = 16
 2875              		@ frame_needed = 0, uses_anonymous_args = 0
 2876              	.LVL269:
 2877 0000 70B5     		push	{r4, r5, r6, lr}
 2878              	.LCFI100:
 2879              		.cfi_def_cfa_offset 16
 2880              		.cfi_offset 4, -16
 2881              		.cfi_offset 5, -12
 2882              		.cfi_offset 6, -8
 2883              		.cfi_offset 14, -4
 2884 0002 0C0E     		lsrs	r4, r1, #24
 2885 0004 86B0     		sub	sp, sp, #24
 2886              	.LCFI101:
 2887              		.cfi_def_cfa_offset 40
 623:Src/ax_12a.c  ****   if(compliance.ccw_slope > 6 || compliance.cw_slope > 6){
 2888              		.loc 1 623 0
 2889 0006 062C     		cmp	r4, #6
 622:Src/ax_12a.c  ****   if(compliance.ccw_slope > 6 || compliance.cw_slope > 6){
 2890              		.loc 1 622 0
 2891 0008 0391     		str	r1, [sp, #12]
 2892 000a C1F30741 		ubfx	r1, r1, #16, #8
 2893              	.LVL270:
 2894              		.loc 1 623 0
 2895 000e 01D8     		bhi	.L310
 2896              		.loc 1 623 0 is_stmt 0 discriminator 1
 2897 0010 0629     		cmp	r1, #6
 2898 0012 05D9     		bls	.L311
 2899              	.L310:
 624:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2900              		.loc 1 624 0 is_stmt 1
 2901 0014 0C4B     		ldr	r3, .L314
 2902 0016 0022     		movs	r2, #0
 2903              	.LVL271:
 625:Src/ax_12a.c  ****     return 1;
 2904              		.loc 1 625 0
 2905 0018 0120     		movs	r0, #1
 2906              	.LVL272:
 624:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2907              		.loc 1 624 0
 2908 001a 1A80     		strh	r2, [r3]	@ movhi
 626:Src/ax_12a.c  ****   }
ARM GAS  /tmp/cclxg7K3.s 			page 69


 627:Src/ax_12a.c  ****   uint8_t data[4] = {
 628:Src/ax_12a.c  ****     compliance.cw_margin,
 629:Src/ax_12a.c  ****     compliance.ccw_margin,
 630:Src/ax_12a.c  ****     compliance.cw_slope,
 631:Src/ax_12a.c  ****     compliance.ccw_slope};
 632:Src/ax_12a.c  ****   return AX_Write(servo, AX_CW_COMPLIANCE_MARGIN, data, 4, now);     
 633:Src/ax_12a.c  **** }
 2909              		.loc 1 633 0
 2910 001c 06B0     		add	sp, sp, #24
 2911              	.LCFI102:
 2912              		.cfi_remember_state
 2913              		.cfi_def_cfa_offset 16
 2914              		@ sp needed
 2915 001e 70BD     		pop	{r4, r5, r6, pc}
 2916              	.LVL273:
 2917              	.L311:
 2918              	.LCFI103:
 2919              		.cfi_restore_state
 632:Src/ax_12a.c  **** }
 2920              		.loc 1 632 0
 2921 0020 0092     		str	r2, [sp]
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 2922              		.loc 1 627 0
 2923 0022 9DF80C60 		ldrb	r6, [sp, #12]	@ zero_extendqisi2
 2924 0026 9DF80D50 		ldrb	r5, [sp, #13]	@ zero_extendqisi2
 2925 002a 8DF81610 		strb	r1, [sp, #22]
 632:Src/ax_12a.c  **** }
 2926              		.loc 1 632 0
 2927 002e 05AA     		add	r2, sp, #20
 2928              	.LVL274:
 2929 0030 1021     		movs	r1, #16
 2930              	.LVL275:
 2931 0032 0423     		movs	r3, #4
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 2932              		.loc 1 627 0
 2933 0034 8DF81740 		strb	r4, [sp, #23]
 2934 0038 8DF81460 		strb	r6, [sp, #20]
 2935 003c 8DF81550 		strb	r5, [sp, #21]
 632:Src/ax_12a.c  **** }
 2936              		.loc 1 632 0
 2937 0040 FFF7FEFF 		bl	AX_Write
 2938              	.LVL276:
 2939              		.loc 1 633 0
 2940 0044 06B0     		add	sp, sp, #24
 2941              	.LCFI104:
 2942              		.cfi_def_cfa_offset 16
 2943              		@ sp needed
 2944 0046 70BD     		pop	{r4, r5, r6, pc}
 2945              	.LVL277:
 2946              	.L315:
 2947              		.align	2
 2948              	.L314:
 2949 0048 00000000 		.word	.LANCHOR0
 2950              		.cfi_endproc
 2951              	.LFE33:
 2953              		.section	.text.AX_Set_Goal_Position,"ax",%progbits
 2954              		.align	2
ARM GAS  /tmp/cclxg7K3.s 			page 70


 2955              		.global	AX_Set_Goal_Position
 2956              		.thumb
 2957              		.thumb_func
 2959              	AX_Set_Goal_Position:
 2960              	.LFB34:
 634:Src/ax_12a.c  **** 
 635:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Position(AX *servo, uint16_t position, uint8_t now){
 2961              		.loc 1 635 0
 2962              		.cfi_startproc
 2963              		@ args = 0, pretend = 0, frame = 8
 2964              		@ frame_needed = 0, uses_anonymous_args = 0
 2965              	.LVL278:
 2966 0000 30B5     		push	{r4, r5, lr}
 2967              	.LCFI105:
 2968              		.cfi_def_cfa_offset 12
 2969              		.cfi_offset 4, -12
 2970              		.cfi_offset 5, -8
 2971              		.cfi_offset 14, -4
 636:Src/ax_12a.c  ****   if(position > 1023){
 2972              		.loc 1 636 0
 2973 0002 B1F5806F 		cmp	r1, #1024
 635:Src/ax_12a.c  ****   if(position > 1023){
 2974              		.loc 1 635 0
 2975 0006 85B0     		sub	sp, sp, #20
 2976              	.LCFI106:
 2977              		.cfi_def_cfa_offset 32
 635:Src/ax_12a.c  ****   if(position > 1023){
 2978              		.loc 1 635 0
 2979 0008 0C46     		mov	r4, r1
 2980              		.loc 1 636 0
 2981 000a 05D3     		bcc	.L317
 637:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2982              		.loc 1 637 0
 2983 000c 094B     		ldr	r3, .L320
 2984 000e 0022     		movs	r2, #0
 2985              	.LVL279:
 638:Src/ax_12a.c  ****     return 1;
 2986              		.loc 1 638 0
 2987 0010 0120     		movs	r0, #1
 2988              	.LVL280:
 637:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2989              		.loc 1 637 0
 2990 0012 1A80     		strh	r2, [r3]	@ movhi
 639:Src/ax_12a.c  ****   }
 640:Src/ax_12a.c  ****   uint8_t data[2] = {position&0xFF, position>>8};
 641:Src/ax_12a.c  ****   return AX_Write(servo, AX_GOAL_POSITION, data, 2, now);
 642:Src/ax_12a.c  **** }
 2991              		.loc 1 642 0
 2992 0014 05B0     		add	sp, sp, #20
 2993              	.LCFI107:
 2994              		.cfi_remember_state
 2995              		.cfi_def_cfa_offset 12
 2996              		@ sp needed
 2997 0016 30BD     		pop	{r4, r5, pc}
 2998              	.LVL281:
 2999              	.L317:
 3000              	.LCFI108:
ARM GAS  /tmp/cclxg7K3.s 			page 71


 3001              		.cfi_restore_state
 641:Src/ax_12a.c  **** }
 3002              		.loc 1 641 0
 3003 0018 0092     		str	r2, [sp]
 640:Src/ax_12a.c  ****   return AX_Write(servo, AX_GOAL_POSITION, data, 2, now);
 3004              		.loc 1 640 0
 3005 001a 0D0A     		lsrs	r5, r1, #8
 641:Src/ax_12a.c  **** }
 3006              		.loc 1 641 0
 3007 001c 03AA     		add	r2, sp, #12
 3008              	.LVL282:
 3009 001e 1421     		movs	r1, #20
 3010              	.LVL283:
 3011 0020 0223     		movs	r3, #2
 640:Src/ax_12a.c  ****   return AX_Write(servo, AX_GOAL_POSITION, data, 2, now);
 3012              		.loc 1 640 0
 3013 0022 8DF80C40 		strb	r4, [sp, #12]
 3014 0026 8DF80D50 		strb	r5, [sp, #13]
 641:Src/ax_12a.c  **** }
 3015              		.loc 1 641 0
 3016 002a FFF7FEFF 		bl	AX_Write
 3017              	.LVL284:
 3018              		.loc 1 642 0
 3019 002e 05B0     		add	sp, sp, #20
 3020              	.LCFI109:
 3021              		.cfi_def_cfa_offset 12
 3022              		@ sp needed
 3023 0030 30BD     		pop	{r4, r5, pc}
 3024              	.L321:
 3025 0032 00BF     		.align	2
 3026              	.L320:
 3027 0034 00000000 		.word	.LANCHOR0
 3028              		.cfi_endproc
 3029              	.LFE34:
 3031              		.section	.text.AX_Set_Goal_Speed_Join,"ax",%progbits
 3032              		.align	2
 3033              		.global	AX_Set_Goal_Speed_Join
 3034              		.thumb
 3035              		.thumb_func
 3037              	AX_Set_Goal_Speed_Join:
 3038              	.LFB35:
 643:Src/ax_12a.c  **** 
 644:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Speed_Join(AX *servo, uint16_t speed, uint8_t now){
 3039              		.loc 1 644 0
 3040              		.cfi_startproc
 3041              		@ args = 0, pretend = 0, frame = 8
 3042              		@ frame_needed = 0, uses_anonymous_args = 0
 3043              	.LVL285:
 3044 0000 30B5     		push	{r4, r5, lr}
 3045              	.LCFI110:
 3046              		.cfi_def_cfa_offset 12
 3047              		.cfi_offset 4, -12
 3048              		.cfi_offset 5, -8
 3049              		.cfi_offset 14, -4
 645:Src/ax_12a.c  ****   if(speed > 1023){
 3050              		.loc 1 645 0
 3051 0002 B1F5806F 		cmp	r1, #1024
ARM GAS  /tmp/cclxg7K3.s 			page 72


 644:Src/ax_12a.c  ****   if(speed > 1023){
 3052              		.loc 1 644 0
 3053 0006 85B0     		sub	sp, sp, #20
 3054              	.LCFI111:
 3055              		.cfi_def_cfa_offset 32
 644:Src/ax_12a.c  ****   if(speed > 1023){
 3056              		.loc 1 644 0
 3057 0008 0C46     		mov	r4, r1
 3058              		.loc 1 645 0
 3059 000a 05D3     		bcc	.L323
 646:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3060              		.loc 1 646 0
 3061 000c 094B     		ldr	r3, .L326
 3062 000e 0022     		movs	r2, #0
 3063              	.LVL286:
 647:Src/ax_12a.c  ****     return 1;
 3064              		.loc 1 647 0
 3065 0010 0120     		movs	r0, #1
 3066              	.LVL287:
 646:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3067              		.loc 1 646 0
 3068 0012 1A80     		strh	r2, [r3]	@ movhi
 648:Src/ax_12a.c  ****   }
 649:Src/ax_12a.c  ****   uint8_t data[2] = {speed&0xFF, speed>>8};
 650:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now); 
 651:Src/ax_12a.c  **** }
 3069              		.loc 1 651 0
 3070 0014 05B0     		add	sp, sp, #20
 3071              	.LCFI112:
 3072              		.cfi_remember_state
 3073              		.cfi_def_cfa_offset 12
 3074              		@ sp needed
 3075 0016 30BD     		pop	{r4, r5, pc}
 3076              	.LVL288:
 3077              	.L323:
 3078              	.LCFI113:
 3079              		.cfi_restore_state
 650:Src/ax_12a.c  **** }
 3080              		.loc 1 650 0
 3081 0018 0092     		str	r2, [sp]
 649:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now); 
 3082              		.loc 1 649 0
 3083 001a 0D0A     		lsrs	r5, r1, #8
 650:Src/ax_12a.c  **** }
 3084              		.loc 1 650 0
 3085 001c 03AA     		add	r2, sp, #12
 3086              	.LVL289:
 3087 001e 1521     		movs	r1, #21
 3088              	.LVL290:
 3089 0020 0223     		movs	r3, #2
 649:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now); 
 3090              		.loc 1 649 0
 3091 0022 8DF80C40 		strb	r4, [sp, #12]
 3092 0026 8DF80D50 		strb	r5, [sp, #13]
 650:Src/ax_12a.c  **** }
 3093              		.loc 1 650 0
 3094 002a FFF7FEFF 		bl	AX_Write
ARM GAS  /tmp/cclxg7K3.s 			page 73


 3095              	.LVL291:
 3096              		.loc 1 651 0
 3097 002e 05B0     		add	sp, sp, #20
 3098              	.LCFI114:
 3099              		.cfi_def_cfa_offset 12
 3100              		@ sp needed
 3101 0030 30BD     		pop	{r4, r5, pc}
 3102              	.L327:
 3103 0032 00BF     		.align	2
 3104              	.L326:
 3105 0034 00000000 		.word	.LANCHOR0
 3106              		.cfi_endproc
 3107              	.LFE35:
 3109              		.section	.text.AX_Set_Goal_Speed_Wheel,"ax",%progbits
 3110              		.align	2
 3111              		.global	AX_Set_Goal_Speed_Wheel
 3112              		.thumb
 3113              		.thumb_func
 3115              	AX_Set_Goal_Speed_Wheel:
 3116              	.LFB36:
 652:Src/ax_12a.c  **** 
 653:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Speed_Wheel(AX *servo, uint16_t speed, AX_Wheel_Direction dir, uint8_t now){
 3117              		.loc 1 653 0
 3118              		.cfi_startproc
 3119              		@ args = 0, pretend = 0, frame = 8
 3120              		@ frame_needed = 0, uses_anonymous_args = 0
 3121              	.LVL292:
 3122 0000 30B5     		push	{r4, r5, lr}
 3123              	.LCFI115:
 3124              		.cfi_def_cfa_offset 12
 3125              		.cfi_offset 4, -12
 3126              		.cfi_offset 5, -8
 3127              		.cfi_offset 14, -4
 654:Src/ax_12a.c  ****   if(speed > 1023){
 3128              		.loc 1 654 0
 3129 0002 B1F5806F 		cmp	r1, #1024
 653:Src/ax_12a.c  ****   if(speed > 1023){
 3130              		.loc 1 653 0
 3131 0006 85B0     		sub	sp, sp, #20
 3132              	.LCFI116:
 3133              		.cfi_def_cfa_offset 32
 653:Src/ax_12a.c  ****   if(speed > 1023){
 3134              		.loc 1 653 0
 3135 0008 0C46     		mov	r4, r1
 3136              		.loc 1 654 0
 3137 000a 0FD2     		bcs	.L337
 655:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 656:Src/ax_12a.c  ****     return 1;
 657:Src/ax_12a.c  ****   }
 658:Src/ax_12a.c  ****   
 659:Src/ax_12a.c  ****   switch(dir){
 3138              		.loc 1 659 0
 3139 000c A2B1     		cbz	r2, .L332
 3140 000e 012A     		cmp	r2, #1
 3141 0010 0CD1     		bne	.L337
 3142              	.LVL293:
 3143              	.L333:
ARM GAS  /tmp/cclxg7K3.s 			page 74


 660:Src/ax_12a.c  ****   case AX_CLOCKWISE:
 661:Src/ax_12a.c  ****     speed += 1024;
 662:Src/ax_12a.c  ****     break;
 663:Src/ax_12a.c  ****   case AX_COUNTERCLOCKWISE:
 664:Src/ax_12a.c  ****   break;
 665:Src/ax_12a.c  ****   default:
 666:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 667:Src/ax_12a.c  ****     return 1;
 668:Src/ax_12a.c  ****     break;
 669:Src/ax_12a.c  ****   }
 670:Src/ax_12a.c  ****   uint8_t data[2] = {speed&0xFF, speed>>8};
 671:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now);
 3144              		.loc 1 671 0
 3145 0012 0093     		str	r3, [sp]
 670:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now);
 3146              		.loc 1 670 0
 3147 0014 250A     		lsrs	r5, r4, #8
 3148              		.loc 1 671 0
 3149 0016 1521     		movs	r1, #21
 3150 0018 03AA     		add	r2, sp, #12
 3151              	.LVL294:
 3152 001a 0223     		movs	r3, #2
 3153              	.LVL295:
 670:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now);
 3154              		.loc 1 670 0
 3155 001c 8DF80C40 		strb	r4, [sp, #12]
 3156 0020 8DF80D50 		strb	r5, [sp, #13]
 3157              		.loc 1 671 0
 3158 0024 FFF7FEFF 		bl	AX_Write
 3159              	.LVL296:
 672:Src/ax_12a.c  **** }
 3160              		.loc 1 672 0
 3161 0028 05B0     		add	sp, sp, #20
 3162              	.LCFI117:
 3163              		.cfi_remember_state
 3164              		.cfi_def_cfa_offset 12
 3165              		@ sp needed
 3166 002a 30BD     		pop	{r4, r5, pc}
 3167              	.LVL297:
 3168              	.L337:
 3169              	.LCFI118:
 3170              		.cfi_restore_state
 666:Src/ax_12a.c  ****     return 1;
 3171              		.loc 1 666 0
 3172 002c 044B     		ldr	r3, .L339
 3173              	.LVL298:
 3174 002e 0022     		movs	r2, #0
 3175              	.LVL299:
 667:Src/ax_12a.c  ****     break;
 3176              		.loc 1 667 0
 3177 0030 0120     		movs	r0, #1
 3178              	.LVL300:
 666:Src/ax_12a.c  ****     return 1;
 3179              		.loc 1 666 0
 3180 0032 1A80     		strh	r2, [r3]	@ movhi
 3181              		.loc 1 672 0
 3182 0034 05B0     		add	sp, sp, #20
ARM GAS  /tmp/cclxg7K3.s 			page 75


 3183              	.LCFI119:
 3184              		.cfi_remember_state
 3185              		.cfi_def_cfa_offset 12
 3186              		@ sp needed
 3187 0036 30BD     		pop	{r4, r5, pc}
 3188              	.LVL301:
 3189              	.L332:
 3190              	.LCFI120:
 3191              		.cfi_restore_state
 661:Src/ax_12a.c  ****     break;
 3192              		.loc 1 661 0
 3193 0038 01F58064 		add	r4, r1, #1024
 3194 003c A4B2     		uxth	r4, r4
 3195              	.LVL302:
 662:Src/ax_12a.c  ****   case AX_COUNTERCLOCKWISE:
 3196              		.loc 1 662 0
 3197 003e E8E7     		b	.L333
 3198              	.L340:
 3199              		.align	2
 3200              	.L339:
 3201 0040 00000000 		.word	.LANCHOR0
 3202              		.cfi_endproc
 3203              	.LFE36:
 3205              		.section	.text.AX_Set_Torque_Limit,"ax",%progbits
 3206              		.align	2
 3207              		.global	AX_Set_Torque_Limit
 3208              		.thumb
 3209              		.thumb_func
 3211              	AX_Set_Torque_Limit:
 3212              	.LFB37:
 673:Src/ax_12a.c  **** 
 674:Src/ax_12a.c  **** uint8_t AX_Set_Torque_Limit(AX *servo, uint16_t torque_limit, uint8_t now){
 3213              		.loc 1 674 0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 8
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
 3217              	.LVL303:
 3218 0000 30B5     		push	{r4, r5, lr}
 3219              	.LCFI121:
 3220              		.cfi_def_cfa_offset 12
 3221              		.cfi_offset 4, -12
 3222              		.cfi_offset 5, -8
 3223              		.cfi_offset 14, -4
 675:Src/ax_12a.c  ****   if(torque_limit > 1023){
 3224              		.loc 1 675 0
 3225 0002 B1F5806F 		cmp	r1, #1024
 674:Src/ax_12a.c  ****   if(torque_limit > 1023){
 3226              		.loc 1 674 0
 3227 0006 85B0     		sub	sp, sp, #20
 3228              	.LCFI122:
 3229              		.cfi_def_cfa_offset 32
 674:Src/ax_12a.c  ****   if(torque_limit > 1023){
 3230              		.loc 1 674 0
 3231 0008 0C46     		mov	r4, r1
 3232              		.loc 1 675 0
 3233 000a 05D3     		bcc	.L342
 676:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
ARM GAS  /tmp/cclxg7K3.s 			page 76


 3234              		.loc 1 676 0
 3235 000c 094B     		ldr	r3, .L345
 3236 000e 0022     		movs	r2, #0
 3237              	.LVL304:
 677:Src/ax_12a.c  ****     return 1;
 3238              		.loc 1 677 0
 3239 0010 0120     		movs	r0, #1
 3240              	.LVL305:
 676:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3241              		.loc 1 676 0
 3242 0012 1A80     		strh	r2, [r3]	@ movhi
 678:Src/ax_12a.c  ****   }
 679:Src/ax_12a.c  ****   uint8_t data[2] = {torque_limit&0xFF, torque_limit>>8};
 680:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_LIMIT, data, 2, now);
 681:Src/ax_12a.c  **** }
 3243              		.loc 1 681 0
 3244 0014 05B0     		add	sp, sp, #20
 3245              	.LCFI123:
 3246              		.cfi_remember_state
 3247              		.cfi_def_cfa_offset 12
 3248              		@ sp needed
 3249 0016 30BD     		pop	{r4, r5, pc}
 3250              	.LVL306:
 3251              	.L342:
 3252              	.LCFI124:
 3253              		.cfi_restore_state
 680:Src/ax_12a.c  **** }
 3254              		.loc 1 680 0
 3255 0018 0092     		str	r2, [sp]
 679:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_LIMIT, data, 2, now);
 3256              		.loc 1 679 0
 3257 001a 0D0A     		lsrs	r5, r1, #8
 680:Src/ax_12a.c  **** }
 3258              		.loc 1 680 0
 3259 001c 03AA     		add	r2, sp, #12
 3260              	.LVL307:
 3261 001e 1621     		movs	r1, #22
 3262              	.LVL308:
 3263 0020 0223     		movs	r3, #2
 679:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_LIMIT, data, 2, now);
 3264              		.loc 1 679 0
 3265 0022 8DF80C40 		strb	r4, [sp, #12]
 3266 0026 8DF80D50 		strb	r5, [sp, #13]
 680:Src/ax_12a.c  **** }
 3267              		.loc 1 680 0
 3268 002a FFF7FEFF 		bl	AX_Write
 3269              	.LVL309:
 3270              		.loc 1 681 0
 3271 002e 05B0     		add	sp, sp, #20
 3272              	.LCFI125:
 3273              		.cfi_def_cfa_offset 12
 3274              		@ sp needed
 3275 0030 30BD     		pop	{r4, r5, pc}
 3276              	.L346:
 3277 0032 00BF     		.align	2
 3278              	.L345:
 3279 0034 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cclxg7K3.s 			page 77


 3280              		.cfi_endproc
 3281              	.LFE37:
 3283              		.section	.text.AX_Set_Punch,"ax",%progbits
 3284              		.align	2
 3285              		.global	AX_Set_Punch
 3286              		.thumb
 3287              		.thumb_func
 3289              	AX_Set_Punch:
 3290              	.LFB38:
 682:Src/ax_12a.c  **** 
 683:Src/ax_12a.c  **** uint8_t AX_Set_Punch(AX *servo, uint16_t punch, uint8_t now){
 3291              		.loc 1 683 0
 3292              		.cfi_startproc
 3293              		@ args = 0, pretend = 0, frame = 8
 3294              		@ frame_needed = 0, uses_anonymous_args = 0
 3295              	.LVL310:
 3296 0000 30B5     		push	{r4, r5, lr}
 3297              	.LCFI126:
 3298              		.cfi_def_cfa_offset 12
 3299              		.cfi_offset 4, -12
 3300              		.cfi_offset 5, -8
 3301              		.cfi_offset 14, -4
 684:Src/ax_12a.c  ****   if(punch < 0x20 || punch > 0x3FF){
 3302              		.loc 1 684 0
 3303 0002 A1F12003 		sub	r3, r1, #32
 3304 0006 B3F5787F 		cmp	r3, #992
 683:Src/ax_12a.c  ****   if(punch < 0x20 || punch > 0x3FF){
 3305              		.loc 1 683 0
 3306 000a 85B0     		sub	sp, sp, #20
 3307              	.LCFI127:
 3308              		.cfi_def_cfa_offset 32
 683:Src/ax_12a.c  ****   if(punch < 0x20 || punch > 0x3FF){
 3309              		.loc 1 683 0
 3310 000c 0C46     		mov	r4, r1
 3311              		.loc 1 684 0
 3312 000e 05D3     		bcc	.L348
 685:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3313              		.loc 1 685 0
 3314 0010 094B     		ldr	r3, .L351
 3315 0012 0022     		movs	r2, #0
 3316              	.LVL311:
 686:Src/ax_12a.c  ****     return 1;
 3317              		.loc 1 686 0
 3318 0014 0120     		movs	r0, #1
 3319              	.LVL312:
 685:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3320              		.loc 1 685 0
 3321 0016 1A80     		strh	r2, [r3]	@ movhi
 687:Src/ax_12a.c  ****   }
 688:Src/ax_12a.c  ****   uint8_t data[2] = {punch&0xFF, punch>>8};
 689:Src/ax_12a.c  ****   return AX_Write(servo, AX_PUNCH, data, 2, now);
 690:Src/ax_12a.c  **** }
 3322              		.loc 1 690 0
 3323 0018 05B0     		add	sp, sp, #20
 3324              	.LCFI128:
 3325              		.cfi_remember_state
 3326              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cclxg7K3.s 			page 78


 3327              		@ sp needed
 3328 001a 30BD     		pop	{r4, r5, pc}
 3329              	.LVL313:
 3330              	.L348:
 3331              	.LCFI129:
 3332              		.cfi_restore_state
 689:Src/ax_12a.c  **** }
 3333              		.loc 1 689 0
 3334 001c 0092     		str	r2, [sp]
 688:Src/ax_12a.c  ****   return AX_Write(servo, AX_PUNCH, data, 2, now);
 3335              		.loc 1 688 0
 3336 001e 0D0A     		lsrs	r5, r1, #8
 689:Src/ax_12a.c  **** }
 3337              		.loc 1 689 0
 3338 0020 03AA     		add	r2, sp, #12
 3339              	.LVL314:
 3340 0022 1821     		movs	r1, #24
 3341              	.LVL315:
 3342 0024 0223     		movs	r3, #2
 688:Src/ax_12a.c  ****   return AX_Write(servo, AX_PUNCH, data, 2, now);
 3343              		.loc 1 688 0
 3344 0026 8DF80C40 		strb	r4, [sp, #12]
 3345 002a 8DF80D50 		strb	r5, [sp, #13]
 689:Src/ax_12a.c  **** }
 3346              		.loc 1 689 0
 3347 002e FFF7FEFF 		bl	AX_Write
 3348              	.LVL316:
 3349              		.loc 1 690 0
 3350 0032 05B0     		add	sp, sp, #20
 3351              	.LCFI130:
 3352              		.cfi_def_cfa_offset 12
 3353              		@ sp needed
 3354 0034 30BD     		pop	{r4, r5, pc}
 3355              	.L352:
 3356 0036 00BF     		.align	2
 3357              	.L351:
 3358 0038 00000000 		.word	.LANCHOR0
 3359              		.cfi_endproc
 3360              	.LFE38:
 3362              		.section	.text.AX_Lock_ROM,"ax",%progbits
 3363              		.align	2
 3364              		.global	AX_Lock_ROM
 3365              		.thumb
 3366              		.thumb_func
 3368              	AX_Lock_ROM:
 3369              	.LFB39:
 691:Src/ax_12a.c  **** 
 692:Src/ax_12a.c  **** uint8_t AX_Lock_ROM(AX *servo, uint8_t now){
 3370              		.loc 1 692 0
 3371              		.cfi_startproc
 3372              		@ args = 0, pretend = 0, frame = 8
 3373              		@ frame_needed = 0, uses_anonymous_args = 0
 3374              	.LVL317:
 3375 0000 00B5     		push	{lr}
 3376              	.LCFI131:
 3377              		.cfi_def_cfa_offset 4
 3378              		.cfi_offset 14, -4
ARM GAS  /tmp/cclxg7K3.s 			page 79


 3379 0002 85B0     		sub	sp, sp, #20
 3380              	.LCFI132:
 3381              		.cfi_def_cfa_offset 24
 693:Src/ax_12a.c  ****   uint8_t value = 1;
 3382              		.loc 1 693 0
 3383 0004 04AA     		add	r2, sp, #16
 3384 0006 0123     		movs	r3, #1
 3385 0008 02F8013D 		strb	r3, [r2, #-1]!
 694:Src/ax_12a.c  ****   return AX_Write(servo, AX_EEPROM_LOCK, &value, 1, now);
 3386              		.loc 1 694 0
 3387 000c 0091     		str	r1, [sp]
 3388 000e 1721     		movs	r1, #23
 3389              	.LVL318:
 3390 0010 FFF7FEFF 		bl	AX_Write
 3391              	.LVL319:
 695:Src/ax_12a.c  **** }
 3392              		.loc 1 695 0
 3393 0014 05B0     		add	sp, sp, #20
 3394              	.LCFI133:
 3395              		.cfi_def_cfa_offset 4
 3396              		@ sp needed
 3397 0016 5DF804FB 		ldr	pc, [sp], #4
 3398              		.cfi_endproc
 3399              	.LFE39:
 3401 001a 00BF     		.section	.text.AX_Unlock_ROM,"ax",%progbits
 3402              		.align	2
 3403              		.global	AX_Unlock_ROM
 3404              		.thumb
 3405              		.thumb_func
 3407              	AX_Unlock_ROM:
 3408              	.LFB40:
 696:Src/ax_12a.c  **** 
 697:Src/ax_12a.c  **** uint8_t AX_Unlock_ROM(AX *servo, uint8_t now){
 3409              		.loc 1 697 0
 3410              		.cfi_startproc
 3411              		@ args = 0, pretend = 0, frame = 8
 3412              		@ frame_needed = 0, uses_anonymous_args = 0
 3413              	.LVL320:
 3414 0000 00B5     		push	{lr}
 3415              	.LCFI134:
 3416              		.cfi_def_cfa_offset 4
 3417              		.cfi_offset 14, -4
 3418 0002 85B0     		sub	sp, sp, #20
 3419              	.LCFI135:
 3420              		.cfi_def_cfa_offset 24
 698:Src/ax_12a.c  ****   uint8_t value = 0;
 3421              		.loc 1 698 0
 3422 0004 04AA     		add	r2, sp, #16
 3423 0006 0023     		movs	r3, #0
 3424 0008 02F8013D 		strb	r3, [r2, #-1]!
 699:Src/ax_12a.c  ****   return AX_Write(servo, AX_EEPROM_LOCK, &value, 1, now);
 3425              		.loc 1 699 0
 3426 000c 0091     		str	r1, [sp]
 3427 000e 0123     		movs	r3, #1
 3428 0010 1721     		movs	r1, #23
 3429              	.LVL321:
 3430 0012 FFF7FEFF 		bl	AX_Write
ARM GAS  /tmp/cclxg7K3.s 			page 80


 3431              	.LVL322:
 700:Src/ax_12a.c  **** }
 3432              		.loc 1 700 0
 3433 0016 05B0     		add	sp, sp, #20
 3434              	.LCFI136:
 3435              		.cfi_def_cfa_offset 4
 3436              		@ sp needed
 3437 0018 5DF804FB 		ldr	pc, [sp], #4
 3438              		.cfi_endproc
 3439              	.LFE40:
 3441              		.section	.text.AX_Get_Current_Position,"ax",%progbits
 3442              		.align	2
 3443              		.global	AX_Get_Current_Position
 3444              		.thumb
 3445              		.thumb_func
 3447              	AX_Get_Current_Position:
 3448              	.LFB41:
 701:Src/ax_12a.c  **** 
 702:Src/ax_12a.c  **** //======================================
 703:Src/ax_12a.c  **** //       LECTURE D'INFORMATIONS
 704:Src/ax_12a.c  **** //======================================
 705:Src/ax_12a.c  **** uint8_t AX_Get_Current_Position(AX *servo, uint16_t *position){
 3449              		.loc 1 705 0
 3450              		.cfi_startproc
 3451              		@ args = 0, pretend = 0, frame = 0
 3452              		@ frame_needed = 0, uses_anonymous_args = 0
 3453              		@ link register save eliminated.
 3454              	.LVL323:
 3455              		.loc 1 705 0
 3456 0000 0A46     		mov	r2, r1
 3457              	.LVL324:
 3458              	.LBB130:
 3459              	.LBB131:
 3460 0002 1921     		movs	r1, #25
 3461              	.LVL325:
 3462 0004 FFF7FEBF 		b	AX_Read.part.3
 3463              	.LVL326:
 3464              	.LBE131:
 3465              	.LBE130:
 3466              		.cfi_endproc
 3467              	.LFE41:
 3469              		.section	.text.AX_Get_Current_Speed,"ax",%progbits
 3470              		.align	2
 3471              		.global	AX_Get_Current_Speed
 3472              		.thumb
 3473              		.thumb_func
 3475              	AX_Get_Current_Speed:
 3476              	.LFB42:
 706:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_POSITION, position);
 707:Src/ax_12a.c  **** }
 708:Src/ax_12a.c  **** 
 709:Src/ax_12a.c  **** uint8_t AX_Get_Current_Speed(AX *servo, AX_Wheel_Direction *direction, uint16_t *speed){
 3477              		.loc 1 709 0
 3478              		.cfi_startproc
 3479              		@ args = 0, pretend = 0, frame = 0
 3480              		@ frame_needed = 0, uses_anonymous_args = 0
 3481              	.LVL327:
ARM GAS  /tmp/cclxg7K3.s 			page 81


 3482 0000 38B5     		push	{r3, r4, r5, lr}
 3483              	.LCFI137:
 3484              		.cfi_def_cfa_offset 16
 3485              		.cfi_offset 3, -16
 3486              		.cfi_offset 4, -12
 3487              		.cfi_offset 5, -8
 3488              		.cfi_offset 14, -4
 3489              		.loc 1 709 0
 3490 0002 0D46     		mov	r5, r1
 3491              	.LBB132:
 3492              	.LBB133:
 3493 0004 1A21     		movs	r1, #26
 3494              	.LVL328:
 3495              	.LBE133:
 3496              	.LBE132:
 3497 0006 1446     		mov	r4, r2
 3498              	.LVL329:
 3499              	.LBB135:
 3500              	.LBB134:
 3501 0008 FFF7FEFF 		bl	AX_Read.part.3
 3502              	.LVL330:
 3503              	.LBE134:
 3504              	.LBE135:
 710:Src/ax_12a.c  ****   if(AX_Read(servo, AX_CURRENT_SPEED, speed) == 1){
 3505              		.loc 1 710 0
 3506 000c 0128     		cmp	r0, #1
 3507 000e 0AD0     		beq	.L359
 711:Src/ax_12a.c  ****     return 1;
 712:Src/ax_12a.c  ****   }
 713:Src/ax_12a.c  ****   *direction = (*speed > 1023)?AX_CLOCKWISE:AX_COUNTERCLOCKWISE;
 3508              		.loc 1 713 0
 3509 0010 2388     		ldrh	r3, [r4]
 3510 0012 B3F5806F 		cmp	r3, #1024
 3511 0016 2CBF     		ite	cs
 3512 0018 0022     		movcs	r2, #0
 3513 001a 0122     		movcc	r2, #1
 714:Src/ax_12a.c  ****   *speed &= 0x3FF;
 3514              		.loc 1 714 0
 3515 001c C3F30903 		ubfx	r3, r3, #0, #10
 713:Src/ax_12a.c  ****   *speed &= 0x3FF;
 3516              		.loc 1 713 0
 3517 0020 2A70     		strb	r2, [r5]
 715:Src/ax_12a.c  ****   return 0;
 3518              		.loc 1 715 0
 3519 0022 0020     		movs	r0, #0
 714:Src/ax_12a.c  ****   *speed &= 0x3FF;
 3520              		.loc 1 714 0
 3521 0024 2380     		strh	r3, [r4]	@ movhi
 3522              	.L359:
 716:Src/ax_12a.c  **** }
 3523              		.loc 1 716 0
 3524 0026 38BD     		pop	{r3, r4, r5, pc}
 3525              		.cfi_endproc
 3526              	.LFE42:
 3528              		.section	.text.AX_Get_Current_Load,"ax",%progbits
 3529              		.align	2
 3530              		.global	AX_Get_Current_Load
ARM GAS  /tmp/cclxg7K3.s 			page 82


 3531              		.thumb
 3532              		.thumb_func
 3534              	AX_Get_Current_Load:
 3535              	.LFB43:
 717:Src/ax_12a.c  **** 
 718:Src/ax_12a.c  **** uint8_t AX_Get_Current_Load(AX *servo, AX_Wheel_Direction *direction, uint16_t *load){
 3536              		.loc 1 718 0
 3537              		.cfi_startproc
 3538              		@ args = 0, pretend = 0, frame = 0
 3539              		@ frame_needed = 0, uses_anonymous_args = 0
 3540              	.LVL331:
 3541 0000 38B5     		push	{r3, r4, r5, lr}
 3542              	.LCFI138:
 3543              		.cfi_def_cfa_offset 16
 3544              		.cfi_offset 3, -16
 3545              		.cfi_offset 4, -12
 3546              		.cfi_offset 5, -8
 3547              		.cfi_offset 14, -4
 3548              		.loc 1 718 0
 3549 0002 0D46     		mov	r5, r1
 3550              	.LBB136:
 3551              	.LBB137:
 3552 0004 1B21     		movs	r1, #27
 3553              	.LVL332:
 3554              	.LBE137:
 3555              	.LBE136:
 3556 0006 1446     		mov	r4, r2
 3557              	.LVL333:
 3558              	.LBB139:
 3559              	.LBB138:
 3560 0008 FFF7FEFF 		bl	AX_Read.part.3
 3561              	.LVL334:
 3562              	.LBE138:
 3563              	.LBE139:
 719:Src/ax_12a.c  ****   if(AX_Read(servo, AX_CURRENT_LOAD, load) == 1){
 3564              		.loc 1 719 0
 3565 000c 0128     		cmp	r0, #1
 3566 000e 0AD0     		beq	.L365
 720:Src/ax_12a.c  ****     return 1;
 721:Src/ax_12a.c  ****   }
 722:Src/ax_12a.c  ****   *direction = (*load > 1023)?AX_CLOCKWISE:AX_COUNTERCLOCKWISE;
 3567              		.loc 1 722 0
 3568 0010 2388     		ldrh	r3, [r4]
 3569 0012 B3F5806F 		cmp	r3, #1024
 3570 0016 2CBF     		ite	cs
 3571 0018 0022     		movcs	r2, #0
 3572 001a 0122     		movcc	r2, #1
 723:Src/ax_12a.c  ****   *load &= 0x3FF;
 3573              		.loc 1 723 0
 3574 001c C3F30903 		ubfx	r3, r3, #0, #10
 722:Src/ax_12a.c  ****   *load &= 0x3FF;
 3575              		.loc 1 722 0
 3576 0020 2A70     		strb	r2, [r5]
 724:Src/ax_12a.c  ****   return 0;
 3577              		.loc 1 724 0
 3578 0022 0020     		movs	r0, #0
 723:Src/ax_12a.c  ****   *load &= 0x3FF;
ARM GAS  /tmp/cclxg7K3.s 			page 83


 3579              		.loc 1 723 0
 3580 0024 2380     		strh	r3, [r4]	@ movhi
 3581              	.L365:
 725:Src/ax_12a.c  **** }
 3582              		.loc 1 725 0
 3583 0026 38BD     		pop	{r3, r4, r5, pc}
 3584              		.cfi_endproc
 3585              	.LFE43:
 3587              		.section	.text.AX_Get_Current_Voltage,"ax",%progbits
 3588              		.align	2
 3589              		.global	AX_Get_Current_Voltage
 3590              		.thumb
 3591              		.thumb_func
 3593              	AX_Get_Current_Voltage:
 3594              	.LFB44:
 726:Src/ax_12a.c  **** 
 727:Src/ax_12a.c  **** uint8_t AX_Get_Current_Voltage(AX *servo, uint16_t *voltage){
 3595              		.loc 1 727 0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 0
 3598              		@ frame_needed = 0, uses_anonymous_args = 0
 3599              		@ link register save eliminated.
 3600              	.LVL335:
 3601              		.loc 1 727 0
 3602 0000 0A46     		mov	r2, r1
 3603              	.LVL336:
 3604              	.LBB140:
 3605              	.LBB141:
 3606 0002 1C21     		movs	r1, #28
 3607              	.LVL337:
 3608 0004 FFF7FEBF 		b	AX_Read.part.3
 3609              	.LVL338:
 3610              	.LBE141:
 3611              	.LBE140:
 3612              		.cfi_endproc
 3613              	.LFE44:
 3615              		.section	.text.AX_Get_Current_Temperature,"ax",%progbits
 3616              		.align	2
 3617              		.global	AX_Get_Current_Temperature
 3618              		.thumb
 3619              		.thumb_func
 3621              	AX_Get_Current_Temperature:
 3622              	.LFB45:
 728:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_VOLTAGE, voltage);
 729:Src/ax_12a.c  **** }
 730:Src/ax_12a.c  **** 
 731:Src/ax_12a.c  **** uint8_t AX_Get_Current_Temperature(AX *servo, uint16_t *temperature){
 3623              		.loc 1 731 0
 3624              		.cfi_startproc
 3625              		@ args = 0, pretend = 0, frame = 0
 3626              		@ frame_needed = 0, uses_anonymous_args = 0
 3627              		@ link register save eliminated.
 3628              	.LVL339:
 3629              		.loc 1 731 0
 3630 0000 0A46     		mov	r2, r1
 3631              	.LVL340:
 3632              	.LBB142:
ARM GAS  /tmp/cclxg7K3.s 			page 84


 3633              	.LBB143:
 3634 0002 1D21     		movs	r1, #29
 3635              	.LVL341:
 3636 0004 FFF7FEBF 		b	AX_Read.part.3
 3637              	.LVL342:
 3638              	.LBE143:
 3639              	.LBE142:
 3640              		.cfi_endproc
 3641              	.LFE45:
 3643              		.section	.text.AX_Is_Working,"ax",%progbits
 3644              		.align	2
 3645              		.global	AX_Is_Working
 3646              		.thumb
 3647              		.thumb_func
 3649              	AX_Is_Working:
 3650              	.LFB46:
 732:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_TEMPERATURE, temperature);
 733:Src/ax_12a.c  **** }
 734:Src/ax_12a.c  **** 
 735:Src/ax_12a.c  **** uint8_t AX_Is_Working(AX *servo, uint16_t *working){
 3651              		.loc 1 735 0
 3652              		.cfi_startproc
 3653              		@ args = 0, pretend = 0, frame = 0
 3654              		@ frame_needed = 0, uses_anonymous_args = 0
 3655              		@ link register save eliminated.
 3656              	.LVL343:
 3657              		.loc 1 735 0
 3658 0000 0A46     		mov	r2, r1
 3659              	.LVL344:
 3660              	.LBB144:
 3661              	.LBB145:
 3662 0002 0E21     		movs	r1, #14
 3663              	.LVL345:
 3664 0004 FFF7FEBF 		b	AX_Read.part.3
 3665              	.LVL346:
 3666              	.LBE145:
 3667              	.LBE144:
 3668              		.cfi_endproc
 3669              	.LFE46:
 3671              		.section	.text.AX_Is_Moving,"ax",%progbits
 3672              		.align	2
 3673              		.global	AX_Is_Moving
 3674              		.thumb
 3675              		.thumb_func
 3677              	AX_Is_Moving:
 3678              	.LFB47:
 736:Src/ax_12a.c  ****   return AX_Read(servo, AX_TORQUE_ENABLE, working);
 737:Src/ax_12a.c  **** }
 738:Src/ax_12a.c  **** 
 739:Src/ax_12a.c  **** uint8_t AX_Is_Moving(AX *servo, uint16_t *moving){
 3679              		.loc 1 739 0
 3680              		.cfi_startproc
 3681              		@ args = 0, pretend = 0, frame = 0
 3682              		@ frame_needed = 0, uses_anonymous_args = 0
 3683              		@ link register save eliminated.
 3684              	.LVL347:
 3685              		.loc 1 739 0
ARM GAS  /tmp/cclxg7K3.s 			page 85


 3686 0000 0A46     		mov	r2, r1
 3687              	.LVL348:
 3688              	.LBB146:
 3689              	.LBB147:
 3690 0002 1F21     		movs	r1, #31
 3691              	.LVL349:
 3692 0004 FFF7FEBF 		b	AX_Read.part.3
 3693              	.LVL350:
 3694              	.LBE147:
 3695              	.LBE146:
 3696              		.cfi_endproc
 3697              	.LFE47:
 3699              		.section	.bss.err,"aw",%nobits
 3700              		.align	1
 3701              		.set	.LANCHOR0,. + 0
 3704              	err:
 3705 0000 0000     		.space	2
 3706              		.section	.bss.params.5453,"aw",%nobits
 3707              		.align	2
 3708              		.set	.LANCHOR3,. + 0
 3711              	params.5453:
 3712 0000 00000000 		.space	32
 3712      00000000 
 3712      00000000 
 3712      00000000 
 3712      00000000 
 3713              		.section	.rodata.field_addr,"a",%progbits
 3714              		.align	2
 3715              		.set	.LANCHOR1,. + 0
 3718              	field_addr:
 3719 0000 03       		.byte	3
 3720 0001 04       		.byte	4
 3721 0002 05       		.byte	5
 3722 0003 06       		.byte	6
 3723 0004 08       		.byte	8
 3724 0005 0B       		.byte	11
 3725 0006 0C       		.byte	12
 3726 0007 0D       		.byte	13
 3727 0008 0E       		.byte	14
 3728 0009 10       		.byte	16
 3729 000a 11       		.byte	17
 3730 000b 12       		.byte	18
 3731 000c 00       		.byte	0
 3732 000d 02       		.byte	2
 3733 000e 18       		.byte	24
 3734 000f 19       		.byte	25
 3735 0010 1A       		.byte	26
 3736 0011 1B       		.byte	27
 3737 0012 1C       		.byte	28
 3738 0013 1D       		.byte	29
 3739 0014 1E       		.byte	30
 3740 0015 20       		.byte	32
 3741 0016 22       		.byte	34
 3742 0017 2F       		.byte	47
 3743 0018 30       		.byte	48
 3744 0019 24       		.byte	36
 3745 001a 26       		.byte	38
ARM GAS  /tmp/cclxg7K3.s 			page 86


 3746 001b 28       		.byte	40
 3747 001c 2A       		.byte	42
 3748 001d 2B       		.byte	43
 3749 001e 2C       		.byte	44
 3750 001f 2E       		.byte	46
 3751              		.section	.bss.packet.5452,"aw",%nobits
 3752              		.align	2
 3753              		.set	.LANCHOR4,. + 0
 3756              	packet.5452:
 3757 0000 00000000 		.space	8
 3757      00000000 
 3758              		.section	.rodata.field_length,"a",%progbits
 3759              		.align	2
 3760              		.set	.LANCHOR2,. + 0
 3763              	field_length:
 3764 0000 01       		.byte	1
 3765 0001 01       		.byte	1
 3766 0002 01       		.byte	1
 3767 0003 02       		.byte	2
 3768 0004 02       		.byte	2
 3769 0005 01       		.byte	1
 3770 0006 01       		.byte	1
 3771 0007 01       		.byte	1
 3772 0008 02       		.byte	2
 3773 0009 01       		.byte	1
 3774 000a 01       		.byte	1
 3775 000b 01       		.byte	1
 3776 000c 02       		.byte	2
 3777 000d 01       		.byte	1
 3778 000e 01       		.byte	1
 3779 000f 01       		.byte	1
 3780 0010 01       		.byte	1
 3781 0011 01       		.byte	1
 3782 0012 01       		.byte	1
 3783 0013 01       		.byte	1
 3784 0014 02       		.byte	2
 3785 0015 02       		.byte	2
 3786 0016 02       		.byte	2
 3787 0017 01       		.byte	1
 3788 0018 02       		.byte	2
 3789 0019 02       		.byte	2
 3790 001a 02       		.byte	2
 3791 001b 02       		.byte	2
 3792 001c 01       		.byte	1
 3793 001d 01       		.byte	1
 3794 001e 01       		.byte	1
 3795 001f 01       		.byte	1
 3796              		.text
 3797              	.Letext0:
 3798              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3799              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3800              		.file 4 "Inc/ax_12a.h"
ARM GAS  /tmp/cclxg7K3.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ax_12a.c
     /tmp/cclxg7K3.s:21     .text.AX_FSM_HEADER_0:0000000000000000 $t
     /tmp/cclxg7K3.s:26     .text.AX_FSM_HEADER_0:0000000000000000 AX_FSM_HEADER_0
     /tmp/cclxg7K3.s:53     .text.AX_FSM_HEADER_0:0000000000000014 $d
     /tmp/cclxg7K3.s:63     .text.AX_FSM_HEADER_1:0000000000000000 AX_FSM_HEADER_1
     /tmp/cclxg7K3.s:58     .text.AX_FSM_HEADER_1:0000000000000000 $t
     /tmp/cclxg7K3.s:95     .text.AX_FSM_HEADER_1:000000000000001c $d
     /tmp/cclxg7K3.s:106    .text.AX_FSM_ID:0000000000000000 AX_FSM_ID
     /tmp/cclxg7K3.s:101    .text.AX_FSM_ID:0000000000000000 $t
     /tmp/cclxg7K3.s:138    .text.AX_FSM_ID:000000000000001c $d
     /tmp/cclxg7K3.s:149    .text.AX_FSM_LENGTH:0000000000000000 AX_FSM_LENGTH
     /tmp/cclxg7K3.s:144    .text.AX_FSM_LENGTH:0000000000000000 $t
     /tmp/cclxg7K3.s:186    .text.AX_FSM_LENGTH:0000000000000020 $d
     /tmp/cclxg7K3.s:197    .text.AX_FSM_RECEIVING:0000000000000000 AX_FSM_RECEIVING
     /tmp/cclxg7K3.s:192    .text.AX_FSM_RECEIVING:0000000000000000 $t
     /tmp/cclxg7K3.s:230    .text.AX_Extract_Status_Packet:0000000000000000 $t
     /tmp/cclxg7K3.s:235    .text.AX_Extract_Status_Packet:0000000000000000 AX_Extract_Status_Packet
     /tmp/cclxg7K3.s:374    .text.AX_Extract_Status_Packet:000000000000006c $d
     /tmp/cclxg7K3.s:381    .text.AX_Receive.part.0:0000000000000000 $t
     /tmp/cclxg7K3.s:385    .text.AX_Receive.part.0:0000000000000000 AX_Receive.part.0
     /tmp/cclxg7K3.s:512    .text.AX_Receive.part.0:0000000000000084 $d
     /tmp/cclxg7K3.s:518    .text.AX_Receive:0000000000000000 $t
     /tmp/cclxg7K3.s:523    .text.AX_Receive:0000000000000000 AX_Receive
     /tmp/cclxg7K3.s:548    .text.AX_Receive:0000000000000010 $d
     /tmp/cclxg7K3.s:553    .text.AX_Build_Frame:0000000000000000 $t
     /tmp/cclxg7K3.s:558    .text.AX_Build_Frame:0000000000000000 AX_Build_Frame
     /tmp/cclxg7K3.s:729    .text.AX_Build_Frame:0000000000000094 $d
     /tmp/cclxg7K3.s:738    .text.AX_Send:0000000000000000 $t
     /tmp/cclxg7K3.s:743    .text.AX_Send:0000000000000000 AX_Send
     /tmp/cclxg7K3.s:813    .text.AX_Send:000000000000003c $d
     /tmp/cclxg7K3.s:818    .text.AX_Read.part.3:0000000000000000 $t
     /tmp/cclxg7K3.s:822    .text.AX_Read.part.3:0000000000000000 AX_Read.part.3
     /tmp/cclxg7K3.s:976    .text.AX_Read.part.3:0000000000000094 $d
     /tmp/cclxg7K3.s:983    .text.AX_Compute_Checksum:0000000000000000 $t
     /tmp/cclxg7K3.s:988    .text.AX_Compute_Checksum:0000000000000000 AX_Compute_Checksum
     /tmp/cclxg7K3.s:1032   .text.AX_Get_Error:0000000000000000 $t
     /tmp/cclxg7K3.s:1037   .text.AX_Get_Error:0000000000000000 AX_Get_Error
     /tmp/cclxg7K3.s:1052   .text.AX_Get_Error:0000000000000008 $d
     /tmp/cclxg7K3.s:1057   .text.AX_Check_Status:0000000000000000 $t
     /tmp/cclxg7K3.s:1062   .text.AX_Check_Status:0000000000000000 AX_Check_Status
     /tmp/cclxg7K3.s:1088   .text.AX_Check_Status:0000000000000018 $d
     /tmp/cclxg7K3.s:1093   .text.AX_Ping:0000000000000000 $t
     /tmp/cclxg7K3.s:1098   .text.AX_Ping:0000000000000000 AX_Ping
     /tmp/cclxg7K3.s:1220   .text.AX_Ping:0000000000000064 $d
     /tmp/cclxg7K3.s:1225   .text.AX_Discover:0000000000000000 $t
     /tmp/cclxg7K3.s:1230   .text.AX_Discover:0000000000000000 AX_Discover
     /tmp/cclxg7K3.s:1328   .text.AX_Read:0000000000000000 $t
     /tmp/cclxg7K3.s:1333   .text.AX_Read:0000000000000000 AX_Read
     /tmp/cclxg7K3.s:1360   .text.AX_Read:0000000000000014 $d
     /tmp/cclxg7K3.s:1365   .text.AX_Action:0000000000000000 $t
     /tmp/cclxg7K3.s:1370   .text.AX_Action:0000000000000000 AX_Action
     /tmp/cclxg7K3.s:1454   .text.AX_Action:0000000000000050 $d
     /tmp/cclxg7K3.s:1459   .text.AX_Factory_Reset:0000000000000000 $t
     /tmp/cclxg7K3.s:1464   .text.AX_Factory_Reset:0000000000000000 AX_Factory_Reset
     /tmp/cclxg7K3.s:1523   .text.AX_Write:0000000000000000 $t
     /tmp/cclxg7K3.s:1528   .text.AX_Write:0000000000000000 AX_Write
ARM GAS  /tmp/cclxg7K3.s 			page 88


     /tmp/cclxg7K3.s:1652   .text.AX_Write:000000000000007c $d
     /tmp/cclxg7K3.s:1660   .text.AX_Say_Hello:0000000000000000 $t
     /tmp/cclxg7K3.s:1665   .text.AX_Say_Hello:0000000000000000 AX_Say_Hello
     /tmp/cclxg7K3.s:1776   .text.AX_Configure_ID:0000000000000000 $t
     /tmp/cclxg7K3.s:1781   .text.AX_Configure_ID:0000000000000000 AX_Configure_ID
     /tmp/cclxg7K3.s:1854   .text.AX_Configure_ID:0000000000000038 $d
     /tmp/cclxg7K3.s:1859   .text.AX_Configure_Baud_Rate:0000000000000000 $t
     /tmp/cclxg7K3.s:1864   .text.AX_Configure_Baud_Rate:0000000000000000 AX_Configure_Baud_Rate
     /tmp/cclxg7K3.s:1951   .text.AX_Configure_Baud_Rate:0000000000000044 $d
     /tmp/cclxg7K3.s:1956   .text.AX_Configure_Return_Delay_Time:0000000000000000 $t
     /tmp/cclxg7K3.s:1961   .text.AX_Configure_Return_Delay_Time:0000000000000000 AX_Configure_Return_Delay_Time
     /tmp/cclxg7K3.s:2033   .text.AX_Configure_Return_Delay_Time:0000000000000038 $d
     /tmp/cclxg7K3.s:2038   .text.AX_Configure_Angle_Limit:0000000000000000 $t
     /tmp/cclxg7K3.s:2043   .text.AX_Configure_Angle_Limit:0000000000000000 AX_Configure_Angle_Limit
     /tmp/cclxg7K3.s:2136   .text.AX_Configure_Angle_Limit:0000000000000058 $d
     /tmp/cclxg7K3.s:2141   .text.AX_Configure_Limit_Temperature:0000000000000000 $t
     /tmp/cclxg7K3.s:2146   .text.AX_Configure_Limit_Temperature:0000000000000000 AX_Configure_Limit_Temperature
     /tmp/cclxg7K3.s:2219   .text.AX_Configure_Limit_Temperature:0000000000000038 $d
     /tmp/cclxg7K3.s:2224   .text.AX_Configure_Lower_Limit_Voltage:0000000000000000 $t
     /tmp/cclxg7K3.s:2229   .text.AX_Configure_Lower_Limit_Voltage:0000000000000000 AX_Configure_Lower_Limit_Voltage
     /tmp/cclxg7K3.s:2306   .text.AX_Configure_Lower_Limit_Voltage:0000000000000040 $d
     /tmp/cclxg7K3.s:2311   .text.AX_Configure_Upper_Limit_Voltage:0000000000000000 $t
     /tmp/cclxg7K3.s:2316   .text.AX_Configure_Upper_Limit_Voltage:0000000000000000 AX_Configure_Upper_Limit_Voltage
     /tmp/cclxg7K3.s:2393   .text.AX_Configure_Upper_Limit_Voltage:0000000000000040 $d
     /tmp/cclxg7K3.s:2398   .text.AX_Configure_Max_Torque:0000000000000000 $t
     /tmp/cclxg7K3.s:2403   .text.AX_Configure_Max_Torque:0000000000000000 AX_Configure_Max_Torque
     /tmp/cclxg7K3.s:2485   .text.AX_Configure_Max_Torque:0000000000000044 $d
     /tmp/cclxg7K3.s:2490   .text.AX_Configure_Return_Level:0000000000000000 $t
     /tmp/cclxg7K3.s:2495   .text.AX_Configure_Return_Level:0000000000000000 AX_Configure_Return_Level
     /tmp/cclxg7K3.s:2561   .text.AX_Configure_Return_Level:0000000000000034 $d
     /tmp/cclxg7K3.s:2566   .text.AX_Configure_Alarm_LED:0000000000000000 $t
     /tmp/cclxg7K3.s:2571   .text.AX_Configure_Alarm_LED:0000000000000000 AX_Configure_Alarm_LED
     /tmp/cclxg7K3.s:2637   .text.AX_Configure_Alarm_LED:0000000000000034 $d
     /tmp/cclxg7K3.s:2642   .text.AX_Configure_Alarm_Shutdown:0000000000000000 $t
     /tmp/cclxg7K3.s:2647   .text.AX_Configure_Alarm_Shutdown:0000000000000000 AX_Configure_Alarm_Shutdown
     /tmp/cclxg7K3.s:2713   .text.AX_Configure_Alarm_Shutdown:0000000000000034 $d
     /tmp/cclxg7K3.s:2718   .text.AX_Power_On:0000000000000000 $t
     /tmp/cclxg7K3.s:2723   .text.AX_Power_On:0000000000000000 AX_Power_On
     /tmp/cclxg7K3.s:2757   .text.AX_Power_Off:0000000000000000 $t
     /tmp/cclxg7K3.s:2762   .text.AX_Power_Off:0000000000000000 AX_Power_Off
     /tmp/cclxg7K3.s:2797   .text.AX_Set_LED:0000000000000000 $t
     /tmp/cclxg7K3.s:2802   .text.AX_Set_LED:0000000000000000 AX_Set_LED
     /tmp/cclxg7K3.s:2860   .text.AX_Set_LED:000000000000002c $d
     /tmp/cclxg7K3.s:2865   .text.AX_Set_Compliance:0000000000000000 $t
     /tmp/cclxg7K3.s:2870   .text.AX_Set_Compliance:0000000000000000 AX_Set_Compliance
     /tmp/cclxg7K3.s:2949   .text.AX_Set_Compliance:0000000000000048 $d
     /tmp/cclxg7K3.s:2954   .text.AX_Set_Goal_Position:0000000000000000 $t
     /tmp/cclxg7K3.s:2959   .text.AX_Set_Goal_Position:0000000000000000 AX_Set_Goal_Position
     /tmp/cclxg7K3.s:3027   .text.AX_Set_Goal_Position:0000000000000034 $d
     /tmp/cclxg7K3.s:3032   .text.AX_Set_Goal_Speed_Join:0000000000000000 $t
     /tmp/cclxg7K3.s:3037   .text.AX_Set_Goal_Speed_Join:0000000000000000 AX_Set_Goal_Speed_Join
     /tmp/cclxg7K3.s:3105   .text.AX_Set_Goal_Speed_Join:0000000000000034 $d
     /tmp/cclxg7K3.s:3110   .text.AX_Set_Goal_Speed_Wheel:0000000000000000 $t
     /tmp/cclxg7K3.s:3115   .text.AX_Set_Goal_Speed_Wheel:0000000000000000 AX_Set_Goal_Speed_Wheel
     /tmp/cclxg7K3.s:3201   .text.AX_Set_Goal_Speed_Wheel:0000000000000040 $d
     /tmp/cclxg7K3.s:3206   .text.AX_Set_Torque_Limit:0000000000000000 $t
     /tmp/cclxg7K3.s:3211   .text.AX_Set_Torque_Limit:0000000000000000 AX_Set_Torque_Limit
ARM GAS  /tmp/cclxg7K3.s 			page 89


     /tmp/cclxg7K3.s:3279   .text.AX_Set_Torque_Limit:0000000000000034 $d
     /tmp/cclxg7K3.s:3284   .text.AX_Set_Punch:0000000000000000 $t
     /tmp/cclxg7K3.s:3289   .text.AX_Set_Punch:0000000000000000 AX_Set_Punch
     /tmp/cclxg7K3.s:3358   .text.AX_Set_Punch:0000000000000038 $d
     /tmp/cclxg7K3.s:3363   .text.AX_Lock_ROM:0000000000000000 $t
     /tmp/cclxg7K3.s:3368   .text.AX_Lock_ROM:0000000000000000 AX_Lock_ROM
     /tmp/cclxg7K3.s:3402   .text.AX_Unlock_ROM:0000000000000000 $t
     /tmp/cclxg7K3.s:3407   .text.AX_Unlock_ROM:0000000000000000 AX_Unlock_ROM
     /tmp/cclxg7K3.s:3442   .text.AX_Get_Current_Position:0000000000000000 $t
     /tmp/cclxg7K3.s:3447   .text.AX_Get_Current_Position:0000000000000000 AX_Get_Current_Position
     /tmp/cclxg7K3.s:3470   .text.AX_Get_Current_Speed:0000000000000000 $t
     /tmp/cclxg7K3.s:3475   .text.AX_Get_Current_Speed:0000000000000000 AX_Get_Current_Speed
     /tmp/cclxg7K3.s:3529   .text.AX_Get_Current_Load:0000000000000000 $t
     /tmp/cclxg7K3.s:3534   .text.AX_Get_Current_Load:0000000000000000 AX_Get_Current_Load
     /tmp/cclxg7K3.s:3588   .text.AX_Get_Current_Voltage:0000000000000000 $t
     /tmp/cclxg7K3.s:3593   .text.AX_Get_Current_Voltage:0000000000000000 AX_Get_Current_Voltage
     /tmp/cclxg7K3.s:3616   .text.AX_Get_Current_Temperature:0000000000000000 $t
     /tmp/cclxg7K3.s:3621   .text.AX_Get_Current_Temperature:0000000000000000 AX_Get_Current_Temperature
     /tmp/cclxg7K3.s:3644   .text.AX_Is_Working:0000000000000000 $t
     /tmp/cclxg7K3.s:3649   .text.AX_Is_Working:0000000000000000 AX_Is_Working
     /tmp/cclxg7K3.s:3672   .text.AX_Is_Moving:0000000000000000 $t
     /tmp/cclxg7K3.s:3677   .text.AX_Is_Moving:0000000000000000 AX_Is_Moving
     /tmp/cclxg7K3.s:3700   .bss.err:0000000000000000 $d
     /tmp/cclxg7K3.s:3704   .bss.err:0000000000000000 err
     /tmp/cclxg7K3.s:3707   .bss.params.5453:0000000000000000 $d
     /tmp/cclxg7K3.s:3711   .bss.params.5453:0000000000000000 params.5453
     /tmp/cclxg7K3.s:3714   .rodata.field_addr:0000000000000000 $d
     /tmp/cclxg7K3.s:3718   .rodata.field_addr:0000000000000000 field_addr
     /tmp/cclxg7K3.s:3752   .bss.packet.5452:0000000000000000 $d
     /tmp/cclxg7K3.s:3756   .bss.packet.5452:0000000000000000 packet.5452
     /tmp/cclxg7K3.s:3759   .rodata.field_length:0000000000000000 $d
     /tmp/cclxg7K3.s:3763   .rodata.field_length:0000000000000000 field_length
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
