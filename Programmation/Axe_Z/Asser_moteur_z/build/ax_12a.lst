ARM GAS  /tmp/ccpqqMQi.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ax_12a.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.header,"a",%progbits
  18              		.align	2
  21              	header:
  22 0000 FF       		.byte	-1
  23 0001 FF       		.byte	-1
  24              		.section	.rodata.field_addr,"a",%progbits
  25              		.align	2
  28              	field_addr:
  29 0000 03       		.byte	3
  30 0001 04       		.byte	4
  31 0002 05       		.byte	5
  32 0003 06       		.byte	6
  33 0004 08       		.byte	8
  34 0005 0B       		.byte	11
  35 0006 0C       		.byte	12
  36 0007 0D       		.byte	13
  37 0008 0E       		.byte	14
  38 0009 10       		.byte	16
  39 000a 11       		.byte	17
  40 000b 12       		.byte	18
  41 000c 00       		.byte	0
  42 000d 02       		.byte	2
  43 000e 18       		.byte	24
  44 000f 19       		.byte	25
  45 0010 1A       		.byte	26
  46 0011 1B       		.byte	27
  47 0012 1C       		.byte	28
  48 0013 1D       		.byte	29
  49 0014 1E       		.byte	30
  50 0015 20       		.byte	32
  51 0016 22       		.byte	34
  52 0017 2F       		.byte	47
  53 0018 30       		.byte	48
  54 0019 24       		.byte	36
  55 001a 26       		.byte	38
  56 001b 28       		.byte	40
  57 001c 2A       		.byte	42
  58 001d 2B       		.byte	43
  59 001e 2C       		.byte	44
  60 001f 2E       		.byte	46
  61              		.section	.rodata.field_length,"a",%progbits
ARM GAS  /tmp/ccpqqMQi.s 			page 2


  62              		.align	2
  65              	field_length:
  66 0000 01       		.byte	1
  67 0001 01       		.byte	1
  68 0002 01       		.byte	1
  69 0003 02       		.byte	2
  70 0004 02       		.byte	2
  71 0005 01       		.byte	1
  72 0006 01       		.byte	1
  73 0007 01       		.byte	1
  74 0008 02       		.byte	2
  75 0009 01       		.byte	1
  76 000a 01       		.byte	1
  77 000b 01       		.byte	1
  78 000c 02       		.byte	2
  79 000d 01       		.byte	1
  80 000e 01       		.byte	1
  81 000f 01       		.byte	1
  82 0010 01       		.byte	1
  83 0011 01       		.byte	1
  84 0012 01       		.byte	1
  85 0013 01       		.byte	1
  86 0014 02       		.byte	2
  87 0015 02       		.byte	2
  88 0016 02       		.byte	2
  89 0017 01       		.byte	1
  90 0018 02       		.byte	2
  91 0019 02       		.byte	2
  92 001a 02       		.byte	2
  93 001b 02       		.byte	2
  94 001c 01       		.byte	1
  95 001d 01       		.byte	1
  96 001e 01       		.byte	1
  97 001f 01       		.byte	1
  98              		.section	.bss.err,"aw",%nobits
  99              		.align	1
 102              	err:
 103 0000 0000     		.space	2
 104              		.section	.text.AX_FSM_HEADER_0,"ax",%progbits
 105              		.align	1
 106              		.global	AX_FSM_HEADER_0
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 110              		.fpu fpv4-sp-d16
 112              	AX_FSM_HEADER_0:
 113              	.LFB3:
 114              		.file 1 "Src/ax_12a.c"
   1:Src/ax_12a.c  **** #include "ax_12a.h"
   2:Src/ax_12a.c  **** #include <stdio.h>
   3:Src/ax_12a.c  **** 
   4:Src/ax_12a.c  **** //========================================
   5:Src/ax_12a.c  **** //    CONSTANTES ET VARIABLES GLOBALES
   6:Src/ax_12a.c  **** //========================================
   7:Src/ax_12a.c  **** static const uint8_t header[2] = {0xFF, 0xFF};
   8:Src/ax_12a.c  **** static const uint8_t field_addr[] = {
   9:Src/ax_12a.c  ****   //EEPROM - Configuration  
ARM GAS  /tmp/ccpqqMQi.s 			page 3


  10:Src/ax_12a.c  ****   [AX_ID] = 0x03,
  11:Src/ax_12a.c  ****   [AX_BAUD_RATE] = 0x04,
  12:Src/ax_12a.c  ****   [AX_RETURN_DELAY_TIME] = 0x05,
  13:Src/ax_12a.c  ****   [AX_CW_ANGLE_LIMIT] = 0x06,
  14:Src/ax_12a.c  ****   [AX_CCW_ANGLE_LIMIT] = 0x08,
  15:Src/ax_12a.c  ****   [AX_LIMIT_TEMPERATURE] = 0x0B,
  16:Src/ax_12a.c  ****   [AX_LOWER_LIMIT_VOLTAGE] = 0x0C,
  17:Src/ax_12a.c  ****   [AX_UPPER_LIMIT_VOLTAGE] = 0x0D,
  18:Src/ax_12a.c  ****   [AX_MAX_TORQUE] = 0x0E,
  19:Src/ax_12a.c  ****   [AX_RETURN_LEVEL] = 0x10,
  20:Src/ax_12a.c  ****   [AX_ALARM_LED] = 0x11,
  21:Src/ax_12a.c  ****   [AX_ALARM_SHUTDOWN] = 0x12,
  22:Src/ax_12a.c  ****   //EEPROM - Info
  23:Src/ax_12a.c  ****   [AX_MODEL_NUMBER] = 0x00,
  24:Src/ax_12a.c  ****   [AX_FIRMWARE_VERSION] = 0x02,
  25:Src/ax_12a.c  ****   //RAM - Contrôle
  26:Src/ax_12a.c  ****   [AX_TORQUE_ENABLE] = 0x18,
  27:Src/ax_12a.c  ****   [AX_LED] = 0x19,
  28:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_MARGIN] = 0x1A,
  29:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_MARGIN] = 0x1B,
  30:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_SLOPE] = 0x1C,
  31:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_SLOPE] = 0x1D,
  32:Src/ax_12a.c  ****   [AX_GOAL_POSITION] = 0x1E,
  33:Src/ax_12a.c  ****   [AX_MOVING_SPEED] = 0x20,
  34:Src/ax_12a.c  ****   [AX_TORQUE_LIMIT] = 0x22,
  35:Src/ax_12a.c  ****   [AX_EEPROM_LOCK] = 0x2F,
  36:Src/ax_12a.c  ****   [AX_PUNCH] = 0x30,
  37:Src/ax_12a.c  ****   //RAM - Info
  38:Src/ax_12a.c  ****   [AX_CURRENT_POSITION] = 0x24,
  39:Src/ax_12a.c  ****   [AX_CURRENT_SPEED] = 0x26,
  40:Src/ax_12a.c  ****   [AX_CURRENT_LOAD] = 0x28,
  41:Src/ax_12a.c  ****   [AX_CURRENT_VOLTAGE] = 0x2A,
  42:Src/ax_12a.c  ****   [AX_CURRENT_TEMPERATURE] = 0x2B,
  43:Src/ax_12a.c  ****   [AX_REGISTERED_INSTRUCTION] = 0x2C,
  44:Src/ax_12a.c  ****   [AX_MOVING] = 0x2E,
  45:Src/ax_12a.c  **** };
  46:Src/ax_12a.c  **** static const uint8_t field_length[] = {
  47:Src/ax_12a.c  ****   //EEPROM - Configuration  
  48:Src/ax_12a.c  ****   [AX_ID] = 1,
  49:Src/ax_12a.c  ****   [AX_BAUD_RATE] = 1,
  50:Src/ax_12a.c  ****   [AX_RETURN_DELAY_TIME] = 1,
  51:Src/ax_12a.c  ****   [AX_CW_ANGLE_LIMIT] = 2,
  52:Src/ax_12a.c  ****   [AX_CCW_ANGLE_LIMIT] = 2,
  53:Src/ax_12a.c  ****   [AX_LIMIT_TEMPERATURE] = 1,
  54:Src/ax_12a.c  ****   [AX_LOWER_LIMIT_VOLTAGE] = 1,
  55:Src/ax_12a.c  ****   [AX_UPPER_LIMIT_VOLTAGE] = 1,
  56:Src/ax_12a.c  ****   [AX_MAX_TORQUE] = 2,
  57:Src/ax_12a.c  ****   [AX_RETURN_LEVEL] = 1,
  58:Src/ax_12a.c  ****   [AX_ALARM_LED] = 1,
  59:Src/ax_12a.c  ****   [AX_ALARM_SHUTDOWN] = 1,
  60:Src/ax_12a.c  ****   //EEPROM - Info
  61:Src/ax_12a.c  ****   [AX_MODEL_NUMBER] = 2,
  62:Src/ax_12a.c  ****   [AX_FIRMWARE_VERSION] = 1,
  63:Src/ax_12a.c  ****   //RAM - Contrôle
  64:Src/ax_12a.c  ****   [AX_TORQUE_ENABLE] = 1,
  65:Src/ax_12a.c  ****   [AX_LED] = 1,
  66:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_MARGIN] = 1,
ARM GAS  /tmp/ccpqqMQi.s 			page 4


  67:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_MARGIN] = 1,
  68:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_SLOPE] = 1,
  69:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_SLOPE] = 1,
  70:Src/ax_12a.c  ****   [AX_GOAL_POSITION] = 2,
  71:Src/ax_12a.c  ****   [AX_MOVING_SPEED] = 2,
  72:Src/ax_12a.c  ****   [AX_TORQUE_LIMIT] = 2,
  73:Src/ax_12a.c  ****   [AX_EEPROM_LOCK] = 1,
  74:Src/ax_12a.c  ****   [AX_PUNCH] = 2,
  75:Src/ax_12a.c  ****   //RAM - Info
  76:Src/ax_12a.c  ****   [AX_CURRENT_POSITION] = 2,
  77:Src/ax_12a.c  ****   [AX_CURRENT_SPEED] = 2,
  78:Src/ax_12a.c  ****   [AX_CURRENT_LOAD] = 2,
  79:Src/ax_12a.c  ****   [AX_CURRENT_VOLTAGE] = 1,
  80:Src/ax_12a.c  ****   [AX_CURRENT_TEMPERATURE] = 1,
  81:Src/ax_12a.c  ****   [AX_REGISTERED_INSTRUCTION] = 1,
  82:Src/ax_12a.c  ****   [AX_MOVING] = 1,
  83:Src/ax_12a.c  **** };
  84:Src/ax_12a.c  **** static uint16_t err;
  85:Src/ax_12a.c  **** 
  86:Src/ax_12a.c  **** //========================================
  87:Src/ax_12a.c  **** //        FONCTIONS DE RECEPTION
  88:Src/ax_12a.c  **** //========================================
  89:Src/ax_12a.c  **** #define FSM_BYTE *(fsm->p_buffer)
  90:Src/ax_12a.c  **** #define FSM_NEXT fsm->p_buffer++
  91:Src/ax_12a.c  **** #define FSM_RESET fsm->update_state = AX_FSM_HEADER_0; fsm->p_buffer = fsm->buffer
  92:Src/ax_12a.c  **** #define FSM_UPDATE(state_function) fsm->update_state = state_function
  93:Src/ax_12a.c  **** 
  94:Src/ax_12a.c  **** void AX_FSM_HEADER_0(AX_Receiver_FSM *fsm){
 115              		.loc 1 94 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 80B4     		push	{r7}
 121              	.LCFI0:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0002 83B0     		sub	sp, sp, #12
 125              	.LCFI1:
 126              		.cfi_def_cfa_offset 16
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI2:
 129              		.cfi_def_cfa_register 7
 130 0006 7860     		str	r0, [r7, #4]
  95:Src/ax_12a.c  ****   if(FSM_BYTE == header[0]){
 131              		.loc 1 95 0
 132 0008 7B68     		ldr	r3, [r7, #4]
 133 000a DB68     		ldr	r3, [r3, #12]
 134 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 000e FF22     		movs	r2, #255
 136 0010 9342     		cmp	r3, r2
 137 0012 07D1     		bne	.L3
  96:Src/ax_12a.c  ****     FSM_NEXT;
 138              		.loc 1 96 0
 139 0014 7B68     		ldr	r3, [r7, #4]
 140 0016 DB68     		ldr	r3, [r3, #12]
 141 0018 5A1C     		adds	r2, r3, #1
ARM GAS  /tmp/ccpqqMQi.s 			page 5


 142 001a 7B68     		ldr	r3, [r7, #4]
 143 001c DA60     		str	r2, [r3, #12]
  97:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_HEADER_1);
 144              		.loc 1 97 0
 145 001e 7B68     		ldr	r3, [r7, #4]
 146 0020 034A     		ldr	r2, .L4
 147 0022 1A60     		str	r2, [r3]
 148              	.L3:
  98:Src/ax_12a.c  ****   }
  99:Src/ax_12a.c  **** }
 149              		.loc 1 99 0
 150 0024 00BF     		nop
 151 0026 0C37     		adds	r7, r7, #12
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 4
 154 0028 BD46     		mov	sp, r7
 155              	.LCFI4:
 156              		.cfi_def_cfa_register 13
 157              		@ sp needed
 158 002a 5DF8047B 		ldr	r7, [sp], #4
 159              	.LCFI5:
 160              		.cfi_restore 7
 161              		.cfi_def_cfa_offset 0
 162 002e 7047     		bx	lr
 163              	.L5:
 164              		.align	2
 165              	.L4:
 166 0030 00000000 		.word	AX_FSM_HEADER_1
 167              		.cfi_endproc
 168              	.LFE3:
 170              		.section	.text.AX_FSM_HEADER_1,"ax",%progbits
 171              		.align	1
 172              		.global	AX_FSM_HEADER_1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	AX_FSM_HEADER_1:
 179              	.LFB4:
 100:Src/ax_12a.c  **** 
 101:Src/ax_12a.c  **** void AX_FSM_HEADER_1(AX_Receiver_FSM *fsm){
 180              		.loc 1 101 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 8
 183              		@ frame_needed = 1, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185 0000 80B4     		push	{r7}
 186              	.LCFI6:
 187              		.cfi_def_cfa_offset 4
 188              		.cfi_offset 7, -4
 189 0002 83B0     		sub	sp, sp, #12
 190              	.LCFI7:
 191              		.cfi_def_cfa_offset 16
 192 0004 00AF     		add	r7, sp, #0
 193              	.LCFI8:
 194              		.cfi_def_cfa_register 7
 195 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccpqqMQi.s 			page 6


 102:Src/ax_12a.c  ****   if(FSM_BYTE == header[1]){
 196              		.loc 1 102 0
 197 0008 7B68     		ldr	r3, [r7, #4]
 198 000a DB68     		ldr	r3, [r3, #12]
 199 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 200 000e FF22     		movs	r2, #255
 201 0010 9342     		cmp	r3, r2
 202 0012 08D1     		bne	.L7
 103:Src/ax_12a.c  ****     FSM_NEXT;
 203              		.loc 1 103 0
 204 0014 7B68     		ldr	r3, [r7, #4]
 205 0016 DB68     		ldr	r3, [r3, #12]
 206 0018 5A1C     		adds	r2, r3, #1
 207 001a 7B68     		ldr	r3, [r7, #4]
 208 001c DA60     		str	r2, [r3, #12]
 104:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_ID);
 209              		.loc 1 104 0
 210 001e 7B68     		ldr	r3, [r7, #4]
 211 0020 074A     		ldr	r2, .L10
 212 0022 1A60     		str	r2, [r3]
 105:Src/ax_12a.c  ****   }
 106:Src/ax_12a.c  ****   else{
 107:Src/ax_12a.c  ****     FSM_RESET;
 108:Src/ax_12a.c  ****   }
 109:Src/ax_12a.c  **** }
 213              		.loc 1 109 0
 214 0024 06E0     		b	.L9
 215              	.L7:
 107:Src/ax_12a.c  ****   }
 216              		.loc 1 107 0
 217 0026 7B68     		ldr	r3, [r7, #4]
 218 0028 064A     		ldr	r2, .L10+4
 219 002a 1A60     		str	r2, [r3]
 220 002c 7B68     		ldr	r3, [r7, #4]
 221 002e 9A68     		ldr	r2, [r3, #8]
 222 0030 7B68     		ldr	r3, [r7, #4]
 223 0032 DA60     		str	r2, [r3, #12]
 224              	.L9:
 225              		.loc 1 109 0
 226 0034 00BF     		nop
 227 0036 0C37     		adds	r7, r7, #12
 228              	.LCFI9:
 229              		.cfi_def_cfa_offset 4
 230 0038 BD46     		mov	sp, r7
 231              	.LCFI10:
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 003a 5DF8047B 		ldr	r7, [sp], #4
 235              	.LCFI11:
 236              		.cfi_restore 7
 237              		.cfi_def_cfa_offset 0
 238 003e 7047     		bx	lr
 239              	.L11:
 240              		.align	2
 241              	.L10:
 242 0040 00000000 		.word	AX_FSM_ID
 243 0044 00000000 		.word	AX_FSM_HEADER_0
ARM GAS  /tmp/ccpqqMQi.s 			page 7


 244              		.cfi_endproc
 245              	.LFE4:
 247              		.section	.text.AX_FSM_ID,"ax",%progbits
 248              		.align	1
 249              		.global	AX_FSM_ID
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	AX_FSM_ID:
 256              	.LFB5:
 110:Src/ax_12a.c  **** 
 111:Src/ax_12a.c  **** void AX_FSM_ID(AX_Receiver_FSM *fsm){
 257              		.loc 1 111 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 8
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262 0000 80B4     		push	{r7}
 263              	.LCFI12:
 264              		.cfi_def_cfa_offset 4
 265              		.cfi_offset 7, -4
 266 0002 83B0     		sub	sp, sp, #12
 267              	.LCFI13:
 268              		.cfi_def_cfa_offset 16
 269 0004 00AF     		add	r7, sp, #0
 270              	.LCFI14:
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 112:Src/ax_12a.c  ****   if(FSM_BYTE != 0xFF){
 273              		.loc 1 112 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a DB68     		ldr	r3, [r3, #12]
 276 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277 000e FF2B     		cmp	r3, #255
 278 0010 08D0     		beq	.L13
 113:Src/ax_12a.c  ****     FSM_NEXT;
 279              		.loc 1 113 0
 280 0012 7B68     		ldr	r3, [r7, #4]
 281 0014 DB68     		ldr	r3, [r3, #12]
 282 0016 5A1C     		adds	r2, r3, #1
 283 0018 7B68     		ldr	r3, [r7, #4]
 284 001a DA60     		str	r2, [r3, #12]
 114:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_LENGTH);
 285              		.loc 1 114 0
 286 001c 7B68     		ldr	r3, [r7, #4]
 287 001e 084A     		ldr	r2, .L16
 288 0020 1A60     		str	r2, [r3]
 115:Src/ax_12a.c  ****   }
 116:Src/ax_12a.c  ****   else{
 117:Src/ax_12a.c  ****     FSM_RESET;
 118:Src/ax_12a.c  ****   }
 119:Src/ax_12a.c  **** }
 289              		.loc 1 119 0
 290 0022 06E0     		b	.L15
 291              	.L13:
 117:Src/ax_12a.c  ****   }
ARM GAS  /tmp/ccpqqMQi.s 			page 8


 292              		.loc 1 117 0
 293 0024 7B68     		ldr	r3, [r7, #4]
 294 0026 074A     		ldr	r2, .L16+4
 295 0028 1A60     		str	r2, [r3]
 296 002a 7B68     		ldr	r3, [r7, #4]
 297 002c 9A68     		ldr	r2, [r3, #8]
 298 002e 7B68     		ldr	r3, [r7, #4]
 299 0030 DA60     		str	r2, [r3, #12]
 300              	.L15:
 301              		.loc 1 119 0
 302 0032 00BF     		nop
 303 0034 0C37     		adds	r7, r7, #12
 304              	.LCFI15:
 305              		.cfi_def_cfa_offset 4
 306 0036 BD46     		mov	sp, r7
 307              	.LCFI16:
 308              		.cfi_def_cfa_register 13
 309              		@ sp needed
 310 0038 5DF8047B 		ldr	r7, [sp], #4
 311              	.LCFI17:
 312              		.cfi_restore 7
 313              		.cfi_def_cfa_offset 0
 314 003c 7047     		bx	lr
 315              	.L17:
 316 003e 00BF     		.align	2
 317              	.L16:
 318 0040 00000000 		.word	AX_FSM_LENGTH
 319 0044 00000000 		.word	AX_FSM_HEADER_0
 320              		.cfi_endproc
 321              	.LFE5:
 323              		.section	.text.AX_FSM_LENGTH,"ax",%progbits
 324              		.align	1
 325              		.global	AX_FSM_LENGTH
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu fpv4-sp-d16
 331              	AX_FSM_LENGTH:
 332              	.LFB6:
 120:Src/ax_12a.c  **** 
 121:Src/ax_12a.c  **** void AX_FSM_LENGTH(AX_Receiver_FSM *fsm){
 333              		.loc 1 121 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 16
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338 0000 80B4     		push	{r7}
 339              	.LCFI18:
 340              		.cfi_def_cfa_offset 4
 341              		.cfi_offset 7, -4
 342 0002 85B0     		sub	sp, sp, #20
 343              	.LCFI19:
 344              		.cfi_def_cfa_offset 24
 345 0004 00AF     		add	r7, sp, #0
 346              	.LCFI20:
 347              		.cfi_def_cfa_register 7
 348 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccpqqMQi.s 			page 9


 122:Src/ax_12a.c  ****   fsm->remaining_bytes = FSM_BYTE;
 349              		.loc 1 122 0
 350 0008 7B68     		ldr	r3, [r7, #4]
 351 000a DB68     		ldr	r3, [r3, #12]
 352 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 353 000e 7B68     		ldr	r3, [r7, #4]
 354 0010 1A71     		strb	r2, [r3, #4]
 123:Src/ax_12a.c  ****   const uint8_t remaining_bytes = fsm->remaining_bytes;
 355              		.loc 1 123 0
 356 0012 7B68     		ldr	r3, [r7, #4]
 357 0014 1B79     		ldrb	r3, [r3, #4]
 358 0016 FB73     		strb	r3, [r7, #15]
 124:Src/ax_12a.c  ****   if((remaining_bytes >= 2) && (4 + remaining_bytes <= AX_BUFFER_SIZE)){
 359              		.loc 1 124 0
 360 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 361 001a 012B     		cmp	r3, #1
 362 001c 0CD9     		bls	.L19
 363              		.loc 1 124 0 is_stmt 0 discriminator 1
 364 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 365 0020 0433     		adds	r3, r3, #4
 366 0022 202B     		cmp	r3, #32
 367 0024 08DC     		bgt	.L19
 125:Src/ax_12a.c  ****     FSM_NEXT;
 368              		.loc 1 125 0 is_stmt 1
 369 0026 7B68     		ldr	r3, [r7, #4]
 370 0028 DB68     		ldr	r3, [r3, #12]
 371 002a 5A1C     		adds	r2, r3, #1
 372 002c 7B68     		ldr	r3, [r7, #4]
 373 002e DA60     		str	r2, [r3, #12]
 126:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_RECEIVING);
 374              		.loc 1 126 0
 375 0030 7B68     		ldr	r3, [r7, #4]
 376 0032 084A     		ldr	r2, .L21
 377 0034 1A60     		str	r2, [r3]
 378 0036 06E0     		b	.L20
 379              	.L19:
 127:Src/ax_12a.c  ****   }
 128:Src/ax_12a.c  ****   else{
 129:Src/ax_12a.c  ****     FSM_RESET;
 380              		.loc 1 129 0
 381 0038 7B68     		ldr	r3, [r7, #4]
 382 003a 074A     		ldr	r2, .L21+4
 383 003c 1A60     		str	r2, [r3]
 384 003e 7B68     		ldr	r3, [r7, #4]
 385 0040 9A68     		ldr	r2, [r3, #8]
 386 0042 7B68     		ldr	r3, [r7, #4]
 387 0044 DA60     		str	r2, [r3, #12]
 388              	.L20:
 130:Src/ax_12a.c  ****   }
 131:Src/ax_12a.c  **** }
 389              		.loc 1 131 0
 390 0046 00BF     		nop
 391 0048 1437     		adds	r7, r7, #20
 392              	.LCFI21:
 393              		.cfi_def_cfa_offset 4
 394 004a BD46     		mov	sp, r7
 395              	.LCFI22:
ARM GAS  /tmp/ccpqqMQi.s 			page 10


 396              		.cfi_def_cfa_register 13
 397              		@ sp needed
 398 004c 5DF8047B 		ldr	r7, [sp], #4
 399              	.LCFI23:
 400              		.cfi_restore 7
 401              		.cfi_def_cfa_offset 0
 402 0050 7047     		bx	lr
 403              	.L22:
 404 0052 00BF     		.align	2
 405              	.L21:
 406 0054 00000000 		.word	AX_FSM_RECEIVING
 407 0058 00000000 		.word	AX_FSM_HEADER_0
 408              		.cfi_endproc
 409              	.LFE6:
 411              		.section	.text.AX_FSM_RECEIVING,"ax",%progbits
 412              		.align	1
 413              		.global	AX_FSM_RECEIVING
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu fpv4-sp-d16
 419              	AX_FSM_RECEIVING:
 420              	.LFB7:
 132:Src/ax_12a.c  **** 
 133:Src/ax_12a.c  **** void AX_FSM_RECEIVING(AX_Receiver_FSM *fsm){
 421              		.loc 1 133 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426 0000 80B4     		push	{r7}
 427              	.LCFI24:
 428              		.cfi_def_cfa_offset 4
 429              		.cfi_offset 7, -4
 430 0002 83B0     		sub	sp, sp, #12
 431              	.LCFI25:
 432              		.cfi_def_cfa_offset 16
 433 0004 00AF     		add	r7, sp, #0
 434              	.LCFI26:
 435              		.cfi_def_cfa_register 7
 436 0006 7860     		str	r0, [r7, #4]
 134:Src/ax_12a.c  ****   FSM_NEXT;
 437              		.loc 1 134 0
 438 0008 7B68     		ldr	r3, [r7, #4]
 439 000a DB68     		ldr	r3, [r3, #12]
 440 000c 5A1C     		adds	r2, r3, #1
 441 000e 7B68     		ldr	r3, [r7, #4]
 442 0010 DA60     		str	r2, [r3, #12]
 135:Src/ax_12a.c  ****   fsm->remaining_bytes--;
 443              		.loc 1 135 0
 444 0012 7B68     		ldr	r3, [r7, #4]
 445 0014 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 446 0016 013B     		subs	r3, r3, #1
 447 0018 DAB2     		uxtb	r2, r3
 448 001a 7B68     		ldr	r3, [r7, #4]
 449 001c 1A71     		strb	r2, [r3, #4]
 136:Src/ax_12a.c  ****   if(fsm->remaining_bytes == 0){
ARM GAS  /tmp/ccpqqMQi.s 			page 11


 450              		.loc 1 136 0
 451 001e 7B68     		ldr	r3, [r7, #4]
 452 0020 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 453 0022 002B     		cmp	r3, #0
 454 0024 02D1     		bne	.L25
 137:Src/ax_12a.c  ****     fsm->done = 1;
 455              		.loc 1 137 0
 456 0026 7B68     		ldr	r3, [r7, #4]
 457 0028 0122     		movs	r2, #1
 458 002a 1A74     		strb	r2, [r3, #16]
 459              	.L25:
 138:Src/ax_12a.c  ****   }
 139:Src/ax_12a.c  **** }
 460              		.loc 1 139 0
 461 002c 00BF     		nop
 462 002e 0C37     		adds	r7, r7, #12
 463              	.LCFI27:
 464              		.cfi_def_cfa_offset 4
 465 0030 BD46     		mov	sp, r7
 466              	.LCFI28:
 467              		.cfi_def_cfa_register 13
 468              		@ sp needed
 469 0032 5DF8047B 		ldr	r7, [sp], #4
 470              	.LCFI29:
 471              		.cfi_restore 7
 472              		.cfi_def_cfa_offset 0
 473 0036 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE7:
 477              		.section	.text.AX_Extract_Status_Packet,"ax",%progbits
 478              		.align	1
 479              		.global	AX_Extract_Status_Packet
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	AX_Extract_Status_Packet:
 486              	.LFB8:
 140:Src/ax_12a.c  **** 
 141:Src/ax_12a.c  **** uint8_t AX_Extract_Status_Packet(AX_Status_Packet *packet, uint8_t frame[AX_BUFFER_SIZE], uint16_t 
 487              		.loc 1 141 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 24
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491 0000 80B5     		push	{r7, lr}
 492              	.LCFI30:
 493              		.cfi_def_cfa_offset 8
 494              		.cfi_offset 7, -8
 495              		.cfi_offset 14, -4
 496 0002 86B0     		sub	sp, sp, #24
 497              	.LCFI31:
 498              		.cfi_def_cfa_offset 32
 499 0004 00AF     		add	r7, sp, #0
 500              	.LCFI32:
 501              		.cfi_def_cfa_register 7
 502 0006 F860     		str	r0, [r7, #12]
 503 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccpqqMQi.s 			page 12


 504 000a 1346     		mov	r3, r2
 505 000c FB80     		strh	r3, [r7, #6]	@ movhi
 142:Src/ax_12a.c  ****   //The packet size is supposed to be checked in AX_Receive function.
 143:Src/ax_12a.c  ****   //Checksum
 144:Src/ax_12a.c  ****   if(AX_Compute_Checksum(frame+2, packet_size-3) != frame[packet_size-1]){
 506              		.loc 1 144 0
 507 000e BB68     		ldr	r3, [r7, #8]
 508 0010 9A1C     		adds	r2, r3, #2
 509 0012 FB88     		ldrh	r3, [r7, #6]	@ movhi
 510 0014 033B     		subs	r3, r3, #3
 511 0016 9BB2     		uxth	r3, r3
 512 0018 1946     		mov	r1, r3
 513 001a 1046     		mov	r0, r2
 514 001c FFF7FEFF 		bl	AX_Compute_Checksum
 515 0020 0346     		mov	r3, r0
 516 0022 1946     		mov	r1, r3
 517 0024 FB88     		ldrh	r3, [r7, #6]
 518 0026 013B     		subs	r3, r3, #1
 519 0028 BA68     		ldr	r2, [r7, #8]
 520 002a 1344     		add	r3, r3, r2
 521 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 522 002e 9942     		cmp	r1, r3
 523 0030 05D0     		beq	.L27
 145:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 524              		.loc 1 145 0
 525 0032 184B     		ldr	r3, .L31
 526 0034 4FF48072 		mov	r2, #256
 527 0038 1A80     		strh	r2, [r3]	@ movhi
 146:Src/ax_12a.c  ****     return 1;
 528              		.loc 1 146 0
 529 003a 0123     		movs	r3, #1
 530 003c 26E0     		b	.L28
 531              	.L27:
 147:Src/ax_12a.c  ****   }
 148:Src/ax_12a.c  **** 
 149:Src/ax_12a.c  ****   packet->id = frame[2];
 532              		.loc 1 149 0
 533 003e BB68     		ldr	r3, [r7, #8]
 534 0040 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 535 0042 FB68     		ldr	r3, [r7, #12]
 536 0044 1A70     		strb	r2, [r3]
 150:Src/ax_12a.c  ****   packet->err = frame[4];
 537              		.loc 1 150 0
 538 0046 BB68     		ldr	r3, [r7, #8]
 539 0048 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 540 004a FB68     		ldr	r3, [r7, #12]
 541 004c 5A70     		strb	r2, [r3, #1]
 151:Src/ax_12a.c  ****   
 152:Src/ax_12a.c  ****   //Paramètres
 153:Src/ax_12a.c  ****   packet->nb_params = 0;
 542              		.loc 1 153 0
 543 004e FB68     		ldr	r3, [r7, #12]
 544 0050 0022     		movs	r2, #0
 545 0052 9A70     		strb	r2, [r3, #2]
 154:Src/ax_12a.c  ****   uint8_t *p_frame = frame+5;
 546              		.loc 1 154 0
 547 0054 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccpqqMQi.s 			page 13


 548 0056 0533     		adds	r3, r3, #5
 549 0058 7B61     		str	r3, [r7, #20]
 155:Src/ax_12a.c  ****   uint8_t *end_frame = frame+(packet_size-1);
 550              		.loc 1 155 0
 551 005a FB88     		ldrh	r3, [r7, #6]
 552 005c 013B     		subs	r3, r3, #1
 553 005e BA68     		ldr	r2, [r7, #8]
 554 0060 1344     		add	r3, r3, r2
 555 0062 3B61     		str	r3, [r7, #16]
 156:Src/ax_12a.c  ****   while(p_frame != end_frame){
 556              		.loc 1 156 0
 557 0064 0DE0     		b	.L29
 558              	.L30:
 157:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 559              		.loc 1 157 0
 560 0066 7B69     		ldr	r3, [r7, #20]
 561 0068 5A1C     		adds	r2, r3, #1
 562 006a 7A61     		str	r2, [r7, #20]
 563 006c FA68     		ldr	r2, [r7, #12]
 564 006e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 565 0070 511C     		adds	r1, r2, #1
 566 0072 C8B2     		uxtb	r0, r1
 567 0074 F968     		ldr	r1, [r7, #12]
 568 0076 8870     		strb	r0, [r1, #2]
 569 0078 1146     		mov	r1, r2
 570 007a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 571 007c FB68     		ldr	r3, [r7, #12]
 572 007e 0B44     		add	r3, r3, r1
 573 0080 DA70     		strb	r2, [r3, #3]
 574              	.L29:
 156:Src/ax_12a.c  ****   while(p_frame != end_frame){
 575              		.loc 1 156 0
 576 0082 7A69     		ldr	r2, [r7, #20]
 577 0084 3B69     		ldr	r3, [r7, #16]
 578 0086 9A42     		cmp	r2, r3
 579 0088 EDD1     		bne	.L30
 158:Src/ax_12a.c  ****   }
 159:Src/ax_12a.c  ****   
 160:Src/ax_12a.c  ****   return 0;
 580              		.loc 1 160 0
 581 008a 0023     		movs	r3, #0
 582              	.L28:
 161:Src/ax_12a.c  **** }
 583              		.loc 1 161 0
 584 008c 1846     		mov	r0, r3
 585 008e 1837     		adds	r7, r7, #24
 586              	.LCFI33:
 587              		.cfi_def_cfa_offset 8
 588 0090 BD46     		mov	sp, r7
 589              	.LCFI34:
 590              		.cfi_def_cfa_register 13
 591              		@ sp needed
 592 0092 80BD     		pop	{r7, pc}
 593              	.L32:
 594              		.align	2
 595              	.L31:
 596 0094 00000000 		.word	err
ARM GAS  /tmp/ccpqqMQi.s 			page 14


 597              		.cfi_endproc
 598              	.LFE8:
 600              		.section	.text.AX_Receive,"ax",%progbits
 601              		.align	1
 602              		.global	AX_Receive
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv4-sp-d16
 608              	AX_Receive:
 609              	.LFB9:
 162:Src/ax_12a.c  **** 
 163:Src/ax_12a.c  **** uint8_t AX_Receive(AX_Interface *interface, uint16_t packet_size, uint32_t timeout){
 610              		.loc 1 163 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 24
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614 0000 80B5     		push	{r7, lr}
 615              	.LCFI35:
 616              		.cfi_def_cfa_offset 8
 617              		.cfi_offset 7, -8
 618              		.cfi_offset 14, -4
 619 0002 86B0     		sub	sp, sp, #24
 620              	.LCFI36:
 621              		.cfi_def_cfa_offset 32
 622 0004 00AF     		add	r7, sp, #0
 623              	.LCFI37:
 624              		.cfi_def_cfa_register 7
 625 0006 F860     		str	r0, [r7, #12]
 626 0008 0B46     		mov	r3, r1
 627 000a 7A60     		str	r2, [r7, #4]
 628 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 164:Src/ax_12a.c  ****   //Avoid overflow
 165:Src/ax_12a.c  ****   if(packet_size > AX_BUFFER_SIZE){
 629              		.loc 1 165 0
 630 000e 7B89     		ldrh	r3, [r7, #10]
 631 0010 202B     		cmp	r3, #32
 632 0012 04D9     		bls	.L34
 166:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 633              		.loc 1 166 0
 634 0014 334B     		ldr	r3, .L40
 635 0016 0122     		movs	r2, #1
 636 0018 1A80     		strh	r2, [r3]	@ movhi
 167:Src/ax_12a.c  ****     return 1;
 637              		.loc 1 167 0
 638 001a 0123     		movs	r3, #1
 639 001c 5EE0     		b	.L35
 640              	.L34:
 168:Src/ax_12a.c  ****   }
 169:Src/ax_12a.c  ****   
 170:Src/ax_12a.c  ****   //Préparation de la réception
 171:Src/ax_12a.c  ****   interface->set_direction(AX_RECEIVE);
 641              		.loc 1 171 0
 642 001e FB68     		ldr	r3, [r7, #12]
 643 0020 9B68     		ldr	r3, [r3, #8]
 644 0022 0120     		movs	r0, #1
 645 0024 9847     		blx	r3
ARM GAS  /tmp/ccpqqMQi.s 			page 15


 646              	.LVL0:
 172:Src/ax_12a.c  **** 
 173:Src/ax_12a.c  ****   //FSM initialization
 174:Src/ax_12a.c  ****   interface->fsm.update_state = AX_FSM_HEADER_0;
 647              		.loc 1 174 0
 648 0026 FB68     		ldr	r3, [r7, #12]
 649 0028 2F4A     		ldr	r2, .L40+4
 650 002a 1A61     		str	r2, [r3, #16]
 175:Src/ax_12a.c  ****   interface->fsm.remaining_bytes = 0;
 651              		.loc 1 175 0
 652 002c FB68     		ldr	r3, [r7, #12]
 653 002e 0022     		movs	r2, #0
 654 0030 1A75     		strb	r2, [r3, #20]
 176:Src/ax_12a.c  ****   interface->fsm.buffer = interface->buffer;
 655              		.loc 1 176 0
 656 0032 FB68     		ldr	r3, [r7, #12]
 657 0034 03F12402 		add	r2, r3, #36
 658 0038 FB68     		ldr	r3, [r7, #12]
 659 003a 9A61     		str	r2, [r3, #24]
 177:Src/ax_12a.c  ****   interface->fsm.p_buffer = interface->buffer;
 660              		.loc 1 177 0
 661 003c FB68     		ldr	r3, [r7, #12]
 662 003e 03F12402 		add	r2, r3, #36
 663 0042 FB68     		ldr	r3, [r7, #12]
 664 0044 DA61     		str	r2, [r3, #28]
 178:Src/ax_12a.c  ****   interface->fsm.done = 0;
 665              		.loc 1 178 0
 666 0046 FB68     		ldr	r3, [r7, #12]
 667 0048 0022     		movs	r2, #0
 668 004a 83F82020 		strb	r2, [r3, #32]
 179:Src/ax_12a.c  **** 
 180:Src/ax_12a.c  ****   //Reception
 181:Src/ax_12a.c  ****   if(interface->receive(interface->fsm.p_buffer, packet_size, timeout) != 0){
 669              		.loc 1 181 0
 670 004e FB68     		ldr	r3, [r7, #12]
 671 0050 5B68     		ldr	r3, [r3, #4]
 672 0052 FA68     		ldr	r2, [r7, #12]
 673 0054 D069     		ldr	r0, [r2, #28]
 674 0056 7989     		ldrh	r1, [r7, #10]
 675 0058 7A68     		ldr	r2, [r7, #4]
 676 005a 9847     		blx	r3
 677              	.LVL1:
 678 005c 0346     		mov	r3, r0
 679 005e 002B     		cmp	r3, #0
 680 0060 05D0     		beq	.L36
 182:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 681              		.loc 1 182 0
 682 0062 204B     		ldr	r3, .L40
 683 0064 40F20112 		movw	r2, #257
 684 0068 1A80     		strh	r2, [r3]	@ movhi
 183:Src/ax_12a.c  ****     return 1;
 685              		.loc 1 183 0
 686 006a 0123     		movs	r3, #1
 687 006c 36E0     		b	.L35
 688              	.L36:
 184:Src/ax_12a.c  ****   }
 185:Src/ax_12a.c  **** 
ARM GAS  /tmp/ccpqqMQi.s 			page 16


 186:Src/ax_12a.c  ****   //FSM
 187:Src/ax_12a.c  ****   do{
 188:Src/ax_12a.c  ****     interface->fsm.update_state(&(interface->fsm));
 689              		.loc 1 188 0 discriminator 2
 690 006e FB68     		ldr	r3, [r7, #12]
 691 0070 1B69     		ldr	r3, [r3, #16]
 692 0072 FA68     		ldr	r2, [r7, #12]
 693 0074 1032     		adds	r2, r2, #16
 694 0076 1046     		mov	r0, r2
 695 0078 9847     		blx	r3
 696              	.LVL2:
 189:Src/ax_12a.c  **** 
 190:Src/ax_12a.c  ****     /*uint8_t *p;
 191:Src/ax_12a.c  ****     printf("Buffer : ");
 192:Src/ax_12a.c  ****     for(p = interface->buffer; p < interface->fsm.p_buffer; p++){
 193:Src/ax_12a.c  ****       printf("0x%2.2X ", *p);
 194:Src/ax_12a.c  ****     }
 195:Src/ax_12a.c  ****     printf("\n");*/
 196:Src/ax_12a.c  ****   }while(interface->fsm.p_buffer != interface->fsm.buffer && interface->fsm.done != 1);//If FSM is 
 697              		.loc 1 196 0 discriminator 2
 698 007a FB68     		ldr	r3, [r7, #12]
 699 007c DA69     		ldr	r2, [r3, #28]
 700 007e FB68     		ldr	r3, [r7, #12]
 701 0080 9B69     		ldr	r3, [r3, #24]
 702 0082 9A42     		cmp	r2, r3
 703 0084 04D0     		beq	.L37
 704              		.loc 1 196 0 is_stmt 0 discriminator 1
 705 0086 FB68     		ldr	r3, [r7, #12]
 706 0088 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 707 008c 012B     		cmp	r3, #1
 708 008e EED1     		bne	.L36
 709              	.L37:
 197:Src/ax_12a.c  **** 
 198:Src/ax_12a.c  ****   //Checking that the frame is valid
 199:Src/ax_12a.c  ****   if(interface->fsm.done == 0){
 710              		.loc 1 199 0 is_stmt 1
 711 0090 FB68     		ldr	r3, [r7, #12]
 712 0092 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 713 0096 002B     		cmp	r3, #0
 714 0098 05D1     		bne	.L38
 200:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 715              		.loc 1 200 0
 716 009a 124B     		ldr	r3, .L40
 717 009c 4FF48072 		mov	r2, #256
 718 00a0 1A80     		strh	r2, [r3]	@ movhi
 201:Src/ax_12a.c  ****     return 1;
 719              		.loc 1 201 0
 720 00a2 0123     		movs	r3, #1
 721 00a4 1AE0     		b	.L35
 722              	.L38:
 202:Src/ax_12a.c  ****   }
 203:Src/ax_12a.c  **** 
 204:Src/ax_12a.c  ****   //Checking the length of the packet
 205:Src/ax_12a.c  ****   uint16_t r_packet_size = interface->fsm.p_buffer - interface->fsm.buffer;
 723              		.loc 1 205 0
 724 00a6 FB68     		ldr	r3, [r7, #12]
 725 00a8 DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccpqqMQi.s 			page 17


 726 00aa 1A46     		mov	r2, r3
 727 00ac FB68     		ldr	r3, [r7, #12]
 728 00ae 9B69     		ldr	r3, [r3, #24]
 729 00b0 D31A     		subs	r3, r2, r3
 730 00b2 FB82     		strh	r3, [r7, #22]	@ movhi
 206:Src/ax_12a.c  ****   if(r_packet_size != packet_size){
 731              		.loc 1 206 0
 732 00b4 FA8A     		ldrh	r2, [r7, #22]
 733 00b6 7B89     		ldrh	r3, [r7, #10]
 734 00b8 9A42     		cmp	r2, r3
 735 00ba 05D0     		beq	.L39
 207:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 736              		.loc 1 207 0
 737 00bc 094B     		ldr	r3, .L40
 738 00be 4FF48072 		mov	r2, #256
 739 00c2 1A80     		strh	r2, [r3]	@ movhi
 208:Src/ax_12a.c  ****     return 1;
 740              		.loc 1 208 0
 741 00c4 0123     		movs	r3, #1
 742 00c6 09E0     		b	.L35
 743              	.L39:
 209:Src/ax_12a.c  ****   }
 210:Src/ax_12a.c  **** 
 211:Src/ax_12a.c  ****   //Extract the packet, then return
 212:Src/ax_12a.c  ****   return AX_Extract_Status_Packet(&interface->status, interface->buffer, packet_size);
 744              		.loc 1 212 0
 745 00c8 FB68     		ldr	r3, [r7, #12]
 746 00ca 03F14400 		add	r0, r3, #68
 747 00ce FB68     		ldr	r3, [r7, #12]
 748 00d0 2433     		adds	r3, r3, #36
 749 00d2 7A89     		ldrh	r2, [r7, #10]
 750 00d4 1946     		mov	r1, r3
 751 00d6 FFF7FEFF 		bl	AX_Extract_Status_Packet
 752 00da 0346     		mov	r3, r0
 753              	.L35:
 213:Src/ax_12a.c  **** }
 754              		.loc 1 213 0
 755 00dc 1846     		mov	r0, r3
 756 00de 1837     		adds	r7, r7, #24
 757              	.LCFI38:
 758              		.cfi_def_cfa_offset 8
 759 00e0 BD46     		mov	sp, r7
 760              	.LCFI39:
 761              		.cfi_def_cfa_register 13
 762              		@ sp needed
 763 00e2 80BD     		pop	{r7, pc}
 764              	.L41:
 765              		.align	2
 766              	.L40:
 767 00e4 00000000 		.word	err
 768 00e8 00000000 		.word	AX_FSM_HEADER_0
 769              		.cfi_endproc
 770              	.LFE9:
 772              		.section	.text.AX_Build_Frame,"ax",%progbits
 773              		.align	1
 774              		.global	AX_Build_Frame
 775              		.syntax unified
ARM GAS  /tmp/ccpqqMQi.s 			page 18


 776              		.thumb
 777              		.thumb_func
 778              		.fpu fpv4-sp-d16
 780              	AX_Build_Frame:
 781              	.LFB10:
 214:Src/ax_12a.c  **** 
 215:Src/ax_12a.c  **** //======================================
 216:Src/ax_12a.c  **** //           FONCTIONS D'ENVOI          
 217:Src/ax_12a.c  **** //======================================
 218:Src/ax_12a.c  **** uint8_t AX_Build_Frame(AX_Instruction_Packet *packet, uint8_t buffer[AX_BUFFER_SIZE]){
 782              		.loc 1 218 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 24
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786 0000 80B5     		push	{r7, lr}
 787              	.LCFI40:
 788              		.cfi_def_cfa_offset 8
 789              		.cfi_offset 7, -8
 790              		.cfi_offset 14, -4
 791 0002 86B0     		sub	sp, sp, #24
 792              	.LCFI41:
 793              		.cfi_def_cfa_offset 32
 794 0004 00AF     		add	r7, sp, #0
 795              	.LCFI42:
 796              		.cfi_def_cfa_register 7
 797 0006 7860     		str	r0, [r7, #4]
 798 0008 3960     		str	r1, [r7]
 219:Src/ax_12a.c  ****   //Verifying arguments
 220:Src/ax_12a.c  ****   if(packet == 0 || (packet->params == 0 && packet->nb_params > 0) || buffer == 0){
 799              		.loc 1 220 0
 800 000a 7B68     		ldr	r3, [r7, #4]
 801 000c 002B     		cmp	r3, #0
 802 000e 0AD0     		beq	.L43
 803              		.loc 1 220 0 is_stmt 0 discriminator 1
 804 0010 7B68     		ldr	r3, [r7, #4]
 805 0012 5B68     		ldr	r3, [r3, #4]
 806 0014 002B     		cmp	r3, #0
 807 0016 03D1     		bne	.L44
 808              		.loc 1 220 0 discriminator 2
 809 0018 7B68     		ldr	r3, [r7, #4]
 810 001a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 811 001c 002B     		cmp	r3, #0
 812 001e 02D1     		bne	.L43
 813              	.L44:
 814              		.loc 1 220 0 discriminator 4
 815 0020 3B68     		ldr	r3, [r7]
 816 0022 002B     		cmp	r3, #0
 817 0024 04D1     		bne	.L45
 818              	.L43:
 221:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 819              		.loc 1 221 0 is_stmt 1
 820 0026 334B     		ldr	r3, .L51
 821 0028 0022     		movs	r2, #0
 822 002a 1A80     		strh	r2, [r3]	@ movhi
 222:Src/ax_12a.c  ****     return 0;
 823              		.loc 1 222 0
 824 002c 0023     		movs	r3, #0
ARM GAS  /tmp/ccpqqMQi.s 			page 19


 825 002e 5DE0     		b	.L46
 826              	.L45:
 223:Src/ax_12a.c  ****   }
 224:Src/ax_12a.c  ****   //and ID range
 225:Src/ax_12a.c  ****   if(packet->id == 0xFF){
 827              		.loc 1 225 0
 828 0030 7B68     		ldr	r3, [r7, #4]
 829 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830 0034 FF2B     		cmp	r3, #255
 831 0036 04D1     		bne	.L47
 226:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 832              		.loc 1 226 0
 833 0038 2E4B     		ldr	r3, .L51
 834 003a 0022     		movs	r2, #0
 835 003c 1A80     		strh	r2, [r3]	@ movhi
 227:Src/ax_12a.c  ****     return 0;
 836              		.loc 1 227 0
 837 003e 0023     		movs	r3, #0
 838 0040 54E0     		b	.L46
 839              	.L47:
 228:Src/ax_12a.c  ****   }
 229:Src/ax_12a.c  ****   //Avoid overflow
 230:Src/ax_12a.c  ****   if(6+packet->nb_params > AX_BUFFER_SIZE){
 840              		.loc 1 230 0
 841 0042 7B68     		ldr	r3, [r7, #4]
 842 0044 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 843 0046 0633     		adds	r3, r3, #6
 844 0048 202B     		cmp	r3, #32
 845 004a 04DD     		ble	.L48
 231:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 846              		.loc 1 231 0
 847 004c 294B     		ldr	r3, .L51
 848 004e 0122     		movs	r2, #1
 849 0050 1A80     		strh	r2, [r3]	@ movhi
 232:Src/ax_12a.c  ****     return 0;
 850              		.loc 1 232 0
 851 0052 0023     		movs	r3, #0
 852 0054 4AE0     		b	.L46
 853              	.L48:
 233:Src/ax_12a.c  ****   }
 234:Src/ax_12a.c  **** 
 235:Src/ax_12a.c  ****   uint8_t *p_buffer = buffer;
 854              		.loc 1 235 0
 855 0056 3B68     		ldr	r3, [r7]
 856 0058 7B61     		str	r3, [r7, #20]
 236:Src/ax_12a.c  ****   //Header
 237:Src/ax_12a.c  ****   *(p_buffer++) = header[0];
 857              		.loc 1 237 0
 858 005a 7B69     		ldr	r3, [r7, #20]
 859 005c 5A1C     		adds	r2, r3, #1
 860 005e 7A61     		str	r2, [r7, #20]
 861 0060 FF22     		movs	r2, #255
 862 0062 1A70     		strb	r2, [r3]
 238:Src/ax_12a.c  ****   *(p_buffer++) = header[1];
 863              		.loc 1 238 0
 864 0064 7B69     		ldr	r3, [r7, #20]
 865 0066 5A1C     		adds	r2, r3, #1
ARM GAS  /tmp/ccpqqMQi.s 			page 20


 866 0068 7A61     		str	r2, [r7, #20]
 867 006a FF22     		movs	r2, #255
 868 006c 1A70     		strb	r2, [r3]
 239:Src/ax_12a.c  **** 
 240:Src/ax_12a.c  ****   //Packet ID
 241:Src/ax_12a.c  ****   *(p_buffer++) = packet->id;
 869              		.loc 1 241 0
 870 006e 7B69     		ldr	r3, [r7, #20]
 871 0070 5A1C     		adds	r2, r3, #1
 872 0072 7A61     		str	r2, [r7, #20]
 873 0074 7A68     		ldr	r2, [r7, #4]
 874 0076 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 875 0078 1A70     		strb	r2, [r3]
 242:Src/ax_12a.c  **** 
 243:Src/ax_12a.c  ****   //Packet length
 244:Src/ax_12a.c  ****   *(p_buffer++) = packet->nb_params+2;
 876              		.loc 1 244 0
 877 007a 7B68     		ldr	r3, [r7, #4]
 878 007c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 879 007e 7B69     		ldr	r3, [r7, #20]
 880 0080 591C     		adds	r1, r3, #1
 881 0082 7961     		str	r1, [r7, #20]
 882 0084 0232     		adds	r2, r2, #2
 883 0086 D2B2     		uxtb	r2, r2
 884 0088 1A70     		strb	r2, [r3]
 245:Src/ax_12a.c  **** 
 246:Src/ax_12a.c  ****   //Instruction
 247:Src/ax_12a.c  ****   *(p_buffer++) = packet->instruction;
 885              		.loc 1 247 0
 886 008a 7B69     		ldr	r3, [r7, #20]
 887 008c 5A1C     		adds	r2, r3, #1
 888 008e 7A61     		str	r2, [r7, #20]
 889 0090 7A68     		ldr	r2, [r7, #4]
 890 0092 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 891 0094 1A70     		strb	r2, [r3]
 248:Src/ax_12a.c  **** 
 249:Src/ax_12a.c  ****   //Parameters
 250:Src/ax_12a.c  ****   int i;
 251:Src/ax_12a.c  ****   for(i=0; i < packet->nb_params; i++){
 892              		.loc 1 251 0
 893 0096 0023     		movs	r3, #0
 894 0098 3B61     		str	r3, [r7, #16]
 895 009a 0BE0     		b	.L49
 896              	.L50:
 252:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 897              		.loc 1 252 0 discriminator 3
 898 009c 7B68     		ldr	r3, [r7, #4]
 899 009e 5A68     		ldr	r2, [r3, #4]
 900 00a0 3B69     		ldr	r3, [r7, #16]
 901 00a2 1A44     		add	r2, r2, r3
 902 00a4 7B69     		ldr	r3, [r7, #20]
 903 00a6 591C     		adds	r1, r3, #1
 904 00a8 7961     		str	r1, [r7, #20]
 905 00aa 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 906 00ac 1A70     		strb	r2, [r3]
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 907              		.loc 1 251 0 discriminator 3
ARM GAS  /tmp/ccpqqMQi.s 			page 21


 908 00ae 3B69     		ldr	r3, [r7, #16]
 909 00b0 0133     		adds	r3, r3, #1
 910 00b2 3B61     		str	r3, [r7, #16]
 911              	.L49:
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 912              		.loc 1 251 0 is_stmt 0 discriminator 1
 913 00b4 7B68     		ldr	r3, [r7, #4]
 914 00b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 915 00b8 1A46     		mov	r2, r3
 916 00ba 3B69     		ldr	r3, [r7, #16]
 917 00bc 9342     		cmp	r3, r2
 918 00be EDDB     		blt	.L50
 253:Src/ax_12a.c  ****   }
 254:Src/ax_12a.c  **** 
 255:Src/ax_12a.c  ****   //Checksum
 256:Src/ax_12a.c  ****   uint8_t checksum = AX_Compute_Checksum(buffer+2, p_buffer-buffer-2);
 919              		.loc 1 256 0 is_stmt 1
 920 00c0 3B68     		ldr	r3, [r7]
 921 00c2 981C     		adds	r0, r3, #2
 922 00c4 7A69     		ldr	r2, [r7, #20]
 923 00c6 3B68     		ldr	r3, [r7]
 924 00c8 D31A     		subs	r3, r2, r3
 925 00ca 9BB2     		uxth	r3, r3
 926 00cc 023B     		subs	r3, r3, #2
 927 00ce 9BB2     		uxth	r3, r3
 928 00d0 1946     		mov	r1, r3
 929 00d2 FFF7FEFF 		bl	AX_Compute_Checksum
 930 00d6 0346     		mov	r3, r0
 931 00d8 FB73     		strb	r3, [r7, #15]
 257:Src/ax_12a.c  ****   *(p_buffer++) = checksum; 
 932              		.loc 1 257 0
 933 00da 7B69     		ldr	r3, [r7, #20]
 934 00dc 5A1C     		adds	r2, r3, #1
 935 00de 7A61     		str	r2, [r7, #20]
 936 00e0 FA7B     		ldrb	r2, [r7, #15]
 937 00e2 1A70     		strb	r2, [r3]
 258:Src/ax_12a.c  ****   
 259:Src/ax_12a.c  ****   return p_buffer-buffer;    
 938              		.loc 1 259 0
 939 00e4 7A69     		ldr	r2, [r7, #20]
 940 00e6 3B68     		ldr	r3, [r7]
 941 00e8 D31A     		subs	r3, r2, r3
 942 00ea DBB2     		uxtb	r3, r3
 943              	.L46:
 260:Src/ax_12a.c  **** }
 944              		.loc 1 260 0
 945 00ec 1846     		mov	r0, r3
 946 00ee 1837     		adds	r7, r7, #24
 947              	.LCFI43:
 948              		.cfi_def_cfa_offset 8
 949 00f0 BD46     		mov	sp, r7
 950              	.LCFI44:
 951              		.cfi_def_cfa_register 13
 952              		@ sp needed
 953 00f2 80BD     		pop	{r7, pc}
 954              	.L52:
 955              		.align	2
ARM GAS  /tmp/ccpqqMQi.s 			page 22


 956              	.L51:
 957 00f4 00000000 		.word	err
 958              		.cfi_endproc
 959              	.LFE10:
 961              		.section	.text.AX_Send,"ax",%progbits
 962              		.align	1
 963              		.global	AX_Send
 964              		.syntax unified
 965              		.thumb
 966              		.thumb_func
 967              		.fpu fpv4-sp-d16
 969              	AX_Send:
 970              	.LFB11:
 261:Src/ax_12a.c  **** 
 262:Src/ax_12a.c  **** uint8_t AX_Send(AX_Interface *interface, AX_Instruction_Packet *packet, uint32_t timeout){
 971              		.loc 1 262 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 24
 974              		@ frame_needed = 1, uses_anonymous_args = 0
 975 0000 80B5     		push	{r7, lr}
 976              	.LCFI45:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 7, -8
 979              		.cfi_offset 14, -4
 980 0002 86B0     		sub	sp, sp, #24
 981              	.LCFI46:
 982              		.cfi_def_cfa_offset 32
 983 0004 00AF     		add	r7, sp, #0
 984              	.LCFI47:
 985              		.cfi_def_cfa_register 7
 986 0006 F860     		str	r0, [r7, #12]
 987 0008 B960     		str	r1, [r7, #8]
 988 000a 7A60     		str	r2, [r7, #4]
 263:Src/ax_12a.c  ****   //Préparation de la trame
 264:Src/ax_12a.c  ****   uint8_t length = AX_Build_Frame(packet, interface->buffer);
 989              		.loc 1 264 0
 990 000c FB68     		ldr	r3, [r7, #12]
 991 000e 2433     		adds	r3, r3, #36
 992 0010 1946     		mov	r1, r3
 993 0012 B868     		ldr	r0, [r7, #8]
 994 0014 FFF7FEFF 		bl	AX_Build_Frame
 995 0018 0346     		mov	r3, r0
 996 001a FB75     		strb	r3, [r7, #23]
 265:Src/ax_12a.c  ****   if(!length){
 997              		.loc 1 265 0
 998 001c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 999 001e 002B     		cmp	r3, #0
 1000 0020 01D1     		bne	.L54
 266:Src/ax_12a.c  ****     return 1;
 1001              		.loc 1 266 0
 1002 0022 0123     		movs	r3, #1
 1003 0024 16E0     		b	.L55
 1004              	.L54:
 267:Src/ax_12a.c  ****   }
 268:Src/ax_12a.c  **** 
 269:Src/ax_12a.c  ****   //Envoi
 270:Src/ax_12a.c  ****   interface->set_direction(AX_SEND);
ARM GAS  /tmp/ccpqqMQi.s 			page 23


 1005              		.loc 1 270 0
 1006 0026 FB68     		ldr	r3, [r7, #12]
 1007 0028 9B68     		ldr	r3, [r3, #8]
 1008 002a 0020     		movs	r0, #0
 1009 002c 9847     		blx	r3
 1010              	.LVL3:
 271:Src/ax_12a.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 1011              		.loc 1 271 0
 1012 002e FB68     		ldr	r3, [r7, #12]
 1013 0030 1B68     		ldr	r3, [r3]
 1014 0032 FA68     		ldr	r2, [r7, #12]
 1015 0034 02F12400 		add	r0, r2, #36
 1016 0038 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1017 003a 91B2     		uxth	r1, r2
 1018 003c 7A68     		ldr	r2, [r7, #4]
 1019 003e 9847     		blx	r3
 1020              	.LVL4:
 1021 0040 0346     		mov	r3, r0
 1022 0042 012B     		cmp	r3, #1
 1023 0044 05D1     		bne	.L56
 272:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 1024              		.loc 1 272 0
 1025 0046 054B     		ldr	r3, .L57
 1026 0048 40F20112 		movw	r2, #257
 1027 004c 1A80     		strh	r2, [r3]	@ movhi
 273:Src/ax_12a.c  ****     return 1;
 1028              		.loc 1 273 0
 1029 004e 0123     		movs	r3, #1
 1030 0050 00E0     		b	.L55
 1031              	.L56:
 274:Src/ax_12a.c  ****   }
 275:Src/ax_12a.c  ****   return 0;
 1032              		.loc 1 275 0
 1033 0052 0023     		movs	r3, #0
 1034              	.L55:
 276:Src/ax_12a.c  **** }
 1035              		.loc 1 276 0
 1036 0054 1846     		mov	r0, r3
 1037 0056 1837     		adds	r7, r7, #24
 1038              	.LCFI48:
 1039              		.cfi_def_cfa_offset 8
 1040 0058 BD46     		mov	sp, r7
 1041              	.LCFI49:
 1042              		.cfi_def_cfa_register 13
 1043              		@ sp needed
 1044 005a 80BD     		pop	{r7, pc}
 1045              	.L58:
 1046              		.align	2
 1047              	.L57:
 1048 005c 00000000 		.word	err
 1049              		.cfi_endproc
 1050              	.LFE11:
 1052              		.section	.text.AX_Compute_Checksum,"ax",%progbits
 1053              		.align	1
 1054              		.global	AX_Compute_Checksum
 1055              		.syntax unified
 1056              		.thumb
ARM GAS  /tmp/ccpqqMQi.s 			page 24


 1057              		.thumb_func
 1058              		.fpu fpv4-sp-d16
 1060              	AX_Compute_Checksum:
 1061              	.LFB12:
 277:Src/ax_12a.c  **** 
 278:Src/ax_12a.c  **** uint8_t AX_Compute_Checksum(uint8_t *data_blk_ptr, uint16_t data_blk_size){
 1062              		.loc 1 278 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 16
 1065              		@ frame_needed = 1, uses_anonymous_args = 0
 1066              		@ link register save eliminated.
 1067 0000 80B4     		push	{r7}
 1068              	.LCFI50:
 1069              		.cfi_def_cfa_offset 4
 1070              		.cfi_offset 7, -4
 1071 0002 85B0     		sub	sp, sp, #20
 1072              	.LCFI51:
 1073              		.cfi_def_cfa_offset 24
 1074 0004 00AF     		add	r7, sp, #0
 1075              	.LCFI52:
 1076              		.cfi_def_cfa_register 7
 1077 0006 7860     		str	r0, [r7, #4]
 1078 0008 0B46     		mov	r3, r1
 1079 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 279:Src/ax_12a.c  ****   uint8_t checksum = 0;
 1080              		.loc 1 279 0
 1081 000c 0023     		movs	r3, #0
 1082 000e FB73     		strb	r3, [r7, #15]
 280:Src/ax_12a.c  ****   uint16_t i;
 281:Src/ax_12a.c  ****   for(i=0; i < data_blk_size; i++){
 1083              		.loc 1 281 0
 1084 0010 0023     		movs	r3, #0
 1085 0012 BB81     		strh	r3, [r7, #12]	@ movhi
 1086 0014 09E0     		b	.L60
 1087              	.L61:
 282:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 1088              		.loc 1 282 0 discriminator 3
 1089 0016 BB89     		ldrh	r3, [r7, #12]
 1090 0018 7A68     		ldr	r2, [r7, #4]
 1091 001a 1344     		add	r3, r3, r2
 1092 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1093 001e FB7B     		ldrb	r3, [r7, #15]
 1094 0020 1344     		add	r3, r3, r2
 1095 0022 FB73     		strb	r3, [r7, #15]
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 1096              		.loc 1 281 0 discriminator 3
 1097 0024 BB89     		ldrh	r3, [r7, #12]
 1098 0026 0133     		adds	r3, r3, #1
 1099 0028 BB81     		strh	r3, [r7, #12]	@ movhi
 1100              	.L60:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 1101              		.loc 1 281 0 is_stmt 0 discriminator 1
 1102 002a BA89     		ldrh	r2, [r7, #12]
 1103 002c 7B88     		ldrh	r3, [r7, #2]
 1104 002e 9A42     		cmp	r2, r3
 1105 0030 F1D3     		bcc	.L61
 283:Src/ax_12a.c  ****   }
ARM GAS  /tmp/ccpqqMQi.s 			page 25


 284:Src/ax_12a.c  ****   return ~checksum;
 1106              		.loc 1 284 0 is_stmt 1
 1107 0032 FB7B     		ldrb	r3, [r7, #15]
 1108 0034 DB43     		mvns	r3, r3
 1109 0036 DBB2     		uxtb	r3, r3
 285:Src/ax_12a.c  **** }
 1110              		.loc 1 285 0
 1111 0038 1846     		mov	r0, r3
 1112 003a 1437     		adds	r7, r7, #20
 1113              	.LCFI53:
 1114              		.cfi_def_cfa_offset 4
 1115 003c BD46     		mov	sp, r7
 1116              	.LCFI54:
 1117              		.cfi_def_cfa_register 13
 1118              		@ sp needed
 1119 003e 5DF8047B 		ldr	r7, [sp], #4
 1120              	.LCFI55:
 1121              		.cfi_restore 7
 1122              		.cfi_def_cfa_offset 0
 1123 0042 7047     		bx	lr
 1124              		.cfi_endproc
 1125              	.LFE12:
 1127              		.section	.text.AX_Get_Error,"ax",%progbits
 1128              		.align	1
 1129              		.global	AX_Get_Error
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu fpv4-sp-d16
 1135              	AX_Get_Error:
 1136              	.LFB13:
 286:Src/ax_12a.c  **** 
 287:Src/ax_12a.c  **** //======================================
 288:Src/ax_12a.c  **** //         ERROR HANDLING  
 289:Src/ax_12a.c  **** //======================================
 290:Src/ax_12a.c  **** uint16_t AX_Get_Error(){
 1137              		.loc 1 290 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 1, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142 0000 80B4     		push	{r7}
 1143              	.LCFI56:
 1144              		.cfi_def_cfa_offset 4
 1145              		.cfi_offset 7, -4
 1146 0002 00AF     		add	r7, sp, #0
 1147              	.LCFI57:
 1148              		.cfi_def_cfa_register 7
 291:Src/ax_12a.c  ****   return err;
 1149              		.loc 1 291 0
 1150 0004 034B     		ldr	r3, .L65
 1151 0006 1B88     		ldrh	r3, [r3]
 292:Src/ax_12a.c  **** }
 1152              		.loc 1 292 0
 1153 0008 1846     		mov	r0, r3
 1154 000a BD46     		mov	sp, r7
 1155              	.LCFI58:
ARM GAS  /tmp/ccpqqMQi.s 			page 26


 1156              		.cfi_def_cfa_register 13
 1157              		@ sp needed
 1158 000c 5DF8047B 		ldr	r7, [sp], #4
 1159              	.LCFI59:
 1160              		.cfi_restore 7
 1161              		.cfi_def_cfa_offset 0
 1162 0010 7047     		bx	lr
 1163              	.L66:
 1164 0012 00BF     		.align	2
 1165              	.L65:
 1166 0014 00000000 		.word	err
 1167              		.cfi_endproc
 1168              	.LFE13:
 1170              		.section	.text.AX_Check_Status,"ax",%progbits
 1171              		.align	1
 1172              		.global	AX_Check_Status
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu fpv4-sp-d16
 1178              	AX_Check_Status:
 1179              	.LFB14:
 293:Src/ax_12a.c  **** 
 294:Src/ax_12a.c  **** uint8_t AX_Check_Status(AX *servo){
 1180              		.loc 1 294 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 8
 1183              		@ frame_needed = 1, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185 0000 80B4     		push	{r7}
 1186              	.LCFI60:
 1187              		.cfi_def_cfa_offset 4
 1188              		.cfi_offset 7, -4
 1189 0002 83B0     		sub	sp, sp, #12
 1190              	.LCFI61:
 1191              		.cfi_def_cfa_offset 16
 1192 0004 00AF     		add	r7, sp, #0
 1193              	.LCFI62:
 1194              		.cfi_def_cfa_register 7
 1195 0006 7860     		str	r0, [r7, #4]
 295:Src/ax_12a.c  ****   if(AX_STATUS_ERROR(servo->interface->status.err) != 0){
 1196              		.loc 1 295 0
 1197 0008 7B68     		ldr	r3, [r7, #4]
 1198 000a 5B68     		ldr	r3, [r3, #4]
 1199 000c 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1200 0010 03F03F03 		and	r3, r3, #63
 1201 0014 002B     		cmp	r3, #0
 1202 0016 0FD0     		beq	.L68
 296:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 1203              		.loc 1 296 0
 1204 0018 7B68     		ldr	r3, [r7, #4]
 1205 001a 5B68     		ldr	r3, [r3, #4]
 1206 001c 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 1207 0020 1BB2     		sxth	r3, r3
 1208 0022 03F03F03 		and	r3, r3, #63
 1209 0026 1BB2     		sxth	r3, r3
 1210 0028 43F40073 		orr	r3, r3, #512
ARM GAS  /tmp/ccpqqMQi.s 			page 27


 1211 002c 1BB2     		sxth	r3, r3
 1212 002e 9AB2     		uxth	r2, r3
 1213 0030 054B     		ldr	r3, .L70
 1214 0032 1A80     		strh	r2, [r3]	@ movhi
 297:Src/ax_12a.c  ****     return 1;
 1215              		.loc 1 297 0
 1216 0034 0123     		movs	r3, #1
 1217 0036 00E0     		b	.L69
 1218              	.L68:
 298:Src/ax_12a.c  ****   }
 299:Src/ax_12a.c  ****   return 0;
 1219              		.loc 1 299 0
 1220 0038 0023     		movs	r3, #0
 1221              	.L69:
 300:Src/ax_12a.c  **** }
 1222              		.loc 1 300 0
 1223 003a 1846     		mov	r0, r3
 1224 003c 0C37     		adds	r7, r7, #12
 1225              	.LCFI63:
 1226              		.cfi_def_cfa_offset 4
 1227 003e BD46     		mov	sp, r7
 1228              	.LCFI64:
 1229              		.cfi_def_cfa_register 13
 1230              		@ sp needed
 1231 0040 5DF8047B 		ldr	r7, [sp], #4
 1232              	.LCFI65:
 1233              		.cfi_restore 7
 1234              		.cfi_def_cfa_offset 0
 1235 0044 7047     		bx	lr
 1236              	.L71:
 1237 0046 00BF     		.align	2
 1238              	.L70:
 1239 0048 00000000 		.word	err
 1240              		.cfi_endproc
 1241              	.LFE14:
 1243              		.section	.text.AX_Ping,"ax",%progbits
 1244              		.align	1
 1245              		.global	AX_Ping
 1246              		.syntax unified
 1247              		.thumb
 1248              		.thumb_func
 1249              		.fpu fpv4-sp-d16
 1251              	AX_Ping:
 1252              	.LFB15:
 301:Src/ax_12a.c  **** 
 302:Src/ax_12a.c  **** //======================================
 303:Src/ax_12a.c  **** //         INSTRUCTION SET   
 304:Src/ax_12a.c  **** //======================================
 305:Src/ax_12a.c  **** uint8_t AX_Ping(AX *servo){
 1253              		.loc 1 305 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 16
 1256              		@ frame_needed = 1, uses_anonymous_args = 0
 1257 0000 80B5     		push	{r7, lr}
 1258              	.LCFI66:
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 7, -8
ARM GAS  /tmp/ccpqqMQi.s 			page 28


 1261              		.cfi_offset 14, -4
 1262 0002 84B0     		sub	sp, sp, #16
 1263              	.LCFI67:
 1264              		.cfi_def_cfa_offset 24
 1265 0004 00AF     		add	r7, sp, #0
 1266              	.LCFI68:
 1267              		.cfi_def_cfa_register 7
 1268 0006 7860     		str	r0, [r7, #4]
 306:Src/ax_12a.c  ****   if(servo == 0){
 1269              		.loc 1 306 0
 1270 0008 7B68     		ldr	r3, [r7, #4]
 1271 000a 002B     		cmp	r3, #0
 1272 000c 04D1     		bne	.L73
 307:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1273              		.loc 1 307 0
 1274 000e 174B     		ldr	r3, .L78
 1275 0010 0022     		movs	r2, #0
 1276 0012 1A80     		strh	r2, [r3]	@ movhi
 308:Src/ax_12a.c  ****     return 1;
 1277              		.loc 1 308 0
 1278 0014 0123     		movs	r3, #1
 1279 0016 25E0     		b	.L77
 1280              	.L73:
 309:Src/ax_12a.c  ****   }
 310:Src/ax_12a.c  ****   
 311:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 312:Src/ax_12a.c  ****   packet.id = servo->id;
 1281              		.loc 1 312 0
 1282 0018 7B68     		ldr	r3, [r7, #4]
 1283 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1284 001c 3B72     		strb	r3, [r7, #8]
 313:Src/ax_12a.c  ****   packet.instruction = AX_PING;
 1285              		.loc 1 313 0
 1286 001e 0123     		movs	r3, #1
 1287 0020 7B72     		strb	r3, [r7, #9]
 314:Src/ax_12a.c  ****   packet.nb_params = 0;
 1288              		.loc 1 314 0
 1289 0022 0023     		movs	r3, #0
 1290 0024 BB72     		strb	r3, [r7, #10]
 315:Src/ax_12a.c  ****   packet.params = 0;
 1291              		.loc 1 315 0
 1292 0026 0023     		movs	r3, #0
 1293 0028 FB60     		str	r3, [r7, #12]
 316:Src/ax_12a.c  **** 
 317:Src/ax_12a.c  ****   //Sending the instruction
 318:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1294              		.loc 1 318 0
 1295 002a 7B68     		ldr	r3, [r7, #4]
 1296 002c 5B68     		ldr	r3, [r3, #4]
 1297 002e 07F10801 		add	r1, r7, #8
 1298 0032 0122     		movs	r2, #1
 1299 0034 1846     		mov	r0, r3
 1300 0036 FFF7FEFF 		bl	AX_Send
 1301 003a 0346     		mov	r3, r0
 1302 003c 012B     		cmp	r3, #1
 1303 003e 01D1     		bne	.L75
 319:Src/ax_12a.c  ****     return 1;
ARM GAS  /tmp/ccpqqMQi.s 			page 29


 1304              		.loc 1 319 0
 1305 0040 0123     		movs	r3, #1
 1306 0042 0FE0     		b	.L77
 1307              	.L75:
 320:Src/ax_12a.c  ****   }
 321:Src/ax_12a.c  **** 
 322:Src/ax_12a.c  ****   //Receiving status
 323:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1308              		.loc 1 323 0
 1309 0044 7B68     		ldr	r3, [r7, #4]
 1310 0046 5B68     		ldr	r3, [r3, #4]
 1311 0048 0122     		movs	r2, #1
 1312 004a 0621     		movs	r1, #6
 1313 004c 1846     		mov	r0, r3
 1314 004e FFF7FEFF 		bl	AX_Receive
 1315 0052 0346     		mov	r3, r0
 1316 0054 012B     		cmp	r3, #1
 1317 0056 01D1     		bne	.L76
 324:Src/ax_12a.c  ****     return 1;
 1318              		.loc 1 324 0
 1319 0058 0123     		movs	r3, #1
 1320 005a 03E0     		b	.L77
 1321              	.L76:
 325:Src/ax_12a.c  ****   }
 326:Src/ax_12a.c  **** 
 327:Src/ax_12a.c  ****   //Vérification de la réponse
 328:Src/ax_12a.c  ****   return AX_Check_Status(servo);
 1322              		.loc 1 328 0
 1323 005c 7868     		ldr	r0, [r7, #4]
 1324 005e FFF7FEFF 		bl	AX_Check_Status
 1325 0062 0346     		mov	r3, r0
 1326              	.L77:
 329:Src/ax_12a.c  **** }
 1327              		.loc 1 329 0 discriminator 1
 1328 0064 1846     		mov	r0, r3
 1329 0066 1037     		adds	r7, r7, #16
 1330              	.LCFI69:
 1331              		.cfi_def_cfa_offset 8
 1332 0068 BD46     		mov	sp, r7
 1333              	.LCFI70:
 1334              		.cfi_def_cfa_register 13
 1335              		@ sp needed
 1336 006a 80BD     		pop	{r7, pc}
 1337              	.L79:
 1338              		.align	2
 1339              	.L78:
 1340 006c 00000000 		.word	err
 1341              		.cfi_endproc
 1342              	.LFE15:
 1344              		.section	.text.AX_Discover,"ax",%progbits
 1345              		.align	1
 1346              		.global	AX_Discover
 1347              		.syntax unified
 1348              		.thumb
 1349              		.thumb_func
 1350              		.fpu fpv4-sp-d16
 1352              	AX_Discover:
ARM GAS  /tmp/ccpqqMQi.s 			page 30


 1353              	.LFB16:
 330:Src/ax_12a.c  **** 
 331:Src/ax_12a.c  **** uint8_t AX_Discover(AX_Interface *interface, AX *buffer_servos, uint8_t len_buffer, uint16_t *nb_se
 1354              		.loc 1 331 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 24
 1357              		@ frame_needed = 1, uses_anonymous_args = 0
 1358 0000 80B5     		push	{r7, lr}
 1359              	.LCFI71:
 1360              		.cfi_def_cfa_offset 8
 1361              		.cfi_offset 7, -8
 1362              		.cfi_offset 14, -4
 1363 0002 86B0     		sub	sp, sp, #24
 1364              	.LCFI72:
 1365              		.cfi_def_cfa_offset 32
 1366 0004 00AF     		add	r7, sp, #0
 1367              	.LCFI73:
 1368              		.cfi_def_cfa_register 7
 1369 0006 F860     		str	r0, [r7, #12]
 1370 0008 B960     		str	r1, [r7, #8]
 1371 000a 3B60     		str	r3, [r7]
 1372 000c 1346     		mov	r3, r2
 1373 000e FB71     		strb	r3, [r7, #7]
 332:Src/ax_12a.c  ****   AX servo;
 333:Src/ax_12a.c  ****   servo.interface = interface;
 1374              		.loc 1 333 0
 1375 0010 FB68     		ldr	r3, [r7, #12]
 1376 0012 7B61     		str	r3, [r7, #20]
 334:Src/ax_12a.c  **** 
 335:Src/ax_12a.c  ****   *nb_servos = 0;
 1377              		.loc 1 335 0
 1378 0014 3B68     		ldr	r3, [r7]
 1379 0016 0022     		movs	r2, #0
 1380 0018 1A80     		strh	r2, [r3]	@ movhi
 336:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1381              		.loc 1 336 0
 1382 001a 0023     		movs	r3, #0
 1383 001c 3B74     		strb	r3, [r7, #16]
 1384 001e 1BE0     		b	.L81
 1385              	.L84:
 337:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 1386              		.loc 1 337 0
 1387 0020 07F11003 		add	r3, r7, #16
 1388 0024 1846     		mov	r0, r3
 1389 0026 FFF7FEFF 		bl	AX_Ping
 1390 002a 0346     		mov	r3, r0
 1391 002c 002B     		cmp	r3, #0
 1392 002e 0FD1     		bne	.L82
 338:Src/ax_12a.c  ****       buffer_servos[(*nb_servos)++] = servo;
 1393              		.loc 1 338 0
 1394 0030 3B68     		ldr	r3, [r7]
 1395 0032 1B88     		ldrh	r3, [r3]
 1396 0034 5A1C     		adds	r2, r3, #1
 1397 0036 91B2     		uxth	r1, r2
 1398 0038 3A68     		ldr	r2, [r7]
 1399 003a 1180     		strh	r1, [r2]	@ movhi
 1400 003c DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/ccpqqMQi.s 			page 31


 1401 003e BA68     		ldr	r2, [r7, #8]
 1402 0040 1344     		add	r3, r3, r2
 1403 0042 1A46     		mov	r2, r3
 1404 0044 07F11003 		add	r3, r7, #16
 1405 0048 93E80300 		ldm	r3, {r0, r1}
 1406 004c 82E80300 		stm	r2, {r0, r1}
 1407              	.L82:
 336:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1408              		.loc 1 336 0 discriminator 2
 1409 0050 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 1410 0052 0133     		adds	r3, r3, #1
 1411 0054 DBB2     		uxtb	r3, r3
 1412 0056 3B74     		strb	r3, [r7, #16]
 1413              	.L81:
 336:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1414              		.loc 1 336 0 is_stmt 0 discriminator 1
 1415 0058 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 1416 005a FC2B     		cmp	r3, #252
 1417 005c 05D8     		bhi	.L83
 336:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 1418              		.loc 1 336 0 discriminator 3
 1419 005e 3B68     		ldr	r3, [r7]
 1420 0060 1A88     		ldrh	r2, [r3]
 1421 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1422 0064 9BB2     		uxth	r3, r3
 1423 0066 9A42     		cmp	r2, r3
 1424 0068 DAD3     		bcc	.L84
 1425              	.L83:
 339:Src/ax_12a.c  ****     }
 340:Src/ax_12a.c  ****   }
 341:Src/ax_12a.c  ****   
 342:Src/ax_12a.c  ****   return (*nb_servos > 0)?0:1;
 1426              		.loc 1 342 0 is_stmt 1
 1427 006a 3B68     		ldr	r3, [r7]
 1428 006c 1B88     		ldrh	r3, [r3]
 1429 006e 002B     		cmp	r3, #0
 1430 0070 0CBF     		ite	eq
 1431 0072 0123     		moveq	r3, #1
 1432 0074 0023     		movne	r3, #0
 1433 0076 DBB2     		uxtb	r3, r3
 343:Src/ax_12a.c  **** }
 1434              		.loc 1 343 0
 1435 0078 1846     		mov	r0, r3
 1436 007a 1837     		adds	r7, r7, #24
 1437              	.LCFI74:
 1438              		.cfi_def_cfa_offset 8
 1439 007c BD46     		mov	sp, r7
 1440              	.LCFI75:
 1441              		.cfi_def_cfa_register 13
 1442              		@ sp needed
 1443 007e 80BD     		pop	{r7, pc}
 1444              		.cfi_endproc
 1445              	.LFE16:
 1447              		.section	.text.AX_Say_Hello,"ax",%progbits
 1448              		.align	1
 1449              		.global	AX_Say_Hello
 1450              		.syntax unified
ARM GAS  /tmp/ccpqqMQi.s 			page 32


 1451              		.thumb
 1452              		.thumb_func
 1453              		.fpu fpv4-sp-d16
 1455              	AX_Say_Hello:
 1456              	.LFB17:
 344:Src/ax_12a.c  **** 
 345:Src/ax_12a.c  **** uint8_t AX_Say_Hello(AX *servo){
 1457              		.loc 1 345 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 16
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461 0000 80B5     		push	{r7, lr}
 1462              	.LCFI76:
 1463              		.cfi_def_cfa_offset 8
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 84B0     		sub	sp, sp, #16
 1467              	.LCFI77:
 1468              		.cfi_def_cfa_offset 24
 1469 0004 00AF     		add	r7, sp, #0
 1470              	.LCFI78:
 1471              		.cfi_def_cfa_register 7
 1472 0006 7860     		str	r0, [r7, #4]
 346:Src/ax_12a.c  ****   if(AX_Ping(servo) == 1){
 1473              		.loc 1 346 0
 1474 0008 7868     		ldr	r0, [r7, #4]
 1475 000a FFF7FEFF 		bl	AX_Ping
 1476 000e 0346     		mov	r3, r0
 1477 0010 012B     		cmp	r3, #1
 1478 0012 01D1     		bne	.L87
 347:Src/ax_12a.c  ****     return 1;
 1479              		.loc 1 347 0
 1480 0014 0123     		movs	r3, #1
 1481 0016 21E0     		b	.L88
 1482              	.L87:
 348:Src/ax_12a.c  ****   }
 349:Src/ax_12a.c  **** 
 350:Src/ax_12a.c  ****   uint8_t i;
 351:Src/ax_12a.c  ****   for(i = 0; i < servo->id; i++){
 1483              		.loc 1 351 0
 1484 0018 0023     		movs	r3, #0
 1485 001a FB73     		strb	r3, [r7, #15]
 1486 001c 18E0     		b	.L89
 1487              	.L90:
 352:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 1488              		.loc 1 352 0 discriminator 3
 1489 001e 0122     		movs	r2, #1
 1490 0020 0121     		movs	r1, #1
 1491 0022 7868     		ldr	r0, [r7, #4]
 1492 0024 FFF7FEFF 		bl	AX_Set_LED
 353:Src/ax_12a.c  ****     servo->interface->delay(500);
 1493              		.loc 1 353 0 discriminator 3
 1494 0028 7B68     		ldr	r3, [r7, #4]
 1495 002a 5B68     		ldr	r3, [r3, #4]
 1496 002c DB68     		ldr	r3, [r3, #12]
 1497 002e 4FF4FA70 		mov	r0, #500
 1498 0032 9847     		blx	r3
ARM GAS  /tmp/ccpqqMQi.s 			page 33


 1499              	.LVL5:
 354:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_OFF, AX_NOW);
 1500              		.loc 1 354 0 discriminator 3
 1501 0034 0122     		movs	r2, #1
 1502 0036 0021     		movs	r1, #0
 1503 0038 7868     		ldr	r0, [r7, #4]
 1504 003a FFF7FEFF 		bl	AX_Set_LED
 355:Src/ax_12a.c  ****     servo->interface->delay(500);
 1505              		.loc 1 355 0 discriminator 3
 1506 003e 7B68     		ldr	r3, [r7, #4]
 1507 0040 5B68     		ldr	r3, [r3, #4]
 1508 0042 DB68     		ldr	r3, [r3, #12]
 1509 0044 4FF4FA70 		mov	r0, #500
 1510 0048 9847     		blx	r3
 1511              	.LVL6:
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 1512              		.loc 1 351 0 discriminator 3
 1513 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1514 004c 0133     		adds	r3, r3, #1
 1515 004e FB73     		strb	r3, [r7, #15]
 1516              	.L89:
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 1517              		.loc 1 351 0 is_stmt 0 discriminator 1
 1518 0050 7B68     		ldr	r3, [r7, #4]
 1519 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1520 0054 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1521 0056 9A42     		cmp	r2, r3
 1522 0058 E1D3     		bcc	.L90
 356:Src/ax_12a.c  ****   }
 357:Src/ax_12a.c  **** 
 358:Src/ax_12a.c  ****   return 0;
 1523              		.loc 1 358 0 is_stmt 1
 1524 005a 0023     		movs	r3, #0
 1525              	.L88:
 359:Src/ax_12a.c  **** }
 1526              		.loc 1 359 0
 1527 005c 1846     		mov	r0, r3
 1528 005e 1037     		adds	r7, r7, #16
 1529              	.LCFI79:
 1530              		.cfi_def_cfa_offset 8
 1531 0060 BD46     		mov	sp, r7
 1532              	.LCFI80:
 1533              		.cfi_def_cfa_register 13
 1534              		@ sp needed
 1535 0062 80BD     		pop	{r7, pc}
 1536              		.cfi_endproc
 1537              	.LFE17:
 1539              		.section	.text.AX_Read,"ax",%progbits
 1540              		.align	1
 1541              		.global	AX_Read
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1545              		.fpu fpv4-sp-d16
 1547              	AX_Read:
 1548              	.LFB18:
 360:Src/ax_12a.c  **** 
ARM GAS  /tmp/ccpqqMQi.s 			page 34


 361:Src/ax_12a.c  **** uint8_t AX_Read(AX *servo, AX_Field field, uint16_t *data){
 1549              		.loc 1 361 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 32
 1552              		@ frame_needed = 1, uses_anonymous_args = 0
 1553 0000 80B5     		push	{r7, lr}
 1554              	.LCFI81:
 1555              		.cfi_def_cfa_offset 8
 1556              		.cfi_offset 7, -8
 1557              		.cfi_offset 14, -4
 1558 0002 88B0     		sub	sp, sp, #32
 1559              	.LCFI82:
 1560              		.cfi_def_cfa_offset 40
 1561 0004 00AF     		add	r7, sp, #0
 1562              	.LCFI83:
 1563              		.cfi_def_cfa_register 7
 1564 0006 F860     		str	r0, [r7, #12]
 1565 0008 0B46     		mov	r3, r1
 1566 000a 7A60     		str	r2, [r7, #4]
 1567 000c FB72     		strb	r3, [r7, #11]
 362:Src/ax_12a.c  ****   if(field > AX_NB_FIELDS-1){
 1568              		.loc 1 362 0
 1569 000e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1570 0010 1F2B     		cmp	r3, #31
 1571 0012 04D9     		bls	.L92
 363:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1572              		.loc 1 363 0
 1573 0014 2D4B     		ldr	r3, .L99
 1574 0016 0022     		movs	r2, #0
 1575 0018 1A80     		strh	r2, [r3]	@ movhi
 364:Src/ax_12a.c  ****     return 1;
 1576              		.loc 1 364 0
 1577 001a 0123     		movs	r3, #1
 1578 001c 52E0     		b	.L98
 1579              	.L92:
 365:Src/ax_12a.c  ****   }
 366:Src/ax_12a.c  ****   
 367:Src/ax_12a.c  ****   //Preparation of READ instruction
 368:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 369:Src/ax_12a.c  ****   packet.id = servo->id;
 1580              		.loc 1 369 0
 1581 001e FB68     		ldr	r3, [r7, #12]
 1582 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1583 0022 3B76     		strb	r3, [r7, #24]
 370:Src/ax_12a.c  ****   packet.instruction = AX_READ;
 1584              		.loc 1 370 0
 1585 0024 0223     		movs	r3, #2
 1586 0026 7B76     		strb	r3, [r7, #25]
 371:Src/ax_12a.c  ****   packet.nb_params = 2;
 1587              		.loc 1 371 0
 1588 0028 0223     		movs	r3, #2
 1589 002a BB76     		strb	r3, [r7, #26]
 372:Src/ax_12a.c  ****   uint8_t params[2] = {field_addr[field], field_length[field]};
 1590              		.loc 1 372 0
 1591 002c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1592 002e 284A     		ldr	r2, .L99+4
 1593 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccpqqMQi.s 			page 35


 1594 0032 3B75     		strb	r3, [r7, #20]
 1595 0034 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1596 0036 274A     		ldr	r2, .L99+8
 1597 0038 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1598 003a 7B75     		strb	r3, [r7, #21]
 373:Src/ax_12a.c  ****   packet.params = params;
 1599              		.loc 1 373 0
 1600 003c 07F11403 		add	r3, r7, #20
 1601 0040 FB61     		str	r3, [r7, #28]
 374:Src/ax_12a.c  **** 
 375:Src/ax_12a.c  ****   //Sending the instruction
 376:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1602              		.loc 1 376 0
 1603 0042 FB68     		ldr	r3, [r7, #12]
 1604 0044 5B68     		ldr	r3, [r3, #4]
 1605 0046 07F11801 		add	r1, r7, #24
 1606 004a 0122     		movs	r2, #1
 1607 004c 1846     		mov	r0, r3
 1608 004e FFF7FEFF 		bl	AX_Send
 1609 0052 0346     		mov	r3, r0
 1610 0054 012B     		cmp	r3, #1
 1611 0056 01D1     		bne	.L94
 377:Src/ax_12a.c  ****     return 1;
 1612              		.loc 1 377 0
 1613 0058 0123     		movs	r3, #1
 1614 005a 33E0     		b	.L98
 1615              	.L94:
 378:Src/ax_12a.c  ****   }
 379:Src/ax_12a.c  ****   
 380:Src/ax_12a.c  ****   //Receiving status packet
 381:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6+field_length[field], AX_DEFAULT_TIMEOUT) == 1){
 1616              		.loc 1 381 0
 1617 005c FB68     		ldr	r3, [r7, #12]
 1618 005e 5868     		ldr	r0, [r3, #4]
 1619 0060 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1620 0062 1C4A     		ldr	r2, .L99+8
 1621 0064 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1622 0066 9BB2     		uxth	r3, r3
 1623 0068 0633     		adds	r3, r3, #6
 1624 006a 9BB2     		uxth	r3, r3
 1625 006c 0122     		movs	r2, #1
 1626 006e 1946     		mov	r1, r3
 1627 0070 FFF7FEFF 		bl	AX_Receive
 1628 0074 0346     		mov	r3, r0
 1629 0076 012B     		cmp	r3, #1
 1630 0078 01D1     		bne	.L95
 382:Src/ax_12a.c  ****     return 1;
 1631              		.loc 1 382 0
 1632 007a 0123     		movs	r3, #1
 1633 007c 22E0     		b	.L98
 1634              	.L95:
 383:Src/ax_12a.c  ****   }
 384:Src/ax_12a.c  **** 
 385:Src/ax_12a.c  ****   //Checking for errors
 386:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 1635              		.loc 1 386 0
 1636 007e F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccpqqMQi.s 			page 36


 1637 0080 FFF7FEFF 		bl	AX_Check_Status
 1638 0084 0346     		mov	r3, r0
 1639 0086 012B     		cmp	r3, #1
 1640 0088 01D1     		bne	.L96
 387:Src/ax_12a.c  ****     return 1;
 1641              		.loc 1 387 0
 1642 008a 0123     		movs	r3, #1
 1643 008c 1AE0     		b	.L98
 1644              	.L96:
 388:Src/ax_12a.c  ****   }
 389:Src/ax_12a.c  ****   
 390:Src/ax_12a.c  ****   //Gathering data
 391:Src/ax_12a.c  ****   *data = servo->interface->status.params[0];
 1645              		.loc 1 391 0
 1646 008e FB68     		ldr	r3, [r7, #12]
 1647 0090 5B68     		ldr	r3, [r3, #4]
 1648 0092 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 1649 0096 9AB2     		uxth	r2, r3
 1650 0098 7B68     		ldr	r3, [r7, #4]
 1651 009a 1A80     		strh	r2, [r3]	@ movhi
 392:Src/ax_12a.c  ****   if(field_length[field] == 2){
 1652              		.loc 1 392 0
 1653 009c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1654 009e 0D4A     		ldr	r2, .L99+8
 1655 00a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1656 00a2 022B     		cmp	r3, #2
 1657 00a4 0DD1     		bne	.L97
 393:Src/ax_12a.c  ****     *data |= servo->interface->status.params[1] << 8;
 1658              		.loc 1 393 0
 1659 00a6 7B68     		ldr	r3, [r7, #4]
 1660 00a8 1B88     		ldrh	r3, [r3]
 1661 00aa 1AB2     		sxth	r2, r3
 1662 00ac FB68     		ldr	r3, [r7, #12]
 1663 00ae 5B68     		ldr	r3, [r3, #4]
 1664 00b0 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1665 00b4 1B02     		lsls	r3, r3, #8
 1666 00b6 1BB2     		sxth	r3, r3
 1667 00b8 1343     		orrs	r3, r3, r2
 1668 00ba 1BB2     		sxth	r3, r3
 1669 00bc 9AB2     		uxth	r2, r3
 1670 00be 7B68     		ldr	r3, [r7, #4]
 1671 00c0 1A80     		strh	r2, [r3]	@ movhi
 1672              	.L97:
 394:Src/ax_12a.c  ****   }
 395:Src/ax_12a.c  ****   return 0;
 1673              		.loc 1 395 0
 1674 00c2 0023     		movs	r3, #0
 1675              	.L98:
 396:Src/ax_12a.c  **** }
 1676              		.loc 1 396 0 discriminator 1
 1677 00c4 1846     		mov	r0, r3
 1678 00c6 2037     		adds	r7, r7, #32
 1679              	.LCFI84:
 1680              		.cfi_def_cfa_offset 8
 1681 00c8 BD46     		mov	sp, r7
 1682              	.LCFI85:
 1683              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccpqqMQi.s 			page 37


 1684              		@ sp needed
 1685 00ca 80BD     		pop	{r7, pc}
 1686              	.L100:
 1687              		.align	2
 1688              	.L99:
 1689 00cc 00000000 		.word	err
 1690 00d0 00000000 		.word	field_addr
 1691 00d4 00000000 		.word	field_length
 1692              		.cfi_endproc
 1693              	.LFE18:
 1695              		.section	.text.AX_Action,"ax",%progbits
 1696              		.align	1
 1697              		.global	AX_Action
 1698              		.syntax unified
 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv4-sp-d16
 1703              	AX_Action:
 1704              	.LFB19:
 397:Src/ax_12a.c  **** 
 398:Src/ax_12a.c  **** uint8_t AX_Action(AX *servo){
 1705              		.loc 1 398 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 16
 1708              		@ frame_needed = 1, uses_anonymous_args = 0
 1709 0000 80B5     		push	{r7, lr}
 1710              	.LCFI86:
 1711              		.cfi_def_cfa_offset 8
 1712              		.cfi_offset 7, -8
 1713              		.cfi_offset 14, -4
 1714 0002 84B0     		sub	sp, sp, #16
 1715              	.LCFI87:
 1716              		.cfi_def_cfa_offset 24
 1717 0004 00AF     		add	r7, sp, #0
 1718              	.LCFI88:
 1719              		.cfi_def_cfa_register 7
 1720 0006 7860     		str	r0, [r7, #4]
 399:Src/ax_12a.c  ****   //Preparing instruction
 400:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 401:Src/ax_12a.c  ****   packet.id = servo->id;
 1721              		.loc 1 401 0
 1722 0008 7B68     		ldr	r3, [r7, #4]
 1723 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1724 000c 3B72     		strb	r3, [r7, #8]
 402:Src/ax_12a.c  ****   packet.instruction = AX_ACTION;
 1725              		.loc 1 402 0
 1726 000e 0523     		movs	r3, #5
 1727 0010 7B72     		strb	r3, [r7, #9]
 403:Src/ax_12a.c  ****   packet.nb_params = 0;
 1728              		.loc 1 403 0
 1729 0012 0023     		movs	r3, #0
 1730 0014 BB72     		strb	r3, [r7, #10]
 404:Src/ax_12a.c  ****   packet.params = 0;
 1731              		.loc 1 404 0
 1732 0016 0023     		movs	r3, #0
 1733 0018 FB60     		str	r3, [r7, #12]
 405:Src/ax_12a.c  **** 
ARM GAS  /tmp/ccpqqMQi.s 			page 38


 406:Src/ax_12a.c  ****   //Sending instruction
 407:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1734              		.loc 1 407 0
 1735 001a 7B68     		ldr	r3, [r7, #4]
 1736 001c 5B68     		ldr	r3, [r3, #4]
 1737 001e 07F10801 		add	r1, r7, #8
 1738 0022 0122     		movs	r2, #1
 1739 0024 1846     		mov	r0, r3
 1740 0026 FFF7FEFF 		bl	AX_Send
 1741 002a 0346     		mov	r3, r0
 1742 002c 012B     		cmp	r3, #1
 1743 002e 01D1     		bne	.L102
 408:Src/ax_12a.c  ****     return 1;
 1744              		.loc 1 408 0
 1745 0030 0123     		movs	r3, #1
 1746 0032 14E0     		b	.L106
 1747              	.L102:
 409:Src/ax_12a.c  ****   }
 410:Src/ax_12a.c  **** 
 411:Src/ax_12a.c  ****   //Receiving status
 412:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1748              		.loc 1 412 0
 1749 0034 7B68     		ldr	r3, [r7, #4]
 1750 0036 5B68     		ldr	r3, [r3, #4]
 1751 0038 0122     		movs	r2, #1
 1752 003a 0621     		movs	r1, #6
 1753 003c 1846     		mov	r0, r3
 1754 003e FFF7FEFF 		bl	AX_Receive
 1755 0042 0346     		mov	r3, r0
 1756 0044 012B     		cmp	r3, #1
 1757 0046 01D1     		bne	.L104
 413:Src/ax_12a.c  ****     return 1;
 1758              		.loc 1 413 0
 1759 0048 0123     		movs	r3, #1
 1760 004a 08E0     		b	.L106
 1761              	.L104:
 414:Src/ax_12a.c  ****   }
 415:Src/ax_12a.c  **** 
 416:Src/ax_12a.c  ****   //Checking status
 417:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 1762              		.loc 1 417 0
 1763 004c 7868     		ldr	r0, [r7, #4]
 1764 004e FFF7FEFF 		bl	AX_Check_Status
 1765 0052 0346     		mov	r3, r0
 1766 0054 012B     		cmp	r3, #1
 1767 0056 01D1     		bne	.L105
 418:Src/ax_12a.c  ****     return 1;
 1768              		.loc 1 418 0
 1769 0058 0123     		movs	r3, #1
 1770 005a 00E0     		b	.L106
 1771              	.L105:
 419:Src/ax_12a.c  ****   }
 420:Src/ax_12a.c  **** 
 421:Src/ax_12a.c  ****   //Action OK
 422:Src/ax_12a.c  ****   return 0;
 1772              		.loc 1 422 0
 1773 005c 0023     		movs	r3, #0
ARM GAS  /tmp/ccpqqMQi.s 			page 39


 1774              	.L106:
 423:Src/ax_12a.c  **** }
 1775              		.loc 1 423 0 discriminator 1
 1776 005e 1846     		mov	r0, r3
 1777 0060 1037     		adds	r7, r7, #16
 1778              	.LCFI89:
 1779              		.cfi_def_cfa_offset 8
 1780 0062 BD46     		mov	sp, r7
 1781              	.LCFI90:
 1782              		.cfi_def_cfa_register 13
 1783              		@ sp needed
 1784 0064 80BD     		pop	{r7, pc}
 1785              		.cfi_endproc
 1786              	.LFE19:
 1788              		.section	.text.AX_Factory_Reset,"ax",%progbits
 1789              		.align	1
 1790              		.global	AX_Factory_Reset
 1791              		.syntax unified
 1792              		.thumb
 1793              		.thumb_func
 1794              		.fpu fpv4-sp-d16
 1796              	AX_Factory_Reset:
 1797              	.LFB20:
 424:Src/ax_12a.c  **** 
 425:Src/ax_12a.c  **** uint8_t AX_Factory_Reset(AX *servo){
 1798              		.loc 1 425 0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 16
 1801              		@ frame_needed = 1, uses_anonymous_args = 0
 1802 0000 80B5     		push	{r7, lr}
 1803              	.LCFI91:
 1804              		.cfi_def_cfa_offset 8
 1805              		.cfi_offset 7, -8
 1806              		.cfi_offset 14, -4
 1807 0002 84B0     		sub	sp, sp, #16
 1808              	.LCFI92:
 1809              		.cfi_def_cfa_offset 24
 1810 0004 00AF     		add	r7, sp, #0
 1811              	.LCFI93:
 1812              		.cfi_def_cfa_register 7
 1813 0006 7860     		str	r0, [r7, #4]
 426:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 427:Src/ax_12a.c  ****   packet.id = servo->id;
 1814              		.loc 1 427 0
 1815 0008 7B68     		ldr	r3, [r7, #4]
 1816 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1817 000c 3B72     		strb	r3, [r7, #8]
 428:Src/ax_12a.c  ****   packet.instruction = AX_FACTORY_RESET;
 1818              		.loc 1 428 0
 1819 000e 0623     		movs	r3, #6
 1820 0010 7B72     		strb	r3, [r7, #9]
 429:Src/ax_12a.c  ****   packet.nb_params = 0;
 1821              		.loc 1 429 0
 1822 0012 0023     		movs	r3, #0
 1823 0014 BB72     		strb	r3, [r7, #10]
 430:Src/ax_12a.c  **** 
 431:Src/ax_12a.c  ****   //Envoi de l'instruction
ARM GAS  /tmp/ccpqqMQi.s 			page 40


 432:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1824              		.loc 1 432 0
 1825 0016 7B68     		ldr	r3, [r7, #4]
 1826 0018 5B68     		ldr	r3, [r3, #4]
 1827 001a 07F10801 		add	r1, r7, #8
 1828 001e 0122     		movs	r2, #1
 1829 0020 1846     		mov	r0, r3
 1830 0022 FFF7FEFF 		bl	AX_Send
 1831 0026 0346     		mov	r3, r0
 1832 0028 012B     		cmp	r3, #1
 1833 002a 01D1     		bne	.L108
 433:Src/ax_12a.c  ****     return 1;
 1834              		.loc 1 433 0
 1835 002c 0123     		movs	r3, #1
 1836 002e 06E0     		b	.L110
 1837              	.L108:
 434:Src/ax_12a.c  ****   }
 435:Src/ax_12a.c  **** 
 436:Src/ax_12a.c  ****   //Attente de la réinitialisation
 437:Src/ax_12a.c  ****   servo->interface->delay(5000);
 1838              		.loc 1 437 0
 1839 0030 7B68     		ldr	r3, [r7, #4]
 1840 0032 5B68     		ldr	r3, [r3, #4]
 1841 0034 DB68     		ldr	r3, [r3, #12]
 1842 0036 41F28830 		movw	r0, #5000
 1843 003a 9847     		blx	r3
 1844              	.LVL7:
 438:Src/ax_12a.c  ****   
 439:Src/ax_12a.c  ****   return 0;
 1845              		.loc 1 439 0
 1846 003c 0023     		movs	r3, #0
 1847              	.L110:
 440:Src/ax_12a.c  **** }
 1848              		.loc 1 440 0 discriminator 1
 1849 003e 1846     		mov	r0, r3
 1850 0040 1037     		adds	r7, r7, #16
 1851              	.LCFI94:
 1852              		.cfi_def_cfa_offset 8
 1853 0042 BD46     		mov	sp, r7
 1854              	.LCFI95:
 1855              		.cfi_def_cfa_register 13
 1856              		@ sp needed
 1857 0044 80BD     		pop	{r7, pc}
 1858              		.cfi_endproc
 1859              	.LFE20:
 1861              		.section	.text.AX_Write,"ax",%progbits
 1862              		.align	1
 1863              		.global	AX_Write
 1864              		.syntax unified
 1865              		.thumb
 1866              		.thumb_func
 1867              		.fpu fpv4-sp-d16
 1869              	AX_Write:
 1870              	.LFB21:
 441:Src/ax_12a.c  **** 
 442:Src/ax_12a.c  **** uint8_t AX_Write(AX *servo, AX_Field field, uint8_t *data, uint8_t size, uint8_t now){
 1871              		.loc 1 442 0
ARM GAS  /tmp/ccpqqMQi.s 			page 41


 1872              		.cfi_startproc
 1873              		@ args = 4, pretend = 0, frame = 24
 1874              		@ frame_needed = 1, uses_anonymous_args = 0
 1875 0000 80B5     		push	{r7, lr}
 1876              	.LCFI96:
 1877              		.cfi_def_cfa_offset 8
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
 1880 0002 86B0     		sub	sp, sp, #24
 1881              	.LCFI97:
 1882              		.cfi_def_cfa_offset 32
 1883 0004 00AF     		add	r7, sp, #0
 1884              	.LCFI98:
 1885              		.cfi_def_cfa_register 7
 1886 0006 F860     		str	r0, [r7, #12]
 1887 0008 7A60     		str	r2, [r7, #4]
 1888 000a 1A46     		mov	r2, r3
 1889 000c 0B46     		mov	r3, r1
 1890 000e FB72     		strb	r3, [r7, #11]
 1891 0010 1346     		mov	r3, r2
 1892 0012 BB72     		strb	r3, [r7, #10]
 443:Src/ax_12a.c  ****   if(servo == 0 || field > (AX_NB_FIELDS-1) || ((6+size+1) > AX_BUFFER_SIZE)){
 1893              		.loc 1 443 0
 1894 0014 FB68     		ldr	r3, [r7, #12]
 1895 0016 002B     		cmp	r3, #0
 1896 0018 06D0     		beq	.L112
 1897              		.loc 1 443 0 is_stmt 0 discriminator 1
 1898 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1899 001c 1F2B     		cmp	r3, #31
 1900 001e 03D8     		bhi	.L112
 1901              		.loc 1 443 0 discriminator 2
 1902 0020 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1903 0022 0733     		adds	r3, r3, #7
 1904 0024 202B     		cmp	r3, #32
 1905 0026 01DD     		ble	.L113
 1906              	.L112:
 444:Src/ax_12a.c  ****     return 1;
 1907              		.loc 1 444 0 is_stmt 1
 1908 0028 0123     		movs	r3, #1
 1909 002a 4CE0     		b	.L114
 1910              	.L113:
 445:Src/ax_12a.c  ****   }
 446:Src/ax_12a.c  **** 
 447:Src/ax_12a.c  ****   //Preparing instruction
 448:Src/ax_12a.c  ****   static AX_Instruction_Packet packet;
 449:Src/ax_12a.c  ****   static uint8_t params[AX_BUFFER_SIZE];
 450:Src/ax_12a.c  ****   params[0] = field_addr[field];
 1911              		.loc 1 450 0
 1912 002c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1913 002e 284A     		ldr	r2, .L122
 1914 0030 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1915 0032 284B     		ldr	r3, .L122+4
 1916 0034 1A70     		strb	r2, [r3]
 451:Src/ax_12a.c  ****   int i;
 452:Src/ax_12a.c  ****   for(i=0; i < size; i++){
 1917              		.loc 1 452 0
 1918 0036 0023     		movs	r3, #0
ARM GAS  /tmp/ccpqqMQi.s 			page 42


 1919 0038 7B61     		str	r3, [r7, #20]
 1920 003a 0AE0     		b	.L115
 1921              	.L116:
 453:Src/ax_12a.c  ****     params[i+1] = data[i];
 1922              		.loc 1 453 0 discriminator 3
 1923 003c 7B69     		ldr	r3, [r7, #20]
 1924 003e 7A68     		ldr	r2, [r7, #4]
 1925 0040 1A44     		add	r2, r2, r3
 1926 0042 7B69     		ldr	r3, [r7, #20]
 1927 0044 0133     		adds	r3, r3, #1
 1928 0046 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1929 0048 224A     		ldr	r2, .L122+4
 1930 004a D154     		strb	r1, [r2, r3]
 452:Src/ax_12a.c  ****     params[i+1] = data[i];
 1931              		.loc 1 452 0 discriminator 3
 1932 004c 7B69     		ldr	r3, [r7, #20]
 1933 004e 0133     		adds	r3, r3, #1
 1934 0050 7B61     		str	r3, [r7, #20]
 1935              	.L115:
 452:Src/ax_12a.c  ****     params[i+1] = data[i];
 1936              		.loc 1 452 0 is_stmt 0 discriminator 1
 1937 0052 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1938 0054 7A69     		ldr	r2, [r7, #20]
 1939 0056 9A42     		cmp	r2, r3
 1940 0058 F0DB     		blt	.L116
 454:Src/ax_12a.c  ****   }
 455:Src/ax_12a.c  ****   packet.id = servo->id;
 1941              		.loc 1 455 0 is_stmt 1
 1942 005a FB68     		ldr	r3, [r7, #12]
 1943 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1944 005e 1E4B     		ldr	r3, .L122+8
 1945 0060 1A70     		strb	r2, [r3]
 456:Src/ax_12a.c  ****   packet.instruction = (now==AX_NOW)?AX_WRITE:AX_REG_WRITE;
 1946              		.loc 1 456 0
 1947 0062 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1948 0066 012B     		cmp	r3, #1
 1949 0068 01D1     		bne	.L117
 1950              		.loc 1 456 0 is_stmt 0 discriminator 1
 1951 006a 0322     		movs	r2, #3
 1952 006c 00E0     		b	.L118
 1953              	.L117:
 1954              		.loc 1 456 0 discriminator 2
 1955 006e 0422     		movs	r2, #4
 1956              	.L118:
 1957              		.loc 1 456 0 discriminator 4
 1958 0070 194B     		ldr	r3, .L122+8
 1959 0072 5A70     		strb	r2, [r3, #1]
 457:Src/ax_12a.c  ****   packet.nb_params = 1 + size;
 1960              		.loc 1 457 0 is_stmt 1 discriminator 4
 1961 0074 BB7A     		ldrb	r3, [r7, #10]
 1962 0076 0133     		adds	r3, r3, #1
 1963 0078 DAB2     		uxtb	r2, r3
 1964 007a 174B     		ldr	r3, .L122+8
 1965 007c 9A70     		strb	r2, [r3, #2]
 458:Src/ax_12a.c  ****   packet.params = params;
 1966              		.loc 1 458 0 discriminator 4
 1967 007e 164B     		ldr	r3, .L122+8
ARM GAS  /tmp/ccpqqMQi.s 			page 43


 1968 0080 144A     		ldr	r2, .L122+4
 1969 0082 5A60     		str	r2, [r3, #4]
 459:Src/ax_12a.c  **** 
 460:Src/ax_12a.c  ****   //Sending instruction
 461:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1970              		.loc 1 461 0 discriminator 4
 1971 0084 FB68     		ldr	r3, [r7, #12]
 1972 0086 5B68     		ldr	r3, [r3, #4]
 1973 0088 0122     		movs	r2, #1
 1974 008a 1349     		ldr	r1, .L122+8
 1975 008c 1846     		mov	r0, r3
 1976 008e FFF7FEFF 		bl	AX_Send
 1977 0092 0346     		mov	r3, r0
 1978 0094 012B     		cmp	r3, #1
 1979 0096 01D1     		bne	.L119
 462:Src/ax_12a.c  ****     return 1;
 1980              		.loc 1 462 0
 1981 0098 0123     		movs	r3, #1
 1982 009a 14E0     		b	.L114
 1983              	.L119:
 463:Src/ax_12a.c  ****   }
 464:Src/ax_12a.c  **** 
 465:Src/ax_12a.c  ****   //Receiving status
 466:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1984              		.loc 1 466 0
 1985 009c FB68     		ldr	r3, [r7, #12]
 1986 009e 5B68     		ldr	r3, [r3, #4]
 1987 00a0 0122     		movs	r2, #1
 1988 00a2 0621     		movs	r1, #6
 1989 00a4 1846     		mov	r0, r3
 1990 00a6 FFF7FEFF 		bl	AX_Receive
 1991 00aa 0346     		mov	r3, r0
 1992 00ac 012B     		cmp	r3, #1
 1993 00ae 01D1     		bne	.L120
 467:Src/ax_12a.c  ****     return 1;
 1994              		.loc 1 467 0
 1995 00b0 0123     		movs	r3, #1
 1996 00b2 08E0     		b	.L114
 1997              	.L120:
 468:Src/ax_12a.c  ****   }
 469:Src/ax_12a.c  **** 
 470:Src/ax_12a.c  ****   //Checking status
 471:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 1998              		.loc 1 471 0
 1999 00b4 F868     		ldr	r0, [r7, #12]
 2000 00b6 FFF7FEFF 		bl	AX_Check_Status
 2001 00ba 0346     		mov	r3, r0
 2002 00bc 012B     		cmp	r3, #1
 2003 00be 01D1     		bne	.L121
 472:Src/ax_12a.c  ****     return 1;
 2004              		.loc 1 472 0
 2005 00c0 0123     		movs	r3, #1
 2006 00c2 00E0     		b	.L114
 2007              	.L121:
 473:Src/ax_12a.c  ****   }
 474:Src/ax_12a.c  **** 
 475:Src/ax_12a.c  ****   //Write OK
ARM GAS  /tmp/ccpqqMQi.s 			page 44


 476:Src/ax_12a.c  ****   return 0;
 2008              		.loc 1 476 0
 2009 00c4 0023     		movs	r3, #0
 2010              	.L114:
 477:Src/ax_12a.c  **** }
 2011              		.loc 1 477 0
 2012 00c6 1846     		mov	r0, r3
 2013 00c8 1837     		adds	r7, r7, #24
 2014              	.LCFI99:
 2015              		.cfi_def_cfa_offset 8
 2016 00ca BD46     		mov	sp, r7
 2017              	.LCFI100:
 2018              		.cfi_def_cfa_register 13
 2019              		@ sp needed
 2020 00cc 80BD     		pop	{r7, pc}
 2021              	.L123:
 2022 00ce 00BF     		.align	2
 2023              	.L122:
 2024 00d0 00000000 		.word	field_addr
 2025 00d4 00000000 		.word	params.6821
 2026 00d8 00000000 		.word	packet.6820
 2027              		.cfi_endproc
 2028              	.LFE21:
 2030              		.section	.text.AX_Configure_ID,"ax",%progbits
 2031              		.align	1
 2032              		.global	AX_Configure_ID
 2033              		.syntax unified
 2034              		.thumb
 2035              		.thumb_func
 2036              		.fpu fpv4-sp-d16
 2038              	AX_Configure_ID:
 2039              	.LFB22:
 478:Src/ax_12a.c  **** 
 479:Src/ax_12a.c  **** //======================================
 480:Src/ax_12a.c  **** //         CONFIGURATION EEPROM       
 481:Src/ax_12a.c  **** //======================================
 482:Src/ax_12a.c  **** uint8_t AX_Configure_ID(AX *servo, uint8_t id){
 2040              		.loc 1 482 0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 16
 2043              		@ frame_needed = 1, uses_anonymous_args = 0
 2044 0000 80B5     		push	{r7, lr}
 2045              	.LCFI101:
 2046              		.cfi_def_cfa_offset 8
 2047              		.cfi_offset 7, -8
 2048              		.cfi_offset 14, -4
 2049 0002 86B0     		sub	sp, sp, #24
 2050              	.LCFI102:
 2051              		.cfi_def_cfa_offset 32
 2052 0004 02AF     		add	r7, sp, #8
 2053              	.LCFI103:
 2054              		.cfi_def_cfa 7, 24
 2055 0006 7860     		str	r0, [r7, #4]
 2056 0008 0B46     		mov	r3, r1
 2057 000a FB70     		strb	r3, [r7, #3]
 483:Src/ax_12a.c  ****   if(id > 252){
 2058              		.loc 1 483 0
ARM GAS  /tmp/ccpqqMQi.s 			page 45


 2059 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2060 000e FC2B     		cmp	r3, #252
 2061 0010 04D9     		bls	.L125
 484:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2062              		.loc 1 484 0
 2063 0012 0C4B     		ldr	r3, .L127
 2064 0014 0022     		movs	r2, #0
 2065 0016 1A80     		strh	r2, [r3]	@ movhi
 485:Src/ax_12a.c  ****     return 1;
 2066              		.loc 1 485 0
 2067 0018 0123     		movs	r3, #1
 2068 001a 0FE0     		b	.L126
 2069              	.L125:
 486:Src/ax_12a.c  ****   }
 487:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ID, &id, 1, AX_NOW);
 2070              		.loc 1 487 0
 2071 001c FA1C     		adds	r2, r7, #3
 2072 001e 0123     		movs	r3, #1
 2073 0020 0093     		str	r3, [sp]
 2074 0022 0123     		movs	r3, #1
 2075 0024 0021     		movs	r1, #0
 2076 0026 7868     		ldr	r0, [r7, #4]
 2077 0028 FFF7FEFF 		bl	AX_Write
 2078 002c 0346     		mov	r3, r0
 2079 002e FB73     		strb	r3, [r7, #15]
 488:Src/ax_12a.c  ****   servo->interface->delay(10);
 2080              		.loc 1 488 0
 2081 0030 7B68     		ldr	r3, [r7, #4]
 2082 0032 5B68     		ldr	r3, [r3, #4]
 2083 0034 DB68     		ldr	r3, [r3, #12]
 2084 0036 0A20     		movs	r0, #10
 2085 0038 9847     		blx	r3
 2086              	.LVL8:
 489:Src/ax_12a.c  ****   return r;
 2087              		.loc 1 489 0
 2088 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2089              	.L126:
 490:Src/ax_12a.c  **** }
 2090              		.loc 1 490 0
 2091 003c 1846     		mov	r0, r3
 2092 003e 1037     		adds	r7, r7, #16
 2093              	.LCFI104:
 2094              		.cfi_def_cfa_offset 8
 2095 0040 BD46     		mov	sp, r7
 2096              	.LCFI105:
 2097              		.cfi_def_cfa_register 13
 2098              		@ sp needed
 2099 0042 80BD     		pop	{r7, pc}
 2100              	.L128:
 2101              		.align	2
 2102              	.L127:
 2103 0044 00000000 		.word	err
 2104              		.cfi_endproc
 2105              	.LFE22:
 2107              		.section	.text.AX_Configure_Baud_Rate,"ax",%progbits
 2108              		.align	1
 2109              		.global	AX_Configure_Baud_Rate
ARM GAS  /tmp/ccpqqMQi.s 			page 46


 2110              		.syntax unified
 2111              		.thumb
 2112              		.thumb_func
 2113              		.fpu fpv4-sp-d16
 2115              	AX_Configure_Baud_Rate:
 2116              	.LFB23:
 491:Src/ax_12a.c  **** 
 492:Src/ax_12a.c  **** uint8_t AX_Configure_Baud_Rate(AX *servo, AX_Baud_Rate baud_rate){
 2117              		.loc 1 492 0
 2118              		.cfi_startproc
 2119              		@ args = 0, pretend = 0, frame = 16
 2120              		@ frame_needed = 1, uses_anonymous_args = 0
 2121 0000 80B5     		push	{r7, lr}
 2122              	.LCFI106:
 2123              		.cfi_def_cfa_offset 8
 2124              		.cfi_offset 7, -8
 2125              		.cfi_offset 14, -4
 2126 0002 86B0     		sub	sp, sp, #24
 2127              	.LCFI107:
 2128              		.cfi_def_cfa_offset 32
 2129 0004 02AF     		add	r7, sp, #8
 2130              	.LCFI108:
 2131              		.cfi_def_cfa 7, 24
 2132 0006 7860     		str	r0, [r7, #4]
 2133 0008 0B46     		mov	r3, r1
 2134 000a FB70     		strb	r3, [r7, #3]
 493:Src/ax_12a.c  ****   if(baud_rate != AX_BAUD_RATE_9600 && baud_rate != AX_BAUD_RATE_57600 && baud_rate != AX_BAUD_RATE
 2135              		.loc 1 493 0
 2136 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2137 000e CF2B     		cmp	r3, #207
 2138 0010 0DD0     		beq	.L130
 2139              		.loc 1 493 0 is_stmt 0 discriminator 1
 2140 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2141 0014 222B     		cmp	r3, #34
 2142 0016 0AD0     		beq	.L130
 2143              		.loc 1 493 0 discriminator 2
 2144 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2145 001a 102B     		cmp	r3, #16
 2146 001c 07D0     		beq	.L130
 2147              		.loc 1 493 0 discriminator 3
 2148 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2149 0020 012B     		cmp	r3, #1
 2150 0022 04D0     		beq	.L130
 494:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2151              		.loc 1 494 0 is_stmt 1
 2152 0024 0D4B     		ldr	r3, .L133
 2153 0026 0022     		movs	r2, #0
 2154 0028 1A80     		strh	r2, [r3]	@ movhi
 495:Src/ax_12a.c  ****     return 1;
 2155              		.loc 1 495 0
 2156 002a 0123     		movs	r3, #1
 2157 002c 12E0     		b	.L132
 2158              	.L130:
 496:Src/ax_12a.c  ****   }
 497:Src/ax_12a.c  ****   uint8_t value = baud_rate;
 2159              		.loc 1 497 0
 2160 002e FB78     		ldrb	r3, [r7, #3]
ARM GAS  /tmp/ccpqqMQi.s 			page 47


 2161 0030 BB73     		strb	r3, [r7, #14]
 498:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_BAUD_RATE, &value, 1, AX_NOW);
 2162              		.loc 1 498 0
 2163 0032 07F10E02 		add	r2, r7, #14
 2164 0036 0123     		movs	r3, #1
 2165 0038 0093     		str	r3, [sp]
 2166 003a 0123     		movs	r3, #1
 2167 003c 0121     		movs	r1, #1
 2168 003e 7868     		ldr	r0, [r7, #4]
 2169 0040 FFF7FEFF 		bl	AX_Write
 2170 0044 0346     		mov	r3, r0
 2171 0046 FB73     		strb	r3, [r7, #15]
 499:Src/ax_12a.c  ****   servo->interface->delay(10);
 2172              		.loc 1 499 0
 2173 0048 7B68     		ldr	r3, [r7, #4]
 2174 004a 5B68     		ldr	r3, [r3, #4]
 2175 004c DB68     		ldr	r3, [r3, #12]
 2176 004e 0A20     		movs	r0, #10
 2177 0050 9847     		blx	r3
 2178              	.LVL9:
 500:Src/ax_12a.c  ****   return r;
 2179              		.loc 1 500 0
 2180 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2181              	.L132:
 501:Src/ax_12a.c  **** }
 2182              		.loc 1 501 0 discriminator 1
 2183 0054 1846     		mov	r0, r3
 2184 0056 1037     		adds	r7, r7, #16
 2185              	.LCFI109:
 2186              		.cfi_def_cfa_offset 8
 2187 0058 BD46     		mov	sp, r7
 2188              	.LCFI110:
 2189              		.cfi_def_cfa_register 13
 2190              		@ sp needed
 2191 005a 80BD     		pop	{r7, pc}
 2192              	.L134:
 2193              		.align	2
 2194              	.L133:
 2195 005c 00000000 		.word	err
 2196              		.cfi_endproc
 2197              	.LFE23:
 2199              		.section	.text.AX_Configure_Return_Delay_Time,"ax",%progbits
 2200              		.align	1
 2201              		.global	AX_Configure_Return_Delay_Time
 2202              		.syntax unified
 2203              		.thumb
 2204              		.thumb_func
 2205              		.fpu fpv4-sp-d16
 2207              	AX_Configure_Return_Delay_Time:
 2208              	.LFB24:
 502:Src/ax_12a.c  **** 
 503:Src/ax_12a.c  **** uint8_t AX_Configure_Return_Delay_Time(AX *servo, uint8_t delay){
 2209              		.loc 1 503 0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 16
 2212              		@ frame_needed = 1, uses_anonymous_args = 0
 2213 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccpqqMQi.s 			page 48


 2214              	.LCFI111:
 2215              		.cfi_def_cfa_offset 8
 2216              		.cfi_offset 7, -8
 2217              		.cfi_offset 14, -4
 2218 0002 86B0     		sub	sp, sp, #24
 2219              	.LCFI112:
 2220              		.cfi_def_cfa_offset 32
 2221 0004 02AF     		add	r7, sp, #8
 2222              	.LCFI113:
 2223              		.cfi_def_cfa 7, 24
 2224 0006 7860     		str	r0, [r7, #4]
 2225 0008 0B46     		mov	r3, r1
 2226 000a FB70     		strb	r3, [r7, #3]
 504:Src/ax_12a.c  ****   if(delay > 0xFE){
 2227              		.loc 1 504 0
 2228 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2229 000e FF2B     		cmp	r3, #255
 2230 0010 04D1     		bne	.L136
 505:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2231              		.loc 1 505 0
 2232 0012 0C4B     		ldr	r3, .L138
 2233 0014 0022     		movs	r2, #0
 2234 0016 1A80     		strh	r2, [r3]	@ movhi
 506:Src/ax_12a.c  ****     return 1;
 2235              		.loc 1 506 0
 2236 0018 0123     		movs	r3, #1
 2237 001a 0FE0     		b	.L137
 2238              	.L136:
 507:Src/ax_12a.c  ****   }
 508:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_DELAY_TIME, &delay, 1, AX_NOW);
 2239              		.loc 1 508 0
 2240 001c FA1C     		adds	r2, r7, #3
 2241 001e 0123     		movs	r3, #1
 2242 0020 0093     		str	r3, [sp]
 2243 0022 0123     		movs	r3, #1
 2244 0024 0221     		movs	r1, #2
 2245 0026 7868     		ldr	r0, [r7, #4]
 2246 0028 FFF7FEFF 		bl	AX_Write
 2247 002c 0346     		mov	r3, r0
 2248 002e FB73     		strb	r3, [r7, #15]
 509:Src/ax_12a.c  ****   servo->interface->delay(10);
 2249              		.loc 1 509 0
 2250 0030 7B68     		ldr	r3, [r7, #4]
 2251 0032 5B68     		ldr	r3, [r3, #4]
 2252 0034 DB68     		ldr	r3, [r3, #12]
 2253 0036 0A20     		movs	r0, #10
 2254 0038 9847     		blx	r3
 2255              	.LVL10:
 510:Src/ax_12a.c  ****   return r;
 2256              		.loc 1 510 0
 2257 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2258              	.L137:
 511:Src/ax_12a.c  **** }
 2259              		.loc 1 511 0
 2260 003c 1846     		mov	r0, r3
 2261 003e 1037     		adds	r7, r7, #16
 2262              	.LCFI114:
ARM GAS  /tmp/ccpqqMQi.s 			page 49


 2263              		.cfi_def_cfa_offset 8
 2264 0040 BD46     		mov	sp, r7
 2265              	.LCFI115:
 2266              		.cfi_def_cfa_register 13
 2267              		@ sp needed
 2268 0042 80BD     		pop	{r7, pc}
 2269              	.L139:
 2270              		.align	2
 2271              	.L138:
 2272 0044 00000000 		.word	err
 2273              		.cfi_endproc
 2274              	.LFE24:
 2276              		.section	.text.AX_Configure_Angle_Limit,"ax",%progbits
 2277              		.align	1
 2278              		.global	AX_Configure_Angle_Limit
 2279              		.syntax unified
 2280              		.thumb
 2281              		.thumb_func
 2282              		.fpu fpv4-sp-d16
 2284              	AX_Configure_Angle_Limit:
 2285              	.LFB25:
 512:Src/ax_12a.c  **** 
 513:Src/ax_12a.c  **** uint8_t AX_Configure_Angle_Limit(AX *servo, uint16_t cw_angle, uint16_t ccw_angle){
 2286              		.loc 1 513 0
 2287              		.cfi_startproc
 2288              		@ args = 0, pretend = 0, frame = 16
 2289              		@ frame_needed = 1, uses_anonymous_args = 0
 2290 0000 80B5     		push	{r7, lr}
 2291              	.LCFI116:
 2292              		.cfi_def_cfa_offset 8
 2293              		.cfi_offset 7, -8
 2294              		.cfi_offset 14, -4
 2295 0002 86B0     		sub	sp, sp, #24
 2296              	.LCFI117:
 2297              		.cfi_def_cfa_offset 32
 2298 0004 02AF     		add	r7, sp, #8
 2299              	.LCFI118:
 2300              		.cfi_def_cfa 7, 24
 2301 0006 7860     		str	r0, [r7, #4]
 2302 0008 0B46     		mov	r3, r1
 2303 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 2304 000c 1346     		mov	r3, r2	@ movhi
 2305 000e 3B80     		strh	r3, [r7]	@ movhi
 514:Src/ax_12a.c  ****   if(cw_angle > 0x3FF || ccw_angle > 0x3FF){
 2306              		.loc 1 514 0
 2307 0010 7B88     		ldrh	r3, [r7, #2]
 2308 0012 B3F5806F 		cmp	r3, #1024
 2309 0016 03D2     		bcs	.L141
 2310              		.loc 1 514 0 is_stmt 0 discriminator 1
 2311 0018 3B88     		ldrh	r3, [r7]
 2312 001a B3F5806F 		cmp	r3, #1024
 2313 001e 04D3     		bcc	.L142
 2314              	.L141:
 515:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2315              		.loc 1 515 0 is_stmt 1
 2316 0020 144B     		ldr	r3, .L145
 2317 0022 0022     		movs	r2, #0
ARM GAS  /tmp/ccpqqMQi.s 			page 50


 2318 0024 1A80     		strh	r2, [r3]	@ movhi
 516:Src/ax_12a.c  ****     return 1;
 2319              		.loc 1 516 0
 2320 0026 0123     		movs	r3, #1
 2321 0028 20E0     		b	.L144
 2322              	.L142:
 517:Src/ax_12a.c  ****   }
 518:Src/ax_12a.c  ****   uint8_t data[4] = {cw_angle&0xFF, cw_angle>>8, ccw_angle&0xFF, ccw_angle>>8};
 2323              		.loc 1 518 0
 2324 002a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2325 002c DBB2     		uxtb	r3, r3
 2326 002e 3B72     		strb	r3, [r7, #8]
 2327 0030 7B88     		ldrh	r3, [r7, #2]
 2328 0032 1B0A     		lsrs	r3, r3, #8
 2329 0034 9BB2     		uxth	r3, r3
 2330 0036 DBB2     		uxtb	r3, r3
 2331 0038 7B72     		strb	r3, [r7, #9]
 2332 003a 3B88     		ldrh	r3, [r7]	@ movhi
 2333 003c DBB2     		uxtb	r3, r3
 2334 003e BB72     		strb	r3, [r7, #10]
 2335 0040 3B88     		ldrh	r3, [r7]
 2336 0042 1B0A     		lsrs	r3, r3, #8
 2337 0044 9BB2     		uxth	r3, r3
 2338 0046 DBB2     		uxtb	r3, r3
 2339 0048 FB72     		strb	r3, [r7, #11]
 519:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_CW_ANGLE_LIMIT, data, 4, AX_NOW);
 2340              		.loc 1 519 0
 2341 004a 07F10802 		add	r2, r7, #8
 2342 004e 0123     		movs	r3, #1
 2343 0050 0093     		str	r3, [sp]
 2344 0052 0423     		movs	r3, #4
 2345 0054 0321     		movs	r1, #3
 2346 0056 7868     		ldr	r0, [r7, #4]
 2347 0058 FFF7FEFF 		bl	AX_Write
 2348 005c 0346     		mov	r3, r0
 2349 005e FB73     		strb	r3, [r7, #15]
 520:Src/ax_12a.c  ****   servo->interface->delay(10);
 2350              		.loc 1 520 0
 2351 0060 7B68     		ldr	r3, [r7, #4]
 2352 0062 5B68     		ldr	r3, [r3, #4]
 2353 0064 DB68     		ldr	r3, [r3, #12]
 2354 0066 0A20     		movs	r0, #10
 2355 0068 9847     		blx	r3
 2356              	.LVL11:
 521:Src/ax_12a.c  ****   return r;
 2357              		.loc 1 521 0
 2358 006a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2359              	.L144:
 522:Src/ax_12a.c  **** }
 2360              		.loc 1 522 0 discriminator 1
 2361 006c 1846     		mov	r0, r3
 2362 006e 1037     		adds	r7, r7, #16
 2363              	.LCFI119:
 2364              		.cfi_def_cfa_offset 8
 2365 0070 BD46     		mov	sp, r7
 2366              	.LCFI120:
 2367              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccpqqMQi.s 			page 51


 2368              		@ sp needed
 2369 0072 80BD     		pop	{r7, pc}
 2370              	.L146:
 2371              		.align	2
 2372              	.L145:
 2373 0074 00000000 		.word	err
 2374              		.cfi_endproc
 2375              	.LFE25:
 2377              		.section	.text.AX_Configure_Limit_Temperature,"ax",%progbits
 2378              		.align	1
 2379              		.global	AX_Configure_Limit_Temperature
 2380              		.syntax unified
 2381              		.thumb
 2382              		.thumb_func
 2383              		.fpu fpv4-sp-d16
 2385              	AX_Configure_Limit_Temperature:
 2386              	.LFB26:
 523:Src/ax_12a.c  **** 
 524:Src/ax_12a.c  **** uint8_t AX_Configure_Limit_Temperature(AX *servo, uint8_t temp){
 2387              		.loc 1 524 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 16
 2390              		@ frame_needed = 1, uses_anonymous_args = 0
 2391 0000 80B5     		push	{r7, lr}
 2392              	.LCFI121:
 2393              		.cfi_def_cfa_offset 8
 2394              		.cfi_offset 7, -8
 2395              		.cfi_offset 14, -4
 2396 0002 86B0     		sub	sp, sp, #24
 2397              	.LCFI122:
 2398              		.cfi_def_cfa_offset 32
 2399 0004 02AF     		add	r7, sp, #8
 2400              	.LCFI123:
 2401              		.cfi_def_cfa 7, 24
 2402 0006 7860     		str	r0, [r7, #4]
 2403 0008 0B46     		mov	r3, r1
 2404 000a FB70     		strb	r3, [r7, #3]
 525:Src/ax_12a.c  ****   if(temp > 150){
 2405              		.loc 1 525 0
 2406 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2407 000e 962B     		cmp	r3, #150
 2408 0010 04D9     		bls	.L148
 526:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2409              		.loc 1 526 0
 2410 0012 0C4B     		ldr	r3, .L150
 2411 0014 0022     		movs	r2, #0
 2412 0016 1A80     		strh	r2, [r3]	@ movhi
 527:Src/ax_12a.c  ****     return 1;
 2413              		.loc 1 527 0
 2414 0018 0123     		movs	r3, #1
 2415 001a 0FE0     		b	.L149
 2416              	.L148:
 528:Src/ax_12a.c  ****   }
 529:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_LIMIT_TEMPERATURE, &temp, 1, AX_NOW);
 2417              		.loc 1 529 0
 2418 001c FA1C     		adds	r2, r7, #3
 2419 001e 0123     		movs	r3, #1
ARM GAS  /tmp/ccpqqMQi.s 			page 52


 2420 0020 0093     		str	r3, [sp]
 2421 0022 0123     		movs	r3, #1
 2422 0024 0521     		movs	r1, #5
 2423 0026 7868     		ldr	r0, [r7, #4]
 2424 0028 FFF7FEFF 		bl	AX_Write
 2425 002c 0346     		mov	r3, r0
 2426 002e FB73     		strb	r3, [r7, #15]
 530:Src/ax_12a.c  ****   servo->interface->delay(10);
 2427              		.loc 1 530 0
 2428 0030 7B68     		ldr	r3, [r7, #4]
 2429 0032 5B68     		ldr	r3, [r3, #4]
 2430 0034 DB68     		ldr	r3, [r3, #12]
 2431 0036 0A20     		movs	r0, #10
 2432 0038 9847     		blx	r3
 2433              	.LVL12:
 531:Src/ax_12a.c  ****   return r;
 2434              		.loc 1 531 0
 2435 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2436              	.L149:
 532:Src/ax_12a.c  **** }
 2437              		.loc 1 532 0
 2438 003c 1846     		mov	r0, r3
 2439 003e 1037     		adds	r7, r7, #16
 2440              	.LCFI124:
 2441              		.cfi_def_cfa_offset 8
 2442 0040 BD46     		mov	sp, r7
 2443              	.LCFI125:
 2444              		.cfi_def_cfa_register 13
 2445              		@ sp needed
 2446 0042 80BD     		pop	{r7, pc}
 2447              	.L151:
 2448              		.align	2
 2449              	.L150:
 2450 0044 00000000 		.word	err
 2451              		.cfi_endproc
 2452              	.LFE26:
 2454              		.section	.text.AX_Configure_Lower_Limit_Voltage,"ax",%progbits
 2455              		.align	1
 2456              		.global	AX_Configure_Lower_Limit_Voltage
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu fpv4-sp-d16
 2462              	AX_Configure_Lower_Limit_Voltage:
 2463              	.LFB27:
 533:Src/ax_12a.c  **** 
 534:Src/ax_12a.c  **** uint8_t AX_Configure_Lower_Limit_Voltage(AX *servo, uint8_t voltage){
 2464              		.loc 1 534 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 16
 2467              		@ frame_needed = 1, uses_anonymous_args = 0
 2468 0000 80B5     		push	{r7, lr}
 2469              	.LCFI126:
 2470              		.cfi_def_cfa_offset 8
 2471              		.cfi_offset 7, -8
 2472              		.cfi_offset 14, -4
 2473 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccpqqMQi.s 			page 53


 2474              	.LCFI127:
 2475              		.cfi_def_cfa_offset 32
 2476 0004 02AF     		add	r7, sp, #8
 2477              	.LCFI128:
 2478              		.cfi_def_cfa 7, 24
 2479 0006 7860     		str	r0, [r7, #4]
 2480 0008 0B46     		mov	r3, r1
 2481 000a FB70     		strb	r3, [r7, #3]
 535:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2482              		.loc 1 535 0
 2483 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2484 000e 312B     		cmp	r3, #49
 2485 0010 02D9     		bls	.L153
 2486              		.loc 1 535 0 is_stmt 0 discriminator 1
 2487 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2488 0014 FA2B     		cmp	r3, #250
 2489 0016 04D9     		bls	.L154
 2490              	.L153:
 536:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2491              		.loc 1 536 0 is_stmt 1
 2492 0018 0C4B     		ldr	r3, .L156
 2493 001a 0022     		movs	r2, #0
 2494 001c 1A80     		strh	r2, [r3]	@ movhi
 537:Src/ax_12a.c  ****     return 1;
 2495              		.loc 1 537 0
 2496 001e 0123     		movs	r3, #1
 2497 0020 0FE0     		b	.L155
 2498              	.L154:
 538:Src/ax_12a.c  ****   }
 539:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_LOWER_LIMIT_VOLTAGE, &voltage, 1, AX_NOW);
 2499              		.loc 1 539 0
 2500 0022 FA1C     		adds	r2, r7, #3
 2501 0024 0123     		movs	r3, #1
 2502 0026 0093     		str	r3, [sp]
 2503 0028 0123     		movs	r3, #1
 2504 002a 0621     		movs	r1, #6
 2505 002c 7868     		ldr	r0, [r7, #4]
 2506 002e FFF7FEFF 		bl	AX_Write
 2507 0032 0346     		mov	r3, r0
 2508 0034 FB73     		strb	r3, [r7, #15]
 540:Src/ax_12a.c  ****   servo->interface->delay(10);
 2509              		.loc 1 540 0
 2510 0036 7B68     		ldr	r3, [r7, #4]
 2511 0038 5B68     		ldr	r3, [r3, #4]
 2512 003a DB68     		ldr	r3, [r3, #12]
 2513 003c 0A20     		movs	r0, #10
 2514 003e 9847     		blx	r3
 2515              	.LVL13:
 541:Src/ax_12a.c  ****   return r;
 2516              		.loc 1 541 0
 2517 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2518              	.L155:
 542:Src/ax_12a.c  **** }
 2519              		.loc 1 542 0
 2520 0042 1846     		mov	r0, r3
 2521 0044 1037     		adds	r7, r7, #16
 2522              	.LCFI129:
ARM GAS  /tmp/ccpqqMQi.s 			page 54


 2523              		.cfi_def_cfa_offset 8
 2524 0046 BD46     		mov	sp, r7
 2525              	.LCFI130:
 2526              		.cfi_def_cfa_register 13
 2527              		@ sp needed
 2528 0048 80BD     		pop	{r7, pc}
 2529              	.L157:
 2530 004a 00BF     		.align	2
 2531              	.L156:
 2532 004c 00000000 		.word	err
 2533              		.cfi_endproc
 2534              	.LFE27:
 2536              		.section	.text.AX_Configure_Upper_Limit_Voltage,"ax",%progbits
 2537              		.align	1
 2538              		.global	AX_Configure_Upper_Limit_Voltage
 2539              		.syntax unified
 2540              		.thumb
 2541              		.thumb_func
 2542              		.fpu fpv4-sp-d16
 2544              	AX_Configure_Upper_Limit_Voltage:
 2545              	.LFB28:
 543:Src/ax_12a.c  **** 
 544:Src/ax_12a.c  **** uint8_t AX_Configure_Upper_Limit_Voltage(AX *servo, uint8_t voltage){
 2546              		.loc 1 544 0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 16
 2549              		@ frame_needed = 1, uses_anonymous_args = 0
 2550 0000 80B5     		push	{r7, lr}
 2551              	.LCFI131:
 2552              		.cfi_def_cfa_offset 8
 2553              		.cfi_offset 7, -8
 2554              		.cfi_offset 14, -4
 2555 0002 86B0     		sub	sp, sp, #24
 2556              	.LCFI132:
 2557              		.cfi_def_cfa_offset 32
 2558 0004 02AF     		add	r7, sp, #8
 2559              	.LCFI133:
 2560              		.cfi_def_cfa 7, 24
 2561 0006 7860     		str	r0, [r7, #4]
 2562 0008 0B46     		mov	r3, r1
 2563 000a FB70     		strb	r3, [r7, #3]
 545:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 2564              		.loc 1 545 0
 2565 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2566 000e 312B     		cmp	r3, #49
 2567 0010 02D9     		bls	.L159
 2568              		.loc 1 545 0 is_stmt 0 discriminator 1
 2569 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2570 0014 FA2B     		cmp	r3, #250
 2571 0016 04D9     		bls	.L160
 2572              	.L159:
 546:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2573              		.loc 1 546 0 is_stmt 1
 2574 0018 0C4B     		ldr	r3, .L162
 2575 001a 0022     		movs	r2, #0
 2576 001c 1A80     		strh	r2, [r3]	@ movhi
 547:Src/ax_12a.c  ****     return 1;
ARM GAS  /tmp/ccpqqMQi.s 			page 55


 2577              		.loc 1 547 0
 2578 001e 0123     		movs	r3, #1
 2579 0020 0FE0     		b	.L161
 2580              	.L160:
 548:Src/ax_12a.c  ****   }
 549:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_UPPER_LIMIT_VOLTAGE, &voltage, 1, AX_NOW);
 2581              		.loc 1 549 0
 2582 0022 FA1C     		adds	r2, r7, #3
 2583 0024 0123     		movs	r3, #1
 2584 0026 0093     		str	r3, [sp]
 2585 0028 0123     		movs	r3, #1
 2586 002a 0721     		movs	r1, #7
 2587 002c 7868     		ldr	r0, [r7, #4]
 2588 002e FFF7FEFF 		bl	AX_Write
 2589 0032 0346     		mov	r3, r0
 2590 0034 FB73     		strb	r3, [r7, #15]
 550:Src/ax_12a.c  ****   servo->interface->delay(10);
 2591              		.loc 1 550 0
 2592 0036 7B68     		ldr	r3, [r7, #4]
 2593 0038 5B68     		ldr	r3, [r3, #4]
 2594 003a DB68     		ldr	r3, [r3, #12]
 2595 003c 0A20     		movs	r0, #10
 2596 003e 9847     		blx	r3
 2597              	.LVL14:
 551:Src/ax_12a.c  ****   return r;
 2598              		.loc 1 551 0
 2599 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2600              	.L161:
 552:Src/ax_12a.c  **** }
 2601              		.loc 1 552 0
 2602 0042 1846     		mov	r0, r3
 2603 0044 1037     		adds	r7, r7, #16
 2604              	.LCFI134:
 2605              		.cfi_def_cfa_offset 8
 2606 0046 BD46     		mov	sp, r7
 2607              	.LCFI135:
 2608              		.cfi_def_cfa_register 13
 2609              		@ sp needed
 2610 0048 80BD     		pop	{r7, pc}
 2611              	.L163:
 2612 004a 00BF     		.align	2
 2613              	.L162:
 2614 004c 00000000 		.word	err
 2615              		.cfi_endproc
 2616              	.LFE28:
 2618              		.section	.text.AX_Configure_Max_Torque,"ax",%progbits
 2619              		.align	1
 2620              		.global	AX_Configure_Max_Torque
 2621              		.syntax unified
 2622              		.thumb
 2623              		.thumb_func
 2624              		.fpu fpv4-sp-d16
 2626              	AX_Configure_Max_Torque:
 2627              	.LFB29:
 553:Src/ax_12a.c  **** 
 554:Src/ax_12a.c  **** uint8_t AX_Configure_Max_Torque(AX *servo, uint16_t max_torque){
 2628              		.loc 1 554 0
ARM GAS  /tmp/ccpqqMQi.s 			page 56


 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 16
 2631              		@ frame_needed = 1, uses_anonymous_args = 0
 2632 0000 80B5     		push	{r7, lr}
 2633              	.LCFI136:
 2634              		.cfi_def_cfa_offset 8
 2635              		.cfi_offset 7, -8
 2636              		.cfi_offset 14, -4
 2637 0002 86B0     		sub	sp, sp, #24
 2638              	.LCFI137:
 2639              		.cfi_def_cfa_offset 32
 2640 0004 02AF     		add	r7, sp, #8
 2641              	.LCFI138:
 2642              		.cfi_def_cfa 7, 24
 2643 0006 7860     		str	r0, [r7, #4]
 2644 0008 0B46     		mov	r3, r1
 2645 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 555:Src/ax_12a.c  ****   if(max_torque > 1023){
 2646              		.loc 1 555 0
 2647 000c 7B88     		ldrh	r3, [r7, #2]
 2648 000e B3F5806F 		cmp	r3, #1024
 2649 0012 04D3     		bcc	.L165
 556:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2650              		.loc 1 556 0
 2651 0014 104B     		ldr	r3, .L168
 2652 0016 0022     		movs	r2, #0
 2653 0018 1A80     		strh	r2, [r3]	@ movhi
 557:Src/ax_12a.c  ****     return 1;
 2654              		.loc 1 557 0
 2655 001a 0123     		movs	r3, #1
 2656 001c 18E0     		b	.L167
 2657              	.L165:
 558:Src/ax_12a.c  ****   }
 559:Src/ax_12a.c  ****   uint8_t data[2] = {max_torque&0xFF, max_torque>>8};
 2658              		.loc 1 559 0
 2659 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2660 0020 DBB2     		uxtb	r3, r3
 2661 0022 3B73     		strb	r3, [r7, #12]
 2662 0024 7B88     		ldrh	r3, [r7, #2]
 2663 0026 1B0A     		lsrs	r3, r3, #8
 2664 0028 9BB2     		uxth	r3, r3
 2665 002a DBB2     		uxtb	r3, r3
 2666 002c 7B73     		strb	r3, [r7, #13]
 560:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_MAX_TORQUE, data, 2, AX_NOW);
 2667              		.loc 1 560 0
 2668 002e 07F10C02 		add	r2, r7, #12
 2669 0032 0123     		movs	r3, #1
 2670 0034 0093     		str	r3, [sp]
 2671 0036 0223     		movs	r3, #2
 2672 0038 0821     		movs	r1, #8
 2673 003a 7868     		ldr	r0, [r7, #4]
 2674 003c FFF7FEFF 		bl	AX_Write
 2675 0040 0346     		mov	r3, r0
 2676 0042 FB73     		strb	r3, [r7, #15]
 561:Src/ax_12a.c  ****   servo->interface->delay(10);
 2677              		.loc 1 561 0
 2678 0044 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccpqqMQi.s 			page 57


 2679 0046 5B68     		ldr	r3, [r3, #4]
 2680 0048 DB68     		ldr	r3, [r3, #12]
 2681 004a 0A20     		movs	r0, #10
 2682 004c 9847     		blx	r3
 2683              	.LVL15:
 562:Src/ax_12a.c  ****   return r;
 2684              		.loc 1 562 0
 2685 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2686              	.L167:
 563:Src/ax_12a.c  **** }
 2687              		.loc 1 563 0 discriminator 1
 2688 0050 1846     		mov	r0, r3
 2689 0052 1037     		adds	r7, r7, #16
 2690              	.LCFI139:
 2691              		.cfi_def_cfa_offset 8
 2692 0054 BD46     		mov	sp, r7
 2693              	.LCFI140:
 2694              		.cfi_def_cfa_register 13
 2695              		@ sp needed
 2696 0056 80BD     		pop	{r7, pc}
 2697              	.L169:
 2698              		.align	2
 2699              	.L168:
 2700 0058 00000000 		.word	err
 2701              		.cfi_endproc
 2702              	.LFE29:
 2704              		.section	.text.AX_Configure_Return_Level,"ax",%progbits
 2705              		.align	1
 2706              		.global	AX_Configure_Return_Level
 2707              		.syntax unified
 2708              		.thumb
 2709              		.thumb_func
 2710              		.fpu fpv4-sp-d16
 2712              	AX_Configure_Return_Level:
 2713              	.LFB30:
 564:Src/ax_12a.c  **** 
 565:Src/ax_12a.c  **** uint8_t AX_Configure_Return_Level(AX *servo, AX_Return_Level level){
 2714              		.loc 1 565 0
 2715              		.cfi_startproc
 2716              		@ args = 0, pretend = 0, frame = 16
 2717              		@ frame_needed = 1, uses_anonymous_args = 0
 2718 0000 80B5     		push	{r7, lr}
 2719              	.LCFI141:
 2720              		.cfi_def_cfa_offset 8
 2721              		.cfi_offset 7, -8
 2722              		.cfi_offset 14, -4
 2723 0002 86B0     		sub	sp, sp, #24
 2724              	.LCFI142:
 2725              		.cfi_def_cfa_offset 32
 2726 0004 02AF     		add	r7, sp, #8
 2727              	.LCFI143:
 2728              		.cfi_def_cfa 7, 24
 2729 0006 7860     		str	r0, [r7, #4]
 2730 0008 0B46     		mov	r3, r1
 2731 000a FB70     		strb	r3, [r7, #3]
 566:Src/ax_12a.c  ****   if(level != AX_PING_RETURN && level != AX_READ_RETURN && level != AX_ALL_RETURN){
 2732              		.loc 1 566 0
ARM GAS  /tmp/ccpqqMQi.s 			page 58


 2733 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2734 000e 002B     		cmp	r3, #0
 2735 0010 0AD0     		beq	.L171
 2736              		.loc 1 566 0 is_stmt 0 discriminator 1
 2737 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2738 0014 012B     		cmp	r3, #1
 2739 0016 07D0     		beq	.L171
 2740              		.loc 1 566 0 discriminator 2
 2741 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2742 001a 022B     		cmp	r3, #2
 2743 001c 04D0     		beq	.L171
 567:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2744              		.loc 1 567 0 is_stmt 1
 2745 001e 0E4B     		ldr	r3, .L174
 2746 0020 0022     		movs	r2, #0
 2747 0022 1A80     		strh	r2, [r3]	@ movhi
 568:Src/ax_12a.c  ****     return 1;
 2748              		.loc 1 568 0
 2749 0024 0123     		movs	r3, #1
 2750 0026 12E0     		b	.L173
 2751              	.L171:
 569:Src/ax_12a.c  ****   }
 570:Src/ax_12a.c  ****   uint8_t lvl = level;
 2752              		.loc 1 570 0
 2753 0028 FB78     		ldrb	r3, [r7, #3]
 2754 002a BB73     		strb	r3, [r7, #14]
 571:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_LEVEL, &lvl, 1, AX_NOW);
 2755              		.loc 1 571 0
 2756 002c 07F10E02 		add	r2, r7, #14
 2757 0030 0123     		movs	r3, #1
 2758 0032 0093     		str	r3, [sp]
 2759 0034 0123     		movs	r3, #1
 2760 0036 0921     		movs	r1, #9
 2761 0038 7868     		ldr	r0, [r7, #4]
 2762 003a FFF7FEFF 		bl	AX_Write
 2763 003e 0346     		mov	r3, r0
 2764 0040 FB73     		strb	r3, [r7, #15]
 572:Src/ax_12a.c  ****   servo->interface->delay(10);
 2765              		.loc 1 572 0
 2766 0042 7B68     		ldr	r3, [r7, #4]
 2767 0044 5B68     		ldr	r3, [r3, #4]
 2768 0046 DB68     		ldr	r3, [r3, #12]
 2769 0048 0A20     		movs	r0, #10
 2770 004a 9847     		blx	r3
 2771              	.LVL16:
 573:Src/ax_12a.c  ****   return r;
 2772              		.loc 1 573 0
 2773 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2774              	.L173:
 574:Src/ax_12a.c  **** }
 2775              		.loc 1 574 0 discriminator 1
 2776 004e 1846     		mov	r0, r3
 2777 0050 1037     		adds	r7, r7, #16
 2778              	.LCFI144:
 2779              		.cfi_def_cfa_offset 8
 2780 0052 BD46     		mov	sp, r7
 2781              	.LCFI145:
ARM GAS  /tmp/ccpqqMQi.s 			page 59


 2782              		.cfi_def_cfa_register 13
 2783              		@ sp needed
 2784 0054 80BD     		pop	{r7, pc}
 2785              	.L175:
 2786 0056 00BF     		.align	2
 2787              	.L174:
 2788 0058 00000000 		.word	err
 2789              		.cfi_endproc
 2790              	.LFE30:
 2792              		.section	.text.AX_Configure_Alarm_LED,"ax",%progbits
 2793              		.align	1
 2794              		.global	AX_Configure_Alarm_LED
 2795              		.syntax unified
 2796              		.thumb
 2797              		.thumb_func
 2798              		.fpu fpv4-sp-d16
 2800              	AX_Configure_Alarm_LED:
 2801              	.LFB31:
 575:Src/ax_12a.c  **** 
 576:Src/ax_12a.c  **** uint8_t AX_Configure_Alarm_LED(AX *servo, AX_Status_Error errors){
 2802              		.loc 1 576 0
 2803              		.cfi_startproc
 2804              		@ args = 0, pretend = 0, frame = 16
 2805              		@ frame_needed = 1, uses_anonymous_args = 0
 2806 0000 80B5     		push	{r7, lr}
 2807              	.LCFI146:
 2808              		.cfi_def_cfa_offset 8
 2809              		.cfi_offset 7, -8
 2810              		.cfi_offset 14, -4
 2811 0002 86B0     		sub	sp, sp, #24
 2812              	.LCFI147:
 2813              		.cfi_def_cfa_offset 32
 2814 0004 02AF     		add	r7, sp, #8
 2815              	.LCFI148:
 2816              		.cfi_def_cfa 7, 24
 2817 0006 7860     		str	r0, [r7, #4]
 2818 0008 0B46     		mov	r3, r1
 2819 000a FB70     		strb	r3, [r7, #3]
 577:Src/ax_12a.c  ****   if(errors&10000000){
 2820              		.loc 1 577 0
 2821 000c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2822 000e 104B     		ldr	r3, .L180
 2823 0010 1340     		ands	r3, r3, r2
 2824 0012 002B     		cmp	r3, #0
 2825 0014 04D0     		beq	.L177
 578:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2826              		.loc 1 578 0
 2827 0016 0F4B     		ldr	r3, .L180+4
 2828 0018 0022     		movs	r2, #0
 2829 001a 1A80     		strh	r2, [r3]	@ movhi
 579:Src/ax_12a.c  ****     return 1;
 2830              		.loc 1 579 0
 2831 001c 0123     		movs	r3, #1
 2832 001e 12E0     		b	.L179
 2833              	.L177:
 580:Src/ax_12a.c  ****   }
 581:Src/ax_12a.c  ****   uint8_t value = errors;
ARM GAS  /tmp/ccpqqMQi.s 			page 60


 2834              		.loc 1 581 0
 2835 0020 FB78     		ldrb	r3, [r7, #3]
 2836 0022 BB73     		strb	r3, [r7, #14]
 582:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_LED, &value, 1, AX_NOW);
 2837              		.loc 1 582 0
 2838 0024 07F10E02 		add	r2, r7, #14
 2839 0028 0123     		movs	r3, #1
 2840 002a 0093     		str	r3, [sp]
 2841 002c 0123     		movs	r3, #1
 2842 002e 0A21     		movs	r1, #10
 2843 0030 7868     		ldr	r0, [r7, #4]
 2844 0032 FFF7FEFF 		bl	AX_Write
 2845 0036 0346     		mov	r3, r0
 2846 0038 FB73     		strb	r3, [r7, #15]
 583:Src/ax_12a.c  ****   servo->interface->delay(10);
 2847              		.loc 1 583 0
 2848 003a 7B68     		ldr	r3, [r7, #4]
 2849 003c 5B68     		ldr	r3, [r3, #4]
 2850 003e DB68     		ldr	r3, [r3, #12]
 2851 0040 0A20     		movs	r0, #10
 2852 0042 9847     		blx	r3
 2853              	.LVL17:
 584:Src/ax_12a.c  ****   return r;
 2854              		.loc 1 584 0
 2855 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2856              	.L179:
 585:Src/ax_12a.c  **** }
 2857              		.loc 1 585 0 discriminator 1
 2858 0046 1846     		mov	r0, r3
 2859 0048 1037     		adds	r7, r7, #16
 2860              	.LCFI149:
 2861              		.cfi_def_cfa_offset 8
 2862 004a BD46     		mov	sp, r7
 2863              	.LCFI150:
 2864              		.cfi_def_cfa_register 13
 2865              		@ sp needed
 2866 004c 80BD     		pop	{r7, pc}
 2867              	.L181:
 2868 004e 00BF     		.align	2
 2869              	.L180:
 2870 0050 80969800 		.word	10000000
 2871 0054 00000000 		.word	err
 2872              		.cfi_endproc
 2873              	.LFE31:
 2875              		.section	.text.AX_Configure_Alarm_Shutdown,"ax",%progbits
 2876              		.align	1
 2877              		.global	AX_Configure_Alarm_Shutdown
 2878              		.syntax unified
 2879              		.thumb
 2880              		.thumb_func
 2881              		.fpu fpv4-sp-d16
 2883              	AX_Configure_Alarm_Shutdown:
 2884              	.LFB32:
 586:Src/ax_12a.c  **** 
 587:Src/ax_12a.c  **** uint8_t AX_Configure_Alarm_Shutdown(AX *servo, AX_Status_Error errors){
 2885              		.loc 1 587 0
 2886              		.cfi_startproc
ARM GAS  /tmp/ccpqqMQi.s 			page 61


 2887              		@ args = 0, pretend = 0, frame = 16
 2888              		@ frame_needed = 1, uses_anonymous_args = 0
 2889 0000 80B5     		push	{r7, lr}
 2890              	.LCFI151:
 2891              		.cfi_def_cfa_offset 8
 2892              		.cfi_offset 7, -8
 2893              		.cfi_offset 14, -4
 2894 0002 86B0     		sub	sp, sp, #24
 2895              	.LCFI152:
 2896              		.cfi_def_cfa_offset 32
 2897 0004 02AF     		add	r7, sp, #8
 2898              	.LCFI153:
 2899              		.cfi_def_cfa 7, 24
 2900 0006 7860     		str	r0, [r7, #4]
 2901 0008 0B46     		mov	r3, r1
 2902 000a FB70     		strb	r3, [r7, #3]
 588:Src/ax_12a.c  ****   if(errors&10000000){
 2903              		.loc 1 588 0
 2904 000c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2905 000e 104B     		ldr	r3, .L186
 2906 0010 1340     		ands	r3, r3, r2
 2907 0012 002B     		cmp	r3, #0
 2908 0014 04D0     		beq	.L183
 589:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2909              		.loc 1 589 0
 2910 0016 0F4B     		ldr	r3, .L186+4
 2911 0018 0022     		movs	r2, #0
 2912 001a 1A80     		strh	r2, [r3]	@ movhi
 590:Src/ax_12a.c  ****     return 1;
 2913              		.loc 1 590 0
 2914 001c 0123     		movs	r3, #1
 2915 001e 12E0     		b	.L185
 2916              	.L183:
 591:Src/ax_12a.c  ****   }
 592:Src/ax_12a.c  ****   uint8_t value = errors;
 2917              		.loc 1 592 0
 2918 0020 FB78     		ldrb	r3, [r7, #3]
 2919 0022 BB73     		strb	r3, [r7, #14]
 593:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_SHUTDOWN, &value, 1, AX_NOW);
 2920              		.loc 1 593 0
 2921 0024 07F10E02 		add	r2, r7, #14
 2922 0028 0123     		movs	r3, #1
 2923 002a 0093     		str	r3, [sp]
 2924 002c 0123     		movs	r3, #1
 2925 002e 0B21     		movs	r1, #11
 2926 0030 7868     		ldr	r0, [r7, #4]
 2927 0032 FFF7FEFF 		bl	AX_Write
 2928 0036 0346     		mov	r3, r0
 2929 0038 FB73     		strb	r3, [r7, #15]
 594:Src/ax_12a.c  ****   servo->interface->delay(10);
 2930              		.loc 1 594 0
 2931 003a 7B68     		ldr	r3, [r7, #4]
 2932 003c 5B68     		ldr	r3, [r3, #4]
 2933 003e DB68     		ldr	r3, [r3, #12]
 2934 0040 0A20     		movs	r0, #10
 2935 0042 9847     		blx	r3
 2936              	.LVL18:
ARM GAS  /tmp/ccpqqMQi.s 			page 62


 595:Src/ax_12a.c  ****   return r;
 2937              		.loc 1 595 0
 2938 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2939              	.L185:
 596:Src/ax_12a.c  **** }
 2940              		.loc 1 596 0 discriminator 1
 2941 0046 1846     		mov	r0, r3
 2942 0048 1037     		adds	r7, r7, #16
 2943              	.LCFI154:
 2944              		.cfi_def_cfa_offset 8
 2945 004a BD46     		mov	sp, r7
 2946              	.LCFI155:
 2947              		.cfi_def_cfa_register 13
 2948              		@ sp needed
 2949 004c 80BD     		pop	{r7, pc}
 2950              	.L187:
 2951 004e 00BF     		.align	2
 2952              	.L186:
 2953 0050 80969800 		.word	10000000
 2954 0054 00000000 		.word	err
 2955              		.cfi_endproc
 2956              	.LFE32:
 2958              		.section	.text.AX_Power_On,"ax",%progbits
 2959              		.align	1
 2960              		.global	AX_Power_On
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	AX_Power_On:
 2967              	.LFB33:
 597:Src/ax_12a.c  **** 
 598:Src/ax_12a.c  **** 
 599:Src/ax_12a.c  **** //======================================
 600:Src/ax_12a.c  **** //       COMMANDES SERVOMOTEUR       
 601:Src/ax_12a.c  **** //======================================
 602:Src/ax_12a.c  **** 
 603:Src/ax_12a.c  **** uint8_t AX_Power_On(AX *servo, uint8_t now){
 2968              		.loc 1 603 0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 16
 2971              		@ frame_needed = 1, uses_anonymous_args = 0
 2972 0000 80B5     		push	{r7, lr}
 2973              	.LCFI156:
 2974              		.cfi_def_cfa_offset 8
 2975              		.cfi_offset 7, -8
 2976              		.cfi_offset 14, -4
 2977 0002 86B0     		sub	sp, sp, #24
 2978              	.LCFI157:
 2979              		.cfi_def_cfa_offset 32
 2980 0004 02AF     		add	r7, sp, #8
 2981              	.LCFI158:
 2982              		.cfi_def_cfa 7, 24
 2983 0006 7860     		str	r0, [r7, #4]
 2984 0008 0B46     		mov	r3, r1
 2985 000a FB70     		strb	r3, [r7, #3]
 604:Src/ax_12a.c  ****   uint8_t value = 1;
ARM GAS  /tmp/ccpqqMQi.s 			page 63


 2986              		.loc 1 604 0
 2987 000c 0123     		movs	r3, #1
 2988 000e FB73     		strb	r3, [r7, #15]
 605:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 2989              		.loc 1 605 0
 2990 0010 07F10F02 		add	r2, r7, #15
 2991 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2992 0016 0093     		str	r3, [sp]
 2993 0018 0123     		movs	r3, #1
 2994 001a 0E21     		movs	r1, #14
 2995 001c 7868     		ldr	r0, [r7, #4]
 2996 001e FFF7FEFF 		bl	AX_Write
 2997 0022 0346     		mov	r3, r0
 606:Src/ax_12a.c  **** }
 2998              		.loc 1 606 0
 2999 0024 1846     		mov	r0, r3
 3000 0026 1037     		adds	r7, r7, #16
 3001              	.LCFI159:
 3002              		.cfi_def_cfa_offset 8
 3003 0028 BD46     		mov	sp, r7
 3004              	.LCFI160:
 3005              		.cfi_def_cfa_register 13
 3006              		@ sp needed
 3007 002a 80BD     		pop	{r7, pc}
 3008              		.cfi_endproc
 3009              	.LFE33:
 3011              		.section	.text.AX_Power_Off,"ax",%progbits
 3012              		.align	1
 3013              		.global	AX_Power_Off
 3014              		.syntax unified
 3015              		.thumb
 3016              		.thumb_func
 3017              		.fpu fpv4-sp-d16
 3019              	AX_Power_Off:
 3020              	.LFB34:
 607:Src/ax_12a.c  **** 
 608:Src/ax_12a.c  **** uint8_t AX_Power_Off(AX *servo, uint8_t now){
 3021              		.loc 1 608 0
 3022              		.cfi_startproc
 3023              		@ args = 0, pretend = 0, frame = 16
 3024              		@ frame_needed = 1, uses_anonymous_args = 0
 3025 0000 80B5     		push	{r7, lr}
 3026              	.LCFI161:
 3027              		.cfi_def_cfa_offset 8
 3028              		.cfi_offset 7, -8
 3029              		.cfi_offset 14, -4
 3030 0002 86B0     		sub	sp, sp, #24
 3031              	.LCFI162:
 3032              		.cfi_def_cfa_offset 32
 3033 0004 02AF     		add	r7, sp, #8
 3034              	.LCFI163:
 3035              		.cfi_def_cfa 7, 24
 3036 0006 7860     		str	r0, [r7, #4]
 3037 0008 0B46     		mov	r3, r1
 3038 000a FB70     		strb	r3, [r7, #3]
 609:Src/ax_12a.c  ****   uint8_t value = 0;
 3039              		.loc 1 609 0
ARM GAS  /tmp/ccpqqMQi.s 			page 64


 3040 000c 0023     		movs	r3, #0
 3041 000e FB73     		strb	r3, [r7, #15]
 610:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 3042              		.loc 1 610 0
 3043 0010 07F10F02 		add	r2, r7, #15
 3044 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3045 0016 0093     		str	r3, [sp]
 3046 0018 0123     		movs	r3, #1
 3047 001a 0E21     		movs	r1, #14
 3048 001c 7868     		ldr	r0, [r7, #4]
 3049 001e FFF7FEFF 		bl	AX_Write
 3050 0022 0346     		mov	r3, r0
 611:Src/ax_12a.c  **** }
 3051              		.loc 1 611 0
 3052 0024 1846     		mov	r0, r3
 3053 0026 1037     		adds	r7, r7, #16
 3054              	.LCFI164:
 3055              		.cfi_def_cfa_offset 8
 3056 0028 BD46     		mov	sp, r7
 3057              	.LCFI165:
 3058              		.cfi_def_cfa_register 13
 3059              		@ sp needed
 3060 002a 80BD     		pop	{r7, pc}
 3061              		.cfi_endproc
 3062              	.LFE34:
 3064              		.section	.text.AX_Set_LED,"ax",%progbits
 3065              		.align	1
 3066              		.global	AX_Set_LED
 3067              		.syntax unified
 3068              		.thumb
 3069              		.thumb_func
 3070              		.fpu fpv4-sp-d16
 3072              	AX_Set_LED:
 3073              	.LFB35:
 612:Src/ax_12a.c  **** 
 613:Src/ax_12a.c  **** uint8_t AX_Set_LED(AX *servo, AX_LED_State state, uint8_t now){
 3074              		.loc 1 613 0
 3075              		.cfi_startproc
 3076              		@ args = 0, pretend = 0, frame = 16
 3077              		@ frame_needed = 1, uses_anonymous_args = 0
 3078 0000 80B5     		push	{r7, lr}
 3079              	.LCFI166:
 3080              		.cfi_def_cfa_offset 8
 3081              		.cfi_offset 7, -8
 3082              		.cfi_offset 14, -4
 3083 0002 86B0     		sub	sp, sp, #24
 3084              	.LCFI167:
 3085              		.cfi_def_cfa_offset 32
 3086 0004 02AF     		add	r7, sp, #8
 3087              	.LCFI168:
 3088              		.cfi_def_cfa 7, 24
 3089 0006 7860     		str	r0, [r7, #4]
 3090 0008 0B46     		mov	r3, r1
 3091 000a FB70     		strb	r3, [r7, #3]
 3092 000c 1346     		mov	r3, r2
 3093 000e BB70     		strb	r3, [r7, #2]
 614:Src/ax_12a.c  ****   if((state != AX_LED_OFF) && (state != AX_LED_ON)){
ARM GAS  /tmp/ccpqqMQi.s 			page 65


 3094              		.loc 1 614 0
 3095 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3096 0012 002B     		cmp	r3, #0
 3097 0014 07D0     		beq	.L193
 3098              		.loc 1 614 0 is_stmt 0 discriminator 1
 3099 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3100 0018 012B     		cmp	r3, #1
 3101 001a 04D0     		beq	.L193
 615:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3102              		.loc 1 615 0 is_stmt 1
 3103 001c 0A4B     		ldr	r3, .L196
 3104 001e 0022     		movs	r2, #0
 3105 0020 1A80     		strh	r2, [r3]	@ movhi
 616:Src/ax_12a.c  ****     return 1;
 3106              		.loc 1 616 0
 3107 0022 0123     		movs	r3, #1
 3108 0024 0BE0     		b	.L195
 3109              	.L193:
 617:Src/ax_12a.c  ****   }
 618:Src/ax_12a.c  ****   uint8_t value = state;
 3110              		.loc 1 618 0
 3111 0026 FB78     		ldrb	r3, [r7, #3]
 3112 0028 FB73     		strb	r3, [r7, #15]
 619:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 3113              		.loc 1 619 0
 3114 002a 07F10F02 		add	r2, r7, #15
 3115 002e BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 3116 0030 0093     		str	r3, [sp]
 3117 0032 0123     		movs	r3, #1
 3118 0034 0F21     		movs	r1, #15
 3119 0036 7868     		ldr	r0, [r7, #4]
 3120 0038 FFF7FEFF 		bl	AX_Write
 3121 003c 0346     		mov	r3, r0
 3122              	.L195:
 620:Src/ax_12a.c  **** }
 3123              		.loc 1 620 0 discriminator 1
 3124 003e 1846     		mov	r0, r3
 3125 0040 1037     		adds	r7, r7, #16
 3126              	.LCFI169:
 3127              		.cfi_def_cfa_offset 8
 3128 0042 BD46     		mov	sp, r7
 3129              	.LCFI170:
 3130              		.cfi_def_cfa_register 13
 3131              		@ sp needed
 3132 0044 80BD     		pop	{r7, pc}
 3133              	.L197:
 3134 0046 00BF     		.align	2
 3135              	.L196:
 3136 0048 00000000 		.word	err
 3137              		.cfi_endproc
 3138              	.LFE35:
 3140              		.section	.text.AX_Set_Compliance,"ax",%progbits
 3141              		.align	1
 3142              		.global	AX_Set_Compliance
 3143              		.syntax unified
 3144              		.thumb
 3145              		.thumb_func
ARM GAS  /tmp/ccpqqMQi.s 			page 66


 3146              		.fpu fpv4-sp-d16
 3148              	AX_Set_Compliance:
 3149              	.LFB36:
 621:Src/ax_12a.c  **** 
 622:Src/ax_12a.c  **** uint8_t AX_Set_Compliance(AX *servo, AX_Compliance compliance, uint8_t now){
 3150              		.loc 1 622 0
 3151              		.cfi_startproc
 3152              		@ args = 0, pretend = 0, frame = 24
 3153              		@ frame_needed = 1, uses_anonymous_args = 0
 3154 0000 80B5     		push	{r7, lr}
 3155              	.LCFI171:
 3156              		.cfi_def_cfa_offset 8
 3157              		.cfi_offset 7, -8
 3158              		.cfi_offset 14, -4
 3159 0002 88B0     		sub	sp, sp, #32
 3160              	.LCFI172:
 3161              		.cfi_def_cfa_offset 40
 3162 0004 02AF     		add	r7, sp, #8
 3163              	.LCFI173:
 3164              		.cfi_def_cfa 7, 32
 3165 0006 F860     		str	r0, [r7, #12]
 3166 0008 B960     		str	r1, [r7, #8]
 3167 000a 1346     		mov	r3, r2
 3168 000c FB71     		strb	r3, [r7, #7]
 623:Src/ax_12a.c  ****   if(compliance.ccw_slope > 6 || compliance.cw_slope > 6){
 3169              		.loc 1 623 0
 3170 000e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3171 0010 062B     		cmp	r3, #6
 3172 0012 02D8     		bhi	.L199
 3173              		.loc 1 623 0 is_stmt 0 discriminator 1
 3174 0014 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 3175 0016 062B     		cmp	r3, #6
 3176 0018 04D9     		bls	.L200
 3177              	.L199:
 624:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3178              		.loc 1 624 0 is_stmt 1
 3179 001a 0D4B     		ldr	r3, .L203
 3180 001c 0022     		movs	r2, #0
 3181 001e 1A80     		strh	r2, [r3]	@ movhi
 625:Src/ax_12a.c  ****     return 1;
 3182              		.loc 1 625 0
 3183 0020 0123     		movs	r3, #1
 3184 0022 11E0     		b	.L202
 3185              	.L200:
 626:Src/ax_12a.c  ****   }
 627:Src/ax_12a.c  ****   uint8_t data[4] = {
 628:Src/ax_12a.c  ****     compliance.cw_margin,
 3186              		.loc 1 628 0
 3187 0024 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 3188              		.loc 1 627 0
 3189 0026 3B75     		strb	r3, [r7, #20]
 629:Src/ax_12a.c  ****     compliance.ccw_margin,
 3190              		.loc 1 629 0
 3191 0028 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 3192              		.loc 1 627 0
ARM GAS  /tmp/ccpqqMQi.s 			page 67


 3193 002a 7B75     		strb	r3, [r7, #21]
 630:Src/ax_12a.c  ****     compliance.cw_slope,
 3194              		.loc 1 630 0
 3195 002c BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 3196              		.loc 1 627 0
 3197 002e BB75     		strb	r3, [r7, #22]
 631:Src/ax_12a.c  ****     compliance.ccw_slope};
 3198              		.loc 1 631 0
 3199 0030 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 3200              		.loc 1 627 0
 3201 0032 FB75     		strb	r3, [r7, #23]
 632:Src/ax_12a.c  ****   return AX_Write(servo, AX_CW_COMPLIANCE_MARGIN, data, 4, now);     
 3202              		.loc 1 632 0
 3203 0034 07F11402 		add	r2, r7, #20
 3204 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3205 003a 0093     		str	r3, [sp]
 3206 003c 0423     		movs	r3, #4
 3207 003e 1021     		movs	r1, #16
 3208 0040 F868     		ldr	r0, [r7, #12]
 3209 0042 FFF7FEFF 		bl	AX_Write
 3210 0046 0346     		mov	r3, r0
 3211              	.L202:
 633:Src/ax_12a.c  **** }
 3212              		.loc 1 633 0 discriminator 1
 3213 0048 1846     		mov	r0, r3
 3214 004a 1837     		adds	r7, r7, #24
 3215              	.LCFI174:
 3216              		.cfi_def_cfa_offset 8
 3217 004c BD46     		mov	sp, r7
 3218              	.LCFI175:
 3219              		.cfi_def_cfa_register 13
 3220              		@ sp needed
 3221 004e 80BD     		pop	{r7, pc}
 3222              	.L204:
 3223              		.align	2
 3224              	.L203:
 3225 0050 00000000 		.word	err
 3226              		.cfi_endproc
 3227              	.LFE36:
 3229              		.section	.text.AX_Set_Goal_Position,"ax",%progbits
 3230              		.align	1
 3231              		.global	AX_Set_Goal_Position
 3232              		.syntax unified
 3233              		.thumb
 3234              		.thumb_func
 3235              		.fpu fpv4-sp-d16
 3237              	AX_Set_Goal_Position:
 3238              	.LFB37:
 634:Src/ax_12a.c  **** 
 635:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Position(AX *servo, uint16_t position, uint8_t now){
 3239              		.loc 1 635 0
 3240              		.cfi_startproc
 3241              		@ args = 0, pretend = 0, frame = 16
 3242              		@ frame_needed = 1, uses_anonymous_args = 0
 3243 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccpqqMQi.s 			page 68


 3244              	.LCFI176:
 3245              		.cfi_def_cfa_offset 8
 3246              		.cfi_offset 7, -8
 3247              		.cfi_offset 14, -4
 3248 0002 86B0     		sub	sp, sp, #24
 3249              	.LCFI177:
 3250              		.cfi_def_cfa_offset 32
 3251 0004 02AF     		add	r7, sp, #8
 3252              	.LCFI178:
 3253              		.cfi_def_cfa 7, 24
 3254 0006 7860     		str	r0, [r7, #4]
 3255 0008 0B46     		mov	r3, r1
 3256 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3257 000c 1346     		mov	r3, r2
 3258 000e 7B70     		strb	r3, [r7, #1]
 636:Src/ax_12a.c  ****   if(position > 1023){
 3259              		.loc 1 636 0
 3260 0010 7B88     		ldrh	r3, [r7, #2]
 3261 0012 B3F5806F 		cmp	r3, #1024
 3262 0016 04D3     		bcc	.L206
 637:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3263              		.loc 1 637 0
 3264 0018 0D4B     		ldr	r3, .L209
 3265 001a 0022     		movs	r2, #0
 3266 001c 1A80     		strh	r2, [r3]	@ movhi
 638:Src/ax_12a.c  ****     return 1;
 3267              		.loc 1 638 0
 3268 001e 0123     		movs	r3, #1
 3269 0020 11E0     		b	.L208
 3270              	.L206:
 639:Src/ax_12a.c  ****   }
 640:Src/ax_12a.c  ****   uint8_t data[2] = {position&0xFF, position>>8};
 3271              		.loc 1 640 0
 3272 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3273 0024 DBB2     		uxtb	r3, r3
 3274 0026 3B73     		strb	r3, [r7, #12]
 3275 0028 7B88     		ldrh	r3, [r7, #2]
 3276 002a 1B0A     		lsrs	r3, r3, #8
 3277 002c 9BB2     		uxth	r3, r3
 3278 002e DBB2     		uxtb	r3, r3
 3279 0030 7B73     		strb	r3, [r7, #13]
 641:Src/ax_12a.c  ****   return AX_Write(servo, AX_GOAL_POSITION, data, 2, now);
 3280              		.loc 1 641 0
 3281 0032 07F10C02 		add	r2, r7, #12
 3282 0036 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3283 0038 0093     		str	r3, [sp]
 3284 003a 0223     		movs	r3, #2
 3285 003c 1421     		movs	r1, #20
 3286 003e 7868     		ldr	r0, [r7, #4]
 3287 0040 FFF7FEFF 		bl	AX_Write
 3288 0044 0346     		mov	r3, r0
 3289              	.L208:
 642:Src/ax_12a.c  **** }
 3290              		.loc 1 642 0 discriminator 1
 3291 0046 1846     		mov	r0, r3
 3292 0048 1037     		adds	r7, r7, #16
 3293              	.LCFI179:
ARM GAS  /tmp/ccpqqMQi.s 			page 69


 3294              		.cfi_def_cfa_offset 8
 3295 004a BD46     		mov	sp, r7
 3296              	.LCFI180:
 3297              		.cfi_def_cfa_register 13
 3298              		@ sp needed
 3299 004c 80BD     		pop	{r7, pc}
 3300              	.L210:
 3301 004e 00BF     		.align	2
 3302              	.L209:
 3303 0050 00000000 		.word	err
 3304              		.cfi_endproc
 3305              	.LFE37:
 3307              		.section	.text.AX_Set_Goal_Speed_Join,"ax",%progbits
 3308              		.align	1
 3309              		.global	AX_Set_Goal_Speed_Join
 3310              		.syntax unified
 3311              		.thumb
 3312              		.thumb_func
 3313              		.fpu fpv4-sp-d16
 3315              	AX_Set_Goal_Speed_Join:
 3316              	.LFB38:
 643:Src/ax_12a.c  **** 
 644:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Speed_Join(AX *servo, uint16_t speed, uint8_t now){
 3317              		.loc 1 644 0
 3318              		.cfi_startproc
 3319              		@ args = 0, pretend = 0, frame = 16
 3320              		@ frame_needed = 1, uses_anonymous_args = 0
 3321 0000 80B5     		push	{r7, lr}
 3322              	.LCFI181:
 3323              		.cfi_def_cfa_offset 8
 3324              		.cfi_offset 7, -8
 3325              		.cfi_offset 14, -4
 3326 0002 86B0     		sub	sp, sp, #24
 3327              	.LCFI182:
 3328              		.cfi_def_cfa_offset 32
 3329 0004 02AF     		add	r7, sp, #8
 3330              	.LCFI183:
 3331              		.cfi_def_cfa 7, 24
 3332 0006 7860     		str	r0, [r7, #4]
 3333 0008 0B46     		mov	r3, r1
 3334 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3335 000c 1346     		mov	r3, r2
 3336 000e 7B70     		strb	r3, [r7, #1]
 645:Src/ax_12a.c  ****   if(speed > 1023){
 3337              		.loc 1 645 0
 3338 0010 7B88     		ldrh	r3, [r7, #2]
 3339 0012 B3F5806F 		cmp	r3, #1024
 3340 0016 04D3     		bcc	.L212
 646:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3341              		.loc 1 646 0
 3342 0018 0D4B     		ldr	r3, .L215
 3343 001a 0022     		movs	r2, #0
 3344 001c 1A80     		strh	r2, [r3]	@ movhi
 647:Src/ax_12a.c  ****     return 1;
 3345              		.loc 1 647 0
 3346 001e 0123     		movs	r3, #1
 3347 0020 11E0     		b	.L214
ARM GAS  /tmp/ccpqqMQi.s 			page 70


 3348              	.L212:
 648:Src/ax_12a.c  ****   }
 649:Src/ax_12a.c  ****   uint8_t data[2] = {speed&0xFF, speed>>8};
 3349              		.loc 1 649 0
 3350 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3351 0024 DBB2     		uxtb	r3, r3
 3352 0026 3B73     		strb	r3, [r7, #12]
 3353 0028 7B88     		ldrh	r3, [r7, #2]
 3354 002a 1B0A     		lsrs	r3, r3, #8
 3355 002c 9BB2     		uxth	r3, r3
 3356 002e DBB2     		uxtb	r3, r3
 3357 0030 7B73     		strb	r3, [r7, #13]
 650:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now); 
 3358              		.loc 1 650 0
 3359 0032 07F10C02 		add	r2, r7, #12
 3360 0036 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3361 0038 0093     		str	r3, [sp]
 3362 003a 0223     		movs	r3, #2
 3363 003c 1521     		movs	r1, #21
 3364 003e 7868     		ldr	r0, [r7, #4]
 3365 0040 FFF7FEFF 		bl	AX_Write
 3366 0044 0346     		mov	r3, r0
 3367              	.L214:
 651:Src/ax_12a.c  **** }
 3368              		.loc 1 651 0 discriminator 1
 3369 0046 1846     		mov	r0, r3
 3370 0048 1037     		adds	r7, r7, #16
 3371              	.LCFI184:
 3372              		.cfi_def_cfa_offset 8
 3373 004a BD46     		mov	sp, r7
 3374              	.LCFI185:
 3375              		.cfi_def_cfa_register 13
 3376              		@ sp needed
 3377 004c 80BD     		pop	{r7, pc}
 3378              	.L216:
 3379 004e 00BF     		.align	2
 3380              	.L215:
 3381 0050 00000000 		.word	err
 3382              		.cfi_endproc
 3383              	.LFE38:
 3385              		.section	.text.AX_Set_Goal_Speed_Wheel,"ax",%progbits
 3386              		.align	1
 3387              		.global	AX_Set_Goal_Speed_Wheel
 3388              		.syntax unified
 3389              		.thumb
 3390              		.thumb_func
 3391              		.fpu fpv4-sp-d16
 3393              	AX_Set_Goal_Speed_Wheel:
 3394              	.LFB39:
 652:Src/ax_12a.c  **** 
 653:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Speed_Wheel(AX *servo, uint16_t speed, AX_Wheel_Direction dir, uint8_t now){
 3395              		.loc 1 653 0
 3396              		.cfi_startproc
 3397              		@ args = 0, pretend = 0, frame = 16
 3398              		@ frame_needed = 1, uses_anonymous_args = 0
 3399 0000 80B5     		push	{r7, lr}
 3400              	.LCFI186:
ARM GAS  /tmp/ccpqqMQi.s 			page 71


 3401              		.cfi_def_cfa_offset 8
 3402              		.cfi_offset 7, -8
 3403              		.cfi_offset 14, -4
 3404 0002 86B0     		sub	sp, sp, #24
 3405              	.LCFI187:
 3406              		.cfi_def_cfa_offset 32
 3407 0004 02AF     		add	r7, sp, #8
 3408              	.LCFI188:
 3409              		.cfi_def_cfa 7, 24
 3410 0006 7860     		str	r0, [r7, #4]
 3411 0008 0846     		mov	r0, r1
 3412 000a 1146     		mov	r1, r2
 3413 000c 1A46     		mov	r2, r3
 3414 000e 0346     		mov	r3, r0	@ movhi
 3415 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 3416 0012 0B46     		mov	r3, r1
 3417 0014 7B70     		strb	r3, [r7, #1]
 3418 0016 1346     		mov	r3, r2
 3419 0018 3B70     		strb	r3, [r7]
 654:Src/ax_12a.c  ****   if(speed > 1023){
 3420              		.loc 1 654 0
 3421 001a 7B88     		ldrh	r3, [r7, #2]
 3422 001c B3F5806F 		cmp	r3, #1024
 3423 0020 04D3     		bcc	.L218
 655:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3424              		.loc 1 655 0
 3425 0022 164B     		ldr	r3, .L227
 3426 0024 0022     		movs	r2, #0
 3427 0026 1A80     		strh	r2, [r3]	@ movhi
 656:Src/ax_12a.c  ****     return 1;
 3428              		.loc 1 656 0
 3429 0028 0123     		movs	r3, #1
 3430 002a 22E0     		b	.L224
 3431              	.L218:
 657:Src/ax_12a.c  ****   }
 658:Src/ax_12a.c  ****   
 659:Src/ax_12a.c  ****   switch(dir){
 3432              		.loc 1 659 0
 3433 002c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3434 002e 002B     		cmp	r3, #0
 3435 0030 02D0     		beq	.L221
 3436 0032 012B     		cmp	r3, #1
 3437 0034 0AD0     		beq	.L226
 3438 0036 04E0     		b	.L225
 3439              	.L221:
 660:Src/ax_12a.c  ****   case AX_CLOCKWISE:
 661:Src/ax_12a.c  ****     speed += 1024;
 3440              		.loc 1 661 0
 3441 0038 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3442 003a 03F58063 		add	r3, r3, #1024
 3443 003e 7B80     		strh	r3, [r7, #2]	@ movhi
 662:Src/ax_12a.c  ****     break;
 3444              		.loc 1 662 0
 3445 0040 05E0     		b	.L223
 3446              	.L225:
 663:Src/ax_12a.c  ****   case AX_COUNTERCLOCKWISE:
 664:Src/ax_12a.c  ****   break;
ARM GAS  /tmp/ccpqqMQi.s 			page 72


 665:Src/ax_12a.c  ****   default:
 666:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3447              		.loc 1 666 0
 3448 0042 0E4B     		ldr	r3, .L227
 3449 0044 0022     		movs	r2, #0
 3450 0046 1A80     		strh	r2, [r3]	@ movhi
 667:Src/ax_12a.c  ****     return 1;
 3451              		.loc 1 667 0
 3452 0048 0123     		movs	r3, #1
 3453 004a 12E0     		b	.L224
 3454              	.L226:
 664:Src/ax_12a.c  ****   default:
 3455              		.loc 1 664 0
 3456 004c 00BF     		nop
 3457              	.L223:
 668:Src/ax_12a.c  ****     break;
 669:Src/ax_12a.c  ****   }
 670:Src/ax_12a.c  ****   uint8_t data[2] = {speed&0xFF, speed>>8};
 3458              		.loc 1 670 0
 3459 004e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3460 0050 DBB2     		uxtb	r3, r3
 3461 0052 3B73     		strb	r3, [r7, #12]
 3462 0054 7B88     		ldrh	r3, [r7, #2]
 3463 0056 1B0A     		lsrs	r3, r3, #8
 3464 0058 9BB2     		uxth	r3, r3
 3465 005a DBB2     		uxtb	r3, r3
 3466 005c 7B73     		strb	r3, [r7, #13]
 671:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now);
 3467              		.loc 1 671 0
 3468 005e 07F10C02 		add	r2, r7, #12
 3469 0062 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 3470 0064 0093     		str	r3, [sp]
 3471 0066 0223     		movs	r3, #2
 3472 0068 1521     		movs	r1, #21
 3473 006a 7868     		ldr	r0, [r7, #4]
 3474 006c FFF7FEFF 		bl	AX_Write
 3475 0070 0346     		mov	r3, r0
 3476              	.L224:
 672:Src/ax_12a.c  **** }
 3477              		.loc 1 672 0 discriminator 1
 3478 0072 1846     		mov	r0, r3
 3479 0074 1037     		adds	r7, r7, #16
 3480              	.LCFI189:
 3481              		.cfi_def_cfa_offset 8
 3482 0076 BD46     		mov	sp, r7
 3483              	.LCFI190:
 3484              		.cfi_def_cfa_register 13
 3485              		@ sp needed
 3486 0078 80BD     		pop	{r7, pc}
 3487              	.L228:
 3488 007a 00BF     		.align	2
 3489              	.L227:
 3490 007c 00000000 		.word	err
 3491              		.cfi_endproc
 3492              	.LFE39:
 3494              		.section	.text.AX_Set_Torque_Limit,"ax",%progbits
 3495              		.align	1
ARM GAS  /tmp/ccpqqMQi.s 			page 73


 3496              		.global	AX_Set_Torque_Limit
 3497              		.syntax unified
 3498              		.thumb
 3499              		.thumb_func
 3500              		.fpu fpv4-sp-d16
 3502              	AX_Set_Torque_Limit:
 3503              	.LFB40:
 673:Src/ax_12a.c  **** 
 674:Src/ax_12a.c  **** uint8_t AX_Set_Torque_Limit(AX *servo, uint16_t torque_limit, uint8_t now){
 3504              		.loc 1 674 0
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 16
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508 0000 80B5     		push	{r7, lr}
 3509              	.LCFI191:
 3510              		.cfi_def_cfa_offset 8
 3511              		.cfi_offset 7, -8
 3512              		.cfi_offset 14, -4
 3513 0002 86B0     		sub	sp, sp, #24
 3514              	.LCFI192:
 3515              		.cfi_def_cfa_offset 32
 3516 0004 02AF     		add	r7, sp, #8
 3517              	.LCFI193:
 3518              		.cfi_def_cfa 7, 24
 3519 0006 7860     		str	r0, [r7, #4]
 3520 0008 0B46     		mov	r3, r1
 3521 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3522 000c 1346     		mov	r3, r2
 3523 000e 7B70     		strb	r3, [r7, #1]
 675:Src/ax_12a.c  ****   if(torque_limit > 1023){
 3524              		.loc 1 675 0
 3525 0010 7B88     		ldrh	r3, [r7, #2]
 3526 0012 B3F5806F 		cmp	r3, #1024
 3527 0016 04D3     		bcc	.L230
 676:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3528              		.loc 1 676 0
 3529 0018 0D4B     		ldr	r3, .L233
 3530 001a 0022     		movs	r2, #0
 3531 001c 1A80     		strh	r2, [r3]	@ movhi
 677:Src/ax_12a.c  ****     return 1;
 3532              		.loc 1 677 0
 3533 001e 0123     		movs	r3, #1
 3534 0020 11E0     		b	.L232
 3535              	.L230:
 678:Src/ax_12a.c  ****   }
 679:Src/ax_12a.c  ****   uint8_t data[2] = {torque_limit&0xFF, torque_limit>>8};
 3536              		.loc 1 679 0
 3537 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3538 0024 DBB2     		uxtb	r3, r3
 3539 0026 3B73     		strb	r3, [r7, #12]
 3540 0028 7B88     		ldrh	r3, [r7, #2]
 3541 002a 1B0A     		lsrs	r3, r3, #8
 3542 002c 9BB2     		uxth	r3, r3
 3543 002e DBB2     		uxtb	r3, r3
 3544 0030 7B73     		strb	r3, [r7, #13]
 680:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_LIMIT, data, 2, now);
 3545              		.loc 1 680 0
ARM GAS  /tmp/ccpqqMQi.s 			page 74


 3546 0032 07F10C02 		add	r2, r7, #12
 3547 0036 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3548 0038 0093     		str	r3, [sp]
 3549 003a 0223     		movs	r3, #2
 3550 003c 1621     		movs	r1, #22
 3551 003e 7868     		ldr	r0, [r7, #4]
 3552 0040 FFF7FEFF 		bl	AX_Write
 3553 0044 0346     		mov	r3, r0
 3554              	.L232:
 681:Src/ax_12a.c  **** }
 3555              		.loc 1 681 0 discriminator 1
 3556 0046 1846     		mov	r0, r3
 3557 0048 1037     		adds	r7, r7, #16
 3558              	.LCFI194:
 3559              		.cfi_def_cfa_offset 8
 3560 004a BD46     		mov	sp, r7
 3561              	.LCFI195:
 3562              		.cfi_def_cfa_register 13
 3563              		@ sp needed
 3564 004c 80BD     		pop	{r7, pc}
 3565              	.L234:
 3566 004e 00BF     		.align	2
 3567              	.L233:
 3568 0050 00000000 		.word	err
 3569              		.cfi_endproc
 3570              	.LFE40:
 3572              		.section	.text.AX_Set_Punch,"ax",%progbits
 3573              		.align	1
 3574              		.global	AX_Set_Punch
 3575              		.syntax unified
 3576              		.thumb
 3577              		.thumb_func
 3578              		.fpu fpv4-sp-d16
 3580              	AX_Set_Punch:
 3581              	.LFB41:
 682:Src/ax_12a.c  **** 
 683:Src/ax_12a.c  **** uint8_t AX_Set_Punch(AX *servo, uint16_t punch, uint8_t now){
 3582              		.loc 1 683 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 16
 3585              		@ frame_needed = 1, uses_anonymous_args = 0
 3586 0000 80B5     		push	{r7, lr}
 3587              	.LCFI196:
 3588              		.cfi_def_cfa_offset 8
 3589              		.cfi_offset 7, -8
 3590              		.cfi_offset 14, -4
 3591 0002 86B0     		sub	sp, sp, #24
 3592              	.LCFI197:
 3593              		.cfi_def_cfa_offset 32
 3594 0004 02AF     		add	r7, sp, #8
 3595              	.LCFI198:
 3596              		.cfi_def_cfa 7, 24
 3597 0006 7860     		str	r0, [r7, #4]
 3598 0008 0B46     		mov	r3, r1
 3599 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3600 000c 1346     		mov	r3, r2
 3601 000e 7B70     		strb	r3, [r7, #1]
ARM GAS  /tmp/ccpqqMQi.s 			page 75


 684:Src/ax_12a.c  ****   if(punch < 0x20 || punch > 0x3FF){
 3602              		.loc 1 684 0
 3603 0010 7B88     		ldrh	r3, [r7, #2]
 3604 0012 1F2B     		cmp	r3, #31
 3605 0014 03D9     		bls	.L236
 3606              		.loc 1 684 0 is_stmt 0 discriminator 1
 3607 0016 7B88     		ldrh	r3, [r7, #2]
 3608 0018 B3F5806F 		cmp	r3, #1024
 3609 001c 04D3     		bcc	.L237
 3610              	.L236:
 685:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 3611              		.loc 1 685 0 is_stmt 1
 3612 001e 0D4B     		ldr	r3, .L240
 3613 0020 0022     		movs	r2, #0
 3614 0022 1A80     		strh	r2, [r3]	@ movhi
 686:Src/ax_12a.c  ****     return 1;
 3615              		.loc 1 686 0
 3616 0024 0123     		movs	r3, #1
 3617 0026 11E0     		b	.L239
 3618              	.L237:
 687:Src/ax_12a.c  ****   }
 688:Src/ax_12a.c  ****   uint8_t data[2] = {punch&0xFF, punch>>8};
 3619              		.loc 1 688 0
 3620 0028 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3621 002a DBB2     		uxtb	r3, r3
 3622 002c 3B73     		strb	r3, [r7, #12]
 3623 002e 7B88     		ldrh	r3, [r7, #2]
 3624 0030 1B0A     		lsrs	r3, r3, #8
 3625 0032 9BB2     		uxth	r3, r3
 3626 0034 DBB2     		uxtb	r3, r3
 3627 0036 7B73     		strb	r3, [r7, #13]
 689:Src/ax_12a.c  ****   return AX_Write(servo, AX_PUNCH, data, 2, now);
 3628              		.loc 1 689 0
 3629 0038 07F10C02 		add	r2, r7, #12
 3630 003c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3631 003e 0093     		str	r3, [sp]
 3632 0040 0223     		movs	r3, #2
 3633 0042 1821     		movs	r1, #24
 3634 0044 7868     		ldr	r0, [r7, #4]
 3635 0046 FFF7FEFF 		bl	AX_Write
 3636 004a 0346     		mov	r3, r0
 3637              	.L239:
 690:Src/ax_12a.c  **** }
 3638              		.loc 1 690 0 discriminator 1
 3639 004c 1846     		mov	r0, r3
 3640 004e 1037     		adds	r7, r7, #16
 3641              	.LCFI199:
 3642              		.cfi_def_cfa_offset 8
 3643 0050 BD46     		mov	sp, r7
 3644              	.LCFI200:
 3645              		.cfi_def_cfa_register 13
 3646              		@ sp needed
 3647 0052 80BD     		pop	{r7, pc}
 3648              	.L241:
 3649              		.align	2
 3650              	.L240:
 3651 0054 00000000 		.word	err
ARM GAS  /tmp/ccpqqMQi.s 			page 76


 3652              		.cfi_endproc
 3653              	.LFE41:
 3655              		.section	.text.AX_Lock_ROM,"ax",%progbits
 3656              		.align	1
 3657              		.global	AX_Lock_ROM
 3658              		.syntax unified
 3659              		.thumb
 3660              		.thumb_func
 3661              		.fpu fpv4-sp-d16
 3663              	AX_Lock_ROM:
 3664              	.LFB42:
 691:Src/ax_12a.c  **** 
 692:Src/ax_12a.c  **** uint8_t AX_Lock_ROM(AX *servo, uint8_t now){
 3665              		.loc 1 692 0
 3666              		.cfi_startproc
 3667              		@ args = 0, pretend = 0, frame = 16
 3668              		@ frame_needed = 1, uses_anonymous_args = 0
 3669 0000 80B5     		push	{r7, lr}
 3670              	.LCFI201:
 3671              		.cfi_def_cfa_offset 8
 3672              		.cfi_offset 7, -8
 3673              		.cfi_offset 14, -4
 3674 0002 86B0     		sub	sp, sp, #24
 3675              	.LCFI202:
 3676              		.cfi_def_cfa_offset 32
 3677 0004 02AF     		add	r7, sp, #8
 3678              	.LCFI203:
 3679              		.cfi_def_cfa 7, 24
 3680 0006 7860     		str	r0, [r7, #4]
 3681 0008 0B46     		mov	r3, r1
 3682 000a FB70     		strb	r3, [r7, #3]
 693:Src/ax_12a.c  ****   uint8_t value = 1;
 3683              		.loc 1 693 0
 3684 000c 0123     		movs	r3, #1
 3685 000e FB73     		strb	r3, [r7, #15]
 694:Src/ax_12a.c  ****   return AX_Write(servo, AX_EEPROM_LOCK, &value, 1, now);
 3686              		.loc 1 694 0
 3687 0010 07F10F02 		add	r2, r7, #15
 3688 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3689 0016 0093     		str	r3, [sp]
 3690 0018 0123     		movs	r3, #1
 3691 001a 1721     		movs	r1, #23
 3692 001c 7868     		ldr	r0, [r7, #4]
 3693 001e FFF7FEFF 		bl	AX_Write
 3694 0022 0346     		mov	r3, r0
 695:Src/ax_12a.c  **** }
 3695              		.loc 1 695 0
 3696 0024 1846     		mov	r0, r3
 3697 0026 1037     		adds	r7, r7, #16
 3698              	.LCFI204:
 3699              		.cfi_def_cfa_offset 8
 3700 0028 BD46     		mov	sp, r7
 3701              	.LCFI205:
 3702              		.cfi_def_cfa_register 13
 3703              		@ sp needed
 3704 002a 80BD     		pop	{r7, pc}
 3705              		.cfi_endproc
ARM GAS  /tmp/ccpqqMQi.s 			page 77


 3706              	.LFE42:
 3708              		.section	.text.AX_Unlock_ROM,"ax",%progbits
 3709              		.align	1
 3710              		.global	AX_Unlock_ROM
 3711              		.syntax unified
 3712              		.thumb
 3713              		.thumb_func
 3714              		.fpu fpv4-sp-d16
 3716              	AX_Unlock_ROM:
 3717              	.LFB43:
 696:Src/ax_12a.c  **** 
 697:Src/ax_12a.c  **** uint8_t AX_Unlock_ROM(AX *servo, uint8_t now){
 3718              		.loc 1 697 0
 3719              		.cfi_startproc
 3720              		@ args = 0, pretend = 0, frame = 16
 3721              		@ frame_needed = 1, uses_anonymous_args = 0
 3722 0000 80B5     		push	{r7, lr}
 3723              	.LCFI206:
 3724              		.cfi_def_cfa_offset 8
 3725              		.cfi_offset 7, -8
 3726              		.cfi_offset 14, -4
 3727 0002 86B0     		sub	sp, sp, #24
 3728              	.LCFI207:
 3729              		.cfi_def_cfa_offset 32
 3730 0004 02AF     		add	r7, sp, #8
 3731              	.LCFI208:
 3732              		.cfi_def_cfa 7, 24
 3733 0006 7860     		str	r0, [r7, #4]
 3734 0008 0B46     		mov	r3, r1
 3735 000a FB70     		strb	r3, [r7, #3]
 698:Src/ax_12a.c  ****   uint8_t value = 0;
 3736              		.loc 1 698 0
 3737 000c 0023     		movs	r3, #0
 3738 000e FB73     		strb	r3, [r7, #15]
 699:Src/ax_12a.c  ****   return AX_Write(servo, AX_EEPROM_LOCK, &value, 1, now);
 3739              		.loc 1 699 0
 3740 0010 07F10F02 		add	r2, r7, #15
 3741 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3742 0016 0093     		str	r3, [sp]
 3743 0018 0123     		movs	r3, #1
 3744 001a 1721     		movs	r1, #23
 3745 001c 7868     		ldr	r0, [r7, #4]
 3746 001e FFF7FEFF 		bl	AX_Write
 3747 0022 0346     		mov	r3, r0
 700:Src/ax_12a.c  **** }
 3748              		.loc 1 700 0
 3749 0024 1846     		mov	r0, r3
 3750 0026 1037     		adds	r7, r7, #16
 3751              	.LCFI209:
 3752              		.cfi_def_cfa_offset 8
 3753 0028 BD46     		mov	sp, r7
 3754              	.LCFI210:
 3755              		.cfi_def_cfa_register 13
 3756              		@ sp needed
 3757 002a 80BD     		pop	{r7, pc}
 3758              		.cfi_endproc
 3759              	.LFE43:
ARM GAS  /tmp/ccpqqMQi.s 			page 78


 3761              		.section	.text.AX_Get_Current_Position,"ax",%progbits
 3762              		.align	1
 3763              		.global	AX_Get_Current_Position
 3764              		.syntax unified
 3765              		.thumb
 3766              		.thumb_func
 3767              		.fpu fpv4-sp-d16
 3769              	AX_Get_Current_Position:
 3770              	.LFB44:
 701:Src/ax_12a.c  **** 
 702:Src/ax_12a.c  **** //======================================
 703:Src/ax_12a.c  **** //       LECTURE D'INFORMATIONS
 704:Src/ax_12a.c  **** //======================================
 705:Src/ax_12a.c  **** uint8_t AX_Get_Current_Position(AX *servo, uint16_t *position){
 3771              		.loc 1 705 0
 3772              		.cfi_startproc
 3773              		@ args = 0, pretend = 0, frame = 8
 3774              		@ frame_needed = 1, uses_anonymous_args = 0
 3775 0000 80B5     		push	{r7, lr}
 3776              	.LCFI211:
 3777              		.cfi_def_cfa_offset 8
 3778              		.cfi_offset 7, -8
 3779              		.cfi_offset 14, -4
 3780 0002 82B0     		sub	sp, sp, #8
 3781              	.LCFI212:
 3782              		.cfi_def_cfa_offset 16
 3783 0004 00AF     		add	r7, sp, #0
 3784              	.LCFI213:
 3785              		.cfi_def_cfa_register 7
 3786 0006 7860     		str	r0, [r7, #4]
 3787 0008 3960     		str	r1, [r7]
 706:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_POSITION, position);
 3788              		.loc 1 706 0
 3789 000a 3A68     		ldr	r2, [r7]
 3790 000c 1921     		movs	r1, #25
 3791 000e 7868     		ldr	r0, [r7, #4]
 3792 0010 FFF7FEFF 		bl	AX_Read
 3793 0014 0346     		mov	r3, r0
 707:Src/ax_12a.c  **** }
 3794              		.loc 1 707 0
 3795 0016 1846     		mov	r0, r3
 3796 0018 0837     		adds	r7, r7, #8
 3797              	.LCFI214:
 3798              		.cfi_def_cfa_offset 8
 3799 001a BD46     		mov	sp, r7
 3800              	.LCFI215:
 3801              		.cfi_def_cfa_register 13
 3802              		@ sp needed
 3803 001c 80BD     		pop	{r7, pc}
 3804              		.cfi_endproc
 3805              	.LFE44:
 3807              		.section	.text.AX_Get_Current_Speed,"ax",%progbits
 3808              		.align	1
 3809              		.global	AX_Get_Current_Speed
 3810              		.syntax unified
 3811              		.thumb
 3812              		.thumb_func
ARM GAS  /tmp/ccpqqMQi.s 			page 79


 3813              		.fpu fpv4-sp-d16
 3815              	AX_Get_Current_Speed:
 3816              	.LFB45:
 708:Src/ax_12a.c  **** 
 709:Src/ax_12a.c  **** uint8_t AX_Get_Current_Speed(AX *servo, AX_Wheel_Direction *direction, uint16_t *speed){
 3817              		.loc 1 709 0
 3818              		.cfi_startproc
 3819              		@ args = 0, pretend = 0, frame = 16
 3820              		@ frame_needed = 1, uses_anonymous_args = 0
 3821 0000 80B5     		push	{r7, lr}
 3822              	.LCFI216:
 3823              		.cfi_def_cfa_offset 8
 3824              		.cfi_offset 7, -8
 3825              		.cfi_offset 14, -4
 3826 0002 84B0     		sub	sp, sp, #16
 3827              	.LCFI217:
 3828              		.cfi_def_cfa_offset 24
 3829 0004 00AF     		add	r7, sp, #0
 3830              	.LCFI218:
 3831              		.cfi_def_cfa_register 7
 3832 0006 F860     		str	r0, [r7, #12]
 3833 0008 B960     		str	r1, [r7, #8]
 3834 000a 7A60     		str	r2, [r7, #4]
 710:Src/ax_12a.c  ****   if(AX_Read(servo, AX_CURRENT_SPEED, speed) == 1){
 3835              		.loc 1 710 0
 3836 000c 7A68     		ldr	r2, [r7, #4]
 3837 000e 1A21     		movs	r1, #26
 3838 0010 F868     		ldr	r0, [r7, #12]
 3839 0012 FFF7FEFF 		bl	AX_Read
 3840 0016 0346     		mov	r3, r0
 3841 0018 012B     		cmp	r3, #1
 3842 001a 01D1     		bne	.L249
 711:Src/ax_12a.c  ****     return 1;
 3843              		.loc 1 711 0
 3844 001c 0123     		movs	r3, #1
 3845 001e 13E0     		b	.L250
 3846              	.L249:
 712:Src/ax_12a.c  ****   }
 713:Src/ax_12a.c  ****   *direction = (*speed > 1023)?AX_CLOCKWISE:AX_COUNTERCLOCKWISE;
 3847              		.loc 1 713 0
 3848 0020 7B68     		ldr	r3, [r7, #4]
 3849 0022 1B88     		ldrh	r3, [r3]
 3850 0024 40F2FF32 		movw	r2, #1023
 3851 0028 9342     		cmp	r3, r2
 3852 002a 94BF     		ite	ls
 3853 002c 0123     		movls	r3, #1
 3854 002e 0023     		movhi	r3, #0
 3855 0030 DBB2     		uxtb	r3, r3
 3856 0032 1A46     		mov	r2, r3
 3857 0034 BB68     		ldr	r3, [r7, #8]
 3858 0036 1A70     		strb	r2, [r3]
 714:Src/ax_12a.c  ****   *speed &= 0x3FF;
 3859              		.loc 1 714 0
 3860 0038 7B68     		ldr	r3, [r7, #4]
 3861 003a 1B88     		ldrh	r3, [r3]
 3862 003c C3F30903 		ubfx	r3, r3, #0, #10
 3863 0040 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccpqqMQi.s 			page 80


 3864 0042 7B68     		ldr	r3, [r7, #4]
 3865 0044 1A80     		strh	r2, [r3]	@ movhi
 715:Src/ax_12a.c  ****   return 0;
 3866              		.loc 1 715 0
 3867 0046 0023     		movs	r3, #0
 3868              	.L250:
 716:Src/ax_12a.c  **** }
 3869              		.loc 1 716 0
 3870 0048 1846     		mov	r0, r3
 3871 004a 1037     		adds	r7, r7, #16
 3872              	.LCFI219:
 3873              		.cfi_def_cfa_offset 8
 3874 004c BD46     		mov	sp, r7
 3875              	.LCFI220:
 3876              		.cfi_def_cfa_register 13
 3877              		@ sp needed
 3878 004e 80BD     		pop	{r7, pc}
 3879              		.cfi_endproc
 3880              	.LFE45:
 3882              		.section	.text.AX_Get_Current_Load,"ax",%progbits
 3883              		.align	1
 3884              		.global	AX_Get_Current_Load
 3885              		.syntax unified
 3886              		.thumb
 3887              		.thumb_func
 3888              		.fpu fpv4-sp-d16
 3890              	AX_Get_Current_Load:
 3891              	.LFB46:
 717:Src/ax_12a.c  **** 
 718:Src/ax_12a.c  **** uint8_t AX_Get_Current_Load(AX *servo, AX_Wheel_Direction *direction, uint16_t *load){
 3892              		.loc 1 718 0
 3893              		.cfi_startproc
 3894              		@ args = 0, pretend = 0, frame = 16
 3895              		@ frame_needed = 1, uses_anonymous_args = 0
 3896 0000 80B5     		push	{r7, lr}
 3897              	.LCFI221:
 3898              		.cfi_def_cfa_offset 8
 3899              		.cfi_offset 7, -8
 3900              		.cfi_offset 14, -4
 3901 0002 84B0     		sub	sp, sp, #16
 3902              	.LCFI222:
 3903              		.cfi_def_cfa_offset 24
 3904 0004 00AF     		add	r7, sp, #0
 3905              	.LCFI223:
 3906              		.cfi_def_cfa_register 7
 3907 0006 F860     		str	r0, [r7, #12]
 3908 0008 B960     		str	r1, [r7, #8]
 3909 000a 7A60     		str	r2, [r7, #4]
 719:Src/ax_12a.c  ****   if(AX_Read(servo, AX_CURRENT_LOAD, load) == 1){
 3910              		.loc 1 719 0
 3911 000c 7A68     		ldr	r2, [r7, #4]
 3912 000e 1B21     		movs	r1, #27
 3913 0010 F868     		ldr	r0, [r7, #12]
 3914 0012 FFF7FEFF 		bl	AX_Read
 3915 0016 0346     		mov	r3, r0
 3916 0018 012B     		cmp	r3, #1
 3917 001a 01D1     		bne	.L252
ARM GAS  /tmp/ccpqqMQi.s 			page 81


 720:Src/ax_12a.c  ****     return 1;
 3918              		.loc 1 720 0
 3919 001c 0123     		movs	r3, #1
 3920 001e 13E0     		b	.L253
 3921              	.L252:
 721:Src/ax_12a.c  ****   }
 722:Src/ax_12a.c  ****   *direction = (*load > 1023)?AX_CLOCKWISE:AX_COUNTERCLOCKWISE;
 3922              		.loc 1 722 0
 3923 0020 7B68     		ldr	r3, [r7, #4]
 3924 0022 1B88     		ldrh	r3, [r3]
 3925 0024 40F2FF32 		movw	r2, #1023
 3926 0028 9342     		cmp	r3, r2
 3927 002a 94BF     		ite	ls
 3928 002c 0123     		movls	r3, #1
 3929 002e 0023     		movhi	r3, #0
 3930 0030 DBB2     		uxtb	r3, r3
 3931 0032 1A46     		mov	r2, r3
 3932 0034 BB68     		ldr	r3, [r7, #8]
 3933 0036 1A70     		strb	r2, [r3]
 723:Src/ax_12a.c  ****   *load &= 0x3FF;
 3934              		.loc 1 723 0
 3935 0038 7B68     		ldr	r3, [r7, #4]
 3936 003a 1B88     		ldrh	r3, [r3]
 3937 003c C3F30903 		ubfx	r3, r3, #0, #10
 3938 0040 9AB2     		uxth	r2, r3
 3939 0042 7B68     		ldr	r3, [r7, #4]
 3940 0044 1A80     		strh	r2, [r3]	@ movhi
 724:Src/ax_12a.c  ****   return 0;
 3941              		.loc 1 724 0
 3942 0046 0023     		movs	r3, #0
 3943              	.L253:
 725:Src/ax_12a.c  **** }
 3944              		.loc 1 725 0
 3945 0048 1846     		mov	r0, r3
 3946 004a 1037     		adds	r7, r7, #16
 3947              	.LCFI224:
 3948              		.cfi_def_cfa_offset 8
 3949 004c BD46     		mov	sp, r7
 3950              	.LCFI225:
 3951              		.cfi_def_cfa_register 13
 3952              		@ sp needed
 3953 004e 80BD     		pop	{r7, pc}
 3954              		.cfi_endproc
 3955              	.LFE46:
 3957              		.section	.text.AX_Get_Current_Voltage,"ax",%progbits
 3958              		.align	1
 3959              		.global	AX_Get_Current_Voltage
 3960              		.syntax unified
 3961              		.thumb
 3962              		.thumb_func
 3963              		.fpu fpv4-sp-d16
 3965              	AX_Get_Current_Voltage:
 3966              	.LFB47:
 726:Src/ax_12a.c  **** 
 727:Src/ax_12a.c  **** uint8_t AX_Get_Current_Voltage(AX *servo, uint16_t *voltage){
 3967              		.loc 1 727 0
 3968              		.cfi_startproc
ARM GAS  /tmp/ccpqqMQi.s 			page 82


 3969              		@ args = 0, pretend = 0, frame = 8
 3970              		@ frame_needed = 1, uses_anonymous_args = 0
 3971 0000 80B5     		push	{r7, lr}
 3972              	.LCFI226:
 3973              		.cfi_def_cfa_offset 8
 3974              		.cfi_offset 7, -8
 3975              		.cfi_offset 14, -4
 3976 0002 82B0     		sub	sp, sp, #8
 3977              	.LCFI227:
 3978              		.cfi_def_cfa_offset 16
 3979 0004 00AF     		add	r7, sp, #0
 3980              	.LCFI228:
 3981              		.cfi_def_cfa_register 7
 3982 0006 7860     		str	r0, [r7, #4]
 3983 0008 3960     		str	r1, [r7]
 728:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_VOLTAGE, voltage);
 3984              		.loc 1 728 0
 3985 000a 3A68     		ldr	r2, [r7]
 3986 000c 1C21     		movs	r1, #28
 3987 000e 7868     		ldr	r0, [r7, #4]
 3988 0010 FFF7FEFF 		bl	AX_Read
 3989 0014 0346     		mov	r3, r0
 729:Src/ax_12a.c  **** }
 3990              		.loc 1 729 0
 3991 0016 1846     		mov	r0, r3
 3992 0018 0837     		adds	r7, r7, #8
 3993              	.LCFI229:
 3994              		.cfi_def_cfa_offset 8
 3995 001a BD46     		mov	sp, r7
 3996              	.LCFI230:
 3997              		.cfi_def_cfa_register 13
 3998              		@ sp needed
 3999 001c 80BD     		pop	{r7, pc}
 4000              		.cfi_endproc
 4001              	.LFE47:
 4003              		.section	.text.AX_Get_Current_Temperature,"ax",%progbits
 4004              		.align	1
 4005              		.global	AX_Get_Current_Temperature
 4006              		.syntax unified
 4007              		.thumb
 4008              		.thumb_func
 4009              		.fpu fpv4-sp-d16
 4011              	AX_Get_Current_Temperature:
 4012              	.LFB48:
 730:Src/ax_12a.c  **** 
 731:Src/ax_12a.c  **** uint8_t AX_Get_Current_Temperature(AX *servo, uint16_t *temperature){
 4013              		.loc 1 731 0
 4014              		.cfi_startproc
 4015              		@ args = 0, pretend = 0, frame = 8
 4016              		@ frame_needed = 1, uses_anonymous_args = 0
 4017 0000 80B5     		push	{r7, lr}
 4018              	.LCFI231:
 4019              		.cfi_def_cfa_offset 8
 4020              		.cfi_offset 7, -8
 4021              		.cfi_offset 14, -4
 4022 0002 82B0     		sub	sp, sp, #8
 4023              	.LCFI232:
ARM GAS  /tmp/ccpqqMQi.s 			page 83


 4024              		.cfi_def_cfa_offset 16
 4025 0004 00AF     		add	r7, sp, #0
 4026              	.LCFI233:
 4027              		.cfi_def_cfa_register 7
 4028 0006 7860     		str	r0, [r7, #4]
 4029 0008 3960     		str	r1, [r7]
 732:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_TEMPERATURE, temperature);
 4030              		.loc 1 732 0
 4031 000a 3A68     		ldr	r2, [r7]
 4032 000c 1D21     		movs	r1, #29
 4033 000e 7868     		ldr	r0, [r7, #4]
 4034 0010 FFF7FEFF 		bl	AX_Read
 4035 0014 0346     		mov	r3, r0
 733:Src/ax_12a.c  **** }
 4036              		.loc 1 733 0
 4037 0016 1846     		mov	r0, r3
 4038 0018 0837     		adds	r7, r7, #8
 4039              	.LCFI234:
 4040              		.cfi_def_cfa_offset 8
 4041 001a BD46     		mov	sp, r7
 4042              	.LCFI235:
 4043              		.cfi_def_cfa_register 13
 4044              		@ sp needed
 4045 001c 80BD     		pop	{r7, pc}
 4046              		.cfi_endproc
 4047              	.LFE48:
 4049              		.section	.text.AX_Is_Working,"ax",%progbits
 4050              		.align	1
 4051              		.global	AX_Is_Working
 4052              		.syntax unified
 4053              		.thumb
 4054              		.thumb_func
 4055              		.fpu fpv4-sp-d16
 4057              	AX_Is_Working:
 4058              	.LFB49:
 734:Src/ax_12a.c  **** 
 735:Src/ax_12a.c  **** uint8_t AX_Is_Working(AX *servo, uint16_t *working){
 4059              		.loc 1 735 0
 4060              		.cfi_startproc
 4061              		@ args = 0, pretend = 0, frame = 8
 4062              		@ frame_needed = 1, uses_anonymous_args = 0
 4063 0000 80B5     		push	{r7, lr}
 4064              	.LCFI236:
 4065              		.cfi_def_cfa_offset 8
 4066              		.cfi_offset 7, -8
 4067              		.cfi_offset 14, -4
 4068 0002 82B0     		sub	sp, sp, #8
 4069              	.LCFI237:
 4070              		.cfi_def_cfa_offset 16
 4071 0004 00AF     		add	r7, sp, #0
 4072              	.LCFI238:
 4073              		.cfi_def_cfa_register 7
 4074 0006 7860     		str	r0, [r7, #4]
 4075 0008 3960     		str	r1, [r7]
 736:Src/ax_12a.c  ****   return AX_Read(servo, AX_TORQUE_ENABLE, working);
 4076              		.loc 1 736 0
 4077 000a 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccpqqMQi.s 			page 84


 4078 000c 0E21     		movs	r1, #14
 4079 000e 7868     		ldr	r0, [r7, #4]
 4080 0010 FFF7FEFF 		bl	AX_Read
 4081 0014 0346     		mov	r3, r0
 737:Src/ax_12a.c  **** }
 4082              		.loc 1 737 0
 4083 0016 1846     		mov	r0, r3
 4084 0018 0837     		adds	r7, r7, #8
 4085              	.LCFI239:
 4086              		.cfi_def_cfa_offset 8
 4087 001a BD46     		mov	sp, r7
 4088              	.LCFI240:
 4089              		.cfi_def_cfa_register 13
 4090              		@ sp needed
 4091 001c 80BD     		pop	{r7, pc}
 4092              		.cfi_endproc
 4093              	.LFE49:
 4095              		.section	.text.AX_Is_Moving,"ax",%progbits
 4096              		.align	1
 4097              		.global	AX_Is_Moving
 4098              		.syntax unified
 4099              		.thumb
 4100              		.thumb_func
 4101              		.fpu fpv4-sp-d16
 4103              	AX_Is_Moving:
 4104              	.LFB50:
 738:Src/ax_12a.c  **** 
 739:Src/ax_12a.c  **** uint8_t AX_Is_Moving(AX *servo, uint16_t *moving){
 4105              		.loc 1 739 0
 4106              		.cfi_startproc
 4107              		@ args = 0, pretend = 0, frame = 8
 4108              		@ frame_needed = 1, uses_anonymous_args = 0
 4109 0000 80B5     		push	{r7, lr}
 4110              	.LCFI241:
 4111              		.cfi_def_cfa_offset 8
 4112              		.cfi_offset 7, -8
 4113              		.cfi_offset 14, -4
 4114 0002 82B0     		sub	sp, sp, #8
 4115              	.LCFI242:
 4116              		.cfi_def_cfa_offset 16
 4117 0004 00AF     		add	r7, sp, #0
 4118              	.LCFI243:
 4119              		.cfi_def_cfa_register 7
 4120 0006 7860     		str	r0, [r7, #4]
 4121 0008 3960     		str	r1, [r7]
 740:Src/ax_12a.c  ****   return AX_Read(servo, AX_MOVING, moving);
 4122              		.loc 1 740 0
 4123 000a 3A68     		ldr	r2, [r7]
 4124 000c 1F21     		movs	r1, #31
 4125 000e 7868     		ldr	r0, [r7, #4]
 4126 0010 FFF7FEFF 		bl	AX_Read
 4127 0014 0346     		mov	r3, r0
 741:Src/ax_12a.c  **** }
 4128              		.loc 1 741 0
 4129 0016 1846     		mov	r0, r3
 4130 0018 0837     		adds	r7, r7, #8
 4131              	.LCFI244:
ARM GAS  /tmp/ccpqqMQi.s 			page 85


 4132              		.cfi_def_cfa_offset 8
 4133 001a BD46     		mov	sp, r7
 4134              	.LCFI245:
 4135              		.cfi_def_cfa_register 13
 4136              		@ sp needed
 4137 001c 80BD     		pop	{r7, pc}
 4138              		.cfi_endproc
 4139              	.LFE50:
 4141              		.section	.bss.params.6821,"aw",%nobits
 4142              		.align	2
 4145              	params.6821:
 4146 0000 00000000 		.space	32
 4146      00000000 
 4146      00000000 
 4146      00000000 
 4146      00000000 
 4147              		.section	.bss.packet.6820,"aw",%nobits
 4148              		.align	2
 4151              	packet.6820:
 4152 0000 00000000 		.space	8
 4152      00000000 
 4153              		.text
 4154              	.Letext0:
 4155              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 4156              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 4157              		.file 4 "Inc/ax_12a.h"
 4158              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 4159              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 4160              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 4161              		.file 8 "/usr/arm-none-eabi/include/sys/reent.h"
ARM GAS  /tmp/ccpqqMQi.s 			page 86


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ax_12a.c
     /tmp/ccpqqMQi.s:18     .rodata.header:0000000000000000 $d
     /tmp/ccpqqMQi.s:21     .rodata.header:0000000000000000 header
     /tmp/ccpqqMQi.s:25     .rodata.field_addr:0000000000000000 $d
     /tmp/ccpqqMQi.s:28     .rodata.field_addr:0000000000000000 field_addr
     /tmp/ccpqqMQi.s:62     .rodata.field_length:0000000000000000 $d
     /tmp/ccpqqMQi.s:65     .rodata.field_length:0000000000000000 field_length
     /tmp/ccpqqMQi.s:99     .bss.err:0000000000000000 $d
     /tmp/ccpqqMQi.s:102    .bss.err:0000000000000000 err
     /tmp/ccpqqMQi.s:105    .text.AX_FSM_HEADER_0:0000000000000000 $t
     /tmp/ccpqqMQi.s:112    .text.AX_FSM_HEADER_0:0000000000000000 AX_FSM_HEADER_0
     /tmp/ccpqqMQi.s:166    .text.AX_FSM_HEADER_0:0000000000000030 $d
     /tmp/ccpqqMQi.s:178    .text.AX_FSM_HEADER_1:0000000000000000 AX_FSM_HEADER_1
     /tmp/ccpqqMQi.s:171    .text.AX_FSM_HEADER_1:0000000000000000 $t
     /tmp/ccpqqMQi.s:242    .text.AX_FSM_HEADER_1:0000000000000040 $d
     /tmp/ccpqqMQi.s:255    .text.AX_FSM_ID:0000000000000000 AX_FSM_ID
     /tmp/ccpqqMQi.s:248    .text.AX_FSM_ID:0000000000000000 $t
     /tmp/ccpqqMQi.s:318    .text.AX_FSM_ID:0000000000000040 $d
     /tmp/ccpqqMQi.s:331    .text.AX_FSM_LENGTH:0000000000000000 AX_FSM_LENGTH
     /tmp/ccpqqMQi.s:324    .text.AX_FSM_LENGTH:0000000000000000 $t
     /tmp/ccpqqMQi.s:406    .text.AX_FSM_LENGTH:0000000000000054 $d
     /tmp/ccpqqMQi.s:419    .text.AX_FSM_RECEIVING:0000000000000000 AX_FSM_RECEIVING
     /tmp/ccpqqMQi.s:412    .text.AX_FSM_RECEIVING:0000000000000000 $t
     /tmp/ccpqqMQi.s:478    .text.AX_Extract_Status_Packet:0000000000000000 $t
     /tmp/ccpqqMQi.s:485    .text.AX_Extract_Status_Packet:0000000000000000 AX_Extract_Status_Packet
     /tmp/ccpqqMQi.s:1060   .text.AX_Compute_Checksum:0000000000000000 AX_Compute_Checksum
     /tmp/ccpqqMQi.s:596    .text.AX_Extract_Status_Packet:0000000000000094 $d
     /tmp/ccpqqMQi.s:601    .text.AX_Receive:0000000000000000 $t
     /tmp/ccpqqMQi.s:608    .text.AX_Receive:0000000000000000 AX_Receive
     /tmp/ccpqqMQi.s:767    .text.AX_Receive:00000000000000e4 $d
     /tmp/ccpqqMQi.s:773    .text.AX_Build_Frame:0000000000000000 $t
     /tmp/ccpqqMQi.s:780    .text.AX_Build_Frame:0000000000000000 AX_Build_Frame
     /tmp/ccpqqMQi.s:957    .text.AX_Build_Frame:00000000000000f4 $d
     /tmp/ccpqqMQi.s:962    .text.AX_Send:0000000000000000 $t
     /tmp/ccpqqMQi.s:969    .text.AX_Send:0000000000000000 AX_Send
     /tmp/ccpqqMQi.s:1048   .text.AX_Send:000000000000005c $d
     /tmp/ccpqqMQi.s:1053   .text.AX_Compute_Checksum:0000000000000000 $t
     /tmp/ccpqqMQi.s:1128   .text.AX_Get_Error:0000000000000000 $t
     /tmp/ccpqqMQi.s:1135   .text.AX_Get_Error:0000000000000000 AX_Get_Error
     /tmp/ccpqqMQi.s:1166   .text.AX_Get_Error:0000000000000014 $d
     /tmp/ccpqqMQi.s:1171   .text.AX_Check_Status:0000000000000000 $t
     /tmp/ccpqqMQi.s:1178   .text.AX_Check_Status:0000000000000000 AX_Check_Status
     /tmp/ccpqqMQi.s:1239   .text.AX_Check_Status:0000000000000048 $d
     /tmp/ccpqqMQi.s:1244   .text.AX_Ping:0000000000000000 $t
     /tmp/ccpqqMQi.s:1251   .text.AX_Ping:0000000000000000 AX_Ping
     /tmp/ccpqqMQi.s:1340   .text.AX_Ping:000000000000006c $d
     /tmp/ccpqqMQi.s:1345   .text.AX_Discover:0000000000000000 $t
     /tmp/ccpqqMQi.s:1352   .text.AX_Discover:0000000000000000 AX_Discover
     /tmp/ccpqqMQi.s:1448   .text.AX_Say_Hello:0000000000000000 $t
     /tmp/ccpqqMQi.s:1455   .text.AX_Say_Hello:0000000000000000 AX_Say_Hello
     /tmp/ccpqqMQi.s:3072   .text.AX_Set_LED:0000000000000000 AX_Set_LED
     /tmp/ccpqqMQi.s:1540   .text.AX_Read:0000000000000000 $t
     /tmp/ccpqqMQi.s:1547   .text.AX_Read:0000000000000000 AX_Read
     /tmp/ccpqqMQi.s:1689   .text.AX_Read:00000000000000cc $d
     /tmp/ccpqqMQi.s:1696   .text.AX_Action:0000000000000000 $t
     /tmp/ccpqqMQi.s:1703   .text.AX_Action:0000000000000000 AX_Action
ARM GAS  /tmp/ccpqqMQi.s 			page 87


     /tmp/ccpqqMQi.s:1789   .text.AX_Factory_Reset:0000000000000000 $t
     /tmp/ccpqqMQi.s:1796   .text.AX_Factory_Reset:0000000000000000 AX_Factory_Reset
     /tmp/ccpqqMQi.s:1862   .text.AX_Write:0000000000000000 $t
     /tmp/ccpqqMQi.s:1869   .text.AX_Write:0000000000000000 AX_Write
     /tmp/ccpqqMQi.s:2024   .text.AX_Write:00000000000000d0 $d
     /tmp/ccpqqMQi.s:4145   .bss.params.6821:0000000000000000 params.6821
     /tmp/ccpqqMQi.s:4151   .bss.packet.6820:0000000000000000 packet.6820
     /tmp/ccpqqMQi.s:2031   .text.AX_Configure_ID:0000000000000000 $t
     /tmp/ccpqqMQi.s:2038   .text.AX_Configure_ID:0000000000000000 AX_Configure_ID
     /tmp/ccpqqMQi.s:2103   .text.AX_Configure_ID:0000000000000044 $d
     /tmp/ccpqqMQi.s:2108   .text.AX_Configure_Baud_Rate:0000000000000000 $t
     /tmp/ccpqqMQi.s:2115   .text.AX_Configure_Baud_Rate:0000000000000000 AX_Configure_Baud_Rate
     /tmp/ccpqqMQi.s:2195   .text.AX_Configure_Baud_Rate:000000000000005c $d
     /tmp/ccpqqMQi.s:2200   .text.AX_Configure_Return_Delay_Time:0000000000000000 $t
     /tmp/ccpqqMQi.s:2207   .text.AX_Configure_Return_Delay_Time:0000000000000000 AX_Configure_Return_Delay_Time
     /tmp/ccpqqMQi.s:2272   .text.AX_Configure_Return_Delay_Time:0000000000000044 $d
     /tmp/ccpqqMQi.s:2277   .text.AX_Configure_Angle_Limit:0000000000000000 $t
     /tmp/ccpqqMQi.s:2284   .text.AX_Configure_Angle_Limit:0000000000000000 AX_Configure_Angle_Limit
     /tmp/ccpqqMQi.s:2373   .text.AX_Configure_Angle_Limit:0000000000000074 $d
     /tmp/ccpqqMQi.s:2378   .text.AX_Configure_Limit_Temperature:0000000000000000 $t
     /tmp/ccpqqMQi.s:2385   .text.AX_Configure_Limit_Temperature:0000000000000000 AX_Configure_Limit_Temperature
     /tmp/ccpqqMQi.s:2450   .text.AX_Configure_Limit_Temperature:0000000000000044 $d
     /tmp/ccpqqMQi.s:2455   .text.AX_Configure_Lower_Limit_Voltage:0000000000000000 $t
     /tmp/ccpqqMQi.s:2462   .text.AX_Configure_Lower_Limit_Voltage:0000000000000000 AX_Configure_Lower_Limit_Voltage
     /tmp/ccpqqMQi.s:2532   .text.AX_Configure_Lower_Limit_Voltage:000000000000004c $d
     /tmp/ccpqqMQi.s:2537   .text.AX_Configure_Upper_Limit_Voltage:0000000000000000 $t
     /tmp/ccpqqMQi.s:2544   .text.AX_Configure_Upper_Limit_Voltage:0000000000000000 AX_Configure_Upper_Limit_Voltage
     /tmp/ccpqqMQi.s:2614   .text.AX_Configure_Upper_Limit_Voltage:000000000000004c $d
     /tmp/ccpqqMQi.s:2619   .text.AX_Configure_Max_Torque:0000000000000000 $t
     /tmp/ccpqqMQi.s:2626   .text.AX_Configure_Max_Torque:0000000000000000 AX_Configure_Max_Torque
     /tmp/ccpqqMQi.s:2700   .text.AX_Configure_Max_Torque:0000000000000058 $d
     /tmp/ccpqqMQi.s:2705   .text.AX_Configure_Return_Level:0000000000000000 $t
     /tmp/ccpqqMQi.s:2712   .text.AX_Configure_Return_Level:0000000000000000 AX_Configure_Return_Level
     /tmp/ccpqqMQi.s:2788   .text.AX_Configure_Return_Level:0000000000000058 $d
     /tmp/ccpqqMQi.s:2793   .text.AX_Configure_Alarm_LED:0000000000000000 $t
     /tmp/ccpqqMQi.s:2800   .text.AX_Configure_Alarm_LED:0000000000000000 AX_Configure_Alarm_LED
     /tmp/ccpqqMQi.s:2870   .text.AX_Configure_Alarm_LED:0000000000000050 $d
     /tmp/ccpqqMQi.s:2876   .text.AX_Configure_Alarm_Shutdown:0000000000000000 $t
     /tmp/ccpqqMQi.s:2883   .text.AX_Configure_Alarm_Shutdown:0000000000000000 AX_Configure_Alarm_Shutdown
     /tmp/ccpqqMQi.s:2953   .text.AX_Configure_Alarm_Shutdown:0000000000000050 $d
     /tmp/ccpqqMQi.s:2959   .text.AX_Power_On:0000000000000000 $t
     /tmp/ccpqqMQi.s:2966   .text.AX_Power_On:0000000000000000 AX_Power_On
     /tmp/ccpqqMQi.s:3012   .text.AX_Power_Off:0000000000000000 $t
     /tmp/ccpqqMQi.s:3019   .text.AX_Power_Off:0000000000000000 AX_Power_Off
     /tmp/ccpqqMQi.s:3065   .text.AX_Set_LED:0000000000000000 $t
     /tmp/ccpqqMQi.s:3136   .text.AX_Set_LED:0000000000000048 $d
     /tmp/ccpqqMQi.s:3141   .text.AX_Set_Compliance:0000000000000000 $t
     /tmp/ccpqqMQi.s:3148   .text.AX_Set_Compliance:0000000000000000 AX_Set_Compliance
     /tmp/ccpqqMQi.s:3225   .text.AX_Set_Compliance:0000000000000050 $d
     /tmp/ccpqqMQi.s:3230   .text.AX_Set_Goal_Position:0000000000000000 $t
     /tmp/ccpqqMQi.s:3237   .text.AX_Set_Goal_Position:0000000000000000 AX_Set_Goal_Position
     /tmp/ccpqqMQi.s:3303   .text.AX_Set_Goal_Position:0000000000000050 $d
     /tmp/ccpqqMQi.s:3308   .text.AX_Set_Goal_Speed_Join:0000000000000000 $t
     /tmp/ccpqqMQi.s:3315   .text.AX_Set_Goal_Speed_Join:0000000000000000 AX_Set_Goal_Speed_Join
     /tmp/ccpqqMQi.s:3381   .text.AX_Set_Goal_Speed_Join:0000000000000050 $d
     /tmp/ccpqqMQi.s:3386   .text.AX_Set_Goal_Speed_Wheel:0000000000000000 $t
     /tmp/ccpqqMQi.s:3393   .text.AX_Set_Goal_Speed_Wheel:0000000000000000 AX_Set_Goal_Speed_Wheel
ARM GAS  /tmp/ccpqqMQi.s 			page 88


     /tmp/ccpqqMQi.s:3490   .text.AX_Set_Goal_Speed_Wheel:000000000000007c $d
     /tmp/ccpqqMQi.s:3495   .text.AX_Set_Torque_Limit:0000000000000000 $t
     /tmp/ccpqqMQi.s:3502   .text.AX_Set_Torque_Limit:0000000000000000 AX_Set_Torque_Limit
     /tmp/ccpqqMQi.s:3568   .text.AX_Set_Torque_Limit:0000000000000050 $d
     /tmp/ccpqqMQi.s:3573   .text.AX_Set_Punch:0000000000000000 $t
     /tmp/ccpqqMQi.s:3580   .text.AX_Set_Punch:0000000000000000 AX_Set_Punch
     /tmp/ccpqqMQi.s:3651   .text.AX_Set_Punch:0000000000000054 $d
     /tmp/ccpqqMQi.s:3656   .text.AX_Lock_ROM:0000000000000000 $t
     /tmp/ccpqqMQi.s:3663   .text.AX_Lock_ROM:0000000000000000 AX_Lock_ROM
     /tmp/ccpqqMQi.s:3709   .text.AX_Unlock_ROM:0000000000000000 $t
     /tmp/ccpqqMQi.s:3716   .text.AX_Unlock_ROM:0000000000000000 AX_Unlock_ROM
     /tmp/ccpqqMQi.s:3762   .text.AX_Get_Current_Position:0000000000000000 $t
     /tmp/ccpqqMQi.s:3769   .text.AX_Get_Current_Position:0000000000000000 AX_Get_Current_Position
     /tmp/ccpqqMQi.s:3808   .text.AX_Get_Current_Speed:0000000000000000 $t
     /tmp/ccpqqMQi.s:3815   .text.AX_Get_Current_Speed:0000000000000000 AX_Get_Current_Speed
     /tmp/ccpqqMQi.s:3883   .text.AX_Get_Current_Load:0000000000000000 $t
     /tmp/ccpqqMQi.s:3890   .text.AX_Get_Current_Load:0000000000000000 AX_Get_Current_Load
     /tmp/ccpqqMQi.s:3958   .text.AX_Get_Current_Voltage:0000000000000000 $t
     /tmp/ccpqqMQi.s:3965   .text.AX_Get_Current_Voltage:0000000000000000 AX_Get_Current_Voltage
     /tmp/ccpqqMQi.s:4004   .text.AX_Get_Current_Temperature:0000000000000000 $t
     /tmp/ccpqqMQi.s:4011   .text.AX_Get_Current_Temperature:0000000000000000 AX_Get_Current_Temperature
     /tmp/ccpqqMQi.s:4050   .text.AX_Is_Working:0000000000000000 $t
     /tmp/ccpqqMQi.s:4057   .text.AX_Is_Working:0000000000000000 AX_Is_Working
     /tmp/ccpqqMQi.s:4096   .text.AX_Is_Moving:0000000000000000 $t
     /tmp/ccpqqMQi.s:4103   .text.AX_Is_Moving:0000000000000000 AX_Is_Moving
     /tmp/ccpqqMQi.s:4142   .bss.params.6821:0000000000000000 $d
     /tmp/ccpqqMQi.s:4148   .bss.packet.6820:0000000000000000 $d

NO UNDEFINED SYMBOLS
