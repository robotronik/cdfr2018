ARM GAS  /tmp/cc3YNNqS.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fsm_unstack.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.CHANNEL_OFFSET_TAB,"a",%progbits
  18              		.align	2
  21              	CHANNEL_OFFSET_TAB:
  22 0000 08       		.byte	8
  23 0001 1C       		.byte	28
  24 0002 30       		.byte	48
  25 0003 44       		.byte	68
  26 0004 58       		.byte	88
  27 0005 6C       		.byte	108
  28 0006 80       		.byte	-128
  29              		.comm	fsm,4,4
  30              		.section	.text.FSM_Unstack_Init,"ax",%progbits
  31              		.align	1
  32              		.global	FSM_Unstack_Init
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  36              		.fpu fpv4-sp-d16
  38              	FSM_Unstack_Init:
  39              	.LFB695:
  40              		.file 1 "Src/fsm_unstack.c"
   1:Src/fsm_unstack.c **** #include "fsm_unstack.h"
   2:Src/fsm_unstack.c **** 
   3:Src/fsm_unstack.c **** void FSM_Unstack_Init(FSM_Instance *fsm)
   4:Src/fsm_unstack.c **** {
  41              		.loc 1 4 0
  42              		.cfi_startproc
  43              		@ args = 0, pretend = 0, frame = 16
  44              		@ frame_needed = 1, uses_anonymous_args = 0
  45              		@ link register save eliminated.
  46 0000 80B4     		push	{r7}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 4
  49              		.cfi_offset 7, -4
  50 0002 85B0     		sub	sp, sp, #20
  51              	.LCFI1:
  52              		.cfi_def_cfa_offset 24
  53 0004 00AF     		add	r7, sp, #0
  54              	.LCFI2:
  55              		.cfi_def_cfa_register 7
  56 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cc3YNNqS.s 			page 2


   5:Src/fsm_unstack.c ****   FSM_Unstack *fsm_unstack=(FSM_Unstack *) fsm;
  57              		.loc 1 5 0
  58 0008 7B68     		ldr	r3, [r7, #4]
  59 000a FB60     		str	r3, [r7, #12]
   6:Src/fsm_unstack.c ****   fsm_unstack->nramp=0;//ramp ramp_generator initialisation
  60              		.loc 1 6 0
  61 000c FB68     		ldr	r3, [r7, #12]
  62 000e 0022     		movs	r2, #0
  63 0010 1A61     		str	r2, [r3, #16]
   7:Src/fsm_unstack.c ****   fsm_unstack->imp_start=encoder.steps;
  64              		.loc 1 7 0
  65 0012 084B     		ldr	r3, .L2
  66 0014 5A68     		ldr	r2, [r3, #4]
  67 0016 FB68     		ldr	r3, [r7, #12]
  68 0018 DA60     		str	r2, [r3, #12]
   8:Src/fsm_unstack.c ****   fsm->status=FSM_RUNNING;
  69              		.loc 1 8 0
  70 001a 7B68     		ldr	r3, [r7, #4]
  71 001c 0022     		movs	r2, #0
  72 001e 1A71     		strb	r2, [r3, #4]
   9:Src/fsm_unstack.c ****   fsm->run=FSM_Unstack_P0;
  73              		.loc 1 9 0
  74 0020 7B68     		ldr	r3, [r7, #4]
  75 0022 054A     		ldr	r2, .L2+4
  76 0024 1A60     		str	r2, [r3]
  10:Src/fsm_unstack.c **** }
  77              		.loc 1 10 0
  78 0026 00BF     		nop
  79 0028 1437     		adds	r7, r7, #20
  80              	.LCFI3:
  81              		.cfi_def_cfa_offset 4
  82 002a BD46     		mov	sp, r7
  83              	.LCFI4:
  84              		.cfi_def_cfa_register 13
  85              		@ sp needed
  86 002c 5DF8047B 		ldr	r7, [sp], #4
  87              	.LCFI5:
  88              		.cfi_restore 7
  89              		.cfi_def_cfa_offset 0
  90 0030 7047     		bx	lr
  91              	.L3:
  92 0032 00BF     		.align	2
  93              	.L2:
  94 0034 00000000 		.word	encoder
  95 0038 00000000 		.word	FSM_Unstack_P0
  96              		.cfi_endproc
  97              	.LFE695:
  99              		.section	.text.FSM_Unstack_P0,"ax",%progbits
 100              		.align	1
 101              		.global	FSM_Unstack_P0
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu fpv4-sp-d16
 107              	FSM_Unstack_P0:
 108              	.LFB696:
  11:Src/fsm_unstack.c **** 
ARM GAS  /tmp/cc3YNNqS.s 			page 3


  12:Src/fsm_unstack.c **** void FSM_Unstack_P0(FSM_Instance *fsm)
  13:Src/fsm_unstack.c **** {
 109              		.loc 1 13 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 16
 112              		@ frame_needed = 1, uses_anonymous_args = 0
 113 0000 80B5     		push	{r7, lr}
 114              	.LCFI6:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 84B0     		sub	sp, sp, #16
 119              	.LCFI7:
 120              		.cfi_def_cfa_offset 24
 121 0004 00AF     		add	r7, sp, #0
 122              	.LCFI8:
 123              		.cfi_def_cfa_register 7
 124 0006 7860     		str	r0, [r7, #4]
  14:Src/fsm_unstack.c ****   FSM_Unstack *fsm_unstack=(FSM_Unstack *) fsm;
 125              		.loc 1 14 0
 126 0008 7B68     		ldr	r3, [r7, #4]
 127 000a FB60     		str	r3, [r7, #12]
  15:Src/fsm_unstack.c ****   //imp_goal=P0;
  16:Src/fsm_unstack.c ****   imp_goal=ramp_generator(P0,fsm_unstack->imp_start,&(fsm_unstack->nramp),NCYCLEBIG);
 128              		.loc 1 16 0
 129 000c FB68     		ldr	r3, [r7, #12]
 130 000e D968     		ldr	r1, [r3, #12]
 131 0010 FB68     		ldr	r3, [r7, #12]
 132 0012 03F11002 		add	r2, r3, #16
 133 0016 1423     		movs	r3, #20
 134 0018 4FF4FA40 		mov	r0, #32000
 135 001c FFF7FEFF 		bl	ramp_generator
 136 0020 0246     		mov	r2, r0
 137 0022 0A4B     		ldr	r3, .L7
 138 0024 1A60     		str	r2, [r3]
  17:Src/fsm_unstack.c ****   if(reached(&pid_z,P0-encoder.steps))
 139              		.loc 1 17 0
 140 0026 0A4B     		ldr	r3, .L7+4
 141 0028 5B68     		ldr	r3, [r3, #4]
 142 002a C3F5FA43 		rsb	r3, r3, #32000
 143 002e 1946     		mov	r1, r3
 144 0030 0848     		ldr	r0, .L7+8
 145 0032 FFF7FEFF 		bl	reached
 146 0036 0346     		mov	r3, r0
 147 0038 002B     		cmp	r3, #0
 148 003a 02D0     		beq	.L6
  18:Src/fsm_unstack.c ****   {
  19:Src/fsm_unstack.c ****       fsm->run=FSM_Unstack_Open;
 149              		.loc 1 19 0
 150 003c 7B68     		ldr	r3, [r7, #4]
 151 003e 064A     		ldr	r2, .L7+12
 152 0040 1A60     		str	r2, [r3]
 153              	.L6:
  20:Src/fsm_unstack.c ****   }
  21:Src/fsm_unstack.c **** }
 154              		.loc 1 21 0
 155 0042 00BF     		nop
ARM GAS  /tmp/cc3YNNqS.s 			page 4


 156 0044 1037     		adds	r7, r7, #16
 157              	.LCFI9:
 158              		.cfi_def_cfa_offset 8
 159 0046 BD46     		mov	sp, r7
 160              	.LCFI10:
 161              		.cfi_def_cfa_register 13
 162              		@ sp needed
 163 0048 80BD     		pop	{r7, pc}
 164              	.L8:
 165 004a 00BF     		.align	2
 166              	.L7:
 167 004c 00000000 		.word	imp_goal
 168 0050 00000000 		.word	encoder
 169 0054 00000000 		.word	pid_z
 170 0058 00000000 		.word	FSM_Unstack_Open
 171              		.cfi_endproc
 172              	.LFE696:
 174              		.section	.text.FSM_Unstack_Open,"ax",%progbits
 175              		.align	1
 176              		.global	FSM_Unstack_Open
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu fpv4-sp-d16
 182              	FSM_Unstack_Open:
 183              	.LFB697:
  22:Src/fsm_unstack.c **** 
  23:Src/fsm_unstack.c **** void FSM_Unstack_Open(FSM_Instance *fsm)
  24:Src/fsm_unstack.c **** {
 184              		.loc 1 24 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 16
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188 0000 80B5     		push	{r7, lr}
 189              	.LCFI11:
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 7, -8
 192              		.cfi_offset 14, -4
 193 0002 84B0     		sub	sp, sp, #16
 194              	.LCFI12:
 195              		.cfi_def_cfa_offset 24
 196 0004 00AF     		add	r7, sp, #0
 197              	.LCFI13:
 198              		.cfi_def_cfa_register 7
 199 0006 7860     		str	r0, [r7, #4]
  25:Src/fsm_unstack.c ****   FSM_Unstack *fsm_unstack=(FSM_Unstack *) fsm;
 200              		.loc 1 25 0
 201 0008 7B68     		ldr	r3, [r7, #4]
 202 000a FB60     		str	r3, [r7, #12]
  26:Src/fsm_unstack.c ****   Z_Open_Small();
 203              		.loc 1 26 0
 204 000c FFF7FEFF 		bl	Z_Open_Small
  27:Src/fsm_unstack.c ****   if(Z_Is_Open_Small())
 205              		.loc 1 27 0
 206 0010 FFF7FEFF 		bl	Z_Is_Open_Small
 207 0014 0346     		mov	r3, r0
 208 0016 002B     		cmp	r3, #0
ARM GAS  /tmp/cc3YNNqS.s 			page 5


 209 0018 09D0     		beq	.L11
  28:Src/fsm_unstack.c ****   {
  29:Src/fsm_unstack.c ****     fsm->run=FSM_Unstack_P3;
 210              		.loc 1 29 0
 211 001a 7B68     		ldr	r3, [r7, #4]
 212 001c 064A     		ldr	r2, .L12
 213 001e 1A60     		str	r2, [r3]
  30:Src/fsm_unstack.c ****     fsm_unstack->nramp=0;//ramp ramp_generator initialisation
 214              		.loc 1 30 0
 215 0020 FB68     		ldr	r3, [r7, #12]
 216 0022 0022     		movs	r2, #0
 217 0024 1A61     		str	r2, [r3, #16]
  31:Src/fsm_unstack.c ****     fsm_unstack->imp_start=encoder.steps;
 218              		.loc 1 31 0
 219 0026 054B     		ldr	r3, .L12+4
 220 0028 5A68     		ldr	r2, [r3, #4]
 221 002a FB68     		ldr	r3, [r7, #12]
 222 002c DA60     		str	r2, [r3, #12]
 223              	.L11:
  32:Src/fsm_unstack.c ****   }
  33:Src/fsm_unstack.c **** }
 224              		.loc 1 33 0
 225 002e 00BF     		nop
 226 0030 1037     		adds	r7, r7, #16
 227              	.LCFI14:
 228              		.cfi_def_cfa_offset 8
 229 0032 BD46     		mov	sp, r7
 230              	.LCFI15:
 231              		.cfi_def_cfa_register 13
 232              		@ sp needed
 233 0034 80BD     		pop	{r7, pc}
 234              	.L13:
 235 0036 00BF     		.align	2
 236              	.L12:
 237 0038 00000000 		.word	FSM_Unstack_P3
 238 003c 00000000 		.word	encoder
 239              		.cfi_endproc
 240              	.LFE697:
 242              		.section	.text.FSM_Unstack_P3,"ax",%progbits
 243              		.align	1
 244              		.global	FSM_Unstack_P3
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu fpv4-sp-d16
 250              	FSM_Unstack_P3:
 251              	.LFB698:
  34:Src/fsm_unstack.c **** 
  35:Src/fsm_unstack.c **** void FSM_Unstack_P3(FSM_Instance *fsm)
  36:Src/fsm_unstack.c **** {
 252              		.loc 1 36 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 16
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256 0000 80B5     		push	{r7, lr}
 257              	.LCFI16:
 258              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc3YNNqS.s 			page 6


 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 84B0     		sub	sp, sp, #16
 262              	.LCFI17:
 263              		.cfi_def_cfa_offset 24
 264 0004 00AF     		add	r7, sp, #0
 265              	.LCFI18:
 266              		.cfi_def_cfa_register 7
 267 0006 7860     		str	r0, [r7, #4]
  37:Src/fsm_unstack.c ****   FSM_Unstack *fsm_unstack=(FSM_Unstack *) fsm;
 268              		.loc 1 37 0
 269 0008 7B68     		ldr	r3, [r7, #4]
 270 000a FB60     		str	r3, [r7, #12]
  38:Src/fsm_unstack.c ****   //imp_goal=P3;
  39:Src/fsm_unstack.c ****   ramp_generator(P3,fsm_unstack->imp_start,&(fsm_unstack->nramp),NCYCLEBIG);
 271              		.loc 1 39 0
 272 000c FB68     		ldr	r3, [r7, #12]
 273 000e D968     		ldr	r1, [r3, #12]
 274 0010 FB68     		ldr	r3, [r7, #12]
 275 0012 03F11002 		add	r2, r3, #16
 276 0016 1423     		movs	r3, #20
 277 0018 4FF4E160 		mov	r0, #1800
 278 001c FFF7FEFF 		bl	ramp_generator
  40:Src/fsm_unstack.c ****   if(reached(&pid_z,P3-encoder.steps))
 279              		.loc 1 40 0
 280 0020 084B     		ldr	r3, .L17
 281 0022 5B68     		ldr	r3, [r3, #4]
 282 0024 C3F5E163 		rsb	r3, r3, #1800
 283 0028 1946     		mov	r1, r3
 284 002a 0748     		ldr	r0, .L17+4
 285 002c FFF7FEFF 		bl	reached
 286 0030 0346     		mov	r3, r0
 287 0032 002B     		cmp	r3, #0
 288 0034 02D0     		beq	.L16
  41:Src/fsm_unstack.c ****   {
  42:Src/fsm_unstack.c ****       fsm->run=FSM_Unstack_Close;
 289              		.loc 1 42 0
 290 0036 7B68     		ldr	r3, [r7, #4]
 291 0038 044A     		ldr	r2, .L17+8
 292 003a 1A60     		str	r2, [r3]
 293              	.L16:
  43:Src/fsm_unstack.c ****   }
  44:Src/fsm_unstack.c **** }
 294              		.loc 1 44 0
 295 003c 00BF     		nop
 296 003e 1037     		adds	r7, r7, #16
 297              	.LCFI19:
 298              		.cfi_def_cfa_offset 8
 299 0040 BD46     		mov	sp, r7
 300              	.LCFI20:
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 0042 80BD     		pop	{r7, pc}
 304              	.L18:
 305              		.align	2
 306              	.L17:
 307 0044 00000000 		.word	encoder
ARM GAS  /tmp/cc3YNNqS.s 			page 7


 308 0048 00000000 		.word	pid_z
 309 004c 00000000 		.word	FSM_Unstack_Close
 310              		.cfi_endproc
 311              	.LFE698:
 313              		.section	.text.FSM_Unstack_Close,"ax",%progbits
 314              		.align	1
 315              		.global	FSM_Unstack_Close
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv4-sp-d16
 321              	FSM_Unstack_Close:
 322              	.LFB699:
  45:Src/fsm_unstack.c **** 
  46:Src/fsm_unstack.c **** void FSM_Unstack_Close(FSM_Instance *fsm)
  47:Src/fsm_unstack.c **** {
 323              		.loc 1 47 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 16
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327 0000 80B5     		push	{r7, lr}
 328              	.LCFI21:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0002 84B0     		sub	sp, sp, #16
 333              	.LCFI22:
 334              		.cfi_def_cfa_offset 24
 335 0004 00AF     		add	r7, sp, #0
 336              	.LCFI23:
 337              		.cfi_def_cfa_register 7
 338 0006 7860     		str	r0, [r7, #4]
  48:Src/fsm_unstack.c ****   uint16_t load_d,load_g;
  49:Src/fsm_unstack.c ****   AX_Wheel_Direction d;
  50:Src/fsm_unstack.c ****   Z_Close();
 339              		.loc 1 50 0
 340 0008 FFF7FEFF 		bl	Z_Close
  51:Src/fsm_unstack.c ****   AX_Get_Current_Load(&servo_g, &d, &load_g);
 341              		.loc 1 51 0
 342 000c 07F10C02 		add	r2, r7, #12
 343 0010 07F10B03 		add	r3, r7, #11
 344 0014 1946     		mov	r1, r3
 345 0016 0C48     		ldr	r0, .L22
 346 0018 FFF7FEFF 		bl	AX_Get_Current_Load
  52:Src/fsm_unstack.c ****   AX_Get_Current_Load(&servo_d, &d, &load_d);
 347              		.loc 1 52 0
 348 001c 07F10E02 		add	r2, r7, #14
 349 0020 07F10B03 		add	r3, r7, #11
 350 0024 1946     		mov	r1, r3
 351 0026 0948     		ldr	r0, .L22+4
 352 0028 FFF7FEFF 		bl	AX_Get_Current_Load
  53:Src/fsm_unstack.c ****   if(load_d>AX_CLOSE_LOAD && load_g>AX_CLOSE_LOAD) fsm->run=FSM_Unstack_End;
 353              		.loc 1 53 0
 354 002c FB89     		ldrh	r3, [r7, #14]
 355 002e 642B     		cmp	r3, #100
 356 0030 05D9     		bls	.L21
 357              		.loc 1 53 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc3YNNqS.s 			page 8


 358 0032 BB89     		ldrh	r3, [r7, #12]
 359 0034 642B     		cmp	r3, #100
 360 0036 02D9     		bls	.L21
 361              		.loc 1 53 0 discriminator 2
 362 0038 7B68     		ldr	r3, [r7, #4]
 363 003a 054A     		ldr	r2, .L22+8
 364 003c 1A60     		str	r2, [r3]
 365              	.L21:
  54:Src/fsm_unstack.c **** }
 366              		.loc 1 54 0 is_stmt 1
 367 003e 00BF     		nop
 368 0040 1037     		adds	r7, r7, #16
 369              	.LCFI24:
 370              		.cfi_def_cfa_offset 8
 371 0042 BD46     		mov	sp, r7
 372              	.LCFI25:
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0044 80BD     		pop	{r7, pc}
 376              	.L23:
 377 0046 00BF     		.align	2
 378              	.L22:
 379 0048 00000000 		.word	servo_g
 380 004c 00000000 		.word	servo_d
 381 0050 00000000 		.word	FSM_Unstack_End
 382              		.cfi_endproc
 383              	.LFE699:
 385              		.section	.text.FSM_Unstack_End,"ax",%progbits
 386              		.align	1
 387              		.global	FSM_Unstack_End
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu fpv4-sp-d16
 393              	FSM_Unstack_End:
 394              	.LFB700:
  55:Src/fsm_unstack.c **** 
  56:Src/fsm_unstack.c **** void FSM_Unstack_End(FSM_Instance *fsm)
  57:Src/fsm_unstack.c **** {
 395              		.loc 1 57 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 8
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400 0000 80B4     		push	{r7}
 401              	.LCFI26:
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0002 83B0     		sub	sp, sp, #12
 405              	.LCFI27:
 406              		.cfi_def_cfa_offset 16
 407 0004 00AF     		add	r7, sp, #0
 408              	.LCFI28:
 409              		.cfi_def_cfa_register 7
 410 0006 7860     		str	r0, [r7, #4]
  58:Src/fsm_unstack.c ****   fsm->status=FSM_SUCCESS;
 411              		.loc 1 58 0
ARM GAS  /tmp/cc3YNNqS.s 			page 9


 412 0008 7B68     		ldr	r3, [r7, #4]
 413 000a 0122     		movs	r2, #1
 414 000c 1A71     		strb	r2, [r3, #4]
  59:Src/fsm_unstack.c **** }
 415              		.loc 1 59 0
 416 000e 00BF     		nop
 417 0010 0C37     		adds	r7, r7, #12
 418              	.LCFI29:
 419              		.cfi_def_cfa_offset 4
 420 0012 BD46     		mov	sp, r7
 421              	.LCFI30:
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0014 5DF8047B 		ldr	r7, [sp], #4
 425              	.LCFI31:
 426              		.cfi_restore 7
 427              		.cfi_def_cfa_offset 0
 428 0018 7047     		bx	lr
 429              		.cfi_endproc
 430              	.LFE700:
 432              		.text
 433              	.Letext0:
 434              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 435              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 436              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 437              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 438              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 439              		.file 7 "Inc/ax_12a.h"
 440              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 441              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 442              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 443              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 444              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 445              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 446              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 447              		.file 15 "Inc/fsm_master.h"
 448              		.file 16 "/usr/arm-none-eabi/include/stdlib.h"
 449              		.file 17 "Inc/Robotronik_corp_pid.h"
 450              		.file 18 "Inc/encoder.h"
 451              		.file 19 "Inc/Z_axis.h"
 452              		.file 20 "Inc/fsm_unstack.h"
 453              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h"
ARM GAS  /tmp/cc3YNNqS.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 fsm_unstack.c
     /tmp/cc3YNNqS.s:18     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/cc3YNNqS.s:21     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
                            *COM*:0000000000000004 fsm
     /tmp/cc3YNNqS.s:31     .text.FSM_Unstack_Init:0000000000000000 $t
     /tmp/cc3YNNqS.s:38     .text.FSM_Unstack_Init:0000000000000000 FSM_Unstack_Init
     /tmp/cc3YNNqS.s:94     .text.FSM_Unstack_Init:0000000000000034 $d
     /tmp/cc3YNNqS.s:107    .text.FSM_Unstack_P0:0000000000000000 FSM_Unstack_P0
     /tmp/cc3YNNqS.s:100    .text.FSM_Unstack_P0:0000000000000000 $t
     /tmp/cc3YNNqS.s:167    .text.FSM_Unstack_P0:000000000000004c $d
     /tmp/cc3YNNqS.s:182    .text.FSM_Unstack_Open:0000000000000000 FSM_Unstack_Open
     /tmp/cc3YNNqS.s:175    .text.FSM_Unstack_Open:0000000000000000 $t
     /tmp/cc3YNNqS.s:237    .text.FSM_Unstack_Open:0000000000000038 $d
     /tmp/cc3YNNqS.s:250    .text.FSM_Unstack_P3:0000000000000000 FSM_Unstack_P3
     /tmp/cc3YNNqS.s:243    .text.FSM_Unstack_P3:0000000000000000 $t
     /tmp/cc3YNNqS.s:307    .text.FSM_Unstack_P3:0000000000000044 $d
     /tmp/cc3YNNqS.s:321    .text.FSM_Unstack_Close:0000000000000000 FSM_Unstack_Close
     /tmp/cc3YNNqS.s:314    .text.FSM_Unstack_Close:0000000000000000 $t
     /tmp/cc3YNNqS.s:379    .text.FSM_Unstack_Close:0000000000000048 $d
     /tmp/cc3YNNqS.s:393    .text.FSM_Unstack_End:0000000000000000 FSM_Unstack_End
     /tmp/cc3YNNqS.s:386    .text.FSM_Unstack_End:0000000000000000 $t

UNDEFINED SYMBOLS
encoder
ramp_generator
reached
imp_goal
pid_z
Z_Open_Small
Z_Is_Open_Small
Z_Close
AX_Get_Current_Load
servo_g
servo_d
