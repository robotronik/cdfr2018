ARM GAS  /tmp/ccaEDy0V.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"main.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.AX_Receive_HAL,"ax",%progbits
  21              		.align	2
  22              		.global	AX_Receive_HAL
  23              		.thumb
  24              		.thumb_func
  26              	AX_Receive_HAL:
  27              	.LFB692:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /tmp/ccaEDy0V.s 			page 2


  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f3xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** #include "Robotronik_corp_pid.h"
  45:Src/main.c    **** #include "ax_12a.h"
  46:Src/main.c    **** #include "Z_axis.h"
  47:Src/main.c    **** #include "encoder.h"
  48:Src/main.c    **** 
  49:Src/main.c    **** #include "robotronik_protocol.h"
  50:Src/main.c    **** #include "robotronik_protocol_stm32f3.h"
  51:Src/main.c    **** /* USER CODE END Includes */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  54:Src/main.c    **** ADC_HandleTypeDef hadc2;
  55:Src/main.c    **** 
  56:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  57:Src/main.c    **** 
  58:Src/main.c    **** TIM_HandleTypeDef htim2;
  59:Src/main.c    **** TIM_HandleTypeDef htim3;
  60:Src/main.c    **** TIM_HandleTypeDef htim15;
  61:Src/main.c    **** 
  62:Src/main.c    **** UART_HandleTypeDef huart1;
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PV */
  65:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  66:Src/main.c    **** PID_DATA pid_z;
  67:Src/main.c    **** volatile Encoder encoder;
  68:Src/main.c    **** 
  69:Src/main.c    **** RP_Interface iface_rpi;
  70:Src/main.c    **** volatile uint8_t level = 0;
  71:Src/main.c    **** uint8_t buffer;
  72:Src/main.c    **** 
  73:Src/main.c    **** typedef enum Z_Functions_E{
  74:Src/main.c    ****   SET_PWM,
  75:Src/main.c    ****   STOP
  76:Src/main.c    **** }Z_Functions;
  77:Src/main.c    **** /* USER CODE END PV */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  80:Src/main.c    **** void SystemClock_Config(void);
  81:Src/main.c    **** static void MX_GPIO_Init(void);
  82:Src/main.c    **** static void MX_DMA_Init(void);
  83:Src/main.c    **** static void MX_ADC2_Init(void);
  84:Src/main.c    **** static void MX_I2C1_Init(void);
  85:Src/main.c    **** static void MX_TIM2_Init(void);
  86:Src/main.c    **** static void MX_TIM3_Init(void);
  87:Src/main.c    **** static void MX_USART1_UART_Init(void);
ARM GAS  /tmp/ccaEDy0V.s 			page 3


  88:Src/main.c    **** static void MX_USART2_UART_Init(void);
  89:Src/main.c    **** static void MX_TIM15_Init(void);
  90:Src/main.c    **** 
  91:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  92:Src/main.c    **** 
  93:Src/main.c    **** 
  94:Src/main.c    **** /* USER CODE BEGIN PFP */
  95:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  96:Src/main.c    **** 
  97:Src/main.c    **** AX_Interface interface;
  98:Src/main.c    **** 
  99:Src/main.c    **** uint8_t AX_Receive_HAL(uint8_t *buffer, uint16_t size, uint32_t timeout){
  29              		.loc 1 99 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 99 0
  40 0002 0C46     		mov	r4, r1
  41 0004 1346     		mov	r3, r2
 100:Src/main.c    ****   HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, buffer, size, timeout);
  42              		.loc 1 100 0
  43 0006 0146     		mov	r1, r0
  44              	.LVL1:
  45 0008 2246     		mov	r2, r4
  46              	.LVL2:
  47 000a 0348     		ldr	r0, .L3
  48              	.LVL3:
  49 000c FFF7FEFF 		bl	HAL_UART_Receive
  50              	.LVL4:
 101:Src/main.c    ****   return (status==HAL_OK)?0:1;
 102:Src/main.c    **** }
  51              		.loc 1 102 0
  52 0010 0030     		adds	r0, r0, #0
  53              	.LVL5:
  54 0012 18BF     		it	ne
  55 0014 0120     		movne	r0, #1
  56 0016 10BD     		pop	{r4, pc}
  57              	.L4:
  58              		.align	2
  59              	.L3:
  60 0018 00000000 		.word	huart1
  61              		.cfi_endproc
  62              	.LFE692:
  64              		.section	.text.AX_Send_HAL,"ax",%progbits
  65              		.align	2
  66              		.global	AX_Send_HAL
  67              		.thumb
  68              		.thumb_func
  70              	AX_Send_HAL:
  71              	.LFB693:
 103:Src/main.c    **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 4


 104:Src/main.c    **** uint8_t AX_Send_HAL(uint8_t *data, uint16_t size, uint32_t timeout){
  72              		.loc 1 104 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              	.LVL6:
  77 0000 10B5     		push	{r4, lr}
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  82              		.loc 1 104 0
  83 0002 0C46     		mov	r4, r1
  84 0004 1346     		mov	r3, r2
 105:Src/main.c    ****   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, timeout);
  85              		.loc 1 105 0
  86 0006 0146     		mov	r1, r0
  87              	.LVL7:
  88 0008 2246     		mov	r2, r4
  89              	.LVL8:
  90 000a 0348     		ldr	r0, .L7
  91              	.LVL9:
  92 000c FFF7FEFF 		bl	HAL_UART_Transmit
  93              	.LVL10:
 106:Src/main.c    ****   return (status==HAL_OK)?0:1;
 107:Src/main.c    **** }
  94              		.loc 1 107 0
  95 0010 0030     		adds	r0, r0, #0
  96              	.LVL11:
  97 0012 18BF     		it	ne
  98 0014 0120     		movne	r0, #1
  99 0016 10BD     		pop	{r4, pc}
 100              	.L8:
 101              		.align	2
 102              	.L7:
 103 0018 00000000 		.word	huart1
 104              		.cfi_endproc
 105              	.LFE693:
 107              		.section	.text.AX_Set_Direction_HAL,"ax",%progbits
 108              		.align	2
 109              		.global	AX_Set_Direction_HAL
 110              		.thumb
 111              		.thumb_func
 113              	AX_Set_Direction_HAL:
 114              	.LFB694:
 108:Src/main.c    **** 
 109:Src/main.c    **** void AX_Set_Direction_HAL(AX_Direction dir){
 115              		.loc 1 109 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL12:
 110:Src/main.c    ****   HAL_GPIO_WritePin(EN_Servo_GPIO_Port, EN_Servo_Pin, (dir==AX_SEND)?GPIO_PIN_SET:GPIO_PIN_RESET);
 121              		.loc 1 110 0
 122 0000 B0FA80F2 		clz	r2, r0
 123 0004 4FF48071 		mov	r1, #256
ARM GAS  /tmp/ccaEDy0V.s 			page 5


 124 0008 5209     		lsrs	r2, r2, #5
 125 000a 4FF09040 		mov	r0, #1207959552
 126              	.LVL13:
 127 000e FFF7FEBF 		b	HAL_GPIO_WritePin
 128              	.LVL14:
 129              		.cfi_endproc
 130              	.LFE694:
 132 0012 00BF     		.section	.text.AX_Delay_HAL,"ax",%progbits
 133              		.align	2
 134              		.global	AX_Delay_HAL
 135              		.thumb
 136              		.thumb_func
 138              	AX_Delay_HAL:
 139              	.LFB695:
 111:Src/main.c    **** }
 112:Src/main.c    **** 
 113:Src/main.c    **** void AX_Delay_HAL(uint32_t t){
 140              		.loc 1 113 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL15:
 114:Src/main.c    ****   HAL_Delay(t);
 146              		.loc 1 114 0
 147 0000 FFF7FEBF 		b	HAL_Delay
 148              	.LVL16:
 149              		.cfi_endproc
 150              	.LFE695:
 152              		.section	.text.SystemClock_Config,"ax",%progbits
 153              		.align	2
 154              		.global	SystemClock_Config
 155              		.thumb
 156              		.thumb_func
 158              	SystemClock_Config:
 159              	.LFB697:
 115:Src/main.c    **** }
 116:Src/main.c    **** /* USER CODE END PFP */
 117:Src/main.c    **** 
 118:Src/main.c    **** /* USER CODE BEGIN 0 */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* USER CODE END 0 */
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  The application entry point.
 124:Src/main.c    ****   *
 125:Src/main.c    ****   * @retval None
 126:Src/main.c    ****   */
 127:Src/main.c    **** int main(void)
 128:Src/main.c    **** {
 129:Src/main.c    ****   /* USER CODE BEGIN 1 */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE END 1 */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /tmp/ccaEDy0V.s 			page 6


 136:Src/main.c    ****   HAL_Init();
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN Init */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE END Init */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* Configure the system clock */
 143:Src/main.c    ****   SystemClock_Config();
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE END SysInit */
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* Initialize all configured peripherals */
 150:Src/main.c    ****   MX_GPIO_Init();
 151:Src/main.c    ****   MX_DMA_Init();
 152:Src/main.c    ****   MX_ADC2_Init();
 153:Src/main.c    ****   MX_I2C1_Init();
 154:Src/main.c    ****   MX_TIM2_Init();
 155:Src/main.c    ****   MX_TIM3_Init();
 156:Src/main.c    ****   MX_USART1_UART_Init();
 157:Src/main.c    ****   MX_USART2_UART_Init();
 158:Src/main.c    ****   MX_TIM15_Init();
 159:Src/main.c    ****   /* USER CODE BEGIN 2 */
 160:Src/main.c    ****   interface.receive = AX_Receive_HAL;
 161:Src/main.c    ****   interface.send = AX_Send_HAL;
 162:Src/main.c    ****   interface.set_direction = AX_Set_Direction_HAL;
 163:Src/main.c    ****   interface.delay = AX_Delay_HAL;
 164:Src/main.c    **** 
 165:Src/main.c    ****   float voltage=0;
 166:Src/main.c    ****   int imp_goal;
 167:Src/main.c    ****   int Te=10;
 168:Src/main.c    ****   pid_z.Kp=0.001;
 169:Src/main.c    ****   pid_z.Ki=0;
 170:Src/main.c    ****   pid_z.Kd=0;
 171:Src/main.c    ****   pid_z.Te=0.01;
 172:Src/main.c    ****   pid_init(&pid_z);
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* USER CODE END 2 */
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* Infinite loop */
 177:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 178:Src/main.c    ****   AX servo_ar = {.id = 1, .interface = &interface};
 179:Src/main.c    ****   AX servo_g = {.id = 2, .interface = &interface};
 180:Src/main.c    ****   AX servo_d = {.id = 3, .interface = &interface};
 181:Src/main.c    ****   //AX_Say_Hello(&servo);
 182:Src/main.c    ****   /*AX_Configure_ID(&servo, 2);
 183:Src/main.c    ****   while(1)
 184:Src/main.c    ****   {
 185:Src/main.c    ****     HAL_Delay(10);
 186:Src/main.c    ****   }
 187:Src/main.c    ****   */
 188:Src/main.c    ****   AX_Configure_Angle_Limit(&servo_ar, 0, 450);
 189:Src/main.c    ****   AX_Configure_Angle_Limit(&servo_g, 411, 511);
 190:Src/main.c    ****   AX_Configure_Angle_Limit(&servo_d, 511, 611);
 191:Src/main.c    ****   while(1)
 192:Src/main.c    ****   {
ARM GAS  /tmp/ccaEDy0V.s 			page 7


 193:Src/main.c    ****     AX_Set_Goal_Position(&servo_ar, 0, AX_NOW);
 194:Src/main.c    ****     AX_Set_Goal_Position(&servo_g, 411, AX_NOW);
 195:Src/main.c    ****     AX_Set_Goal_Position(&servo_d, 611, AX_NOW);
 196:Src/main.c    ****     HAL_Delay(2000);
 197:Src/main.c    ****     AX_Set_Goal_Position(&servo_ar, 400, AX_NOW);
 198:Src/main.c    ****     AX_Set_Goal_Position(&servo_g, 511, AX_NOW);
 199:Src/main.c    ****     AX_Set_Goal_Position(&servo_d, 511, AX_NOW);
 200:Src/main.c    ****     HAL_Delay(2000);
 201:Src/main.c    ****   }
 202:Src/main.c    **** 
 203:Src/main.c    ****   //https://www.pololu.com/product/1212
 204:Src/main.c    ****   MOTOR_INIT;
 205:Src/main.c    ****   MOTOR_FC;
 206:Src/main.c    ****   init_encoder(&encoder,&htim2,&htim15);
 207:Src/main.c    ****   start_encoder(&encoder);
 208:Src/main.c    ****   imp_goal=-2000;//warning no positive values
 209:Src/main.c    ****   while (1)
 210:Src/main.c    ****   {
 211:Src/main.c    **** 
 212:Src/main.c    ****     //HAL_ADC_PollForConversion(&hadc2, 100);
 213:Src/main.c    ****     //adcResult = HAL_ADC_GetValue(&hadc2);
 214:Src/main.c    ****     //voltage=pid(&pid_z,imp_goal-encoder.steps);
 215:Src/main.c    ****     voltage=0;
 216:Src/main.c    ****     MOTOR_VOLTAGE(voltage);
 217:Src/main.c    ****     HAL_Delay(Te);
 218:Src/main.c    ****     HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 219:Src/main.c    ****   /* USER CODE END WHILE */
 220:Src/main.c    **** 
 221:Src/main.c    ****   /* USER CODE BEGIN 3 */
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /* USER CODE END 3 */
 224:Src/main.c    **** 
 225:Src/main.c    **** }
 226:Src/main.c    **** 
 227:Src/main.c    **** /**
 228:Src/main.c    ****   * @brief System Clock Configuration
 229:Src/main.c    ****   * @retval None
 230:Src/main.c    ****   */
 231:Src/main.c    **** void SystemClock_Config(void)
 232:Src/main.c    **** {
 160              		.loc 1 232 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 88
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 30B5     		push	{r4, r5, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 12
 167              		.cfi_offset 4, -12
 168              		.cfi_offset 5, -8
 169              		.cfi_offset 14, -4
 170 0002 97B0     		sub	sp, sp, #92
 171              	.LCFI3:
 172              		.cfi_def_cfa_offset 104
 233:Src/main.c    **** 
 234:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 235:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 236:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
ARM GAS  /tmp/ccaEDy0V.s 			page 8


 237:Src/main.c    **** 
 238:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 239:Src/main.c    ****     */
 240:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 241:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 242:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 243:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 245:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 173              		.loc 1 245 0
 174 0004 4FF46013 		mov	r3, #3670016
 240:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 175              		.loc 1 240 0
 176 0008 0224     		movs	r4, #2
 242:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 177              		.loc 1 242 0
 178 000a 1021     		movs	r1, #16
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 179              		.loc 1 244 0
 180 000c 0022     		movs	r2, #0
 241:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 181              		.loc 1 241 0
 182 000e 0125     		movs	r5, #1
 246:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 183              		.loc 1 246 0
 184 0010 0CA8     		add	r0, sp, #48
 245:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 185              		.loc 1 245 0
 186 0012 1593     		str	r3, [sp, #84]
 240:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 187              		.loc 1 240 0
 188 0014 0C94     		str	r4, [sp, #48]
 243:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 189              		.loc 1 243 0
 190 0016 1394     		str	r4, [sp, #76]
 241:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 191              		.loc 1 241 0
 192 0018 1095     		str	r5, [sp, #64]
 242:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 193              		.loc 1 242 0
 194 001a 1191     		str	r1, [sp, #68]
 244:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 195              		.loc 1 244 0
 196 001c 1492     		str	r2, [sp, #80]
 197              		.loc 1 246 0
 198 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 199              	.LVL17:
 200 0022 0346     		mov	r3, r0
 201 0024 00B1     		cbz	r0, .L12
 202              	.L18:
 203 0026 FEE7     		b	.L18
 204              	.L12:
 247:Src/main.c    ****   {
 248:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 249:Src/main.c    ****   }
 250:Src/main.c    **** 
 251:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
ARM GAS  /tmp/ccaEDy0V.s 			page 9


 252:Src/main.c    ****     */
 253:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 254:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 255:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 256:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 257:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 205              		.loc 1 257 0
 206 0028 4FF48062 		mov	r2, #1024
 258:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 259:Src/main.c    **** 
 260:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 207              		.loc 1 260 0
 208 002c 2146     		mov	r1, r4
 253:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 209              		.loc 1 253 0
 210 002e 0F25     		movs	r5, #15
 211              		.loc 1 260 0
 212 0030 01A8     		add	r0, sp, #4
 256:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 213              		.loc 1 256 0
 214 0032 0393     		str	r3, [sp, #12]
 258:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 215              		.loc 1 258 0
 216 0034 0593     		str	r3, [sp, #20]
 255:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217              		.loc 1 255 0
 218 0036 0294     		str	r4, [sp, #8]
 253:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 219              		.loc 1 253 0
 220 0038 0195     		str	r5, [sp, #4]
 257:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 221              		.loc 1 257 0
 222 003a 0492     		str	r2, [sp, #16]
 223              		.loc 1 260 0
 224 003c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 225              	.LVL18:
 226 0040 0346     		mov	r3, r0
 227 0042 00B1     		cbz	r0, .L14
 228              	.L19:
 229 0044 FEE7     		b	.L19
 230              	.L14:
 261:Src/main.c    ****   {
 262:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 263:Src/main.c    ****   }
 264:Src/main.c    **** 
 265:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 231              		.loc 1 265 0
 232 0046 A121     		movs	r1, #161
 266:Src/main.c    ****                               |RCC_PERIPHCLK_ADC12;
 267:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 268:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 233              		.loc 1 268 0
 234 0048 4FF48072 		mov	r2, #256
 269:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 270:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 235              		.loc 1 270 0
 236 004c 06A8     		add	r0, sp, #24
ARM GAS  /tmp/ccaEDy0V.s 			page 10


 267:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 237              		.loc 1 267 0
 238 004e 0893     		str	r3, [sp, #32]
 269:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 239              		.loc 1 269 0
 240 0050 0993     		str	r3, [sp, #36]
 265:Src/main.c    ****                               |RCC_PERIPHCLK_ADC12;
 241              		.loc 1 265 0
 242 0052 0691     		str	r1, [sp, #24]
 268:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 243              		.loc 1 268 0
 244 0054 0A92     		str	r2, [sp, #40]
 245              		.loc 1 270 0
 246 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 247              	.LVL19:
 248 005a 0446     		mov	r4, r0
 249 005c 00B1     		cbz	r0, .L16
 250              	.L20:
 251 005e FEE7     		b	.L20
 252              	.L16:
 271:Src/main.c    ****   {
 272:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 273:Src/main.c    ****   }
 274:Src/main.c    **** 
 275:Src/main.c    ****     /**Configure the Systick interrupt time
 276:Src/main.c    ****     */
 277:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 253              		.loc 1 277 0
 254 0060 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 255              	.LVL20:
 256 0064 084B     		ldr	r3, .L23
 257 0066 A3FB0030 		umull	r3, r0, r3, r0
 258 006a 8009     		lsrs	r0, r0, #6
 259 006c FFF7FEFF 		bl	HAL_SYSTICK_Config
 260              	.LVL21:
 278:Src/main.c    **** 
 279:Src/main.c    ****     /**Configure the Systick
 280:Src/main.c    ****     */
 281:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 261              		.loc 1 281 0
 262 0070 0420     		movs	r0, #4
 263 0072 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 264              	.LVL22:
 282:Src/main.c    **** 
 283:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 284:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 265              		.loc 1 284 0
 266 0076 4FF0FF30 		mov	r0, #-1
 267 007a 2146     		mov	r1, r4
 268 007c 2246     		mov	r2, r4
 269 007e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 270              	.LVL23:
 285:Src/main.c    **** }
 271              		.loc 1 285 0
 272 0082 17B0     		add	sp, sp, #92
 273              	.LCFI4:
 274              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccaEDy0V.s 			page 11


 275              		@ sp needed
 276 0084 30BD     		pop	{r4, r5, pc}
 277              	.L24:
 278 0086 00BF     		.align	2
 279              	.L23:
 280 0088 D34D6210 		.word	274877907
 281              		.cfi_endproc
 282              	.LFE697:
 284              		.section	.text.startup.main,"ax",%progbits
 285              		.align	2
 286              		.global	main
 287              		.thumb
 288              		.thumb_func
 290              	main:
 291              	.LFB696:
 128:Src/main.c    ****   /* USER CODE BEGIN 1 */
 292              		.loc 1 128 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 88
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 297              	.LCFI5:
 298              		.cfi_def_cfa_offset 36
 299              		.cfi_offset 4, -36
 300              		.cfi_offset 5, -32
 301              		.cfi_offset 6, -28
 302              		.cfi_offset 7, -24
 303              		.cfi_offset 8, -20
 304              		.cfi_offset 9, -16
 305              		.cfi_offset 10, -12
 306              		.cfi_offset 11, -8
 307              		.cfi_offset 14, -4
 308              	.LBB132:
 309              	.LBB133:
 310              	.LBB134:
 286:Src/main.c    **** 
 287:Src/main.c    **** /* ADC2 init function */
 288:Src/main.c    **** static void MX_ADC2_Init(void)
 289:Src/main.c    **** {
 290:Src/main.c    **** 
 291:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 292:Src/main.c    **** 
 293:Src/main.c    ****     /**Common config
 294:Src/main.c    ****     */
 295:Src/main.c    ****   hadc2.Instance = ADC2;
 296:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 297:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 298:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 299:Src/main.c    ****   hadc2.Init.ContinuousConvMode = ENABLE;
 300:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 301:Src/main.c    ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 302:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 303:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 304:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 305:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 306:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 307:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
ARM GAS  /tmp/ccaEDy0V.s 			page 12


 308:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 309:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 310:Src/main.c    ****   {
 311:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 312:Src/main.c    ****   }
 313:Src/main.c    **** 
 314:Src/main.c    ****     /**Configure Regular Channel
 315:Src/main.c    ****     */
 316:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 317:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 318:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 319:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 320:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 321:Src/main.c    ****   sConfig.Offset = 0;
 322:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 323:Src/main.c    ****   {
 324:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 325:Src/main.c    ****   }
 326:Src/main.c    **** 
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** /* I2C1 init function */
 330:Src/main.c    **** static void MX_I2C1_Init(void)
 331:Src/main.c    **** {
 332:Src/main.c    **** 
 333:Src/main.c    ****   hi2c1.Instance = I2C1;
 334:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 335:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 336:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 337:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 338:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 339:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 340:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 341:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 342:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 343:Src/main.c    ****   {
 344:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 345:Src/main.c    ****   }
 346:Src/main.c    **** 
 347:Src/main.c    ****     /**Configure Analogue filter
 348:Src/main.c    ****     */
 349:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 350:Src/main.c    ****   {
 351:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 352:Src/main.c    ****   }
 353:Src/main.c    **** 
 354:Src/main.c    ****     /**Configure Digital filter
 355:Src/main.c    ****     */
 356:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 357:Src/main.c    ****   {
 358:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 359:Src/main.c    ****   }
 360:Src/main.c    **** 
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** /* TIM2 init function */
 364:Src/main.c    **** static void MX_TIM2_Init(void)
ARM GAS  /tmp/ccaEDy0V.s 			page 13


 365:Src/main.c    **** {
 366:Src/main.c    **** 
 367:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig;
 368:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 369:Src/main.c    **** 
 370:Src/main.c    ****   htim2.Instance = TIM2;
 371:Src/main.c    ****   htim2.Init.Prescaler = 0;
 372:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 373:Src/main.c    ****   htim2.Init.Period = 1440;
 374:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 375:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 376:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 377:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 378:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 379:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 380:Src/main.c    ****   sConfig.IC1Filter = 0;
 381:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 382:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 383:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 384:Src/main.c    ****   sConfig.IC2Filter = 0;
 385:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 386:Src/main.c    ****   {
 387:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 388:Src/main.c    ****   }
 389:Src/main.c    **** 
 390:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 391:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 392:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 393:Src/main.c    ****   {
 394:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 395:Src/main.c    ****   }
 396:Src/main.c    **** 
 397:Src/main.c    **** }
 398:Src/main.c    **** 
 399:Src/main.c    **** /* TIM3 init function */
 400:Src/main.c    **** static void MX_TIM3_Init(void)
 401:Src/main.c    **** {
 402:Src/main.c    **** 
 403:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 404:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 405:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 406:Src/main.c    **** 
 407:Src/main.c    ****   htim3.Instance = TIM3;
 408:Src/main.c    ****   htim3.Init.Prescaler = 350-1;
 409:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 410:Src/main.c    ****   htim3.Init.Period = 255-1;
 411:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 412:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 413:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 414:Src/main.c    ****   {
 415:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 416:Src/main.c    ****   }
 417:Src/main.c    **** 
 418:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 419:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 420:Src/main.c    ****   {
 421:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /tmp/ccaEDy0V.s 			page 14


 422:Src/main.c    ****   }
 423:Src/main.c    **** 
 424:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 425:Src/main.c    ****   {
 426:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 427:Src/main.c    ****   }
 428:Src/main.c    **** 
 429:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 430:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 431:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 432:Src/main.c    ****   {
 433:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 434:Src/main.c    ****   }
 435:Src/main.c    **** 
 436:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 437:Src/main.c    ****   sConfigOC.Pulse = 0;
 438:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 439:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 440:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 441:Src/main.c    ****   {
 442:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 443:Src/main.c    ****   }
 444:Src/main.c    **** 
 445:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 446:Src/main.c    **** 
 447:Src/main.c    **** }
 448:Src/main.c    **** 
 449:Src/main.c    **** /* TIM15 init function */
 450:Src/main.c    **** static void MX_TIM15_Init(void)
 451:Src/main.c    **** {
 452:Src/main.c    **** 
 453:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 454:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 455:Src/main.c    **** 
 456:Src/main.c    ****   htim15.Instance = TIM15;
 457:Src/main.c    ****   htim15.Init.Prescaler = 25-1;
 458:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 459:Src/main.c    ****   htim15.Init.Period = 250-1;
 460:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 461:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 462:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 463:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 464:Src/main.c    ****   {
 465:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 466:Src/main.c    ****   }
 467:Src/main.c    **** 
 468:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 469:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 470:Src/main.c    ****   {
 471:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 472:Src/main.c    ****   }
 473:Src/main.c    **** 
 474:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 475:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 476:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 477:Src/main.c    ****   {
 478:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /tmp/ccaEDy0V.s 			page 15


 479:Src/main.c    ****   }
 480:Src/main.c    **** 
 481:Src/main.c    **** }
 482:Src/main.c    **** 
 483:Src/main.c    **** /* USART1 init function */
 484:Src/main.c    **** static void MX_USART1_UART_Init(void)
 485:Src/main.c    **** {
 486:Src/main.c    **** 
 487:Src/main.c    ****   huart1.Instance = USART1;
 488:Src/main.c    ****   huart1.Init.BaudRate = 1000000;
 489:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 490:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 491:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 492:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 493:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 494:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 495:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 496:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 497:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 498:Src/main.c    ****   {
 499:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 500:Src/main.c    ****   }
 501:Src/main.c    **** 
 502:Src/main.c    **** }
 503:Src/main.c    **** 
 504:Src/main.c    **** /* USART2 init function */
 505:Src/main.c    **** static void MX_USART2_UART_Init(void)
 506:Src/main.c    **** {
 507:Src/main.c    **** 
 508:Src/main.c    ****   LL_USART_InitTypeDef USART_InitStruct;
 509:Src/main.c    **** 
 510:Src/main.c    ****   LL_GPIO_InitTypeDef GPIO_InitStruct;
 511:Src/main.c    **** 
 512:Src/main.c    ****   /* Peripheral clock enable */
 513:Src/main.c    ****   LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 514:Src/main.c    **** 
 515:Src/main.c    ****   /**USART2 GPIO Configuration
 516:Src/main.c    ****   PA2   ------> USART2_TX
 517:Src/main.c    ****   PA3   ------> USART2_RX
 518:Src/main.c    ****   */
 519:Src/main.c    ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 520:Src/main.c    ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 521:Src/main.c    ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 522:Src/main.c    ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 523:Src/main.c    ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 524:Src/main.c    ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 525:Src/main.c    ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 526:Src/main.c    **** 
 527:Src/main.c    ****   /* USART2 DMA Init */
 528:Src/main.c    **** 
 529:Src/main.c    ****   /* USART2_RX Init */
 530:Src/main.c    ****   LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 531:Src/main.c    **** 
 532:Src/main.c    ****   LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 533:Src/main.c    **** 
 534:Src/main.c    ****   LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 535:Src/main.c    **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 16


 536:Src/main.c    ****   LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 537:Src/main.c    **** 
 538:Src/main.c    ****   LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 539:Src/main.c    **** 
 540:Src/main.c    ****   LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 541:Src/main.c    **** 
 542:Src/main.c    ****   LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 543:Src/main.c    **** 
 544:Src/main.c    ****   USART_InitStruct.BaudRate = 1000000;
 545:Src/main.c    ****   USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 546:Src/main.c    ****   USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 547:Src/main.c    ****   USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 548:Src/main.c    ****   USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 549:Src/main.c    ****   USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 550:Src/main.c    ****   USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 551:Src/main.c    ****   LL_USART_Init(USART2, &USART_InitStruct);
 552:Src/main.c    **** 
 553:Src/main.c    ****   LL_USART_DisableIT_CTS(USART2);
 554:Src/main.c    **** 
 555:Src/main.c    ****   LL_USART_DisableOverrunDetect(USART2);
 556:Src/main.c    **** 
 557:Src/main.c    ****   LL_USART_ConfigAsyncMode(USART2);
 558:Src/main.c    **** 
 559:Src/main.c    ****   LL_USART_Enable(USART2);
 560:Src/main.c    **** 
 561:Src/main.c    **** }
 562:Src/main.c    **** 
 563:Src/main.c    **** /**
 564:Src/main.c    ****   * Enable DMA controller clock
 565:Src/main.c    ****   */
 566:Src/main.c    **** static void MX_DMA_Init(void)
 567:Src/main.c    **** {
 568:Src/main.c    ****   /* DMA controller clock enable */
 569:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 570:Src/main.c    **** 
 571:Src/main.c    ****   /* DMA interrupt init */
 572:Src/main.c    ****   /* DMA1_Channel6_IRQn interrupt configuration */
 573:Src/main.c    ****   NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 574:Src/main.c    ****   NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 575:Src/main.c    **** 
 576:Src/main.c    **** }
 577:Src/main.c    **** 
 578:Src/main.c    **** /** Configure pins as
 579:Src/main.c    ****         * Analog
 580:Src/main.c    ****         * Input
 581:Src/main.c    ****         * Output
 582:Src/main.c    ****         * EVENT_OUT
 583:Src/main.c    ****         * EXTI
 584:Src/main.c    **** */
 585:Src/main.c    **** static void MX_GPIO_Init(void)
 586:Src/main.c    **** {
 587:Src/main.c    **** 
 588:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 589:Src/main.c    **** 
 590:Src/main.c    ****   /* GPIO Ports Clock Enable */
 591:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 311              		.loc 1 591 0
ARM GAS  /tmp/ccaEDy0V.s 			page 17


 312 0004 DFF86C82 		ldr	r8, .L76+48
 313              	.LBE134:
 314              	.LBE133:
 315              	.LBE132:
 316              	.LBB139:
 317              	.LBB140:
 295:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 318              		.loc 1 295 0
 319 0008 8E4D     		ldr	r5, .L76
 320              	.LBE140:
 321              	.LBE139:
 128:Src/main.c    ****   /* USER CODE BEGIN 1 */
 322              		.loc 1 128 0
 323 000a 97B0     		sub	sp, sp, #92
 324              	.LCFI6:
 325              		.cfi_def_cfa_offset 128
 136:Src/main.c    **** 
 326              		.loc 1 136 0
 327 000c FFF7FEFF 		bl	HAL_Init
 328              	.LVL24:
 143:Src/main.c    **** 
 329              		.loc 1 143 0
 330 0010 FFF7FEFF 		bl	SystemClock_Config
 331              	.LVL25:
 332              	.LBB146:
 333              	.LBB138:
 334              	.LBB135:
 335              		.loc 1 591 0
 336 0014 D8F81430 		ldr	r3, [r8, #20]
 337 0018 43F40033 		orr	r3, r3, #131072
 338 001c C8F81430 		str	r3, [r8, #20]
 339 0020 D8F81430 		ldr	r3, [r8, #20]
 340 0024 03F40033 		and	r3, r3, #131072
 341 0028 0193     		str	r3, [sp, #4]
 342 002a 019B     		ldr	r3, [sp, #4]
 343              	.LBE135:
 344              	.LBB136:
 592:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 345              		.loc 1 592 0
 346 002c D8F81430 		ldr	r3, [r8, #20]
 347 0030 43F48023 		orr	r3, r3, #262144
 348 0034 C8F81430 		str	r3, [r8, #20]
 349 0038 D8F81430 		ldr	r3, [r8, #20]
 350 003c 03F48023 		and	r3, r3, #262144
 351 0040 0293     		str	r3, [sp, #8]
 352              	.LBE136:
 593:Src/main.c    **** 
 594:Src/main.c    ****   /*Configure GPIO pin Output Level */
 595:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, INV_Pin|EN_Pin|EN_Servo_Pin|IN1_Pin
 353              		.loc 1 595 0
 354 0042 4FF09040 		mov	r0, #1207959552
 355 0046 49F63011 		movw	r1, #39216
 356 004a 0022     		movs	r2, #0
 596:Src/main.c    ****                           |IN2_Pin|LED_Pin, GPIO_PIN_RESET);
 597:Src/main.c    **** 
 598:Src/main.c    ****   /*Configure GPIO pin Output Level */
 599:Src/main.c    ****   HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/ccaEDy0V.s 			page 18


 600:Src/main.c    **** 
 601:Src/main.c    ****   /*Configure GPIO pins : INV_Pin EN_Pin EN_Servo_Pin IN1_Pin
 602:Src/main.c    ****                            IN2_Pin LED_Pin */
 603:Src/main.c    ****   GPIO_InitStruct.Pin = INV_Pin|EN_Pin|EN_Servo_Pin|IN1_Pin
 604:Src/main.c    ****                           |IN2_Pin|LED_Pin;
 605:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 606:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 607:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 608:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 357              		.loc 1 608 0
 358 004c 0DAE     		add	r6, sp, #52
 359              	.LBB137:
 592:Src/main.c    **** 
 360              		.loc 1 592 0
 361 004e 029B     		ldr	r3, [sp, #8]
 362              	.LBE137:
 595:Src/main.c    ****                           |IN2_Pin|LED_Pin, GPIO_PIN_RESET);
 363              		.loc 1 595 0
 364 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 365              	.LVL26:
 599:Src/main.c    **** 
 366              		.loc 1 599 0
 367 0054 0022     		movs	r2, #0
 368 0056 7C48     		ldr	r0, .L76+4
 369 0058 0121     		movs	r1, #1
 606:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 370              		.loc 1 606 0
 371 005a 0024     		movs	r4, #0
 599:Src/main.c    **** 
 372              		.loc 1 599 0
 373 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 374              	.LVL27:
 605:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 375              		.loc 1 605 0
 376 0060 0127     		movs	r7, #1
 603:Src/main.c    ****                           |IN2_Pin|LED_Pin;
 377              		.loc 1 603 0
 378 0062 49F63013 		movw	r3, #39216
 379              		.loc 1 608 0
 380 0066 3146     		mov	r1, r6
 381 0068 4FF09040 		mov	r0, #1207959552
 603:Src/main.c    ****                           |IN2_Pin|LED_Pin;
 382              		.loc 1 603 0
 383 006c 0D93     		str	r3, [sp, #52]
 605:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 384              		.loc 1 605 0
 385 006e 0E97     		str	r7, [sp, #56]
 606:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 386              		.loc 1 606 0
 387 0070 0F94     		str	r4, [sp, #60]
 607:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 388              		.loc 1 607 0
 389 0072 1094     		str	r4, [sp, #64]
 390              		.loc 1 608 0
 391 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 392              	.LVL28:
 609:Src/main.c    **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 19


 610:Src/main.c    ****   /*Configure GPIO pin : NSF_Pin */
 611:Src/main.c    ****   GPIO_InitStruct.Pin = NSF_Pin;
 393              		.loc 1 611 0
 394 0078 8023     		movs	r3, #128
 612:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 613:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 614:Src/main.c    ****   HAL_GPIO_Init(NSF_GPIO_Port, &GPIO_InitStruct);
 395              		.loc 1 614 0
 396 007a 3146     		mov	r1, r6
 397 007c 4FF09040 		mov	r0, #1207959552
 611:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 398              		.loc 1 611 0
 399 0080 0D93     		str	r3, [sp, #52]
 612:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 400              		.loc 1 612 0
 401 0082 0E94     		str	r4, [sp, #56]
 613:Src/main.c    ****   HAL_GPIO_Init(NSF_GPIO_Port, &GPIO_InitStruct);
 402              		.loc 1 613 0
 403 0084 0F94     		str	r4, [sp, #60]
 404              		.loc 1 614 0
 405 0086 FFF7FEFF 		bl	HAL_GPIO_Init
 406              	.LVL29:
 615:Src/main.c    **** 
 616:Src/main.c    ****   /*Configure GPIO pin : D1_Pin */
 617:Src/main.c    ****   GPIO_InitStruct.Pin = D1_Pin;
 618:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 619:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 620:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 621:Src/main.c    ****   HAL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 407              		.loc 1 621 0
 408 008a 3146     		mov	r1, r6
 409 008c 6E48     		ldr	r0, .L76+4
 617:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 410              		.loc 1 617 0
 411 008e 0D97     		str	r7, [sp, #52]
 618:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 412              		.loc 1 618 0
 413 0090 0E97     		str	r7, [sp, #56]
 619:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 414              		.loc 1 619 0
 415 0092 0F94     		str	r4, [sp, #60]
 620:Src/main.c    ****   HAL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 416              		.loc 1 620 0
 417 0094 1094     		str	r4, [sp, #64]
 418              		.loc 1 621 0
 419 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 420              	.LVL30:
 622:Src/main.c    **** 
 623:Src/main.c    ****   /*Configure GPIO pin : FC_Pin */
 624:Src/main.c    ****   GPIO_InitStruct.Pin = FC_Pin;
 421              		.loc 1 624 0
 422 009a 0822     		movs	r2, #8
 625:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 626:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 423              		.loc 1 626 0
 424 009c 0223     		movs	r3, #2
 627:Src/main.c    ****   HAL_GPIO_Init(FC_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/ccaEDy0V.s 			page 20


 425              		.loc 1 627 0
 426 009e 3146     		mov	r1, r6
 427 00a0 6948     		ldr	r0, .L76+4
 624:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 428              		.loc 1 624 0
 429 00a2 0D92     		str	r2, [sp, #52]
 626:Src/main.c    ****   HAL_GPIO_Init(FC_GPIO_Port, &GPIO_InitStruct);
 430              		.loc 1 626 0
 431 00a4 0F93     		str	r3, [sp, #60]
 625:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 432              		.loc 1 625 0
 433 00a6 0E94     		str	r4, [sp, #56]
 434              		.loc 1 627 0
 435 00a8 FFF7FEFF 		bl	HAL_GPIO_Init
 436              	.LVL31:
 437              	.LBE138:
 438              	.LBE146:
 439              	.LBB147:
 440              	.LBB148:
 569:Src/main.c    **** 
 441              		.loc 1 569 0
 442 00ac D8F81430 		ldr	r3, [r8, #20]
 443              	.LBE148:
 444              	.LBE147:
 445              	.LBB164:
 446              	.LBB141:
 296:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 447              		.loc 1 296 0
 448 00b0 6C60     		str	r4, [r5, #4]
 449              	.LBE141:
 450              	.LBE164:
 451              	.LBB165:
 452              	.LBB149:
 569:Src/main.c    **** 
 453              		.loc 1 569 0
 454 00b2 3B43     		orrs	r3, r3, r7
 455 00b4 C8F81430 		str	r3, [r8, #20]
 456 00b8 D8F81430 		ldr	r3, [r8, #20]
 457              	.LBE149:
 458              	.LBB150:
 459              	.LBB151:
 460              		.file 2 "Drivers/CMSIS/Include/core_cm4.h"
   1:Drivers/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:Drivers/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm4.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm4.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm4.h **** 
   9:Drivers/CMSIS/Include/core_cm4.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
ARM GAS  /tmp/ccaEDy0V.s 			page 21


  16:Drivers/CMSIS/Include/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm4.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm4.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm4.h ****    *
  21:Drivers/CMSIS/Include/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm4.h **** 
  34:Drivers/CMSIS/Include/core_cm4.h **** 
  35:Drivers/CMSIS/Include/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm4.h **** #endif
  40:Drivers/CMSIS/Include/core_cm4.h **** 
  41:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm4.h **** 
  44:Drivers/CMSIS/Include/core_cm4.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm4.h **** 
  46:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm4.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm4.h **** #endif
  49:Drivers/CMSIS/Include/core_cm4.h **** 
  50:Drivers/CMSIS/Include/core_cm4.h **** /**
  51:Drivers/CMSIS/Include/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm4.h **** 
  54:Drivers/CMSIS/Include/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm4.h **** 
  57:Drivers/CMSIS/Include/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm4.h **** 
  60:Drivers/CMSIS/Include/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm4.h ****  */
  63:Drivers/CMSIS/Include/core_cm4.h **** 
  64:Drivers/CMSIS/Include/core_cm4.h **** 
  65:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm4.h **** /**
  69:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup Cortex_M4
  70:Drivers/CMSIS/Include/core_cm4.h ****   @{
  71:Drivers/CMSIS/Include/core_cm4.h ****  */
  72:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 22


  73:Drivers/CMSIS/Include/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm4.h **** 
  79:Drivers/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm4.h **** 
  81:Drivers/CMSIS/Include/core_cm4.h **** 
  82:Drivers/CMSIS/Include/core_cm4.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm4.h **** 
  87:Drivers/CMSIS/Include/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm4.h **** 
  92:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm4.h **** 
  97:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm4.h **** 
 102:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm4.h **** 
 106:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm4.h **** 
 111:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm4.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm4.h **** 
 117:Drivers/CMSIS/Include/core_cm4.h **** #else
 118:Drivers/CMSIS/Include/core_cm4.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm4.h **** #endif
 120:Drivers/CMSIS/Include/core_cm4.h **** 
 121:Drivers/CMSIS/Include/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:Drivers/CMSIS/Include/core_cm4.h **** */
 124:Drivers/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
 125:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 128:Drivers/CMSIS/Include/core_cm4.h ****     #else
 129:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
ARM GAS  /tmp/ccaEDy0V.s 			page 23


 130:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 131:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 132:Drivers/CMSIS/Include/core_cm4.h ****   #else
 133:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 134:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm4.h **** 
 136:Drivers/CMSIS/Include/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 140:Drivers/CMSIS/Include/core_cm4.h ****     #else
 141:Drivers/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 143:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 144:Drivers/CMSIS/Include/core_cm4.h ****   #else
 145:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 146:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 147:Drivers/CMSIS/Include/core_cm4.h **** 
 148:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 149:Drivers/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 152:Drivers/CMSIS/Include/core_cm4.h ****     #else
 153:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 155:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 156:Drivers/CMSIS/Include/core_cm4.h ****   #else
 157:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 158:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm4.h **** 
 160:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 162:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 164:Drivers/CMSIS/Include/core_cm4.h ****     #else
 165:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 167:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 168:Drivers/CMSIS/Include/core_cm4.h ****   #else
 169:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 170:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 171:Drivers/CMSIS/Include/core_cm4.h **** 
 172:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TMS470__ )
 173:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 176:Drivers/CMSIS/Include/core_cm4.h ****     #else
 177:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 179:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 180:Drivers/CMSIS/Include/core_cm4.h ****   #else
 181:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 182:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 183:Drivers/CMSIS/Include/core_cm4.h **** 
 184:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 185:Drivers/CMSIS/Include/core_cm4.h ****   #if defined __FPU_VFP__
 186:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
ARM GAS  /tmp/ccaEDy0V.s 			page 24


 187:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 188:Drivers/CMSIS/Include/core_cm4.h ****     #else
 189:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 191:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 192:Drivers/CMSIS/Include/core_cm4.h ****   #else
 193:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 194:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 195:Drivers/CMSIS/Include/core_cm4.h **** 
 196:Drivers/CMSIS/Include/core_cm4.h **** #elif defined ( __CSMC__ )
 197:Drivers/CMSIS/Include/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:Drivers/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1U
 200:Drivers/CMSIS/Include/core_cm4.h ****     #else
 201:Drivers/CMSIS/Include/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:Drivers/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0U
 203:Drivers/CMSIS/Include/core_cm4.h ****     #endif
 204:Drivers/CMSIS/Include/core_cm4.h ****   #else
 205:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0U
 206:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 207:Drivers/CMSIS/Include/core_cm4.h **** 
 208:Drivers/CMSIS/Include/core_cm4.h **** #endif
 209:Drivers/CMSIS/Include/core_cm4.h **** 
 210:Drivers/CMSIS/Include/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:Drivers/CMSIS/Include/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:Drivers/CMSIS/Include/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:Drivers/CMSIS/Include/core_cm4.h **** 
 214:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 215:Drivers/CMSIS/Include/core_cm4.h **** }
 216:Drivers/CMSIS/Include/core_cm4.h **** #endif
 217:Drivers/CMSIS/Include/core_cm4.h **** 
 218:Drivers/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:Drivers/CMSIS/Include/core_cm4.h **** 
 220:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:Drivers/CMSIS/Include/core_cm4.h **** 
 222:Drivers/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:Drivers/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:Drivers/CMSIS/Include/core_cm4.h **** 
 225:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 226:Drivers/CMSIS/Include/core_cm4.h ****  extern "C" {
 227:Drivers/CMSIS/Include/core_cm4.h **** #endif
 228:Drivers/CMSIS/Include/core_cm4.h **** 
 229:Drivers/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 230:Drivers/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 232:Drivers/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 235:Drivers/CMSIS/Include/core_cm4.h **** 
 236:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:Drivers/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 240:Drivers/CMSIS/Include/core_cm4.h **** 
 241:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:Drivers/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
ARM GAS  /tmp/ccaEDy0V.s 			page 25


 244:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 245:Drivers/CMSIS/Include/core_cm4.h **** 
 246:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:Drivers/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 250:Drivers/CMSIS/Include/core_cm4.h **** 
 251:Drivers/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:Drivers/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:Drivers/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:Drivers/CMSIS/Include/core_cm4.h ****   #endif
 255:Drivers/CMSIS/Include/core_cm4.h **** #endif
 256:Drivers/CMSIS/Include/core_cm4.h **** 
 257:Drivers/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:Drivers/CMSIS/Include/core_cm4.h **** /**
 259:Drivers/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:Drivers/CMSIS/Include/core_cm4.h **** 
 261:Drivers/CMSIS/Include/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:Drivers/CMSIS/Include/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:Drivers/CMSIS/Include/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:Drivers/CMSIS/Include/core_cm4.h **** */
 265:Drivers/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 266:Drivers/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:Drivers/CMSIS/Include/core_cm4.h **** #else
 268:Drivers/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:Drivers/CMSIS/Include/core_cm4.h **** #endif
 270:Drivers/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:Drivers/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:Drivers/CMSIS/Include/core_cm4.h **** 
 273:Drivers/CMSIS/Include/core_cm4.h **** /* following defines should be used for structure members */
 274:Drivers/CMSIS/Include/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:Drivers/CMSIS/Include/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:Drivers/CMSIS/Include/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:Drivers/CMSIS/Include/core_cm4.h **** 
 278:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:Drivers/CMSIS/Include/core_cm4.h **** 
 280:Drivers/CMSIS/Include/core_cm4.h **** 
 281:Drivers/CMSIS/Include/core_cm4.h **** 
 282:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 283:Drivers/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 284:Drivers/CMSIS/Include/core_cm4.h ****   Core Register contain:
 285:Drivers/CMSIS/Include/core_cm4.h ****   - Core Register
 286:Drivers/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 287:Drivers/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 288:Drivers/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 289:Drivers/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 290:Drivers/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 291:Drivers/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 292:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 293:Drivers/CMSIS/Include/core_cm4.h **** /**
 294:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:Drivers/CMSIS/Include/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:Drivers/CMSIS/Include/core_cm4.h **** */
 297:Drivers/CMSIS/Include/core_cm4.h **** 
 298:Drivers/CMSIS/Include/core_cm4.h **** /**
 299:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
ARM GAS  /tmp/ccaEDy0V.s 			page 26


 301:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Core Register type definitions.
 302:Drivers/CMSIS/Include/core_cm4.h ****   @{
 303:Drivers/CMSIS/Include/core_cm4.h ****  */
 304:Drivers/CMSIS/Include/core_cm4.h **** 
 305:Drivers/CMSIS/Include/core_cm4.h **** /**
 306:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:Drivers/CMSIS/Include/core_cm4.h ****  */
 308:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 309:Drivers/CMSIS/Include/core_cm4.h **** {
 310:Drivers/CMSIS/Include/core_cm4.h ****   struct
 311:Drivers/CMSIS/Include/core_cm4.h ****   {
 312:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:Drivers/CMSIS/Include/core_cm4.h **** } APSR_Type;
 323:Drivers/CMSIS/Include/core_cm4.h **** 
 324:Drivers/CMSIS/Include/core_cm4.h **** /* APSR Register Definitions */
 325:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:Drivers/CMSIS/Include/core_cm4.h **** 
 328:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:Drivers/CMSIS/Include/core_cm4.h **** 
 331:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:Drivers/CMSIS/Include/core_cm4.h **** 
 334:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:Drivers/CMSIS/Include/core_cm4.h **** 
 337:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:Drivers/CMSIS/Include/core_cm4.h **** 
 340:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:Drivers/CMSIS/Include/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:Drivers/CMSIS/Include/core_cm4.h **** 
 343:Drivers/CMSIS/Include/core_cm4.h **** 
 344:Drivers/CMSIS/Include/core_cm4.h **** /**
 345:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:Drivers/CMSIS/Include/core_cm4.h ****  */
 347:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 348:Drivers/CMSIS/Include/core_cm4.h **** {
 349:Drivers/CMSIS/Include/core_cm4.h ****   struct
 350:Drivers/CMSIS/Include/core_cm4.h ****   {
 351:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:Drivers/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 356:Drivers/CMSIS/Include/core_cm4.h **** 
 357:Drivers/CMSIS/Include/core_cm4.h **** /* IPSR Register Definitions */
ARM GAS  /tmp/ccaEDy0V.s 			page 27


 358:Drivers/CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:Drivers/CMSIS/Include/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:Drivers/CMSIS/Include/core_cm4.h **** 
 361:Drivers/CMSIS/Include/core_cm4.h **** 
 362:Drivers/CMSIS/Include/core_cm4.h **** /**
 363:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:Drivers/CMSIS/Include/core_cm4.h ****  */
 365:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 366:Drivers/CMSIS/Include/core_cm4.h **** {
 367:Drivers/CMSIS/Include/core_cm4.h ****   struct
 368:Drivers/CMSIS/Include/core_cm4.h ****   {
 369:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:Drivers/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 383:Drivers/CMSIS/Include/core_cm4.h **** 
 384:Drivers/CMSIS/Include/core_cm4.h **** /* xPSR Register Definitions */
 385:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:Drivers/CMSIS/Include/core_cm4.h **** 
 388:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:Drivers/CMSIS/Include/core_cm4.h **** 
 391:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:Drivers/CMSIS/Include/core_cm4.h **** 
 394:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:Drivers/CMSIS/Include/core_cm4.h **** 
 397:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:Drivers/CMSIS/Include/core_cm4.h **** 
 400:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:Drivers/CMSIS/Include/core_cm4.h **** 
 403:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:Drivers/CMSIS/Include/core_cm4.h **** 
 406:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:Drivers/CMSIS/Include/core_cm4.h **** 
 409:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:Drivers/CMSIS/Include/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:Drivers/CMSIS/Include/core_cm4.h **** 
 412:Drivers/CMSIS/Include/core_cm4.h **** 
 413:Drivers/CMSIS/Include/core_cm4.h **** /**
 414:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
ARM GAS  /tmp/ccaEDy0V.s 			page 28


 415:Drivers/CMSIS/Include/core_cm4.h ****  */
 416:Drivers/CMSIS/Include/core_cm4.h **** typedef union
 417:Drivers/CMSIS/Include/core_cm4.h **** {
 418:Drivers/CMSIS/Include/core_cm4.h ****   struct
 419:Drivers/CMSIS/Include/core_cm4.h ****   {
 420:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:Drivers/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:Drivers/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:Drivers/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 427:Drivers/CMSIS/Include/core_cm4.h **** 
 428:Drivers/CMSIS/Include/core_cm4.h **** /* CONTROL Register Definitions */
 429:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:Drivers/CMSIS/Include/core_cm4.h **** 
 432:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:Drivers/CMSIS/Include/core_cm4.h **** 
 435:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:Drivers/CMSIS/Include/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:Drivers/CMSIS/Include/core_cm4.h **** 
 438:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:Drivers/CMSIS/Include/core_cm4.h **** 
 440:Drivers/CMSIS/Include/core_cm4.h **** 
 441:Drivers/CMSIS/Include/core_cm4.h **** /**
 442:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:Drivers/CMSIS/Include/core_cm4.h ****   @{
 446:Drivers/CMSIS/Include/core_cm4.h ****  */
 447:Drivers/CMSIS/Include/core_cm4.h **** 
 448:Drivers/CMSIS/Include/core_cm4.h **** /**
 449:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:Drivers/CMSIS/Include/core_cm4.h ****  */
 451:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 452:Drivers/CMSIS/Include/core_cm4.h **** {
 453:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:Drivers/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 467:Drivers/CMSIS/Include/core_cm4.h **** 
 468:Drivers/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 29


 472:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:Drivers/CMSIS/Include/core_cm4.h **** 
 474:Drivers/CMSIS/Include/core_cm4.h **** 
 475:Drivers/CMSIS/Include/core_cm4.h **** /**
 476:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:Drivers/CMSIS/Include/core_cm4.h ****   @{
 480:Drivers/CMSIS/Include/core_cm4.h ****  */
 481:Drivers/CMSIS/Include/core_cm4.h **** 
 482:Drivers/CMSIS/Include/core_cm4.h **** /**
 483:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:Drivers/CMSIS/Include/core_cm4.h ****  */
 485:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 486:Drivers/CMSIS/Include/core_cm4.h **** {
 487:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:Drivers/CMSIS/Include/core_cm4.h **** } SCB_Type;
 509:Drivers/CMSIS/Include/core_cm4.h **** 
 510:Drivers/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:Drivers/CMSIS/Include/core_cm4.h **** 
 514:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:Drivers/CMSIS/Include/core_cm4.h **** 
 517:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:Drivers/CMSIS/Include/core_cm4.h **** 
 520:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:Drivers/CMSIS/Include/core_cm4.h **** 
 523:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:Drivers/CMSIS/Include/core_cm4.h **** 
 526:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
ARM GAS  /tmp/ccaEDy0V.s 			page 30


 529:Drivers/CMSIS/Include/core_cm4.h **** 
 530:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:Drivers/CMSIS/Include/core_cm4.h **** 
 533:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:Drivers/CMSIS/Include/core_cm4.h **** 
 536:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:Drivers/CMSIS/Include/core_cm4.h **** 
 539:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:Drivers/CMSIS/Include/core_cm4.h **** 
 542:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:Drivers/CMSIS/Include/core_cm4.h **** 
 545:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:Drivers/CMSIS/Include/core_cm4.h **** 
 548:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:Drivers/CMSIS/Include/core_cm4.h **** 
 551:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:Drivers/CMSIS/Include/core_cm4.h **** 
 554:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:Drivers/CMSIS/Include/core_cm4.h **** 
 557:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:Drivers/CMSIS/Include/core_cm4.h **** 
 561:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:Drivers/CMSIS/Include/core_cm4.h **** 
 565:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:Drivers/CMSIS/Include/core_cm4.h **** 
 568:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:Drivers/CMSIS/Include/core_cm4.h **** 
 571:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:Drivers/CMSIS/Include/core_cm4.h **** 
 574:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:Drivers/CMSIS/Include/core_cm4.h **** 
 577:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:Drivers/CMSIS/Include/core_cm4.h **** 
 580:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:Drivers/CMSIS/Include/core_cm4.h **** 
 583:Drivers/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 584:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
ARM GAS  /tmp/ccaEDy0V.s 			page 31


 586:Drivers/CMSIS/Include/core_cm4.h **** 
 587:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:Drivers/CMSIS/Include/core_cm4.h **** 
 590:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:Drivers/CMSIS/Include/core_cm4.h **** 
 593:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:Drivers/CMSIS/Include/core_cm4.h **** 
 597:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:Drivers/CMSIS/Include/core_cm4.h **** 
 600:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:Drivers/CMSIS/Include/core_cm4.h **** 
 603:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:Drivers/CMSIS/Include/core_cm4.h **** 
 606:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:Drivers/CMSIS/Include/core_cm4.h **** 
 609:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:Drivers/CMSIS/Include/core_cm4.h **** 
 612:Drivers/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:Drivers/CMSIS/Include/core_cm4.h **** 
 616:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm4.h **** 
 619:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:Drivers/CMSIS/Include/core_cm4.h **** 
 622:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:Drivers/CMSIS/Include/core_cm4.h **** 
 625:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:Drivers/CMSIS/Include/core_cm4.h **** 
 628:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:Drivers/CMSIS/Include/core_cm4.h **** 
 631:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:Drivers/CMSIS/Include/core_cm4.h **** 
 634:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:Drivers/CMSIS/Include/core_cm4.h **** 
 637:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:Drivers/CMSIS/Include/core_cm4.h **** 
 640:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 32


 643:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:Drivers/CMSIS/Include/core_cm4.h **** 
 646:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:Drivers/CMSIS/Include/core_cm4.h **** 
 649:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:Drivers/CMSIS/Include/core_cm4.h **** 
 652:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:Drivers/CMSIS/Include/core_cm4.h **** 
 655:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:Drivers/CMSIS/Include/core_cm4.h **** 
 659:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:Drivers/CMSIS/Include/core_cm4.h **** 
 662:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:Drivers/CMSIS/Include/core_cm4.h **** 
 665:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:Drivers/CMSIS/Include/core_cm4.h **** 
 669:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:Drivers/CMSIS/Include/core_cm4.h **** 
 672:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:Drivers/CMSIS/Include/core_cm4.h **** 
 675:Drivers/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:Drivers/CMSIS/Include/core_cm4.h **** 
 679:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:Drivers/CMSIS/Include/core_cm4.h **** 
 682:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:Drivers/CMSIS/Include/core_cm4.h **** 
 685:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:Drivers/CMSIS/Include/core_cm4.h **** 
 688:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:Drivers/CMSIS/Include/core_cm4.h **** 
 691:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:Drivers/CMSIS/Include/core_cm4.h **** 
 693:Drivers/CMSIS/Include/core_cm4.h **** 
 694:Drivers/CMSIS/Include/core_cm4.h **** /**
 695:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:Drivers/CMSIS/Include/core_cm4.h ****   @{
 699:Drivers/CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccaEDy0V.s 			page 33


 700:Drivers/CMSIS/Include/core_cm4.h **** 
 701:Drivers/CMSIS/Include/core_cm4.h **** /**
 702:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:Drivers/CMSIS/Include/core_cm4.h ****  */
 704:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 705:Drivers/CMSIS/Include/core_cm4.h **** {
 706:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:Drivers/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 710:Drivers/CMSIS/Include/core_cm4.h **** 
 711:Drivers/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:Drivers/CMSIS/Include/core_cm4.h **** 
 715:Drivers/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:Drivers/CMSIS/Include/core_cm4.h **** 
 719:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:Drivers/CMSIS/Include/core_cm4.h **** 
 722:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:Drivers/CMSIS/Include/core_cm4.h **** 
 725:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:Drivers/CMSIS/Include/core_cm4.h **** 
 728:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:Drivers/CMSIS/Include/core_cm4.h **** 
 731:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:Drivers/CMSIS/Include/core_cm4.h **** 
 733:Drivers/CMSIS/Include/core_cm4.h **** 
 734:Drivers/CMSIS/Include/core_cm4.h **** /**
 735:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:Drivers/CMSIS/Include/core_cm4.h ****   @{
 739:Drivers/CMSIS/Include/core_cm4.h ****  */
 740:Drivers/CMSIS/Include/core_cm4.h **** 
 741:Drivers/CMSIS/Include/core_cm4.h **** /**
 742:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:Drivers/CMSIS/Include/core_cm4.h ****  */
 744:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 745:Drivers/CMSIS/Include/core_cm4.h **** {
 746:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:Drivers/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 751:Drivers/CMSIS/Include/core_cm4.h **** 
 752:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:Drivers/CMSIS/Include/core_cm4.h **** 
 756:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
ARM GAS  /tmp/ccaEDy0V.s 			page 34


 757:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:Drivers/CMSIS/Include/core_cm4.h **** 
 759:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:Drivers/CMSIS/Include/core_cm4.h **** 
 762:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:Drivers/CMSIS/Include/core_cm4.h **** 
 765:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:Drivers/CMSIS/Include/core_cm4.h **** 
 769:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 770:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:Drivers/CMSIS/Include/core_cm4.h **** 
 773:Drivers/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:Drivers/CMSIS/Include/core_cm4.h **** 
 777:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:Drivers/CMSIS/Include/core_cm4.h **** 
 780:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:Drivers/CMSIS/Include/core_cm4.h **** 
 783:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:Drivers/CMSIS/Include/core_cm4.h **** 
 785:Drivers/CMSIS/Include/core_cm4.h **** 
 786:Drivers/CMSIS/Include/core_cm4.h **** /**
 787:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:Drivers/CMSIS/Include/core_cm4.h ****   @{
 791:Drivers/CMSIS/Include/core_cm4.h ****  */
 792:Drivers/CMSIS/Include/core_cm4.h **** 
 793:Drivers/CMSIS/Include/core_cm4.h **** /**
 794:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:Drivers/CMSIS/Include/core_cm4.h ****  */
 796:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 797:Drivers/CMSIS/Include/core_cm4.h **** {
 798:Drivers/CMSIS/Include/core_cm4.h ****   __OM  union
 799:Drivers/CMSIS/Include/core_cm4.h ****   {
 800:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:Drivers/CMSIS/Include/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:Drivers/CMSIS/Include/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
ARM GAS  /tmp/ccaEDy0V.s 			page 35


 814:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:Drivers/CMSIS/Include/core_cm4.h **** } ITM_Type;
 831:Drivers/CMSIS/Include/core_cm4.h **** 
 832:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:Drivers/CMSIS/Include/core_cm4.h **** 
 836:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:Drivers/CMSIS/Include/core_cm4.h **** 
 840:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:Drivers/CMSIS/Include/core_cm4.h **** 
 843:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:Drivers/CMSIS/Include/core_cm4.h **** 
 846:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:Drivers/CMSIS/Include/core_cm4.h **** 
 849:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:Drivers/CMSIS/Include/core_cm4.h **** 
 852:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:Drivers/CMSIS/Include/core_cm4.h **** 
 855:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:Drivers/CMSIS/Include/core_cm4.h **** 
 858:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:Drivers/CMSIS/Include/core_cm4.h **** 
 861:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:Drivers/CMSIS/Include/core_cm4.h **** 
 864:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:Drivers/CMSIS/Include/core_cm4.h **** 
 868:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
ARM GAS  /tmp/ccaEDy0V.s 			page 36


 871:Drivers/CMSIS/Include/core_cm4.h **** 
 872:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:Drivers/CMSIS/Include/core_cm4.h **** 
 876:Drivers/CMSIS/Include/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:Drivers/CMSIS/Include/core_cm4.h **** 
 880:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:Drivers/CMSIS/Include/core_cm4.h **** 
 883:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:Drivers/CMSIS/Include/core_cm4.h **** 
 886:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:Drivers/CMSIS/Include/core_cm4.h **** 
 888:Drivers/CMSIS/Include/core_cm4.h **** 
 889:Drivers/CMSIS/Include/core_cm4.h **** /**
 890:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:Drivers/CMSIS/Include/core_cm4.h ****   @{
 894:Drivers/CMSIS/Include/core_cm4.h ****  */
 895:Drivers/CMSIS/Include/core_cm4.h **** 
 896:Drivers/CMSIS/Include/core_cm4.h **** /**
 897:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:Drivers/CMSIS/Include/core_cm4.h ****  */
 899:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
 900:Drivers/CMSIS/Include/core_cm4.h **** {
 901:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:Drivers/CMSIS/Include/core_cm4.h **** } DWT_Type;
 925:Drivers/CMSIS/Include/core_cm4.h **** 
 926:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Control Register Definitions */
 927:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
ARM GAS  /tmp/ccaEDy0V.s 			page 37


 928:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:Drivers/CMSIS/Include/core_cm4.h **** 
 930:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:Drivers/CMSIS/Include/core_cm4.h **** 
 933:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:Drivers/CMSIS/Include/core_cm4.h **** 
 936:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:Drivers/CMSIS/Include/core_cm4.h **** 
 939:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:Drivers/CMSIS/Include/core_cm4.h **** 
 942:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:Drivers/CMSIS/Include/core_cm4.h **** 
 945:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:Drivers/CMSIS/Include/core_cm4.h **** 
 948:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:Drivers/CMSIS/Include/core_cm4.h **** 
 951:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:Drivers/CMSIS/Include/core_cm4.h **** 
 954:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:Drivers/CMSIS/Include/core_cm4.h **** 
 957:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:Drivers/CMSIS/Include/core_cm4.h **** 
 960:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:Drivers/CMSIS/Include/core_cm4.h **** 
 963:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:Drivers/CMSIS/Include/core_cm4.h **** 
 966:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:Drivers/CMSIS/Include/core_cm4.h **** 
 969:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:Drivers/CMSIS/Include/core_cm4.h **** 
 972:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:Drivers/CMSIS/Include/core_cm4.h **** 
 975:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:Drivers/CMSIS/Include/core_cm4.h **** 
 978:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:Drivers/CMSIS/Include/core_cm4.h **** 
 981:Drivers/CMSIS/Include/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 38


 985:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:Drivers/CMSIS/Include/core_cm4.h **** 
 989:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:Drivers/CMSIS/Include/core_cm4.h **** 
 993:Drivers/CMSIS/Include/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:Drivers/CMSIS/Include/core_cm4.h **** 
 997:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:Drivers/CMSIS/Include/core_cm4.h **** 
1001:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:Drivers/CMSIS/Include/core_cm4.h **** 
1005:Drivers/CMSIS/Include/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:Drivers/CMSIS/Include/core_cm4.h **** 
1009:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:Drivers/CMSIS/Include/core_cm4.h **** 
1012:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:Drivers/CMSIS/Include/core_cm4.h **** 
1015:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:Drivers/CMSIS/Include/core_cm4.h **** 
1018:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:Drivers/CMSIS/Include/core_cm4.h **** 
1021:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:Drivers/CMSIS/Include/core_cm4.h **** 
1024:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:Drivers/CMSIS/Include/core_cm4.h **** 
1027:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:Drivers/CMSIS/Include/core_cm4.h **** 
1030:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:Drivers/CMSIS/Include/core_cm4.h **** 
1033:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:Drivers/CMSIS/Include/core_cm4.h **** 
1035:Drivers/CMSIS/Include/core_cm4.h **** 
1036:Drivers/CMSIS/Include/core_cm4.h **** /**
1037:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:Drivers/CMSIS/Include/core_cm4.h ****   @{
1041:Drivers/CMSIS/Include/core_cm4.h ****  */
ARM GAS  /tmp/ccaEDy0V.s 			page 39


1042:Drivers/CMSIS/Include/core_cm4.h **** 
1043:Drivers/CMSIS/Include/core_cm4.h **** /**
1044:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:Drivers/CMSIS/Include/core_cm4.h ****  */
1046:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1047:Drivers/CMSIS/Include/core_cm4.h **** {
1048:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:Drivers/CMSIS/Include/core_cm4.h **** } TPI_Type;
1073:Drivers/CMSIS/Include/core_cm4.h **** 
1074:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:Drivers/CMSIS/Include/core_cm4.h **** 
1078:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:Drivers/CMSIS/Include/core_cm4.h **** 
1082:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:Drivers/CMSIS/Include/core_cm4.h **** 
1086:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:Drivers/CMSIS/Include/core_cm4.h **** 
1089:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:Drivers/CMSIS/Include/core_cm4.h **** 
1092:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:Drivers/CMSIS/Include/core_cm4.h **** 
1095:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 40


1099:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:Drivers/CMSIS/Include/core_cm4.h **** 
1102:Drivers/CMSIS/Include/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:Drivers/CMSIS/Include/core_cm4.h **** 
1106:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:Drivers/CMSIS/Include/core_cm4.h **** 
1110:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:Drivers/CMSIS/Include/core_cm4.h **** 
1113:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:Drivers/CMSIS/Include/core_cm4.h **** 
1116:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:Drivers/CMSIS/Include/core_cm4.h **** 
1119:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:Drivers/CMSIS/Include/core_cm4.h **** 
1122:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:Drivers/CMSIS/Include/core_cm4.h **** 
1125:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:Drivers/CMSIS/Include/core_cm4.h **** 
1128:Drivers/CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:Drivers/CMSIS/Include/core_cm4.h **** 
1132:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:Drivers/CMSIS/Include/core_cm4.h **** 
1136:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:Drivers/CMSIS/Include/core_cm4.h **** 
1139:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:Drivers/CMSIS/Include/core_cm4.h **** 
1142:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:Drivers/CMSIS/Include/core_cm4.h **** 
1145:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:Drivers/CMSIS/Include/core_cm4.h **** 
1148:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:Drivers/CMSIS/Include/core_cm4.h **** 
1151:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:Drivers/CMSIS/Include/core_cm4.h **** 
1154:Drivers/CMSIS/Include/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
ARM GAS  /tmp/ccaEDy0V.s 			page 41


1156:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:Drivers/CMSIS/Include/core_cm4.h **** 
1158:Drivers/CMSIS/Include/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:Drivers/CMSIS/Include/core_cm4.h **** 
1162:Drivers/CMSIS/Include/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:Drivers/CMSIS/Include/core_cm4.h **** 
1166:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:Drivers/CMSIS/Include/core_cm4.h **** 
1169:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:Drivers/CMSIS/Include/core_cm4.h **** 
1172:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:Drivers/CMSIS/Include/core_cm4.h **** 
1175:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:Drivers/CMSIS/Include/core_cm4.h **** 
1178:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:Drivers/CMSIS/Include/core_cm4.h **** 
1181:Drivers/CMSIS/Include/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:Drivers/CMSIS/Include/core_cm4.h **** 
1185:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:Drivers/CMSIS/Include/core_cm4.h **** 
1188:Drivers/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:Drivers/CMSIS/Include/core_cm4.h **** 
1190:Drivers/CMSIS/Include/core_cm4.h **** 
1191:Drivers/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:Drivers/CMSIS/Include/core_cm4.h **** /**
1193:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:Drivers/CMSIS/Include/core_cm4.h ****   @{
1197:Drivers/CMSIS/Include/core_cm4.h ****  */
1198:Drivers/CMSIS/Include/core_cm4.h **** 
1199:Drivers/CMSIS/Include/core_cm4.h **** /**
1200:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:Drivers/CMSIS/Include/core_cm4.h ****  */
1202:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1203:Drivers/CMSIS/Include/core_cm4.h **** {
1204:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
ARM GAS  /tmp/ccaEDy0V.s 			page 42


1213:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:Drivers/CMSIS/Include/core_cm4.h **** } MPU_Type;
1216:Drivers/CMSIS/Include/core_cm4.h **** 
1217:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Type Register Definitions */
1218:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:Drivers/CMSIS/Include/core_cm4.h **** 
1221:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:Drivers/CMSIS/Include/core_cm4.h **** 
1224:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:Drivers/CMSIS/Include/core_cm4.h **** 
1227:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Control Register Definitions */
1228:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:Drivers/CMSIS/Include/core_cm4.h **** 
1231:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:Drivers/CMSIS/Include/core_cm4.h **** 
1234:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:Drivers/CMSIS/Include/core_cm4.h **** 
1237:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:Drivers/CMSIS/Include/core_cm4.h **** 
1241:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:Drivers/CMSIS/Include/core_cm4.h **** 
1245:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:Drivers/CMSIS/Include/core_cm4.h **** 
1248:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:Drivers/CMSIS/Include/core_cm4.h **** 
1251:Drivers/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:Drivers/CMSIS/Include/core_cm4.h **** 
1255:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:Drivers/CMSIS/Include/core_cm4.h **** 
1258:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:Drivers/CMSIS/Include/core_cm4.h **** 
1261:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:Drivers/CMSIS/Include/core_cm4.h **** 
1264:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:Drivers/CMSIS/Include/core_cm4.h **** 
1267:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 43


1270:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:Drivers/CMSIS/Include/core_cm4.h **** 
1273:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:Drivers/CMSIS/Include/core_cm4.h **** 
1276:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:Drivers/CMSIS/Include/core_cm4.h **** 
1279:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:Drivers/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:Drivers/CMSIS/Include/core_cm4.h **** 
1282:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:Drivers/CMSIS/Include/core_cm4.h **** #endif
1284:Drivers/CMSIS/Include/core_cm4.h **** 
1285:Drivers/CMSIS/Include/core_cm4.h **** 
1286:Drivers/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:Drivers/CMSIS/Include/core_cm4.h **** /**
1288:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:Drivers/CMSIS/Include/core_cm4.h ****   @{
1292:Drivers/CMSIS/Include/core_cm4.h ****  */
1293:Drivers/CMSIS/Include/core_cm4.h **** 
1294:Drivers/CMSIS/Include/core_cm4.h **** /**
1295:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:Drivers/CMSIS/Include/core_cm4.h ****  */
1297:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1298:Drivers/CMSIS/Include/core_cm4.h **** {
1299:Drivers/CMSIS/Include/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:Drivers/CMSIS/Include/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:Drivers/CMSIS/Include/core_cm4.h **** } FPU_Type;
1306:Drivers/CMSIS/Include/core_cm4.h **** 
1307:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:Drivers/CMSIS/Include/core_cm4.h **** 
1311:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:Drivers/CMSIS/Include/core_cm4.h **** 
1314:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:Drivers/CMSIS/Include/core_cm4.h **** 
1317:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:Drivers/CMSIS/Include/core_cm4.h **** 
1320:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:Drivers/CMSIS/Include/core_cm4.h **** 
1323:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:Drivers/CMSIS/Include/core_cm4.h **** 
1326:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
ARM GAS  /tmp/ccaEDy0V.s 			page 44


1327:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:Drivers/CMSIS/Include/core_cm4.h **** 
1329:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:Drivers/CMSIS/Include/core_cm4.h **** 
1332:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:Drivers/CMSIS/Include/core_cm4.h **** 
1335:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:Drivers/CMSIS/Include/core_cm4.h **** 
1339:Drivers/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:Drivers/CMSIS/Include/core_cm4.h **** 
1343:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:Drivers/CMSIS/Include/core_cm4.h **** 
1346:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:Drivers/CMSIS/Include/core_cm4.h **** 
1349:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:Drivers/CMSIS/Include/core_cm4.h **** 
1352:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:Drivers/CMSIS/Include/core_cm4.h **** 
1356:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:Drivers/CMSIS/Include/core_cm4.h **** 
1359:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:Drivers/CMSIS/Include/core_cm4.h **** 
1362:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:Drivers/CMSIS/Include/core_cm4.h **** 
1365:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:Drivers/CMSIS/Include/core_cm4.h **** 
1368:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:Drivers/CMSIS/Include/core_cm4.h **** 
1371:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:Drivers/CMSIS/Include/core_cm4.h **** 
1374:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:Drivers/CMSIS/Include/core_cm4.h **** 
1377:Drivers/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:Drivers/CMSIS/Include/core_cm4.h **** 
1381:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 45


1384:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:Drivers/CMSIS/Include/core_cm4.h **** 
1387:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:Drivers/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:Drivers/CMSIS/Include/core_cm4.h **** 
1390:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:Drivers/CMSIS/Include/core_cm4.h **** #endif
1392:Drivers/CMSIS/Include/core_cm4.h **** 
1393:Drivers/CMSIS/Include/core_cm4.h **** 
1394:Drivers/CMSIS/Include/core_cm4.h **** /**
1395:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:Drivers/CMSIS/Include/core_cm4.h ****   @{
1399:Drivers/CMSIS/Include/core_cm4.h ****  */
1400:Drivers/CMSIS/Include/core_cm4.h **** 
1401:Drivers/CMSIS/Include/core_cm4.h **** /**
1402:Drivers/CMSIS/Include/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:Drivers/CMSIS/Include/core_cm4.h ****  */
1404:Drivers/CMSIS/Include/core_cm4.h **** typedef struct
1405:Drivers/CMSIS/Include/core_cm4.h **** {
1406:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:Drivers/CMSIS/Include/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:Drivers/CMSIS/Include/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:Drivers/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
1411:Drivers/CMSIS/Include/core_cm4.h **** 
1412:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:Drivers/CMSIS/Include/core_cm4.h **** 
1416:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:Drivers/CMSIS/Include/core_cm4.h **** 
1419:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:Drivers/CMSIS/Include/core_cm4.h **** 
1422:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:Drivers/CMSIS/Include/core_cm4.h **** 
1425:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:Drivers/CMSIS/Include/core_cm4.h **** 
1428:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:Drivers/CMSIS/Include/core_cm4.h **** 
1431:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:Drivers/CMSIS/Include/core_cm4.h **** 
1434:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:Drivers/CMSIS/Include/core_cm4.h **** 
1437:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:Drivers/CMSIS/Include/core_cm4.h **** 
1440:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
ARM GAS  /tmp/ccaEDy0V.s 			page 46


1441:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:Drivers/CMSIS/Include/core_cm4.h **** 
1443:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:Drivers/CMSIS/Include/core_cm4.h **** 
1446:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:Drivers/CMSIS/Include/core_cm4.h **** 
1449:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:Drivers/CMSIS/Include/core_cm4.h **** 
1453:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:Drivers/CMSIS/Include/core_cm4.h **** 
1456:Drivers/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:Drivers/CMSIS/Include/core_cm4.h **** 
1460:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:Drivers/CMSIS/Include/core_cm4.h **** 
1463:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:Drivers/CMSIS/Include/core_cm4.h **** 
1466:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:Drivers/CMSIS/Include/core_cm4.h **** 
1469:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:Drivers/CMSIS/Include/core_cm4.h **** 
1472:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:Drivers/CMSIS/Include/core_cm4.h **** 
1475:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:Drivers/CMSIS/Include/core_cm4.h **** 
1478:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:Drivers/CMSIS/Include/core_cm4.h **** 
1481:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:Drivers/CMSIS/Include/core_cm4.h **** 
1484:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:Drivers/CMSIS/Include/core_cm4.h **** 
1487:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:Drivers/CMSIS/Include/core_cm4.h **** 
1490:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:Drivers/CMSIS/Include/core_cm4.h **** 
1493:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:Drivers/CMSIS/Include/core_cm4.h **** 
1496:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:Drivers/CMSIS/Include/core_cm4.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 47


1498:Drivers/CMSIS/Include/core_cm4.h **** 
1499:Drivers/CMSIS/Include/core_cm4.h **** /**
1500:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:Drivers/CMSIS/Include/core_cm4.h ****   @{
1504:Drivers/CMSIS/Include/core_cm4.h ****  */
1505:Drivers/CMSIS/Include/core_cm4.h **** 
1506:Drivers/CMSIS/Include/core_cm4.h **** /**
1507:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:Drivers/CMSIS/Include/core_cm4.h ****   \return           Masked and shifted value.
1511:Drivers/CMSIS/Include/core_cm4.h **** */
1512:Drivers/CMSIS/Include/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:Drivers/CMSIS/Include/core_cm4.h **** 
1514:Drivers/CMSIS/Include/core_cm4.h **** /**
1515:Drivers/CMSIS/Include/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:Drivers/CMSIS/Include/core_cm4.h ****   \param[in] value  Value of register.
1518:Drivers/CMSIS/Include/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:Drivers/CMSIS/Include/core_cm4.h **** */
1520:Drivers/CMSIS/Include/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:Drivers/CMSIS/Include/core_cm4.h **** 
1522:Drivers/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:Drivers/CMSIS/Include/core_cm4.h **** 
1524:Drivers/CMSIS/Include/core_cm4.h **** 
1525:Drivers/CMSIS/Include/core_cm4.h **** /**
1526:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:Drivers/CMSIS/Include/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:Drivers/CMSIS/Include/core_cm4.h ****   @{
1530:Drivers/CMSIS/Include/core_cm4.h ****  */
1531:Drivers/CMSIS/Include/core_cm4.h **** 
1532:Drivers/CMSIS/Include/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:Drivers/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:Drivers/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:Drivers/CMSIS/Include/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:Drivers/CMSIS/Include/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:Drivers/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:Drivers/CMSIS/Include/core_cm4.h **** 
1542:Drivers/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:Drivers/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:Drivers/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:Drivers/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:Drivers/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:Drivers/CMSIS/Include/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:Drivers/CMSIS/Include/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:Drivers/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:Drivers/CMSIS/Include/core_cm4.h **** 
1551:Drivers/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:Drivers/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:Drivers/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:Drivers/CMSIS/Include/core_cm4.h **** #endif
ARM GAS  /tmp/ccaEDy0V.s 			page 48


1555:Drivers/CMSIS/Include/core_cm4.h **** 
1556:Drivers/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:Drivers/CMSIS/Include/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:Drivers/CMSIS/Include/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:Drivers/CMSIS/Include/core_cm4.h **** #endif
1560:Drivers/CMSIS/Include/core_cm4.h **** 
1561:Drivers/CMSIS/Include/core_cm4.h **** /*@} */
1562:Drivers/CMSIS/Include/core_cm4.h **** 
1563:Drivers/CMSIS/Include/core_cm4.h **** 
1564:Drivers/CMSIS/Include/core_cm4.h **** 
1565:Drivers/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1566:Drivers/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1567:Drivers/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1568:Drivers/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1569:Drivers/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1570:Drivers/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1571:Drivers/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1572:Drivers/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1573:Drivers/CMSIS/Include/core_cm4.h **** /**
1574:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:Drivers/CMSIS/Include/core_cm4.h **** */
1576:Drivers/CMSIS/Include/core_cm4.h **** 
1577:Drivers/CMSIS/Include/core_cm4.h **** 
1578:Drivers/CMSIS/Include/core_cm4.h **** 
1579:Drivers/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:Drivers/CMSIS/Include/core_cm4.h **** /**
1581:Drivers/CMSIS/Include/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:Drivers/CMSIS/Include/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:Drivers/CMSIS/Include/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:Drivers/CMSIS/Include/core_cm4.h ****   @{
1585:Drivers/CMSIS/Include/core_cm4.h ****  */
1586:Drivers/CMSIS/Include/core_cm4.h **** 
1587:Drivers/CMSIS/Include/core_cm4.h **** /**
1588:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Priority Grouping
1589:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:Drivers/CMSIS/Include/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:Drivers/CMSIS/Include/core_cm4.h ****            Only values from 0..7 are used.
1592:Drivers/CMSIS/Include/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:Drivers/CMSIS/Include/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:Drivers/CMSIS/Include/core_cm4.h ****  */
1596:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:Drivers/CMSIS/Include/core_cm4.h **** {
1598:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1599:Drivers/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:Drivers/CMSIS/Include/core_cm4.h **** 
1601:Drivers/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:Drivers/CMSIS/Include/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:Drivers/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:Drivers/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:Drivers/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:Drivers/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:Drivers/CMSIS/Include/core_cm4.h **** }
1608:Drivers/CMSIS/Include/core_cm4.h **** 
1609:Drivers/CMSIS/Include/core_cm4.h **** 
1610:Drivers/CMSIS/Include/core_cm4.h **** /**
1611:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Priority Grouping
ARM GAS  /tmp/ccaEDy0V.s 			page 49


1612:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:Drivers/CMSIS/Include/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:Drivers/CMSIS/Include/core_cm4.h ****  */
1615:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:Drivers/CMSIS/Include/core_cm4.h **** {
1617:Drivers/CMSIS/Include/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1618:Drivers/CMSIS/Include/core_cm4.h **** }
1619:Drivers/CMSIS/Include/core_cm4.h **** 
1620:Drivers/CMSIS/Include/core_cm4.h **** 
1621:Drivers/CMSIS/Include/core_cm4.h **** /**
1622:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Enable External Interrupt
1623:Drivers/CMSIS/Include/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:Drivers/CMSIS/Include/core_cm4.h ****  */
1626:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:Drivers/CMSIS/Include/core_cm4.h **** {
1628:Drivers/CMSIS/Include/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:Drivers/CMSIS/Include/core_cm4.h **** }
1630:Drivers/CMSIS/Include/core_cm4.h **** 
1631:Drivers/CMSIS/Include/core_cm4.h **** 
1632:Drivers/CMSIS/Include/core_cm4.h **** /**
1633:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Disable External Interrupt
1634:Drivers/CMSIS/Include/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:Drivers/CMSIS/Include/core_cm4.h ****  */
1637:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:Drivers/CMSIS/Include/core_cm4.h **** {
1639:Drivers/CMSIS/Include/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:Drivers/CMSIS/Include/core_cm4.h **** }
1641:Drivers/CMSIS/Include/core_cm4.h **** 
1642:Drivers/CMSIS/Include/core_cm4.h **** 
1643:Drivers/CMSIS/Include/core_cm4.h **** /**
1644:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Pending Interrupt
1645:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:Drivers/CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:Drivers/CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is pending.
1649:Drivers/CMSIS/Include/core_cm4.h ****  */
1650:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:Drivers/CMSIS/Include/core_cm4.h **** {
1652:Drivers/CMSIS/Include/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:Drivers/CMSIS/Include/core_cm4.h **** }
1654:Drivers/CMSIS/Include/core_cm4.h **** 
1655:Drivers/CMSIS/Include/core_cm4.h **** 
1656:Drivers/CMSIS/Include/core_cm4.h **** /**
1657:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Pending Interrupt
1658:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:Drivers/CMSIS/Include/core_cm4.h ****  */
1661:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:Drivers/CMSIS/Include/core_cm4.h **** {
1663:Drivers/CMSIS/Include/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:Drivers/CMSIS/Include/core_cm4.h **** }
1665:Drivers/CMSIS/Include/core_cm4.h **** 
1666:Drivers/CMSIS/Include/core_cm4.h **** 
1667:Drivers/CMSIS/Include/core_cm4.h **** /**
1668:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Clear Pending Interrupt
ARM GAS  /tmp/ccaEDy0V.s 			page 50


1669:Drivers/CMSIS/Include/core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:Drivers/CMSIS/Include/core_cm4.h ****  */
1672:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:Drivers/CMSIS/Include/core_cm4.h **** {
1674:Drivers/CMSIS/Include/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:Drivers/CMSIS/Include/core_cm4.h **** }
1676:Drivers/CMSIS/Include/core_cm4.h **** 
1677:Drivers/CMSIS/Include/core_cm4.h **** 
1678:Drivers/CMSIS/Include/core_cm4.h **** /**
1679:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Get Active Interrupt
1680:Drivers/CMSIS/Include/core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:Drivers/CMSIS/Include/core_cm4.h ****   \return             0  Interrupt status is not active.
1683:Drivers/CMSIS/Include/core_cm4.h ****   \return             1  Interrupt status is active.
1684:Drivers/CMSIS/Include/core_cm4.h ****  */
1685:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:Drivers/CMSIS/Include/core_cm4.h **** {
1687:Drivers/CMSIS/Include/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:Drivers/CMSIS/Include/core_cm4.h **** }
1689:Drivers/CMSIS/Include/core_cm4.h **** 
1690:Drivers/CMSIS/Include/core_cm4.h **** 
1691:Drivers/CMSIS/Include/core_cm4.h **** /**
1692:Drivers/CMSIS/Include/core_cm4.h ****   \brief   Set Interrupt Priority
1693:Drivers/CMSIS/Include/core_cm4.h ****   \details Sets the priority of an interrupt.
1694:Drivers/CMSIS/Include/core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:Drivers/CMSIS/Include/core_cm4.h ****   \param [in]  priority  Priority to set.
1697:Drivers/CMSIS/Include/core_cm4.h ****  */
1698:Drivers/CMSIS/Include/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:Drivers/CMSIS/Include/core_cm4.h **** {
1700:Drivers/CMSIS/Include/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1701:Drivers/CMSIS/Include/core_cm4.h ****   {
1702:Drivers/CMSIS/Include/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1703:Drivers/CMSIS/Include/core_cm4.h ****   }
1704:Drivers/CMSIS/Include/core_cm4.h ****   else
1705:Drivers/CMSIS/Include/core_cm4.h ****   {
1706:Drivers/CMSIS/Include/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 461              		.loc 2 1706 0
 462 00bc 634A     		ldr	r2, .L76+8
 463              	.LBE151:
 464              	.LBE150:
 465              	.LBB153:
 466              	.LBB154:
1617:Drivers/CMSIS/Include/core_cm4.h **** }
 467              		.loc 2 1617 0
 468 00be DFF8B8E1 		ldr	lr, .L76+52
 469              	.LBE154:
 470              	.LBE153:
 471              	.LBE165:
 472              	.LBB166:
 473              	.LBB142:
 297:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 474              		.loc 1 297 0
 475 00c2 AC60     		str	r4, [r5, #8]
 476              	.LBE142:
 477              	.LBE166:
ARM GAS  /tmp/ccaEDy0V.s 			page 51


 478              	.LBB167:
 479              	.LBB156:
 569:Src/main.c    **** 
 480              		.loc 1 569 0
 481 00c4 3B40     		ands	r3, r3, r7
 482 00c6 0093     		str	r3, [sp]
 483              	.LBE156:
 484              	.LBB157:
 485              	.LBB158:
1628:Drivers/CMSIS/Include/core_cm4.h **** }
 486              		.loc 2 1628 0
 487 00c8 4FF48030 		mov	r0, #65536
 488              	.LBE158:
 489              	.LBE157:
 490              	.LBB160:
 569:Src/main.c    **** 
 491              		.loc 1 569 0
 492 00cc 009B     		ldr	r3, [sp]
 493              	.LBE160:
 494              	.LBE167:
 495              	.LBB168:
 496              	.LBB143:
 295:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 497              		.loc 1 295 0
 498 00ce 6049     		ldr	r1, .L76+12
 499              	.LBE143:
 500              	.LBE168:
 501              	.LBB169:
 502              	.LBB161:
 503              	.LBB155:
1617:Drivers/CMSIS/Include/core_cm4.h **** }
 504              		.loc 2 1617 0
 505 00d0 DEF80C30 		ldr	r3, [lr, #12]
 506              	.LVL32:
 507              	.LBE155:
 508              	.LBE161:
 509              	.LBB162:
 510              	.LBB152:
 511              		.loc 2 1706 0
 512 00d4 82F81043 		strb	r4, [r2, #784]
 513              	.LVL33:
 514              	.LBE152:
 515              	.LBE162:
 516              	.LBE169:
 517              	.LBB170:
 518              	.LBB144:
 306:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 519              		.loc 1 306 0
 520 00d8 0423     		movs	r3, #4
 521              	.LBE144:
 522              	.LBE170:
 523              	.LBB171:
 524              	.LBB163:
 525              	.LBB159:
1628:Drivers/CMSIS/Include/core_cm4.h **** }
 526              		.loc 2 1628 0
 527 00da 1060     		str	r0, [r2]
ARM GAS  /tmp/ccaEDy0V.s 			page 52


 528              	.LBE159:
 529              	.LBE163:
 530              	.LBE171:
 531              	.LBB172:
 532              	.LBB145:
 309:Src/main.c    ****   {
 533              		.loc 1 309 0
 534 00dc 2846     		mov	r0, r5
 306:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 535              		.loc 1 306 0
 536 00de 6B61     		str	r3, [r5, #20]
 298:Src/main.c    ****   hadc2.Init.ContinuousConvMode = ENABLE;
 537              		.loc 1 298 0
 538 00e0 2C61     		str	r4, [r5, #16]
 299:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 539              		.loc 1 299 0
 540 00e2 EF61     		str	r7, [r5, #28]
 300:Src/main.c    ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 541              		.loc 1 300 0
 542 00e4 6C62     		str	r4, [r5, #36]
 301:Src/main.c    ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 543              		.loc 1 301 0
 544 00e6 2C63     		str	r4, [r5, #48]
 302:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 545              		.loc 1 302 0
 546 00e8 EF62     		str	r7, [r5, #44]
 303:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 547              		.loc 1 303 0
 548 00ea EC60     		str	r4, [r5, #12]
 304:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 549              		.loc 1 304 0
 550 00ec 2F62     		str	r7, [r5, #32]
 305:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 551              		.loc 1 305 0
 552 00ee 6C63     		str	r4, [r5, #52]
 307:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 553              		.loc 1 307 0
 554 00f0 AC61     		str	r4, [r5, #24]
 308:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 555              		.loc 1 308 0
 556 00f2 AC63     		str	r4, [r5, #56]
 295:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 557              		.loc 1 295 0
 558 00f4 2960     		str	r1, [r5]
 309:Src/main.c    ****   {
 559              		.loc 1 309 0
 560 00f6 FFF7FEFF 		bl	HAL_ADC_Init
 561              	.LVL34:
 562 00fa 0346     		mov	r3, r0
 563 00fc 00B1     		cbz	r0, .L26
 564              	.L59:
 565 00fe FEE7     		b	.L59
 566              	.L26:
 322:Src/main.c    ****   {
 567              		.loc 1 322 0
 568 0100 2846     		mov	r0, r5
 569 0102 3146     		mov	r1, r6
ARM GAS  /tmp/ccaEDy0V.s 			page 53


 316:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 570              		.loc 1 316 0
 571 0104 0325     		movs	r5, #3
 318:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 572              		.loc 1 318 0
 573 0106 1093     		str	r3, [sp, #64]
 319:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 574              		.loc 1 319 0
 575 0108 0F93     		str	r3, [sp, #60]
 320:Src/main.c    ****   sConfig.Offset = 0;
 576              		.loc 1 320 0
 577 010a 1193     		str	r3, [sp, #68]
 321:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 578              		.loc 1 321 0
 579 010c 1293     		str	r3, [sp, #72]
 317:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 580              		.loc 1 317 0
 581 010e 0E97     		str	r7, [sp, #56]
 316:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 582              		.loc 1 316 0
 583 0110 0D95     		str	r5, [sp, #52]
 322:Src/main.c    ****   {
 584              		.loc 1 322 0
 585 0112 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 586              	.LVL35:
 587 0116 0346     		mov	r3, r0
 588 0118 00B1     		cbz	r0, .L28
 589              	.L60:
 590 011a FEE7     		b	.L60
 591              	.L28:
 592              	.LBE145:
 593              	.LBE172:
 594              	.LBB173:
 595              	.LBB174:
 333:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 596              		.loc 1 333 0
 597 011c 4D4C     		ldr	r4, .L76+16
 598 011e 4E49     		ldr	r1, .L76+20
 334:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 599              		.loc 1 334 0
 600 0120 4E4A     		ldr	r2, .L76+24
 335:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 601              		.loc 1 335 0
 602 0122 A060     		str	r0, [r4, #8]
 342:Src/main.c    ****   {
 603              		.loc 1 342 0
 604 0124 2046     		mov	r0, r4
 334:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 605              		.loc 1 334 0
 606 0126 84E80600 		stmia	r4, {r1, r2}
 336:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 607              		.loc 1 336 0
 608 012a E760     		str	r7, [r4, #12]
 337:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 609              		.loc 1 337 0
 610 012c 2361     		str	r3, [r4, #16]
 338:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
ARM GAS  /tmp/ccaEDy0V.s 			page 54


 611              		.loc 1 338 0
 612 012e 6361     		str	r3, [r4, #20]
 339:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 613              		.loc 1 339 0
 614 0130 A361     		str	r3, [r4, #24]
 340:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 615              		.loc 1 340 0
 616 0132 E361     		str	r3, [r4, #28]
 341:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 617              		.loc 1 341 0
 618 0134 2362     		str	r3, [r4, #32]
 342:Src/main.c    ****   {
 619              		.loc 1 342 0
 620 0136 FFF7FEFF 		bl	HAL_I2C_Init
 621              	.LVL36:
 622 013a 0146     		mov	r1, r0
 623 013c 00B1     		cbz	r0, .L30
 624              	.L61:
 625 013e FEE7     		b	.L61
 626              	.L30:
 349:Src/main.c    ****   {
 627              		.loc 1 349 0
 628 0140 2046     		mov	r0, r4
 629 0142 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 630              	.LVL37:
 631 0146 0146     		mov	r1, r0
 632 0148 00B1     		cbz	r0, .L32
 633              	.L62:
 634 014a FEE7     		b	.L62
 635              	.L32:
 356:Src/main.c    ****   {
 636              		.loc 1 356 0
 637 014c 2046     		mov	r0, r4
 638 014e FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 639              	.LVL38:
 640 0152 0346     		mov	r3, r0
 641 0154 00B1     		cbz	r0, .L34
 642              	.L63:
 643 0156 FEE7     		b	.L63
 644              	.L34:
 645              	.LBE174:
 646              	.LBE173:
 647              	.LBB175:
 648              	.LBB176:
 370:Src/main.c    ****   htim2.Init.Prescaler = 0;
 649              		.loc 1 370 0
 650 0158 414C     		ldr	r4, .L76+28
 376:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 651              		.loc 1 376 0
 652 015a 0D95     		str	r5, [sp, #52]
 373:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 653              		.loc 1 373 0
 654 015c 4FF4B462 		mov	r2, #1440
 370:Src/main.c    ****   htim2.Init.Prescaler = 0;
 655              		.loc 1 370 0
 656 0160 4FF08045 		mov	r5, #1073741824
 385:Src/main.c    ****   {
ARM GAS  /tmp/ccaEDy0V.s 			page 55


 657              		.loc 1 385 0
 658 0164 2046     		mov	r0, r4
 659 0166 3146     		mov	r1, r6
 377:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 660              		.loc 1 377 0
 661 0168 0E93     		str	r3, [sp, #56]
 379:Src/main.c    ****   sConfig.IC1Filter = 0;
 662              		.loc 1 379 0
 663 016a 1093     		str	r3, [sp, #64]
 380:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 664              		.loc 1 380 0
 665 016c 1193     		str	r3, [sp, #68]
 381:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 666              		.loc 1 381 0
 667 016e 1293     		str	r3, [sp, #72]
 383:Src/main.c    ****   sConfig.IC2Filter = 0;
 668              		.loc 1 383 0
 669 0170 1493     		str	r3, [sp, #80]
 384:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 670              		.loc 1 384 0
 671 0172 1593     		str	r3, [sp, #84]
 371:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 672              		.loc 1 371 0
 673 0174 6360     		str	r3, [r4, #4]
 372:Src/main.c    ****   htim2.Init.Period = 1440;
 674              		.loc 1 372 0
 675 0176 A360     		str	r3, [r4, #8]
 374:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 676              		.loc 1 374 0
 677 0178 2361     		str	r3, [r4, #16]
 375:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 678              		.loc 1 375 0
 679 017a A361     		str	r3, [r4, #24]
 378:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 680              		.loc 1 378 0
 681 017c 0F97     		str	r7, [sp, #60]
 382:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 682              		.loc 1 382 0
 683 017e 1397     		str	r7, [sp, #76]
 370:Src/main.c    ****   htim2.Init.Prescaler = 0;
 684              		.loc 1 370 0
 685 0180 2560     		str	r5, [r4]
 373:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 686              		.loc 1 373 0
 687 0182 E260     		str	r2, [r4, #12]
 385:Src/main.c    ****   {
 688              		.loc 1 385 0
 689 0184 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 690              	.LVL39:
 691 0188 0346     		mov	r3, r0
 692 018a 00B1     		cbz	r0, .L36
 693              	.L64:
 694 018c FEE7     		b	.L64
 695              	.L36:
 392:Src/main.c    ****   {
 696              		.loc 1 392 0
 697 018e 07AF     		add	r7, sp, #28
ARM GAS  /tmp/ccaEDy0V.s 			page 56


 698 0190 2046     		mov	r0, r4
 699 0192 3946     		mov	r1, r7
 390:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 700              		.loc 1 390 0
 701 0194 0793     		str	r3, [sp, #28]
 391:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 702              		.loc 1 391 0
 703 0196 0993     		str	r3, [sp, #36]
 392:Src/main.c    ****   {
 704              		.loc 1 392 0
 705 0198 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 706              	.LVL40:
 707 019c 0346     		mov	r3, r0
 708 019e 00B1     		cbz	r0, .L38
 709              	.L65:
 710 01a0 FEE7     		b	.L65
 711              	.L38:
 712              	.LBE176:
 713              	.LBE175:
 714              	.LBB177:
 715              	.LBB178:
 407:Src/main.c    ****   htim3.Init.Prescaler = 350-1;
 716              		.loc 1 407 0
 717 01a2 304C     		ldr	r4, .L76+32
 718 01a4 304D     		ldr	r5, .L76+36
 409:Src/main.c    ****   htim3.Init.Period = 255-1;
 719              		.loc 1 409 0
 720 01a6 A060     		str	r0, [r4, #8]
 408:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 721              		.loc 1 408 0
 722 01a8 40F25D11 		movw	r1, #349
 410:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 723              		.loc 1 410 0
 724 01ac FE22     		movs	r2, #254
 413:Src/main.c    ****   {
 725              		.loc 1 413 0
 726 01ae 2046     		mov	r0, r4
 411:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 727              		.loc 1 411 0
 728 01b0 2361     		str	r3, [r4, #16]
 412:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 729              		.loc 1 412 0
 730 01b2 A361     		str	r3, [r4, #24]
 407:Src/main.c    ****   htim3.Init.Prescaler = 350-1;
 731              		.loc 1 407 0
 732 01b4 2560     		str	r5, [r4]
 408:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 733              		.loc 1 408 0
 734 01b6 6160     		str	r1, [r4, #4]
 410:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 735              		.loc 1 410 0
 736 01b8 E260     		str	r2, [r4, #12]
 413:Src/main.c    ****   {
 737              		.loc 1 413 0
 738 01ba FFF7FEFF 		bl	HAL_TIM_Base_Init
 739              	.LVL41:
 740 01be 00B1     		cbz	r0, .L40
ARM GAS  /tmp/ccaEDy0V.s 			page 57


 741              	.L66:
 742 01c0 FEE7     		b	.L66
 743              	.L40:
 418:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 744              		.loc 1 418 0
 745 01c2 4FF48053 		mov	r3, #4096
 419:Src/main.c    ****   {
 746              		.loc 1 419 0
 747 01c6 2046     		mov	r0, r4
 748 01c8 3946     		mov	r1, r7
 418:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 749              		.loc 1 418 0
 750 01ca 0793     		str	r3, [sp, #28]
 419:Src/main.c    ****   {
 751              		.loc 1 419 0
 752 01cc FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 753              	.LVL42:
 754 01d0 00B1     		cbz	r0, .L42
 755              	.L67:
 756 01d2 FEE7     		b	.L67
 757              	.L42:
 424:Src/main.c    ****   {
 758              		.loc 1 424 0
 759 01d4 2046     		mov	r0, r4
 760 01d6 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 761              	.LVL43:
 762 01da 00B1     		cbz	r0, .L44
 763              	.L68:
 764 01dc FEE7     		b	.L68
 765              	.L44:
 431:Src/main.c    ****   {
 766              		.loc 1 431 0
 767 01de 0DF11008 		add	r8, sp, #16
 429:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 768              		.loc 1 429 0
 769 01e2 0023     		movs	r3, #0
 431:Src/main.c    ****   {
 770              		.loc 1 431 0
 771 01e4 4146     		mov	r1, r8
 772 01e6 1F48     		ldr	r0, .L76+32
 429:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 773              		.loc 1 429 0
 774 01e8 0493     		str	r3, [sp, #16]
 430:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 775              		.loc 1 430 0
 776 01ea 0693     		str	r3, [sp, #24]
 431:Src/main.c    ****   {
 777              		.loc 1 431 0
 778 01ec FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 779              	.LVL44:
 780 01f0 0346     		mov	r3, r0
 781 01f2 00B1     		cbz	r0, .L46
 782              	.L69:
 783 01f4 FEE7     		b	.L69
 784              	.L46:
 436:Src/main.c    ****   sConfigOC.Pulse = 0;
 785              		.loc 1 436 0
ARM GAS  /tmp/ccaEDy0V.s 			page 58


 786 01f6 6024     		movs	r4, #96
 440:Src/main.c    ****   {
 787              		.loc 1 440 0
 788 01f8 1A48     		ldr	r0, .L76+32
 436:Src/main.c    ****   sConfigOC.Pulse = 0;
 789              		.loc 1 436 0
 790 01fa 0D94     		str	r4, [sp, #52]
 440:Src/main.c    ****   {
 791              		.loc 1 440 0
 792 01fc 3146     		mov	r1, r6
 793 01fe 0C22     		movs	r2, #12
 437:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 794              		.loc 1 437 0
 795 0200 0E93     		str	r3, [sp, #56]
 438:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 796              		.loc 1 438 0
 797 0202 0F93     		str	r3, [sp, #60]
 439:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 798              		.loc 1 439 0
 799 0204 1193     		str	r3, [sp, #68]
 440:Src/main.c    ****   {
 800              		.loc 1 440 0
 801 0206 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 802              	.LVL45:
 803 020a 0446     		mov	r4, r0
 804 020c 00B1     		cbz	r0, .L48
 805              	.L70:
 806 020e FEE7     		b	.L70
 807              	.L48:
 445:Src/main.c    **** 
 808              		.loc 1 445 0
 809 0210 1448     		ldr	r0, .L76+32
 810              	.LBE178:
 811              	.LBE177:
 812              	.LBB180:
 813              	.LBB181:
 488:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 814              		.loc 1 488 0
 815 0212 DFF86890 		ldr	r9, .L76+56
 816              	.LBE181:
 817              	.LBE180:
 818              	.LBB183:
 819              	.LBB179:
 445:Src/main.c    **** 
 820              		.loc 1 445 0
 821 0216 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 822              	.LVL46:
 823              	.LBE179:
 824              	.LBE183:
 825              	.LBB184:
 826              	.LBB182:
 487:Src/main.c    ****   huart1.Init.BaudRate = 1000000;
 827              		.loc 1 487 0
 828 021a 144B     		ldr	r3, .L76+40
 829 021c 144A     		ldr	r2, .L76+44
 489:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 830              		.loc 1 489 0
ARM GAS  /tmp/ccaEDy0V.s 			page 59


 831 021e 9C60     		str	r4, [r3, #8]
 497:Src/main.c    ****   {
 832              		.loc 1 497 0
 833 0220 1846     		mov	r0, r3
 492:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 834              		.loc 1 492 0
 835 0222 4FF00C0B 		mov	fp, #12
 490:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 836              		.loc 1 490 0
 837 0226 DC60     		str	r4, [r3, #12]
 491:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 838              		.loc 1 491 0
 839 0228 1C61     		str	r4, [r3, #16]
 493:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 840              		.loc 1 493 0
 841 022a 9C61     		str	r4, [r3, #24]
 494:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 842              		.loc 1 494 0
 843 022c DC61     		str	r4, [r3, #28]
 495:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 844              		.loc 1 495 0
 845 022e 1C62     		str	r4, [r3, #32]
 496:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 846              		.loc 1 496 0
 847 0230 5C62     		str	r4, [r3, #36]
 488:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 848              		.loc 1 488 0
 849 0232 83E80402 		stmia	r3, {r2, r9}
 492:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 850              		.loc 1 492 0
 851 0236 C3F814B0 		str	fp, [r3, #20]
 497:Src/main.c    ****   {
 852              		.loc 1 497 0
 853 023a FFF7FEFF 		bl	HAL_UART_Init
 854              	.LVL47:
 855 023e 0446     		mov	r4, r0
 856 0240 F0B1     		cbz	r0, .L50
 857              	.L71:
 858 0242 FEE7     		b	.L71
 859              	.L77:
 860              		.align	2
 861              	.L76:
 862 0244 00000000 		.word	hadc2
 863 0248 00040048 		.word	1207960576
 864 024c 00E100E0 		.word	-536813312
 865 0250 00010050 		.word	1342177536
 866 0254 00000000 		.word	hi2c1
 867 0258 00540040 		.word	1073763328
 868 025c 0E090020 		.word	536873230
 869 0260 00000000 		.word	htim2
 870 0264 00000000 		.word	htim3
 871 0268 00040040 		.word	1073742848
 872 026c 00000000 		.word	huart1
 873 0270 00380140 		.word	1073821696
 874 0274 00100240 		.word	1073876992
 875 0278 00ED00E0 		.word	-536810240
 876 027c 40420F00 		.word	1000000
ARM GAS  /tmp/ccaEDy0V.s 			page 60


 877              	.L50:
 878              	.LVL48:
 879              	.LBE182:
 880              	.LBE184:
 881              	.LBB185:
 882              	.LBB186:
 883              	.LBB187:
 884              	.LBB188:
 885              		.file 3 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h"
   1:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @file    stm32f3xx_ll_bus.h
   4:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief   Header file of BUS LL module.
   6:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
   7:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   @verbatim                
   8:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****                       ##### RCC Limitations #####
   9:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   ==============================================================================
  10:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****     [..]  
  11:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  12:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write 
  13:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****       from/to registers.
  14:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
  15:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  16:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  17:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****     [..]  
  18:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****       Workarounds:
  19:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  20:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  21:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  22:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   @endverbatim
  23:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   ******************************************************************************
  24:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @attention
  25:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
  26:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  27:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
  28:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * Redistribution and use in source and binary forms, with or without modification,
  29:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * are permitted provided that the following conditions are met:
  30:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  31:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *      this list of conditions and the following disclaimer.
  32:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *      this list of conditions and the following disclaimer in the documentation
  34:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *      and/or other materials provided with the distribution.
  35:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *      may be used to endorse or promote products derived from this software
  37:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *      without specific prior written permission.
  38:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
  39:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ARM GAS  /tmp/ccaEDy0V.s 			page 61


  49:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
  50:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   ******************************************************************************
  51:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
  52:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  53:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  54:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #ifndef __STM32F3xx_LL_BUS_H
  55:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define __STM32F3xx_LL_BUS_H
  56:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  57:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #ifdef __cplusplus
  58:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** extern "C" {
  59:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif
  60:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  61:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  62:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #include "stm32f3xx.h"
  63:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  64:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @addtogroup STM32F3xx_LL_Driver
  65:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
  66:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
  67:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  68:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(RCC)
  69:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  70:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL BUS
  71:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
  72:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
  73:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  74:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  75:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  76:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  77:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  78:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  79:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  80:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  81:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  82:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  83:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  84:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
  85:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
  86:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
  87:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  88:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
  89:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
  90:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            (uint32_t)0xFFFFFFFFU
  91:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHBENR_DMA1EN
  92:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(DMA2)
  93:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA2           RCC_AHBENR_DMA2EN
  94:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*DMA2*/
  95:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM           RCC_AHBENR_SRAMEN
  96:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FLASH          RCC_AHBENR_FLITFEN
  97:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(FMC_Bank1)
  98:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FMC            RCC_AHBENR_FMCEN
  99:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*FMC_Bank1*/
 100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHBENR_CRCEN
 101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(GPIOH)
 102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOH          RCC_AHBENR_GPIOHEN
 103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*GPIOH*/
 104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOA          RCC_AHBENR_GPIOAEN
 105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOB          RCC_AHBENR_GPIOBEN
ARM GAS  /tmp/ccaEDy0V.s 			page 62


 106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOC          RCC_AHBENR_GPIOCEN
 107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOD          RCC_AHBENR_GPIODEN
 108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(GPIOE)
 109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOE          RCC_AHBENR_GPIOEEN
 110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*GPIOE*/
 111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOF          RCC_AHBENR_GPIOFEN
 112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(GPIOG)
 113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOG          RCC_AHBENR_GPIOGEN
 114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*GPIOH*/
 115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_TSC            RCC_AHBENR_TSCEN
 116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(RCC_AHBENR_ADC1EN)
 117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ADC1           RCC_AHBENR_ADC1EN
 118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*RCC_AHBENR_ADC1EN*/
 119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(ADC1_2_COMMON)
 120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ADC12          RCC_AHBENR_ADC12EN
 121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*ADC1_2_COMMON*/
 122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(ADC3_4_COMMON)
 123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ADC34          RCC_AHBENR_ADC34EN
 124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*ADC3_4_COMMON*/
 125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @}
 127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
 130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
 131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            (uint32_t)0xFFFFFFFFU
 133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APB1ENR_TIM2EN
 134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM3)
 135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM3           RCC_APB1ENR_TIM3EN
 136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM3*/
 137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM4)
 138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM4           RCC_APB1ENR_TIM4EN
 139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM4*/
 140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM5)
 141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM5           RCC_APB1ENR_TIM5EN
 142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM5*/
 143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM6           RCC_APB1ENR_TIM6EN
 144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM7)
 145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM7           RCC_APB1ENR_TIM7EN
 146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM7*/
 147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM12)
 148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM12          RCC_APB1ENR_TIM12EN
 149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM12*/
 150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM13)
 151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM13          RCC_APB1ENR_TIM13EN
 152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM13*/
 153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM14)
 154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM14          RCC_APB1ENR_TIM14EN
 155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM14*/
 156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM18)
 157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM18          RCC_APB1ENR_TIM18EN
 158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM18*/
 159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APB1ENR_WWDGEN
 160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SPI2)
 161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APB1ENR_SPI2EN
 162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SPI2*/
ARM GAS  /tmp/ccaEDy0V.s 			page 63


 163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SPI3)
 164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI3           RCC_APB1ENR_SPI3EN
 165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SPI3*/
 166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART2         RCC_APB1ENR_USART2EN
 167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART3         RCC_APB1ENR_USART3EN
 168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(UART4)
 169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UART4          RCC_APB1ENR_UART4EN
 170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*UART4*/
 171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(UART5)
 172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UART5          RCC_APB1ENR_UART5EN
 173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*UART5*/
 174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APB1ENR_I2C1EN
 175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(I2C2)
 176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C2           RCC_APB1ENR_I2C2EN
 177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*I2C2*/
 178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(USB)
 179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USB            RCC_APB1ENR_USBEN
 180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*USB*/
 181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(CAN)
 182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CAN            RCC_APB1ENR_CANEN
 183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*CAN*/
 184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(DAC2)
 185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC2           RCC_APB1ENR_DAC2EN
 186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*DAC2*/
 187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_PWR            RCC_APB1ENR_PWREN
 188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC1           RCC_APB1ENR_DAC1EN
 189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(CEC)
 190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_CEC            RCC_APB1ENR_CECEN
 191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*CEC*/
 192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(I2C3)
 193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C3           RCC_APB1ENR_I2C3EN
 194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*I2C3*/
 195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @}
 197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
 201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            (uint32_t)0xFFFFFFFFU
 203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SYSCFG         RCC_APB2ENR_SYSCFGEN
 204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(RCC_APB2ENR_ADC1EN)
 205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC1           RCC_APB2ENR_ADC1EN
 206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*RCC_APB2ENR_ADC1EN*/
 207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM1)
 208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM1           RCC_APB2ENR_TIM1EN
 209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM1*/
 210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SPI1)
 211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APB2ENR_SPI1EN
 212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SPI1*/
 213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM8)
 214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM8           RCC_APB2ENR_TIM8EN
 215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM8*/
 216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APB2ENR_USART1EN
 217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SPI4)
 218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI4           RCC_APB2ENR_SPI4EN
 219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SPI4*/
ARM GAS  /tmp/ccaEDy0V.s 			page 64


 220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM15          RCC_APB2ENR_TIM15EN
 221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM16          RCC_APB2ENR_TIM16EN
 222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM17          RCC_APB2ENR_TIM17EN
 223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM19)
 224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM19          RCC_APB2ENR_TIM19EN
 225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM19*/
 226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(TIM20)
 227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM20          RCC_APB2ENR_TIM20EN
 228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*TIM20*/
 229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(HRTIM1)
 230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_HRTIM1         RCC_APB2ENR_HRTIM1EN
 231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*HRTIM1*/
 232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SDADC1)
 233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SDADC1         RCC_APB2ENR_SDADC1EN
 234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SDADC1*/
 235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SDADC2)
 236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SDADC2         RCC_APB2ENR_SDADC2EN
 237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SDADC2*/
 238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #if defined(SDADC3)
 239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SDADC3         RCC_APB2ENR_SDADC3EN
 240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** #endif /*SDADC3*/
 241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @}
 243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @}
 247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
 253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
 254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
 258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @rmtoll AHBENR       DMA1EN        LL_AHB1_GRP1_EnableClock\n
 263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_EnableClock\n
 264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       SRAMEN        LL_AHB1_GRP1_EnableClock\n
 265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_EnableClock\n
 266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       FMCEN         LL_AHB1_GRP1_EnableClock\n
 267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_EnableClock\n
 268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOHEN       LL_AHB1_GRP1_EnableClock\n
 269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOAEN       LL_AHB1_GRP1_EnableClock\n
 270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOBEN       LL_AHB1_GRP1_EnableClock\n
 271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOCEN       LL_AHB1_GRP1_EnableClock\n
 272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIODEN       LL_AHB1_GRP1_EnableClock\n
 273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOEEN       LL_AHB1_GRP1_EnableClock\n
 274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOFEN       LL_AHB1_GRP1_EnableClock\n
 275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOGEN       LL_AHB1_GRP1_EnableClock\n
 276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       TSCEN         LL_AHB1_GRP1_EnableClock\n
ARM GAS  /tmp/ccaEDy0V.s 			page 65


 277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC1EN        LL_AHB1_GRP1_EnableClock\n
 278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC12EN       LL_AHB1_GRP1_EnableClock\n
 279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC34EN       LL_AHB1_GRP1_EnableClock
 280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FMC (*)
 286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH (*)
 288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF
 294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC1 (*)
 297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC12 (*)
 298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC34 (*)
 299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
 300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         (*) value not defined in all devices.
 301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @retval None
 302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** */
 303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** {
 305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   __IO uint32_t tmpreg;
 306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
 307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   (void)tmpreg;
 310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** }
 311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @rmtoll AHBENR       DMA1EN        LL_AHB1_GRP1_IsEnabledClock\n
 315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_IsEnabledClock\n
 316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       SRAMEN        LL_AHB1_GRP1_IsEnabledClock\n
 317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_IsEnabledClock\n
 318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       FMCEN         LL_AHB1_GRP1_IsEnabledClock\n
 319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_IsEnabledClock\n
 320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOHEN       LL_AHB1_GRP1_IsEnabledClock\n
 321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOAEN       LL_AHB1_GRP1_IsEnabledClock\n
 322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOBEN       LL_AHB1_GRP1_IsEnabledClock\n
 323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOCEN       LL_AHB1_GRP1_IsEnabledClock\n
 324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIODEN       LL_AHB1_GRP1_IsEnabledClock\n
 325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOEEN       LL_AHB1_GRP1_IsEnabledClock\n
 326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOFEN       LL_AHB1_GRP1_IsEnabledClock\n
 327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOGEN       LL_AHB1_GRP1_IsEnabledClock\n
 328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       TSCEN         LL_AHB1_GRP1_IsEnabledClock\n
 329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC1EN        LL_AHB1_GRP1_IsEnabledClock\n
 330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC12EN       LL_AHB1_GRP1_IsEnabledClock\n
 331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC34EN       LL_AHB1_GRP1_IsEnabledClock
 332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
ARM GAS  /tmp/ccaEDy0V.s 			page 66


 334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FMC (*)
 338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH (*)
 340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF
 346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC1 (*)
 349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC12 (*)
 350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC34 (*)
 351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
 352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         (*) value not defined in all devices.
 353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** */
 355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** {
 357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   return (READ_BIT(RCC->AHBENR, Periphs) == Periphs);
 358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** }
 359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @rmtoll AHBENR       DMA1EN        LL_AHB1_GRP1_DisableClock\n
 363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_DisableClock\n
 364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       SRAMEN        LL_AHB1_GRP1_DisableClock\n
 365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_DisableClock\n
 366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       FMCEN         LL_AHB1_GRP1_DisableClock\n
 367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_DisableClock\n
 368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOHEN       LL_AHB1_GRP1_DisableClock\n
 369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOAEN       LL_AHB1_GRP1_DisableClock\n
 370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOBEN       LL_AHB1_GRP1_DisableClock\n
 371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOCEN       LL_AHB1_GRP1_DisableClock\n
 372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIODEN       LL_AHB1_GRP1_DisableClock\n
 373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOEEN       LL_AHB1_GRP1_DisableClock\n
 374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOFEN       LL_AHB1_GRP1_DisableClock\n
 375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       GPIOGEN       LL_AHB1_GRP1_DisableClock\n
 376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       TSCEN         LL_AHB1_GRP1_DisableClock\n
 377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC1EN        LL_AHB1_GRP1_DisableClock\n
 378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC12EN       LL_AHB1_GRP1_DisableClock\n
 379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBENR       ADC34EN       LL_AHB1_GRP1_DisableClock
 380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FMC (*)
 386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH (*)
 388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
ARM GAS  /tmp/ccaEDy0V.s 			page 67


 391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF
 394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC1 (*)
 397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC12 (*)
 398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC34 (*)
 399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
 400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         (*) value not defined in all devices.
 401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @retval None
 402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** */
 403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** {
 405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBENR, Periphs);
 406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** }
 407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @rmtoll AHBRSTR      FMCRST        LL_AHB1_GRP1_ForceReset\n
 411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOHRST      LL_AHB1_GRP1_ForceReset\n
 412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOARST      LL_AHB1_GRP1_ForceReset\n
 413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOBRST      LL_AHB1_GRP1_ForceReset\n
 414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOCRST      LL_AHB1_GRP1_ForceReset\n
 415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIODRST      LL_AHB1_GRP1_ForceReset\n
 416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOERST      LL_AHB1_GRP1_ForceReset\n
 417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOFRST      LL_AHB1_GRP1_ForceReset\n
 418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOGRST      LL_AHB1_GRP1_ForceReset\n
 419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      TSCRST        LL_AHB1_GRP1_ForceReset\n
 420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      ADC1RST       LL_AHB1_GRP1_ForceReset\n
 421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      ADC12RST      LL_AHB1_GRP1_ForceReset\n
 422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      ADC34RST      LL_AHB1_GRP1_ForceReset
 423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FMC (*)
 426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH (*)
 427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF
 433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC1 (*)
 436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC12 (*)
 437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC34 (*)
 438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
 439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         (*) value not defined in all devices.
 440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @retval None
 441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** */
 442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** {
 444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   SET_BIT(RCC->AHBRSTR, Periphs);
 445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** }
 446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 68


 448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @rmtoll AHBRSTR      FMCRST        LL_AHB1_GRP1_ReleaseReset\n
 450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOHRST      LL_AHB1_GRP1_ReleaseReset\n
 451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOARST      LL_AHB1_GRP1_ReleaseReset\n
 452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOBRST      LL_AHB1_GRP1_ReleaseReset\n
 453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOCRST      LL_AHB1_GRP1_ReleaseReset\n
 454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIODRST      LL_AHB1_GRP1_ReleaseReset\n
 455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOERST      LL_AHB1_GRP1_ReleaseReset\n
 456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOFRST      LL_AHB1_GRP1_ReleaseReset\n
 457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      GPIOGRST      LL_AHB1_GRP1_ReleaseReset\n
 458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      TSCRST        LL_AHB1_GRP1_ReleaseReset\n
 459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      ADC1RST       LL_AHB1_GRP1_ReleaseReset\n
 460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      ADC12RST      LL_AHB1_GRP1_ReleaseReset\n
 461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         AHBRSTR      ADC34RST      LL_AHB1_GRP1_ReleaseReset
 462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FMC (*)
 465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH (*)
 466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF
 472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
 474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC1 (*)
 475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC12 (*)
 476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ADC34 (*)
 477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
 478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         (*) value not defined in all devices.
 479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @retval None
 480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** */
 481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** {
 483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBRSTR, Periphs);
 484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** }
 485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @}
 488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @{
 492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   */
 493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** 
 494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** /**
 495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @rmtoll APB1ENR      TIM2EN        LL_APB1_GRP1_EnableClock\n
 497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_EnableClock\n
 498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_EnableClock\n
 499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_EnableClock\n
 500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_EnableClock\n
 501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_EnableClock\n
 502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM12EN       LL_APB1_GRP1_EnableClock\n
 503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM13EN       LL_APB1_GRP1_EnableClock\n
 504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM14EN       LL_APB1_GRP1_EnableClock\n
ARM GAS  /tmp/ccaEDy0V.s 			page 69


 505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      TIM18EN       LL_APB1_GRP1_EnableClock\n
 506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_EnableClock\n
 507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_EnableClock\n
 508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_EnableClock\n
 509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_EnableClock\n
 510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_EnableClock\n
 511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_EnableClock\n
 512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_EnableClock\n
 513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_EnableClock\n
 514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_EnableClock\n
 515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_EnableClock\n
 516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      CANEN         LL_APB1_GRP1_EnableClock\n
 517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      DAC2EN        LL_APB1_GRP1_EnableClock\n
 518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_EnableClock\n
 519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      DAC1EN        LL_APB1_GRP1_EnableClock\n
 520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      CECEN         LL_APB1_GRP1_EnableClock\n
 521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         APB1ENR      I2C3EN        LL_APB1_GRP1_EnableClock
 522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3 (*)
 525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4 (*)
 526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7 (*)
 529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM12 (*)
 530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM13 (*)
 531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM14 (*)
 532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM18 (*)
 533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2 (*)
 535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2 (*)
 542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB (*)
 543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CAN (*)
 544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC2 (*)
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_CEC (*)
 548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C3 (*)
 549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *
 550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   *         (*) value not defined in all devices.
 551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   * @retval None
 552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** */
 553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h **** {
 555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   __IO uint32_t tmpreg;
 556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   SET_BIT(RCC->APB1ENR, Periphs);
 886              		.loc 3 556 0
 887 0280 794B     		ldr	r3, .L78
 888              	.LBE188:
 889              	.LBE187:
 551:Src/main.c    **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 70


 890              		.loc 1 551 0
 891 0282 7A4D     		ldr	r5, .L78+4
 892              	.LBB193:
 893              	.LBB189:
 894              		.loc 3 556 0
 895 0284 DA69     		ldr	r2, [r3, #28]
 896              	.LBE189:
 897              	.LBE193:
 898              	.LBE186:
 899              	.LBE185:
 900              	.LBB235:
 901              	.LBB236:
 456:Src/main.c    ****   htim15.Init.Prescaler = 25-1;
 902              		.loc 1 456 0
 903 0286 DFF804A2 		ldr	r10, .L78+36
 904              	.LBE236:
 905              	.LBE235:
 906              	.LBB243:
 907              	.LBB229:
 908              	.LBB194:
 909              	.LBB190:
 910              		.loc 3 556 0
 911 028a 42F40032 		orr	r2, r2, #131072
 912 028e DA61     		str	r2, [r3, #28]
 557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 913              		.loc 3 558 0
 914 0290 DB69     		ldr	r3, [r3, #28]
 915              	.LBE190:
 916              	.LBE194:
 519:Src/main.c    ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 917              		.loc 1 519 0
 918 0292 CDF81CB0 		str	fp, [sp, #28]
 919              	.LBB195:
 920              	.LBB191:
 921              		.loc 3 558 0
 922 0296 03F40033 		and	r3, r3, #131072
 923 029a 0393     		str	r3, [sp, #12]
 924              	.LBE191:
 925              	.LBE195:
 520:Src/main.c    ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 926              		.loc 1 520 0
 927 029c 4FF0020E 		mov	lr, #2
 521:Src/main.c    ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 928              		.loc 1 521 0
 929 02a0 0322     		movs	r2, #3
 524:Src/main.c    ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 930              		.loc 1 524 0
 931 02a2 0723     		movs	r3, #7
 525:Src/main.c    **** 
 932              		.loc 1 525 0
 933 02a4 3946     		mov	r1, r7
 934 02a6 4FF09040 		mov	r0, #1207959552
 935              	.LBB196:
 936              	.LBB192:
 559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_bus.h ****   (void)tmpreg;
 937              		.loc 3 559 0
ARM GAS  /tmp/ccaEDy0V.s 			page 71


 938 02aa DDF80CC0 		ldr	ip, [sp, #12]
 939              	.LBE192:
 940              	.LBE196:
 520:Src/main.c    ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 941              		.loc 1 520 0
 942 02ae CDF820E0 		str	lr, [sp, #32]
 521:Src/main.c    ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 943              		.loc 1 521 0
 944 02b2 0992     		str	r2, [sp, #36]
 524:Src/main.c    ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 945              		.loc 1 524 0
 946 02b4 0C93     		str	r3, [sp, #48]
 522:Src/main.c    ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 947              		.loc 1 522 0
 948 02b6 0A94     		str	r4, [sp, #40]
 523:Src/main.c    ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 949              		.loc 1 523 0
 950 02b8 0B94     		str	r4, [sp, #44]
 525:Src/main.c    **** 
 951              		.loc 1 525 0
 952 02ba FFF7FEFF 		bl	LL_GPIO_Init
 953              	.LVL49:
 954              	.LBB197:
 955              	.LBB198:
 956              		.file 4 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h"
   1:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @file    stm32f3xx_ll_dma.h
   4:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @attention
   8:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
   9:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
  11:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *      without specific prior written permission.
  21:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
  22:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *
ARM GAS  /tmp/ccaEDy0V.s 			page 72


  33:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   ******************************************************************************
  34:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  35:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  36:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #ifndef __STM32F3xx_LL_DMA_H
  38:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __STM32F3xx_LL_DMA_H
  39:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  40:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #ifdef __cplusplus
  41:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** extern "C" {
  42:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
  43:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  44:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #include "stm32f3xx.h"
  46:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  47:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @addtogroup STM32F3xx_LL_Driver
  48:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  49:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  50:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  51:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  52:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  53:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  54:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  55:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  56:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  57:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  60:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  61:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  62:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  63:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  64:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
  65:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  66:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  67:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  68:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  69:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  70:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE),
  71:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  72:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** };
  73:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
  74:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
  75:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  76:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  77:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  78:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  79:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  80:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  81:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  82:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  83:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
  84:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
  85:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  86:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
  87:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  88:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  89:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
ARM GAS  /tmp/ccaEDy0V.s 			page 73


  90:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  91:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
  92:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
  93:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** typedef struct
  94:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
  95:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  96:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
  97:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
  98:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
  99:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
 106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
 114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
 115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         is incremented or not.
 120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         is incremented or not.
 126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 74


 147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
 175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 75


 204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
 205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
 211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
 215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
 217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
 224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000001U /*!< DMA Channel 1 */
 251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000002U /*!< DMA Channel 2 */
 252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000003U /*!< DMA Channel 3 */
 253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000004U /*!< DMA Channel 4 */
 254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000005U /*!< DMA Channel 5 */
 255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000006U /*!< DMA Channel 6 */
 256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000007U /*!< DMA Channel 7 */
 257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 76


 261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
 268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 77


 318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
 325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Write a value in DMA register
 347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __REG__ Register to be written
 349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Read a value in DMA register
 356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __REG__ Register to be read
 358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Register value
 359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval DMAx
 372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined(DMA2)
 374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
ARM GAS  /tmp/ccaEDy0V.s 			page 78


 375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel7)) ?  DMA2 : DMA1)
 376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
 378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
 382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2)
 386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel6)) ? LL_DMA_CHANNEL_6 : \
 400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  LL_DMA_CHANNEL_7)
 425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval DMAx_Channely
ARM GAS  /tmp/ccaEDy0V.s 			page 79


 432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2)
 434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #if defined (DMA2_Channel6) && defined (DMA2_Channel7)
 435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  DMA2_Channel7)
 450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  DMA1_Channel7)
 464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #else
 466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_D
 473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  DMA1_Channel7)
 474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** #endif
 475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @}
 482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  * @{
 487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****  */
 488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 80


 489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @{
 491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Enable DMA channel.
 494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))-
 509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Disable DMA channel.
 513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U]))
 528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
ARM GAS  /tmp/ccaEDy0V.s 			page 81


 546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_EN) == (DMA_CCR_EN));
 548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
 553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              Configuration);
 584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
 590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
ARM GAS  /tmp/ccaEDy0V.s 			page 82


 603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 957              		.loc 4 607 0
 958 02be 6C4B     		ldr	r3, .L78+8
 959 02c0 1A68     		ldr	r2, [r3]
 960 02c2 22F48042 		bic	r2, r2, #16384
 961 02c6 22F01002 		bic	r2, r2, #16
 962 02ca 1A60     		str	r2, [r3]
 963              	.LVL50:
 964              	.LBE198:
 965              	.LBE197:
 966              	.LBB199:
 967              	.LBB200:
 608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
ARM GAS  /tmp/ccaEDy0V.s 			page 83


 649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              Mode);
 658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
 677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_CIRC));
 680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 84


 706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_PINC));
 725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccaEDy0V.s 			page 85


 763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_MINC));
 770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Peripheral size.
 774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Peripheral size.
 798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 86


 820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Memory size.
 821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
 838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Get Memory size.
 845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel 
 863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** }
 865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** 
 866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** /**
 867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @brief  Set Channel priority level.
 868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
 869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
ARM GAS  /tmp/ccaEDy0V.s 			page 87


 877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
 878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   * @retval None
 884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   */
 885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h **** {
 887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])
 968              		.loc 4 887 0
 969 02cc 1A68     		ldr	r2, [r3]
 970 02ce 22F44052 		bic	r2, r2, #12288
 971 02d2 1A60     		str	r2, [r3]
 972              	.LVL51:
 973              	.LBE200:
 974              	.LBE199:
 975              	.LBB201:
 976              	.LBB202:
 656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              Mode);
 977              		.loc 4 656 0
 978 02d4 1A68     		ldr	r2, [r3]
 979 02d6 42F02002 		orr	r2, r2, #32
 980 02da 1A60     		str	r2, [r3]
 981              	.LVL52:
 982              	.LBE202:
 983              	.LBE201:
 984              	.LBB203:
 985              	.LBB204:
 701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 986              		.loc 4 701 0
 987 02dc 1A68     		ldr	r2, [r3]
 988 02de 22F04002 		bic	r2, r2, #64
 989 02e2 1A60     		str	r2, [r3]
 990              	.LVL53:
 991              	.LBE204:
 992              	.LBE203:
 993              	.LBB205:
 994              	.LBB206:
 746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 995              		.loc 4 746 0
 996 02e4 1A68     		ldr	r2, [r3]
 997 02e6 42F08002 		orr	r2, r2, #128
 998 02ea 1A60     		str	r2, [r3]
 999              	.LVL54:
 1000              	.LBE206:
 1001              	.LBE205:
 1002              	.LBB207:
 1003              	.LBB208:
 792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 1004              		.loc 4 792 0
 1005 02ec 1A68     		ldr	r2, [r3]
 1006 02ee 22F44072 		bic	r2, r2, #768
 1007 02f2 1A60     		str	r2, [r3]
 1008              	.LVL55:
 1009              	.LBE208:
ARM GAS  /tmp/ccaEDy0V.s 			page 88


 1010              	.LBE207:
 1011              	.LBB209:
 1012              	.LBB210:
 839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 1013              		.loc 4 839 0
 1014 02f4 1A68     		ldr	r2, [r3]
 1015 02f6 22F44062 		bic	r2, r2, #3072
 1016 02fa 1A60     		str	r2, [r3]
 1017              	.LBE210:
 1018              	.LBE209:
 551:Src/main.c    **** 
 1019              		.loc 1 551 0
 1020 02fc 3146     		mov	r1, r6
 1021 02fe 2846     		mov	r0, r5
 544:Src/main.c    ****   USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 1022              		.loc 1 544 0
 1023 0300 CDF83490 		str	r9, [sp, #52]
 545:Src/main.c    ****   USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 1024              		.loc 1 545 0
 1025 0304 0E94     		str	r4, [sp, #56]
 546:Src/main.c    ****   USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 1026              		.loc 1 546 0
 1027 0306 0F94     		str	r4, [sp, #60]
 547:Src/main.c    ****   USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 1028              		.loc 1 547 0
 1029 0308 1094     		str	r4, [sp, #64]
 548:Src/main.c    ****   USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 1030              		.loc 1 548 0
 1031 030a CDF844B0 		str	fp, [sp, #68]
 549:Src/main.c    ****   USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 1032              		.loc 1 549 0
 1033 030e 1294     		str	r4, [sp, #72]
 550:Src/main.c    ****   LL_USART_Init(USART2, &USART_InitStruct);
 1034              		.loc 1 550 0
 1035 0310 1394     		str	r4, [sp, #76]
 551:Src/main.c    **** 
 1036              		.loc 1 551 0
 1037 0312 FFF7FEFF 		bl	LL_USART_Init
 1038              	.LVL56:
 1039              	.LBB211:
 1040              	.LBB212:
 1041              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h"
   1:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @file    stm32f3xx_ll_usart.h
   4:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
   9:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  10:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
  11:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
ARM GAS  /tmp/ccaEDy0V.s 			page 89


  16:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *      without specific prior written permission.
  21:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
  22:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
  33:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   ******************************************************************************
  34:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  35:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  36:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #ifndef __STM32F3xx_LL_USART_H
  38:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define __STM32F3xx_LL_USART_H
  39:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  40:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #ifdef __cplusplus
  41:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** extern "C" {
  42:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif
  43:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  44:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #include "stm32f3xx.h"
  46:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  47:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @addtogroup STM32F3xx_LL_Driver
  48:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  49:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  50:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  51:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
  52:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  53:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL USART
  54:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  55:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  56:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  57:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  60:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  61:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  62:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  63:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  64:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
  65:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
  66:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  67:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  68:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  69:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  70:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  71:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  72:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 90


  73:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
  74:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
  75:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  76:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  77:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  78:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  79:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  80:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  81:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
  82:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  83:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  84:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
  85:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  86:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
  87:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** typedef struct
  88:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
  89:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  90:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  91:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  92:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  93:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  94:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  95:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  96:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  97:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
  98:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  99:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** } LL_USART_InitTypeDef;
 124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** typedef struct
 129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
ARM GAS  /tmp/ccaEDy0V.s 			page 91


 130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                            For more details, refer to description of this function.
 155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error fla
 173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error fl
 174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_NCF                        USART_ICR_NCF                 /*!< Noise detected f
 175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error fl
 176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS flag */
 180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block fla
 182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 92


 187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_RXNE                       USART_ISR_RXNE                /*!< Read data regist
 198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_TXE                        USART_ISR_TXE                 /*!< Transmit data re
 200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
ARM GAS  /tmp/ccaEDy0V.s 			page 93


 244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USART_7BITS_SUPPORT)
 272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #else
 276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif
 279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
ARM GAS  /tmp/ccaEDy0V.s 			page 94


 301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
 352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
ARM GAS  /tmp/ccaEDy0V.s 			page 95


 358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 96


 415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 97


 472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Write a value in USART register
 479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __REG__ Register to be written
 481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Read a value in USART register
 488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __REG__ Register to be read
 490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Register value
 491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2) + ((__BAUDRATE_
 509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/
 518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
 525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 98


 529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
 535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART Enable
 539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
 575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UESM);
ARM GAS  /tmp/ccaEDy0V.s 			page 99


 586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
 611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM));
 613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Receiver Disable
 628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Transmitter Enable
 639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 100


 643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Transmitter Disable
 650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         of Transmitter and Receiver
 662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
ARM GAS  /tmp/ccaEDy0V.s 			page 101


 700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
ARM GAS  /tmp/ccaEDy0V.s 			page 102


 757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
 761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
 764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (*) Values not available on all devices
 765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
 775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
 776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
 779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
 782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (*) Values not available on all devices
 783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
 791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
 792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
 796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_MME);
 798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
 802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
 803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
 807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
 809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
 813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
ARM GAS  /tmp/ccaEDy0V.s 			page 103


 814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
 818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME));
 820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Oversampling mode
 838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
ARM GAS  /tmp/ccaEDy0V.s 			page 104


 871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 888:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 889:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 890:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 891:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 892:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 893:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 894:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 895:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 896:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 897:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 898:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 899:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 900:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 901:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 902:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 903:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 904:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 905:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 906:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 907:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 908:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 909:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 910:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 911:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 912:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 913:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 914:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 915:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 916:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 917:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 918:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 919:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 920:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 921:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 922:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 923:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 924:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 925:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 926:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 927:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 105


 928:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 929:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 930:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 931:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 932:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 933:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 934:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 935:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 936:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 937:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 938:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 939:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 940:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 941:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 942:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 943:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 944:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 945:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 946:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 947:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 948:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 949:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 950:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 951:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 952:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 953:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 954:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 955:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 957:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 958:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 959:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 960:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 961:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 962:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 963:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 964:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 965:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 966:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 967:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 968:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 969:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 970:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 971:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 972:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 973:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 974:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 975:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 976:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 977:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 978:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 979:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 980:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 981:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 982:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 983:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 984:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 106


 985:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 986:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 987:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 988:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 989:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
 990:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
 991:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
 992:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 993:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
 994:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 995:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 996:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
 997:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
 998:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 999:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1000:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1001:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1002:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1003:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1004:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1005:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
1006:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1007:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
1008:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1009:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1010:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1011:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1012:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1013:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1014:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1015:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1016:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1017:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1018:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1019:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1020:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1021:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1022:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1023:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1024:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1025:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1026:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1027:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1028:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1029:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1030:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1031:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1032:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1033:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1034:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1035:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1036:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
1037:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1038:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1039:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1040:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1041:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 107


1042:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1043:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1044:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1045:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1046:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1047:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1048:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1049:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1050:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1051:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1052:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1053:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1054:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B (*)
1055:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1056:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1057:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1058:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1059:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1060:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1061:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1062:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1063:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1064:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1065:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1066:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *
1067:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (*) Values not available on all devices
1068:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1069:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1070:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1071:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                               uint32_t StopBits)
1072:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1073:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1074:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1075:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1076:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1077:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1078:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1079:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1080:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1081:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1082:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1083:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1084:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1085:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1086:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1087:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1088:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1089:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1090:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1091:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1092:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1093:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1094:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1095:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1096:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1097:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1098:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 108


1099:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
1100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
1127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
1154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
ARM GAS  /tmp/ccaEDy0V.s 			page 109


1156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
1183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 110


1213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
1214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
1253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN));
1255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
ARM GAS  /tmp/ccaEDy0V.s 			page 111


1270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
1271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
1278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
1288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
1321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN));
1323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Address of the USART node.
ARM GAS  /tmp/ccaEDy0V.s 			page 112


1327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
1328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         for wake up with address mark detection.
1329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         value and CMF flag is set on match)
1339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
1365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
1378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
ARM GAS  /tmp/ccaEDy0V.s 			page 113


1384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccaEDy0V.s 			page 114


1441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
1442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
1467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccaEDy0V.s 			page 115


1498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Overrun detection
1506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Overrun detection
1517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
1533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS);
1535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 116


1555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
1566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (Baud rate value != 0)
1576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****                                           uint32_t BaudRate)
1588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t brrtemp = 0x0U;
1591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     USARTx->BRR = brrtemp;
1598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   else
1600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccaEDy0V.s 			page 117


1612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Baud Rate
1617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     {
1629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     }
1632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   else
1634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   {
1635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     {
1637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****     }
1639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   }
1640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (brrresult);
1641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
1662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Block Length value in reception
1668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
ARM GAS  /tmp/ccaEDy0V.s 			page 118


1669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Get Block Length value in reception
1680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
1681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
1683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
1685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
1687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
1691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
1695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable IrDA mode
1699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable IrDA mode
1712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccaEDy0V.s 			page 119


1726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 120


1783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
1798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
1802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
ARM GAS  /tmp/ccaEDy0V.s 			page 121


1840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
1887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
1888:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
1889:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
1890:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
1891:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
1892:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1893:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
1894:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1895:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1896:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
ARM GAS  /tmp/ccaEDy0V.s 			page 122


1897:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1898:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
1899:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1900:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1901:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1902:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
1903:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1904:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1905:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
1906:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1907:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
1908:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1909:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
1910:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1911:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
1912:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1913:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1914:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1915:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1916:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1917:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1918:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1919:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1920:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1921:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1922:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1923:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1924:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1925:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1926:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1927:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1928:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1929:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1930:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1931:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1932:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1933:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1934:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1935:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1936:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1937:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1938:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1939:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1940:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1941:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1942:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1943:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1944:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1945:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1946:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1947:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1948:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1949:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1950:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1951:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1952:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1953:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
ARM GAS  /tmp/ccaEDy0V.s 			page 123


1954:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1955:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_GTPR_GT_Pos);
1956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1957:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1958:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1959:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1960:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1961:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1962:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1963:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1964:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1965:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1966:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1967:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1968:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1969:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
1970:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1971:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1972:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1973:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
1974:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1975:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1976:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1977:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
1978:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1979:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1980:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1981:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1982:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1983:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1984:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1985:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1986:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
1987:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
1988:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1989:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
1990:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1991:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
1992:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
1993:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
1994:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1995:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1996:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1997:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1998:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
1999:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2000:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2001:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2002:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2003:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2004:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2005:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2006:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2007:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2008:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2009:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2010:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
ARM GAS  /tmp/ccaEDy0V.s 			page 124


2011:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2012:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2013:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2014:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
2015:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2016:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
2017:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2018:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2019:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2020:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2021:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2022:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2023:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2024:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2025:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2026:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2027:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2028:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2029:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2030:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2031:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2032:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2033:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2034:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2035:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2036:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2037:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2038:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2039:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2040:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2041:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2042:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2043:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2044:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2045:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2046:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2047:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2048:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2049:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2050:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2051:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2052:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2053:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
2054:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2055:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2056:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2057:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2058:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2059:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable LIN mode
2060:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2061:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2062:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2063:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2064:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2065:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2066:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2067:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
ARM GAS  /tmp/ccaEDy0V.s 			page 125


2068:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2069:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2070:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2071:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2072:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable LIN mode
2073:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2074:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2075:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2076:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2077:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2078:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2079:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2080:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2081:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2082:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2083:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2084:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2085:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2086:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2087:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2088:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2089:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2090:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2091:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2092:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
2093:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2094:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
2095:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2096:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2097:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2098:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2099:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccaEDy0V.s 			page 126


2125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
2128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
2155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
2168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
ARM GAS  /tmp/ccaEDy0V.s 			page 127


2182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
2194:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2195:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM));
2196:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2197:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2198:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2199:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2200:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2201:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2202:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2203:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2204:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2205:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2206:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2207:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2208:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2209:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2210:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2211:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2212:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2213:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2214:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2215:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2216:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2217:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2218:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2219:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2220:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2221:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2222:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2223:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2224:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
2225:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2226:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2227:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2228:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2229:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2230:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2231:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2232:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2233:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2234:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2235:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2236:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2237:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2238:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
ARM GAS  /tmp/ccaEDy0V.s 			page 128


2239:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2240:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2241:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2242:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2243:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2244:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2245:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2246:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2247:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2248:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2249:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2250:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2251:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2252:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2253:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2254:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2255:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2256:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2257:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2258:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2259:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2260:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2261:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2262:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2263:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2264:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2265:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2266:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2269:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2270:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2271:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2272:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2273:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2274:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2275:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2276:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2277:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2278:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2279:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
2280:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
2281:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2282:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2283:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2284:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2285:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2286:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2287:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2288:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2289:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2290:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2291:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2292:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2293:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2294:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2295:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccaEDy0V.s 			page 129


2296:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2297:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2298:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2299:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2300:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2301:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2302:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
2303:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2304:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2305:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2306:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2307:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2308:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2309:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2310:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2311:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2312:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2313:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2314:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2315:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2316:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2317:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2318:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2319:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2320:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2321:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2322:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2323:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2324:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2325:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2326:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2327:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2328:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2329:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2330:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2331:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2332:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2333:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2334:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2335:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2336:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2337:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2338:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2339:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2340:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2341:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2342:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2343:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2344:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2345:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2346:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2347:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2348:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2349:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2350:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2351:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2352:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
ARM GAS  /tmp/ccaEDy0V.s 			page 130


2353:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2354:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2355:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2356:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2357:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2358:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2359:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2360:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2361:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2362:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2363:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2364:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2365:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2366:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2367:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2368:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2369:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2370:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2371:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2372:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2373:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2374:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2375:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2376:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2377:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2378:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2379:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2380:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
2381:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2382:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2383:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2384:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2385:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2386:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2387:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2388:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2389:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2390:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2391:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2392:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2393:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2394:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2395:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2396:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2397:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2398:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2399:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2400:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2401:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2402:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2403:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2404:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2405:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2406:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2407:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2408:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2409:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
ARM GAS  /tmp/ccaEDy0V.s 			page 131


2410:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2411:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2412:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2413:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2414:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2415:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2416:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2417:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2418:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2419:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2420:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
2421:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2422:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2423:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2424:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2425:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2426:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2427:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2428:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2429:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2430:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2431:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2432:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2433:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2434:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2435:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2436:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2437:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2438:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2439:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2440:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2441:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2442:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2443:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2444:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2445:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2446:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2447:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
2448:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2449:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2450:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2451:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2452:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2453:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2454:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2455:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2456:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2457:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2458:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2459:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2460:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2461:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2462:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2463:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
2464:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2465:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2466:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
ARM GAS  /tmp/ccaEDy0V.s 			page 132


2467:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2468:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2469:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2470:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2471:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2472:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2473:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2474:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2475:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2476:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2477:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2478:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2479:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2480:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2481:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2482:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2483:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2484:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2485:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2486:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
2487:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2488:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         dedicated functions
2489:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2490:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2491:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2492:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2493:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2494:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2495:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2496:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2497:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2498:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2499:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2500:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2501:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
2502:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2503:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2504:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2505:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2506:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2507:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2508:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2509:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2510:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
2511:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2512:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2513:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2514:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2515:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2516:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2517:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2518:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2519:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2520:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
2521:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2522:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE));
2523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
ARM GAS  /tmp/ccaEDy0V.s 			page 133


2524:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2525:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2526:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2527:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2528:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2529:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2530:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2531:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
2532:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2533:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE));
2534:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2535:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2536:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2537:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2538:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          NF            LL_USART_IsActiveFlag_NE
2539:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2540:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2541:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2542:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
2543:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2544:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE));
2545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2546:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2547:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2548:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2549:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2550:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2551:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2552:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2553:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
2554:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2555:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE));
2556:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2557:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2558:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2559:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
2560:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
2561:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2562:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2563:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2564:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
2565:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2566:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
2567:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2568:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2569:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2570:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
2571:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
2572:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2573:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2574:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2575:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
2576:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2577:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
2578:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2579:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2580:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
ARM GAS  /tmp/ccaEDy0V.s 			page 134


2581:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
2582:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
2583:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2584:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2585:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2586:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
2587:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2588:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
2589:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2590:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2591:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2592:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
2593:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
2594:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2595:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2596:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2597:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
2598:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2599:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
2600:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2601:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2602:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2603:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
2604:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2605:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2606:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
2607:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2608:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2609:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2610:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
2611:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2612:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF));
2613:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2614:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2615:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2616:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
2617:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2618:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2619:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
2620:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2621:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2622:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2623:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
2624:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2625:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF));
2626:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2627:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2628:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2629:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
2630:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2631:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2632:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
2633:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2634:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2635:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2636:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
2637:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
ARM GAS  /tmp/ccaEDy0V.s 			page 135


2638:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS));
2639:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2640:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2641:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2642:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
2643:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
2644:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2645:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2646:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2647:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
2648:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2649:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF));
2650:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2651:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2652:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2653:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
2654:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2655:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2656:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
2657:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2658:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2659:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2660:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
2661:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2662:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF));
2663:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2664:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2665:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2666:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
2667:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
2668:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2669:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
2670:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2671:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2672:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2673:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
2674:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2675:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE));
2676:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2677:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2678:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2679:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
2680:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whethe
2681:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
2682:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
2683:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2684:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2685:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2686:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
2687:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2688:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF));
2689:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2690:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2691:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2692:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
2693:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
2694:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccaEDy0V.s 			page 136


2695:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2696:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2697:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
2698:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2699:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY));
2700:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2701:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2702:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2703:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
2704:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
2705:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2706:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2707:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2708:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
2709:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2710:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF));
2711:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2712:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2713:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2714:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
2715:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
2716:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2717:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2718:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2719:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
2720:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2721:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF));
2722:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2723:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2724:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2725:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
2726:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
2727:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2728:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2729:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2730:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
2731:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2732:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU));
2733:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2734:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2735:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2736:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
2737:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
2738:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
2739:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
2740:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2741:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2742:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2743:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
2744:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2745:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF));
2746:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2747:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2748:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2749:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
2750:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
2751:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccaEDy0V.s 			page 137


2752:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2753:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2754:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
2755:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2756:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK));
2757:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2758:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2759:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2760:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
2761:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
2762:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2763:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2764:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2765:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
2766:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2767:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   return (READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK));
2768:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2769:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2770:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2771:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2772:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
2773:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
2774:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2775:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2776:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2777:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
2778:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2779:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
2780:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2781:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2782:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2783:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
2784:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
2785:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2786:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2787:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2788:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
2789:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2790:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
2791:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2792:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2793:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2794:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
2795:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
2796:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2797:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2798:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2799:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
2800:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2801:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NCF);
2802:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2803:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2804:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2805:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
2806:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
2807:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2808:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccaEDy0V.s 			page 138


2809:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2810:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
2811:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2812:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
2813:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2814:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2815:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2816:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
2817:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
2818:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2819:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2820:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2821:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
2822:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2823:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
2824:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2825:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2826:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2827:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
2828:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
2829:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2830:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2831:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2832:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
2833:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2834:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
2835:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2836:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2837:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2838:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2839:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
2840:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2841:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2842:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
2843:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2844:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2845:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2846:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
2847:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2848:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
2849:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2850:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2851:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2852:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
2853:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2854:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2855:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
2856:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2857:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2858:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2859:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2860:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2861:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
2862:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2863:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2864:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2865:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
ARM GAS  /tmp/ccaEDy0V.s 			page 139


2866:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
2867:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2868:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2869:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2870:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
2871:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2872:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
2873:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2874:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2875:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2876:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear End Of Block Flag
2877:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2878:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2879:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
2880:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2881:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2882:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2883:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
2884:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2885:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
2886:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2887:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2888:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2889:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Character Match Flag
2890:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
2891:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2892:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2893:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2894:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
2895:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2896:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
2897:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2898:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2899:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2900:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
2901:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
2902:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
2903:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
2904:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2905:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2906:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2907:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
2908:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2909:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
2910:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2911:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2912:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2913:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @}
2914:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2915:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2916:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2917:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @{
2918:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2919:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2920:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2921:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2922:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
ARM GAS  /tmp/ccaEDy0V.s 			page 140


2923:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2924:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2925:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2926:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2927:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2928:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2929:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2930:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2931:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2932:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2933:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2934:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2935:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2936:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2937:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2938:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2939:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2940:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2941:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2942:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2943:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2944:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2945:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2946:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2947:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2948:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2949:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2950:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2951:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2952:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2953:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2954:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2955:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2956:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2957:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2958:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2959:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2960:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2961:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2962:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2963:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2964:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2965:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2966:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2967:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2968:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2969:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2970:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2971:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2972:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2973:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2974:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2975:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2976:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
2977:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
2978:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2979:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccaEDy0V.s 			page 141


2980:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2981:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
2982:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2983:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_CMIE);
2984:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2985:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2986:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2987:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
2988:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
2989:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
2990:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
2991:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
2992:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
2993:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
2994:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
2995:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
2996:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
2997:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
2998:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
2999:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3000:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3001:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3002:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3003:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3004:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3005:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3006:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3007:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3008:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3009:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3010:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3011:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3012:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3013:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3014:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3015:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3016:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3017:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3018:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3019:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3020:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3021:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3022:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3023:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3024:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Error Interrupt
3025:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3026:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3027:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           0: Interrupt is inhibited
3028:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3029:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3030:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3031:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3032:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3033:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3034:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3035:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
3036:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
ARM GAS  /tmp/ccaEDy0V.s 			page 142


3037:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3038:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3039:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3040:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3041:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3042:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3043:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3044:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3045:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3046:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
3047:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3048:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3049:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3050:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3051:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3052:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3053:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3054:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3055:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3056:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3057:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3058:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3059:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3060:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3061:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3062:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3063:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3064:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3065:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3066:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3067:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3068:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3069:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3070:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3071:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3072:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3073:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3074:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3075:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3076:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3077:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
3078:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
3079:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3080:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3081:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3082:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
3083:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3084:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
3085:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3086:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3087:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3088:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
3089:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3090:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3091:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3092:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3093:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccaEDy0V.s 			page 143


3094:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3095:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3096:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3097:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3098:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3099:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
3100:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
3101:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3102:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3103:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3104:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
3105:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3106:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
3107:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3108:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3109:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3110:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3111:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3112:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3113:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3114:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3115:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3116:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3117:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3118:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3119:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3120:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3121:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3122:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3123:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3124:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3125:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3126:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3127:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3128:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3129:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3130:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3131:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3132:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3133:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3134:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3135:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3136:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3137:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3138:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3139:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
3140:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3141:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3142:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3143:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
3144:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3145:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3146:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
3147:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3148:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3149:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3150:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccaEDy0V.s 			page 144


3151:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3152:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
3153:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3154:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3155:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3156:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
3157:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3158:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3159:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
3160:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3161:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3162:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3163:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
3164:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3165:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
3166:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3167:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3168:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3169:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable Error Interrupt
3170:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3171:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3172:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           0: Interrupt is inhibited
3173:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3174:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
3175:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3176:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3177:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3178:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
3179:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3180:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
3181:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
3182:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** 
3183:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** /**
3184:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
3185:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3186:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3187:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
3188:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @param  USARTx USART Instance
3189:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   * @retval None
3190:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   */
3191:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
3192:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** {
3193:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 1042              		.loc 5 3193 0
 1043 0316 AB68     		ldr	r3, [r5, #8]
 1044              	.LBE212:
 1045              	.LBE211:
 1046              	.LBE229:
 1047              	.LBE243:
 1048              	.LBB244:
 1049              	.LBB237:
 458:Src/main.c    ****   htim15.Init.Period = 250-1;
 1050              		.loc 1 458 0
 1051 0318 CAF80840 		str	r4, [r10, #8]
 1052              	.LBE237:
 1053              	.LBE244:
 1054              	.LBB245:
ARM GAS  /tmp/ccaEDy0V.s 			page 145


 1055              	.LBB230:
 1056              	.LBB214:
 1057              	.LBB213:
 1058              		.loc 5 3193 0
 1059 031c 23F48063 		bic	r3, r3, #1024
 1060 0320 AB60     		str	r3, [r5, #8]
 1061              	.LVL57:
 1062              	.LBE213:
 1063              	.LBE214:
 1064              	.LBB215:
 1065              	.LBB216:
1523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 1066              		.loc 5 1523 0
 1067 0322 AB68     		ldr	r3, [r5, #8]
 1068              	.LBE216:
 1069              	.LBE215:
 1070              	.LBE230:
 1071              	.LBE245:
 1072              	.LBB246:
 1073              	.LBB238:
 460:Src/main.c    ****   htim15.Init.RepetitionCounter = 0;
 1074              		.loc 1 460 0
 1075 0324 CAF81040 		str	r4, [r10, #16]
 1076              	.LBE238:
 1077              	.LBE246:
 1078              	.LBB247:
 1079              	.LBB231:
 1080              	.LBB218:
 1081              	.LBB217:
1523:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 1082              		.loc 5 1523 0
 1083 0328 43F48053 		orr	r3, r3, #4096
 1084 032c AB60     		str	r3, [r5, #8]
 1085              	.LVL58:
 1086              	.LBE217:
 1087              	.LBE218:
 1088              	.LBB219:
 1089              	.LBB220:
2267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 1090              		.loc 5 2267 0
 1091 032e 6B68     		ldr	r3, [r5, #4]
 1092              	.LBE220:
 1093              	.LBE219:
 1094              	.LBE231:
 1095              	.LBE247:
 1096              	.LBB248:
 1097              	.LBB239:
 461:Src/main.c    ****   htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1098              		.loc 1 461 0
 1099 0330 CAF81440 		str	r4, [r10, #20]
 1100              	.LBE239:
 1101              	.LBE248:
 1102              	.LBB249:
 1103              	.LBB232:
 1104              	.LBB223:
 1105              	.LBB221:
2267:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
ARM GAS  /tmp/ccaEDy0V.s 			page 146


 1106              		.loc 5 2267 0
 1107 0334 23F49043 		bic	r3, r3, #18432
 1108 0338 6B60     		str	r3, [r5, #4]
2268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 1109              		.loc 5 2268 0
 1110 033a AB68     		ldr	r3, [r5, #8]
 1111              	.LBE221:
 1112              	.LBE223:
 1113              	.LBE232:
 1114              	.LBE249:
 1115              	.LBB250:
 1116              	.LBB240:
 462:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 1117              		.loc 1 462 0
 1118 033c CAF81840 		str	r4, [r10, #24]
 1119              	.LBE240:
 1120              	.LBE250:
 1121              	.LBB251:
 1122              	.LBB233:
 1123              	.LBB224:
 1124              	.LBB222:
2268:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 1125              		.loc 5 2268 0
 1126 0340 23F02A03 		bic	r3, r3, #42
 1127 0344 AB60     		str	r3, [r5, #8]
 1128              	.LVL59:
 1129              	.LBE222:
 1130              	.LBE224:
 1131              	.LBB225:
 1132              	.LBB226:
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 1133              		.loc 5 545 0
 1134 0346 2B68     		ldr	r3, [r5]
 1135              	.LBE226:
 1136              	.LBE225:
 1137              	.LBE233:
 1138              	.LBE251:
 1139              	.LBB252:
 1140              	.LBB241:
 456:Src/main.c    ****   htim15.Init.Prescaler = 25-1;
 1141              		.loc 1 456 0
 1142 0348 4A4A     		ldr	r2, .L78+12
 1143              	.LBE241:
 1144              	.LBE252:
 1145              	.LBB253:
 1146              	.LBB234:
 1147              	.LBB228:
 1148              	.LBB227:
 545:Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_usart.h **** }
 1149              		.loc 5 545 0
 1150 034a 43F00103 		orr	r3, r3, #1
 1151 034e 2B60     		str	r3, [r5]
 1152              	.LBE227:
 1153              	.LBE228:
 1154              	.LBE234:
 1155              	.LBE253:
 1156              	.LBB254:
ARM GAS  /tmp/ccaEDy0V.s 			page 147


 1157              	.LBB242:
 457:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1158              		.loc 1 457 0
 1159 0350 1821     		movs	r1, #24
 459:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1160              		.loc 1 459 0
 1161 0352 F923     		movs	r3, #249
 463:Src/main.c    ****   {
 1162              		.loc 1 463 0
 1163 0354 5046     		mov	r0, r10
 456:Src/main.c    ****   htim15.Init.Prescaler = 25-1;
 1164              		.loc 1 456 0
 1165 0356 CAF80020 		str	r2, [r10]
 457:Src/main.c    ****   htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 1166              		.loc 1 457 0
 1167 035a CAF80410 		str	r1, [r10, #4]
 459:Src/main.c    ****   htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1168              		.loc 1 459 0
 1169 035e CAF80C30 		str	r3, [r10, #12]
 463:Src/main.c    ****   {
 1170              		.loc 1 463 0
 1171 0362 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1172              	.LVL60:
 1173 0366 00B1     		cbz	r0, .L52
 1174              	.L72:
 1175 0368 FEE7     		b	.L72
 1176              	.L52:
 468:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1177              		.loc 1 468 0
 1178 036a 4FF48053 		mov	r3, #4096
 469:Src/main.c    ****   {
 1179              		.loc 1 469 0
 1180 036e 5046     		mov	r0, r10
 1181 0370 3146     		mov	r1, r6
 468:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 1182              		.loc 1 468 0
 1183 0372 0D93     		str	r3, [sp, #52]
 469:Src/main.c    ****   {
 1184              		.loc 1 469 0
 1185 0374 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1186              	.LVL61:
 1187 0378 0346     		mov	r3, r0
 1188 037a 00B1     		cbz	r0, .L54
 1189              	.L73:
 1190 037c FEE7     		b	.L73
 1191              	.L54:
 476:Src/main.c    ****   {
 1192              		.loc 1 476 0
 1193 037e 5046     		mov	r0, r10
 1194 0380 3946     		mov	r1, r7
 474:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1195              		.loc 1 474 0
 1196 0382 0793     		str	r3, [sp, #28]
 475:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 1197              		.loc 1 475 0
 1198 0384 0993     		str	r3, [sp, #36]
 476:Src/main.c    ****   {
ARM GAS  /tmp/ccaEDy0V.s 			page 148


 1199              		.loc 1 476 0
 1200 0386 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1201              	.LVL62:
 1202 038a 0446     		mov	r4, r0
 1203 038c 00B1     		cbz	r0, .L56
 1204              	.L74:
 1205 038e FEE7     		b	.L74
 1206              	.L56:
 1207              	.LBE242:
 1208              	.LBE254:
 168:Src/main.c    ****   pid_z.Ki=0;
 1209              		.loc 1 168 0
 1210 0390 394B     		ldr	r3, .L78+16
 160:Src/main.c    ****   interface.send = AX_Send_HAL;
 1211              		.loc 1 160 0
 1212 0392 3A4A     		ldr	r2, .L78+20
 168:Src/main.c    ****   pid_z.Ki=0;
 1213              		.loc 1 168 0
 1214 0394 3A48     		ldr	r0, .L78+24
 161:Src/main.c    ****   interface.set_direction = AX_Set_Direction_HAL;
 1215              		.loc 1 161 0
 1216 0396 DFF8F8C0 		ldr	ip, .L78+40
 162:Src/main.c    ****   interface.delay = AX_Delay_HAL;
 1217              		.loc 1 162 0
 1218 039a DFF8F8E0 		ldr	lr, .L78+44
 168:Src/main.c    ****   pid_z.Ki=0;
 1219              		.loc 1 168 0
 1220 039e 1860     		str	r0, [r3]	@ float
 169:Src/main.c    ****   pid_z.Kd=0;
 1221              		.loc 1 169 0
 1222 03a0 0021     		movs	r1, #0
 172:Src/main.c    **** 
 1223              		.loc 1 172 0
 1224 03a2 1846     		mov	r0, r3
 171:Src/main.c    ****   pid_init(&pid_z);
 1225              		.loc 1 171 0
 1226 03a4 DFF8F0A0 		ldr	r10, .L78+48
 160:Src/main.c    ****   interface.send = AX_Send_HAL;
 1227              		.loc 1 160 0
 1228 03a8 DFF8F090 		ldr	r9, .L78+52
 163:Src/main.c    **** 
 1229              		.loc 1 163 0
 1230 03ac 354D     		ldr	r5, .L78+28
 161:Src/main.c    ****   interface.set_direction = AX_Set_Direction_HAL;
 1231              		.loc 1 161 0
 1232 03ae C2F800C0 		str	ip, [r2]
 162:Src/main.c    ****   interface.delay = AX_Delay_HAL;
 1233              		.loc 1 162 0
 1234 03b2 C2F808E0 		str	lr, [r2, #8]
 169:Src/main.c    ****   pid_z.Kd=0;
 1235              		.loc 1 169 0
 1236 03b6 5960     		str	r1, [r3, #4]	@ float
 170:Src/main.c    ****   pid_z.Te=0.01;
 1237              		.loc 1 170 0
 1238 03b8 9960     		str	r1, [r3, #8]	@ float
 171:Src/main.c    ****   pid_init(&pid_z);
 1239              		.loc 1 171 0
ARM GAS  /tmp/ccaEDy0V.s 			page 149


 1240 03ba C3F814A0 		str	r10, [r3, #20]	@ float
 160:Src/main.c    ****   interface.send = AX_Send_HAL;
 1241              		.loc 1 160 0
 1242 03be C2F80490 		str	r9, [r2, #4]
 163:Src/main.c    **** 
 1243              		.loc 1 163 0
 1244 03c2 D560     		str	r5, [r2, #12]
 1245              	.LVL63:
 172:Src/main.c    **** 
 1246              		.loc 1 172 0
 1247 03c4 FFF7FEFF 		bl	pid_init
 1248              	.LVL64:
 178:Src/main.c    ****   AX servo_g = {.id = 2, .interface = &interface};
 1249              		.loc 1 178 0
 1250 03c8 2F4B     		ldr	r3, .L78+32
 1251 03ca 93E80300 		ldmia	r3, {r0, r1}
 179:Src/main.c    ****   AX servo_d = {.id = 3, .interface = &interface};
 1252              		.loc 1 179 0
 1253 03ce 03F10802 		add	r2, r3, #8
 178:Src/main.c    ****   AX servo_g = {.id = 2, .interface = &interface};
 1254              		.loc 1 178 0
 1255 03d2 88E80300 		stmia	r8, {r0, r1}
 179:Src/main.c    ****   AX servo_d = {.id = 3, .interface = &interface};
 1256              		.loc 1 179 0
 1257 03d6 92E80300 		ldmia	r2, {r0, r1}
 180:Src/main.c    ****   //AX_Say_Hello(&servo);
 1258              		.loc 1 180 0
 1259 03da 1033     		adds	r3, r3, #16
 179:Src/main.c    ****   AX servo_d = {.id = 3, .interface = &interface};
 1260              		.loc 1 179 0
 1261 03dc 87E80300 		stmia	r7, {r0, r1}
 180:Src/main.c    ****   //AX_Say_Hello(&servo);
 1262              		.loc 1 180 0
 1263 03e0 93E80300 		ldmia	r3, {r0, r1}
 188:Src/main.c    ****   AX_Configure_Angle_Limit(&servo_g, 411, 511);
 1264              		.loc 1 188 0
 1265 03e4 4FF4E172 		mov	r2, #450
 180:Src/main.c    ****   //AX_Say_Hello(&servo);
 1266              		.loc 1 180 0
 1267 03e8 86E80300 		stmia	r6, {r0, r1}
 188:Src/main.c    ****   AX_Configure_Angle_Limit(&servo_g, 411, 511);
 1268              		.loc 1 188 0
 1269 03ec 2146     		mov	r1, r4
 1270 03ee 4046     		mov	r0, r8
 1271 03f0 FFF7FEFF 		bl	AX_Configure_Angle_Limit
 1272              	.LVL65:
 189:Src/main.c    ****   AX_Configure_Angle_Limit(&servo_d, 511, 611);
 1273              		.loc 1 189 0
 1274 03f4 40F29B11 		movw	r1, #411
 1275 03f8 40F2FF12 		movw	r2, #511
 1276 03fc 3846     		mov	r0, r7
 1277 03fe FFF7FEFF 		bl	AX_Configure_Angle_Limit
 1278              	.LVL66:
 190:Src/main.c    ****   while(1)
 1279              		.loc 1 190 0
 1280 0402 3046     		mov	r0, r6
 1281 0404 40F2FF11 		movw	r1, #511
ARM GAS  /tmp/ccaEDy0V.s 			page 150


 1282 0408 40F26322 		movw	r2, #611
 1283 040c FFF7FEFF 		bl	AX_Configure_Angle_Limit
 1284              	.LVL67:
 1285              	.L58:
 193:Src/main.c    ****     AX_Set_Goal_Position(&servo_g, 411, AX_NOW);
 1286              		.loc 1 193 0 discriminator 1
 1287 0410 4046     		mov	r0, r8
 1288 0412 0021     		movs	r1, #0
 1289 0414 0122     		movs	r2, #1
 1290 0416 FFF7FEFF 		bl	AX_Set_Goal_Position
 1291              	.LVL68:
 194:Src/main.c    ****     AX_Set_Goal_Position(&servo_d, 611, AX_NOW);
 1292              		.loc 1 194 0 discriminator 1
 1293 041a 3846     		mov	r0, r7
 1294 041c 40F29B11 		movw	r1, #411
 1295 0420 0122     		movs	r2, #1
 1296 0422 FFF7FEFF 		bl	AX_Set_Goal_Position
 1297              	.LVL69:
 195:Src/main.c    ****     HAL_Delay(2000);
 1298              		.loc 1 195 0 discriminator 1
 1299 0426 40F26321 		movw	r1, #611
 1300 042a 0122     		movs	r2, #1
 1301 042c 3046     		mov	r0, r6
 1302 042e FFF7FEFF 		bl	AX_Set_Goal_Position
 1303              	.LVL70:
 196:Src/main.c    ****     AX_Set_Goal_Position(&servo_ar, 400, AX_NOW);
 1304              		.loc 1 196 0 discriminator 1
 1305 0432 4FF4FA60 		mov	r0, #2000
 1306 0436 FFF7FEFF 		bl	HAL_Delay
 1307              	.LVL71:
 197:Src/main.c    ****     AX_Set_Goal_Position(&servo_g, 511, AX_NOW);
 1308              		.loc 1 197 0 discriminator 1
 1309 043a 4046     		mov	r0, r8
 1310 043c 4FF4C871 		mov	r1, #400
 1311 0440 0122     		movs	r2, #1
 1312 0442 FFF7FEFF 		bl	AX_Set_Goal_Position
 1313              	.LVL72:
 198:Src/main.c    ****     AX_Set_Goal_Position(&servo_d, 511, AX_NOW);
 1314              		.loc 1 198 0 discriminator 1
 1315 0446 3846     		mov	r0, r7
 1316 0448 40F2FF11 		movw	r1, #511
 1317 044c 0122     		movs	r2, #1
 1318 044e FFF7FEFF 		bl	AX_Set_Goal_Position
 1319              	.LVL73:
 199:Src/main.c    ****     HAL_Delay(2000);
 1320              		.loc 1 199 0 discriminator 1
 1321 0452 3046     		mov	r0, r6
 1322 0454 40F2FF11 		movw	r1, #511
 1323 0458 0122     		movs	r2, #1
 1324 045a FFF7FEFF 		bl	AX_Set_Goal_Position
 1325              	.LVL74:
 200:Src/main.c    ****   }
 1326              		.loc 1 200 0 discriminator 1
 1327 045e 4FF4FA60 		mov	r0, #2000
 1328 0462 FFF7FEFF 		bl	HAL_Delay
 1329              	.LVL75:
 201:Src/main.c    **** 
ARM GAS  /tmp/ccaEDy0V.s 			page 151


 1330              		.loc 1 201 0 discriminator 1
 1331 0466 D3E7     		b	.L58
 1332              	.L79:
 1333              		.align	2
 1334              	.L78:
 1335 0468 00100240 		.word	1073876992
 1336 046c 00440040 		.word	1073759232
 1337 0470 6C000240 		.word	1073873004
 1338 0474 00400140 		.word	1073823744
 1339 0478 00000000 		.word	pid_z
 1340 047c 00000000 		.word	interface
 1341 0480 6F12833A 		.word	981668463
 1342 0484 00000000 		.word	AX_Delay_HAL
 1343 0488 00000000 		.word	.LANCHOR0
 1344 048c 00000000 		.word	htim15
 1345 0490 00000000 		.word	AX_Send_HAL
 1346 0494 00000000 		.word	AX_Set_Direction_HAL
 1347 0498 0AD7233C 		.word	1008981770
 1348 049c 00000000 		.word	AX_Receive_HAL
 1349              		.cfi_endproc
 1350              	.LFE696:
 1352              		.section	.text._Error_Handler,"ax",%progbits
 1353              		.align	2
 1354              		.global	_Error_Handler
 1355              		.thumb
 1356              		.thumb_func
 1358              	_Error_Handler:
 1359              	.LFB707:
 628:Src/main.c    **** 
 629:Src/main.c    **** }
 630:Src/main.c    **** 
 631:Src/main.c    **** /* USER CODE BEGIN 4 */
 632:Src/main.c    **** 
 633:Src/main.c    **** /* USER CODE END 4 */
 634:Src/main.c    **** 
 635:Src/main.c    **** /**
 636:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 637:Src/main.c    ****   * @param  file: The file name as string.
 638:Src/main.c    ****   * @param  line: The line in file as a number.
 639:Src/main.c    ****   * @retval None
 640:Src/main.c    ****   */
 641:Src/main.c    **** void _Error_Handler(char *file, int line)
 642:Src/main.c    **** {
 1360              		.loc 1 642 0
 1361              		.cfi_startproc
 1362              		@ Volatile: function does not return.
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366              	.LVL76:
 1367              	.L81:
 643:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 644:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 645:Src/main.c    ****   while(1)
 646:Src/main.c    ****   {
 647:Src/main.c    ****   }
 1368              		.loc 1 647 0 discriminator 1
ARM GAS  /tmp/ccaEDy0V.s 			page 152


 1369 0000 FEE7     		b	.L81
 1370              		.cfi_endproc
 1371              	.LFE707:
 1373              		.comm	interface,104,4
 1374              		.comm	buffer,1,1
 1375              		.global	level
 1376              		.comm	iface_rpi,1048,4
 1377              		.comm	encoder,16,4
 1378              		.comm	pid_z,24,4
 1379              		.comm	huart1,112,4
 1380              		.comm	htim15,64,4
 1381              		.comm	htim3,64,4
 1382              		.comm	htim2,64,4
 1383              		.comm	hi2c1,76,4
 1384              		.comm	hadc2,84,4
 1385 0002 00BF     		.section	.rodata
 1386              		.align	2
 1387              		.set	.LANCHOR0,. + 0
 1388              	.LC0:
 1389 0000 01       		.byte	1
 1390 0001 000000   		.space	3
 1391 0004 00000000 		.word	interface
 1392              	.LC1:
 1393 0008 02       		.byte	2
 1394 0009 000000   		.space	3
 1395 000c 00000000 		.word	interface
 1396              	.LC2:
 1397 0010 03       		.byte	3
 1398 0011 000000   		.space	3
 1399 0014 00000000 		.word	interface
 1400              		.section	.bss.level,"aw",%nobits
 1403              	level:
 1404 0000 00       		.space	1
 1405              		.text
 1406              	.Letext0:
 1407              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 1408              		.file 7 "/usr/include/newlib/machine/_default_types.h"
 1409              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 1410              		.file 9 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 1411              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1412              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1413              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1414              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1415              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1416              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 1417              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 1418              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 1419              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1420              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1421              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1422              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_gpio.h"
 1423              		.file 22 "Inc/Robotronik_corp_pid.h"
 1424              		.file 23 "Inc/ax_12a.h"
 1425              		.file 24 "Inc/encoder.h"
 1426              		.file 25 "Inc/robotronik_protocol.h"
 1427              		.file 26 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1428              		.file 27 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
ARM GAS  /tmp/ccaEDy0V.s 			page 153


 1429              		.file 28 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
ARM GAS  /tmp/ccaEDy0V.s 			page 154


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccaEDy0V.s:21     .text.AX_Receive_HAL:0000000000000000 $t
     /tmp/ccaEDy0V.s:26     .text.AX_Receive_HAL:0000000000000000 AX_Receive_HAL
     /tmp/ccaEDy0V.s:60     .text.AX_Receive_HAL:0000000000000018 $d
                            *COM*:0000000000000070 huart1
     /tmp/ccaEDy0V.s:65     .text.AX_Send_HAL:0000000000000000 $t
     /tmp/ccaEDy0V.s:70     .text.AX_Send_HAL:0000000000000000 AX_Send_HAL
     /tmp/ccaEDy0V.s:103    .text.AX_Send_HAL:0000000000000018 $d
     /tmp/ccaEDy0V.s:108    .text.AX_Set_Direction_HAL:0000000000000000 $t
     /tmp/ccaEDy0V.s:113    .text.AX_Set_Direction_HAL:0000000000000000 AX_Set_Direction_HAL
     /tmp/ccaEDy0V.s:133    .text.AX_Delay_HAL:0000000000000000 $t
     /tmp/ccaEDy0V.s:138    .text.AX_Delay_HAL:0000000000000000 AX_Delay_HAL
     /tmp/ccaEDy0V.s:153    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccaEDy0V.s:158    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccaEDy0V.s:280    .text.SystemClock_Config:0000000000000088 $d
     /tmp/ccaEDy0V.s:285    .text.startup.main:0000000000000000 $t
     /tmp/ccaEDy0V.s:290    .text.startup.main:0000000000000000 main
     /tmp/ccaEDy0V.s:862    .text.startup.main:0000000000000244 $d
                            *COM*:0000000000000054 hadc2
                            *COM*:000000000000004c hi2c1
                            *COM*:0000000000000040 htim2
                            *COM*:0000000000000040 htim3
     /tmp/ccaEDy0V.s:887    .text.startup.main:0000000000000280 $t
     /tmp/ccaEDy0V.s:1335   .text.startup.main:0000000000000468 $d
                            *COM*:0000000000000018 pid_z
                            *COM*:0000000000000068 interface
                            *COM*:0000000000000040 htim15
     /tmp/ccaEDy0V.s:1353   .text._Error_Handler:0000000000000000 $t
     /tmp/ccaEDy0V.s:1358   .text._Error_Handler:0000000000000000 _Error_Handler
                            *COM*:0000000000000001 buffer
     /tmp/ccaEDy0V.s:1403   .bss.level:0000000000000000 level
                            *COM*:0000000000000418 iface_rpi
                            *COM*:0000000000000010 encoder
     /tmp/ccaEDy0V.s:1386   .rodata:0000000000000000 $d
     /tmp/ccaEDy0V.s:1404   .bss.level:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_UART_Receive
HAL_UART_Transmit
HAL_GPIO_WritePin
HAL_Delay
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
ARM GAS  /tmp/ccaEDy0V.s 			page 155


HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_UART_Init
LL_GPIO_Init
LL_USART_Init
pid_init
AX_Configure_Angle_Limit
AX_Set_Goal_Position
