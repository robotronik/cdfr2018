ARM GAS  /tmp/cckgOlyU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f3xx_it.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	2
  22              		.global	NMI_Handler
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB692:
  28              		.file 1 "Src/stm32f3xx_it.c"
   1:Src/stm32f3xx_it.c **** /**
   2:Src/stm32f3xx_it.c ****   ******************************************************************************
   3:Src/stm32f3xx_it.c ****   * @file    stm32f3xx_it.c
   4:Src/stm32f3xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f3xx_it.c ****   ******************************************************************************
   6:Src/stm32f3xx_it.c ****   *
   7:Src/stm32f3xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f3xx_it.c ****   *
   9:Src/stm32f3xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f3xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f3xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f3xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f3xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f3xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f3xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f3xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f3xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f3xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f3xx_it.c ****   *
  20:Src/stm32f3xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f3xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f3xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f3xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f3xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f3xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f3xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f3xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f3xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f3xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f3xx_it.c ****   *
ARM GAS  /tmp/cckgOlyU.s 			page 2


  31:Src/stm32f3xx_it.c ****   ******************************************************************************
  32:Src/stm32f3xx_it.c ****   */
  33:Src/stm32f3xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f3xx_it.c **** #include "stm32f3xx_hal.h"
  35:Src/stm32f3xx_it.c **** #include "stm32f3xx.h"
  36:Src/stm32f3xx_it.c **** #include "stm32f3xx_it.h"
  37:Src/stm32f3xx_it.c **** 
  38:Src/stm32f3xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f3xx_it.c **** #include "encoder.h"
  40:Src/stm32f3xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32f3xx_it.c **** 
  42:Src/stm32f3xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32f3xx_it.c **** extern TIM_HandleTypeDef htim15;
  44:Src/stm32f3xx_it.c **** 
  45:Src/stm32f3xx_it.c **** /******************************************************************************/
  46:Src/stm32f3xx_it.c **** /*            Cortex-M4 Processor Interruption and Exception Handlers         */ 
  47:Src/stm32f3xx_it.c **** /******************************************************************************/
  48:Src/stm32f3xx_it.c **** 
  49:Src/stm32f3xx_it.c **** /**
  50:Src/stm32f3xx_it.c **** * @brief This function handles Non maskable interrupt.
  51:Src/stm32f3xx_it.c **** */
  52:Src/stm32f3xx_it.c **** void NMI_Handler(void)
  53:Src/stm32f3xx_it.c **** {
  29              		.loc 1 53 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE692:
  38 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	2
  40              		.global	HardFault_Handler
  41              		.thumb
  42              		.thumb_func
  44              	HardFault_Handler:
  45              	.LFB693:
  54:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  55:Src/stm32f3xx_it.c **** 
  56:Src/stm32f3xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  57:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  58:Src/stm32f3xx_it.c **** 
  59:Src/stm32f3xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  60:Src/stm32f3xx_it.c **** }
  61:Src/stm32f3xx_it.c **** 
  62:Src/stm32f3xx_it.c **** /**
  63:Src/stm32f3xx_it.c **** * @brief This function handles Hard fault interrupt.
  64:Src/stm32f3xx_it.c **** */
  65:Src/stm32f3xx_it.c **** void HardFault_Handler(void)
  66:Src/stm32f3xx_it.c **** {
  46              		.loc 1 66 0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
ARM GAS  /tmp/cckgOlyU.s 			page 3


  52              	.L3:
  67:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  68:Src/stm32f3xx_it.c **** 
  69:Src/stm32f3xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  70:Src/stm32f3xx_it.c ****   while (1)
  71:Src/stm32f3xx_it.c ****   {
  72:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  73:Src/stm32f3xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  74:Src/stm32f3xx_it.c ****   }
  53              		.loc 1 74 0 discriminator 1
  54 0000 FEE7     		b	.L3
  55              		.cfi_endproc
  56              	.LFE693:
  58 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  59              		.align	2
  60              		.global	MemManage_Handler
  61              		.thumb
  62              		.thumb_func
  64              	MemManage_Handler:
  65              	.LFB694:
  75:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  76:Src/stm32f3xx_it.c **** 
  77:Src/stm32f3xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  78:Src/stm32f3xx_it.c **** }
  79:Src/stm32f3xx_it.c **** 
  80:Src/stm32f3xx_it.c **** /**
  81:Src/stm32f3xx_it.c **** * @brief This function handles Memory management fault.
  82:Src/stm32f3xx_it.c **** */
  83:Src/stm32f3xx_it.c **** void MemManage_Handler(void)
  84:Src/stm32f3xx_it.c **** {
  66              		.loc 1 84 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.L5:
  85:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  86:Src/stm32f3xx_it.c **** 
  87:Src/stm32f3xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  88:Src/stm32f3xx_it.c ****   while (1)
  89:Src/stm32f3xx_it.c ****   {
  90:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  91:Src/stm32f3xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  92:Src/stm32f3xx_it.c ****   }
  73              		.loc 1 92 0 discriminator 1
  74 0000 FEE7     		b	.L5
  75              		.cfi_endproc
  76              	.LFE694:
  78 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	2
  80              		.global	BusFault_Handler
  81              		.thumb
  82              		.thumb_func
  84              	BusFault_Handler:
  85              	.LFB695:
  93:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
ARM GAS  /tmp/cckgOlyU.s 			page 4


  94:Src/stm32f3xx_it.c **** 
  95:Src/stm32f3xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  96:Src/stm32f3xx_it.c **** }
  97:Src/stm32f3xx_it.c **** 
  98:Src/stm32f3xx_it.c **** /**
  99:Src/stm32f3xx_it.c **** * @brief This function handles Pre-fetch fault, memory access fault.
 100:Src/stm32f3xx_it.c **** */
 101:Src/stm32f3xx_it.c **** void BusFault_Handler(void)
 102:Src/stm32f3xx_it.c **** {
  86              		.loc 1 102 0
  87              		.cfi_startproc
  88              		@ Volatile: function does not return.
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.L7:
 103:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 104:Src/stm32f3xx_it.c **** 
 105:Src/stm32f3xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 106:Src/stm32f3xx_it.c ****   while (1)
 107:Src/stm32f3xx_it.c ****   {
 108:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 109:Src/stm32f3xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 110:Src/stm32f3xx_it.c ****   }
  93              		.loc 1 110 0 discriminator 1
  94 0000 FEE7     		b	.L7
  95              		.cfi_endproc
  96              	.LFE695:
  98 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  99              		.align	2
 100              		.global	UsageFault_Handler
 101              		.thumb
 102              		.thumb_func
 104              	UsageFault_Handler:
 105              	.LFB696:
 111:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 112:Src/stm32f3xx_it.c **** 
 113:Src/stm32f3xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 114:Src/stm32f3xx_it.c **** }
 115:Src/stm32f3xx_it.c **** 
 116:Src/stm32f3xx_it.c **** /**
 117:Src/stm32f3xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 118:Src/stm32f3xx_it.c **** */
 119:Src/stm32f3xx_it.c **** void UsageFault_Handler(void)
 120:Src/stm32f3xx_it.c **** {
 106              		.loc 1 120 0
 107              		.cfi_startproc
 108              		@ Volatile: function does not return.
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              	.L9:
 121:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 122:Src/stm32f3xx_it.c **** 
 123:Src/stm32f3xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 124:Src/stm32f3xx_it.c ****   while (1)
 125:Src/stm32f3xx_it.c ****   {
ARM GAS  /tmp/cckgOlyU.s 			page 5


 126:Src/stm32f3xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 127:Src/stm32f3xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 128:Src/stm32f3xx_it.c ****   }
 113              		.loc 1 128 0 discriminator 1
 114 0000 FEE7     		b	.L9
 115              		.cfi_endproc
 116              	.LFE696:
 118 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 119              		.align	2
 120              		.global	SVC_Handler
 121              		.thumb
 122              		.thumb_func
 124              	SVC_Handler:
 125              	.LFB697:
 129:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 130:Src/stm32f3xx_it.c **** 
 131:Src/stm32f3xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 132:Src/stm32f3xx_it.c **** }
 133:Src/stm32f3xx_it.c **** 
 134:Src/stm32f3xx_it.c **** /**
 135:Src/stm32f3xx_it.c **** * @brief This function handles System service call via SWI instruction.
 136:Src/stm32f3xx_it.c **** */
 137:Src/stm32f3xx_it.c **** void SVC_Handler(void)
 138:Src/stm32f3xx_it.c **** {
 126              		.loc 1 138 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE697:
 135 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 136              		.align	2
 137              		.global	DebugMon_Handler
 138              		.thumb
 139              		.thumb_func
 141              	DebugMon_Handler:
 142              	.LFB698:
 139:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 140:Src/stm32f3xx_it.c **** 
 141:Src/stm32f3xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 142:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 143:Src/stm32f3xx_it.c **** 
 144:Src/stm32f3xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 145:Src/stm32f3xx_it.c **** }
 146:Src/stm32f3xx_it.c **** 
 147:Src/stm32f3xx_it.c **** /**
 148:Src/stm32f3xx_it.c **** * @brief This function handles Debug monitor.
 149:Src/stm32f3xx_it.c **** */
 150:Src/stm32f3xx_it.c **** void DebugMon_Handler(void)
 151:Src/stm32f3xx_it.c **** {
 143              		.loc 1 151 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
ARM GAS  /tmp/cckgOlyU.s 			page 6


 148 0000 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE698:
 152 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 153              		.align	2
 154              		.global	PendSV_Handler
 155              		.thumb
 156              		.thumb_func
 158              	PendSV_Handler:
 159              	.LFB699:
 152:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 153:Src/stm32f3xx_it.c **** 
 154:Src/stm32f3xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 155:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 156:Src/stm32f3xx_it.c **** 
 157:Src/stm32f3xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 158:Src/stm32f3xx_it.c **** }
 159:Src/stm32f3xx_it.c **** 
 160:Src/stm32f3xx_it.c **** /**
 161:Src/stm32f3xx_it.c **** * @brief This function handles Pendable request for system service.
 162:Src/stm32f3xx_it.c **** */
 163:Src/stm32f3xx_it.c **** void PendSV_Handler(void)
 164:Src/stm32f3xx_it.c **** {
 160              		.loc 1 164 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165 0000 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE699:
 169 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 170              		.align	2
 171              		.global	SysTick_Handler
 172              		.thumb
 173              		.thumb_func
 175              	SysTick_Handler:
 176              	.LFB700:
 165:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 166:Src/stm32f3xx_it.c **** 
 167:Src/stm32f3xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 168:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 169:Src/stm32f3xx_it.c **** 
 170:Src/stm32f3xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 171:Src/stm32f3xx_it.c **** }
 172:Src/stm32f3xx_it.c **** 
 173:Src/stm32f3xx_it.c **** /**
 174:Src/stm32f3xx_it.c **** * @brief This function handles System tick timer.
 175:Src/stm32f3xx_it.c **** */
 176:Src/stm32f3xx_it.c **** void SysTick_Handler(void)
 177:Src/stm32f3xx_it.c **** {
 177              		.loc 1 177 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		.loc 1 177 0
 182 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cckgOlyU.s 			page 7


 183              	.LCFI0:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 3, -8
 186              		.cfi_offset 14, -4
 178:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 179:Src/stm32f3xx_it.c **** 
 180:Src/stm32f3xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 181:Src/stm32f3xx_it.c ****   HAL_IncTick();
 187              		.loc 1 181 0
 188 0002 FFF7FEFF 		bl	HAL_IncTick
 189              	.LVL0:
 182:Src/stm32f3xx_it.c ****   HAL_SYSTICK_IRQHandler();
 183:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 184:Src/stm32f3xx_it.c **** 
 185:Src/stm32f3xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 186:Src/stm32f3xx_it.c **** }
 190              		.loc 1 186 0
 191 0006 BDE80840 		pop	{r3, lr}
 192              	.LCFI1:
 193              		.cfi_restore 14
 194              		.cfi_restore 3
 195              		.cfi_def_cfa_offset 0
 182:Src/stm32f3xx_it.c ****   HAL_SYSTICK_IRQHandler();
 196              		.loc 1 182 0
 197 000a FFF7FEBF 		b	HAL_SYSTICK_IRQHandler
 198              	.LVL1:
 199              		.cfi_endproc
 200              	.LFE700:
 202 000e 00BF     		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 203              		.align	2
 204              		.global	DMA1_Channel6_IRQHandler
 205              		.thumb
 206              		.thumb_func
 208              	DMA1_Channel6_IRQHandler:
 209              	.LFB701:
 187:Src/stm32f3xx_it.c **** 
 188:Src/stm32f3xx_it.c **** /******************************************************************************/
 189:Src/stm32f3xx_it.c **** /* STM32F3xx Peripheral Interrupt Handlers                                    */
 190:Src/stm32f3xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 191:Src/stm32f3xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 192:Src/stm32f3xx_it.c **** /* please refer to the startup file (startup_stm32f3xx.s).                    */
 193:Src/stm32f3xx_it.c **** /******************************************************************************/
 194:Src/stm32f3xx_it.c **** 
 195:Src/stm32f3xx_it.c **** /**
 196:Src/stm32f3xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
 197:Src/stm32f3xx_it.c **** */
 198:Src/stm32f3xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 199:Src/stm32f3xx_it.c **** {
 210              		.loc 1 199 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215 0000 7047     		bx	lr
 216              		.cfi_endproc
 217              	.LFE701:
 219 0002 00BF     		.section	.text.TIM1_BRK_TIM15_IRQHandler,"ax",%progbits
ARM GAS  /tmp/cckgOlyU.s 			page 8


 220              		.align	2
 221              		.global	TIM1_BRK_TIM15_IRQHandler
 222              		.thumb
 223              		.thumb_func
 225              	TIM1_BRK_TIM15_IRQHandler:
 226              	.LFB702:
 200:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 201:Src/stm32f3xx_it.c **** 
 202:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 203:Src/stm32f3xx_it.c ****   
 204:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 205:Src/stm32f3xx_it.c **** 
 206:Src/stm32f3xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 207:Src/stm32f3xx_it.c **** }
 208:Src/stm32f3xx_it.c **** 
 209:Src/stm32f3xx_it.c **** /**
 210:Src/stm32f3xx_it.c **** * @brief This function handles TIM1 break and TIM15 interrupts.
 211:Src/stm32f3xx_it.c **** */
 212:Src/stm32f3xx_it.c **** void TIM1_BRK_TIM15_IRQHandler(void)
 213:Src/stm32f3xx_it.c **** {
 227              		.loc 1 213 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 214:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
 215:Src/stm32f3xx_it.c **** 
 216:Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
 217:Src/stm32f3xx_it.c ****   HAL_TIM_IRQHandler(&htim15);
 232              		.loc 1 217 0
 233 0000 0148     		ldr	r0, .L17
 234 0002 FFF7FEBF 		b	HAL_TIM_IRQHandler
 235              	.LVL2:
 236              	.L18:
 237 0006 00BF     		.align	2
 238              	.L17:
 239 0008 00000000 		.word	htim15
 240              		.cfi_endproc
 241              	.LFE702:
 243              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 244              		.align	2
 245              		.global	HAL_TIM_PeriodElapsedCallback
 246              		.thumb
 247              		.thumb_func
 249              	HAL_TIM_PeriodElapsedCallback:
 250              	.LFB703:
 218:Src/stm32f3xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
 219:Src/stm32f3xx_it.c **** 
 220:Src/stm32f3xx_it.c ****   /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
 221:Src/stm32f3xx_it.c **** }
 222:Src/stm32f3xx_it.c **** 
 223:Src/stm32f3xx_it.c **** /* USER CODE BEGIN 1 */
 224:Src/stm32f3xx_it.c **** extern Encoder encoder;
 225:Src/stm32f3xx_it.c **** 
 226:Src/stm32f3xx_it.c **** void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
 227:Src/stm32f3xx_it.c **** {
 251              		.loc 1 227 0
ARM GAS  /tmp/cckgOlyU.s 			page 9


 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256              	.LVL3:
 228:Src/stm32f3xx_it.c ****   if(htim->Instance == htim15.Instance){
 257              		.loc 1 228 0
 258 0000 044B     		ldr	r3, .L23
 259 0002 0268     		ldr	r2, [r0]
 260 0004 1B68     		ldr	r3, [r3]
 261 0006 9A42     		cmp	r2, r3
 262 0008 00D0     		beq	.L22
 263 000a 7047     		bx	lr
 264              	.L22:
 229:Src/stm32f3xx_it.c ****     update_encoder(&encoder);
 265              		.loc 1 229 0
 266 000c 0248     		ldr	r0, .L23+4
 267              	.LVL4:
 268 000e FFF7FEBF 		b	update_encoder
 269              	.LVL5:
 270              	.L24:
 271 0012 00BF     		.align	2
 272              	.L23:
 273 0014 00000000 		.word	htim15
 274 0018 00000000 		.word	encoder
 275              		.cfi_endproc
 276              	.LFE703:
 278              		.text
 279              	.Letext0:
 280              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 281              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 282              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 283              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 284              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 285              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 286              		.file 8 "Inc/encoder.h"
 287              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 288              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 289              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 290              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_ll_dma.h"
ARM GAS  /tmp/cckgOlyU.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_it.c
     /tmp/cckgOlyU.s:21     .text.NMI_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/cckgOlyU.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cckgOlyU.s:59     .text.MemManage_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:64     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/cckgOlyU.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:84     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/cckgOlyU.s:99     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:104    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/cckgOlyU.s:119    .text.SVC_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:124    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/cckgOlyU.s:136    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:141    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/cckgOlyU.s:153    .text.PendSV_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:158    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/cckgOlyU.s:170    .text.SysTick_Handler:0000000000000000 $t
     /tmp/cckgOlyU.s:175    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/cckgOlyU.s:203    .text.DMA1_Channel6_IRQHandler:0000000000000000 $t
     /tmp/cckgOlyU.s:208    .text.DMA1_Channel6_IRQHandler:0000000000000000 DMA1_Channel6_IRQHandler
     /tmp/cckgOlyU.s:220    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 $t
     /tmp/cckgOlyU.s:225    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000000 TIM1_BRK_TIM15_IRQHandler
     /tmp/cckgOlyU.s:239    .text.TIM1_BRK_TIM15_IRQHandler:0000000000000008 $d
     /tmp/cckgOlyU.s:244    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cckgOlyU.s:249    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cckgOlyU.s:273    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_TIM_IRQHandler
htim15
update_encoder
encoder
