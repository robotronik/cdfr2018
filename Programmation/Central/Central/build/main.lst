ARM GAS  /tmp/cc58ZD3F.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HardFault_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	HardFault_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HardFault_Handler:
  26              	.LFB681:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file           : main.c
   4:Src/main.c    ****   * @brief          : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/cc58ZD3F.s 			page 2


  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f4xx_hal.h"
  41:Src/main.c    **** #include "dma.h"
  42:Src/main.c    **** #include "i2c.h"
  43:Src/main.c    **** #include "tim.h"
  44:Src/main.c    **** #include "usart.h"
  45:Src/main.c    **** #include "gpio.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN Includes */
  48:Src/main.c    **** #include "system.h"
  49:Src/main.c    **** #include "tof.h"
  50:Src/main.c    **** #include "pi_client.h"
  51:Src/main.c    **** #include <stdio.h>
  52:Src/main.c    **** /* USER CODE END Includes */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PV */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  62:Src/main.c    **** void SystemClock_Config(void);
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PFP */
  65:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PFP */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END 0 */
  73:Src/main.c    **** 
  74:Src/main.c    **** /**
  75:Src/main.c    ****   * @brief  The application entry point.
  76:Src/main.c    ****   *
  77:Src/main.c    ****   * @retval None
  78:Src/main.c    ****   */
  79:Src/main.c    **** int main(void)
  80:Src/main.c    **** {
  81:Src/main.c    ****   /* USER CODE BEGIN 1 */
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* USER CODE END 1 */
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  88:Src/main.c    ****   HAL_Init();
ARM GAS  /tmp/cc58ZD3F.s 			page 3


  89:Src/main.c    **** 
  90:Src/main.c    ****   /* USER CODE BEGIN Init */
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* USER CODE END Init */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* Configure the system clock */
  95:Src/main.c    ****   SystemClock_Config();
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* USER CODE END SysInit */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* Initialize all configured peripherals */
 102:Src/main.c    ****   MX_GPIO_Init();
 103:Src/main.c    ****   MX_DMA_Init();
 104:Src/main.c    ****   MX_I2C1_Init();
 105:Src/main.c    ****   MX_I2C3_Init();
 106:Src/main.c    ****   MX_USART1_UART_Init();
 107:Src/main.c    ****   MX_USART2_UART_Init();
 108:Src/main.c    ****   MX_USART6_UART_Init();
 109:Src/main.c    ****   MX_TIM1_Init();
 110:Src/main.c    ****   MX_TIM2_Init();
 111:Src/main.c    ****   /* USER CODE BEGIN 2 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   //==================================================//
 114:Src/main.c    ****   //           UART PROTOCOL INIT                     //
 115:Src/main.c    ****   //==================================================//
 116:Src/main.c    **** 
 117:Src/main.c    ****   //Raspberry
 118:Src/main.c    ****   RP_Init_Interface(&pi_iface, USART1, RP_UART_Transmit, HAL_GetTick);
 119:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_2, USART1, pi_iface);
 120:Src/main.c    **** 
 121:Src/main.c    ****   //Position
 122:Src/main.c    ****   RP_Init_Interface(&pos_iface, USART2, RP_UART_Transmit, HAL_GetTick);
 123:Src/main.c    ****   RP_INIT_UART_DMA(DMA1, LL_DMA_STREAM_5, USART2, pos_iface);
 124:Src/main.c    **** 
 125:Src/main.c    ****   //Z-Axis
 126:Src/main.c    ****   RP_Init_Interface(&z_iface, USART6, RP_UART_Transmit, HAL_GetTick);
 127:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_1, USART6, z_iface);
 128:Src/main.c    **** 
 129:Src/main.c    ****   //==================================================//
 130:Src/main.c    ****   //           REMOTE CALL CLIENT INIT                //
 131:Src/main.c    ****   //==================================================//
 132:Src/main.c    **** 
 133:Src/main.c    ****   //Raspberry
 134:Src/main.c    ****   PI_Init();
 135:Src/main.c    ****   
 136:Src/main.c    ****   //==================================================//
 137:Src/main.c    ****   //                 WAIT START                       //
 138:Src/main.c    ****   //==================================================//
 139:Src/main.c    **** 
 140:Src/main.c    ****   Team t = wait_start();
 141:Src/main.c    ****   PI_Start();
 142:Src/main.c    **** 
 143:Src/main.c    ****   HAL_Delay(2000);
 144:Src/main.c    ****   PI_Asser_Test();
 145:Src/main.c    ****   
ARM GAS  /tmp/cc58ZD3F.s 			page 4


 146:Src/main.c    ****   /* USER CODE END 2 */
 147:Src/main.c    **** 
 148:Src/main.c    ****   /* Infinite loop */
 149:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 150:Src/main.c    **** #if 0
 151:Src/main.c    ****   HAL_Delay(2000);
 152:Src/main.c    ****   if( == 0){
 153:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : START SENT");
 154:Src/main.c    ****   }
 155:Src/main.c    **** 
 156:Src/main.c    **** 
 157:Src/main.c    ****   HAL_Delay(2000);
 158:Src/main.c    ****   if(RC_Call(&pi_client, PI_SCORE, 10) == 0){
 159:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : SCORE SENT");
 160:Src/main.c    ****   }
 161:Src/main.c    **** 
 162:Src/main.c    ****   HAL_Delay(2000);
 163:Src/main.c    ****   if(RC_Call(&pi_client, PI_SCORE, 10) == 0){
 164:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : SCORE SENT");
 165:Src/main.c    ****   }
 166:Src/main.c    **** 
 167:Src/main.c    ****   int r;
 168:Src/main.c    ****   char colors[RC_STR_SIZE];
 169:Src/main.c    ****   HAL_Delay(500);
 170:Src/main.c    ****   if(RC_Call(&pi_client, PI_PLAN, &r, colors) == 0){
 171:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : READ REQUEST");
 172:Src/main.c    ****   }
 173:Src/main.c    **** 
 174:Src/main.c    ****   HAL_Delay(500);
 175:Src/main.c    ****   if(RC_Call(&pi_client, PI_PLAN, &r, colors) == 0){
 176:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : READ REQUEST");
 177:Src/main.c    ****   }
 178:Src/main.c    **** 
 179:Src/main.c    ****   if(r == 0){
 180:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : WAITING FOR READ");
 181:Src/main.c    ****   }
 182:Src/main.c    **** 
 183:Src/main.c    ****   HAL_Delay(1000);
 184:Src/main.c    ****   if(RC_Call(&pi_client, PI_PLAN, &r, colors) == 0){
 185:Src/main.c    ****     RC_Call(&pi_client, PI_LOG, "NUCLEO : READ REQUEST");
 186:Src/main.c    ****   }
 187:Src/main.c    **** 
 188:Src/main.c    ****   HAL_Delay(500);
 189:Src/main.c    ****   RC_Call(&pi_client, PI_LOG, colors);
 190:Src/main.c    **** 
 191:Src/main.c    ****   HAL_Delay(2000);
 192:Src/main.c    ****   volatile int jean_michel_segfault = *((int*) 9999999999);
 193:Src/main.c    **** #endif
 194:Src/main.c    ****   
 195:Src/main.c    ****   ToF_Dev tof_dev;
 196:Src/main.c    ****   ToF_Params params;
 197:Src/main.c    ****   ToF_Data tof_data;
 198:Src/main.c    **** 
 199:Src/main.c    ****   ToF_Init_Struct(&tof_dev, &hi2c3, 0x52);
 200:Src/main.c    ****   
 201:Src/main.c    ****   do{
 202:Src/main.c    ****     //Check the initial address
ARM GAS  /tmp/cc58ZD3F.s 			page 5


 203:Src/main.c    ****     if(ToF_Poke(&tof_dev) == -1)
 204:Src/main.c    ****       break;
 205:Src/main.c    **** 
 206:Src/main.c    ****     //Set a new address
 207:Src/main.c    ****     if(ToF_Set_Address(&tof_dev, 0x52) == -1)
 208:Src/main.c    ****       break;
 209:Src/main.c    **** 
 210:Src/main.c    ****     //Init the device
 211:Src/main.c    ****     if(ToF_Init_Device(&tof_dev) == -1)
 212:Src/main.c    ****       break;
 213:Src/main.c    **** 
 214:Src/main.c    ****     //Long range config
 215:Src/main.c    ****     TOF_LONG_RANGE_CONFIG(params);
 216:Src/main.c    **** 
 217:Src/main.c    ****     //Configure the device
 218:Src/main.c    ****     ToF_Configure_Device(&tof_dev, &params);
 219:Src/main.c    ****   }while(0);
 220:Src/main.c    ****   
 221:Src/main.c    ****   
 222:Src/main.c    ****   while (1)
 223:Src/main.c    ****   {
 224:Src/main.c    ****     ToF_Perform_Measurement(&tof_dev, &tof_data);
 225:Src/main.c    ****     if(tof_data.RangeStatus == 0){
 226:Src/main.c    ****       //tof_dev.LeakyRange (mm)
 227:Src/main.c    ****       HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 228:Src/main.c    ****     }else{
 229:Src/main.c    ****       //Out of range
 230:Src/main.c    ****       HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 231:Src/main.c    ****     }
 232:Src/main.c    ****   /* USER CODE END WHILE */
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* USER CODE BEGIN 3 */
 235:Src/main.c    **** 
 236:Src/main.c    ****   }
 237:Src/main.c    ****   /* USER CODE END 3 */
 238:Src/main.c    **** 
 239:Src/main.c    **** }
 240:Src/main.c    **** 
 241:Src/main.c    **** /**
 242:Src/main.c    ****   * @brief System Clock Configuration
 243:Src/main.c    ****   * @retval None
 244:Src/main.c    ****   */
 245:Src/main.c    **** void SystemClock_Config(void)
 246:Src/main.c    **** {
 247:Src/main.c    **** 
 248:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 249:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 250:Src/main.c    **** 
 251:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 252:Src/main.c    ****     */
 253:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 254:Src/main.c    **** 
 255:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 256:Src/main.c    **** 
 257:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 258:Src/main.c    ****     */
 259:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
ARM GAS  /tmp/cc58ZD3F.s 			page 6


 260:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 261:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 264:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 265:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 266:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 267:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 268:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 269:Src/main.c    ****   {
 270:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 271:Src/main.c    ****   }
 272:Src/main.c    **** 
 273:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 274:Src/main.c    ****     */
 275:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 276:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 277:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 278:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 279:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 280:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 281:Src/main.c    **** 
 282:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 283:Src/main.c    ****   {
 284:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 285:Src/main.c    ****   }
 286:Src/main.c    **** 
 287:Src/main.c    ****     /**Configure the Systick interrupt time 
 288:Src/main.c    ****     */
 289:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 290:Src/main.c    **** 
 291:Src/main.c    ****     /**Configure the Systick 
 292:Src/main.c    ****     */
 293:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 296:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 297:Src/main.c    **** }
 298:Src/main.c    **** 
 299:Src/main.c    **** /* USER CODE BEGIN 4 */
 300:Src/main.c    **** void HardFault_Handler(void){
  28              		.loc 1 300 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 301:Src/main.c    ****   PI_Error();
  37              		.loc 1 301 0
  38 0002 FFF7FEFF 		bl	PI_Error
  39              	.LVL0:
 302:Src/main.c    ****   hlt();
  40              		.loc 1 302 0
  41 0006 FFF7FEFF 		bl	hlt
ARM GAS  /tmp/cc58ZD3F.s 			page 7


  42              	.LVL1:
 303:Src/main.c    **** }
  43              		.loc 1 303 0
  44 000a 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE681:
  48              		.section	.text._Error_Handler,"ax",%progbits
  49              		.align	1
  50              		.global	_Error_Handler
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu fpv4-sp-d16
  56              	_Error_Handler:
  57              	.LFB682:
 304:Src/main.c    **** /* USER CODE END 4 */
 305:Src/main.c    **** 
 306:Src/main.c    **** /**
 307:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 308:Src/main.c    ****   * @param  file: The file name as string.
 309:Src/main.c    ****   * @param  line: The line in file as a number.
 310:Src/main.c    ****   * @retval None
 311:Src/main.c    ****   */
 312:Src/main.c    **** void _Error_Handler(char *file, int line)
 313:Src/main.c    **** {
  58              		.loc 1 313 0
  59              		.cfi_startproc
  60              		@ Volatile: function does not return.
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL2:
  65              	.L4:
  66 0000 FEE7     		b	.L4
  67              		.cfi_endproc
  68              	.LFE682:
  70              		.section	.text.SystemClock_Config,"ax",%progbits
  71              		.align	1
  72              		.global	SystemClock_Config
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	SystemClock_Config:
  79              	.LFB680:
 246:Src/main.c    **** 
  80              		.loc 1 246 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 80
  83              		@ frame_needed = 0, uses_anonymous_args = 0
 246:Src/main.c    **** 
  84              		.loc 1 246 0
  85 0000 00B5     		push	{lr}
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 14, -4
  89 0002 95B0     		sub	sp, sp, #84
ARM GAS  /tmp/cc58ZD3F.s 			page 8


  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 88
  92              	.LBB56:
 253:Src/main.c    **** 
  93              		.loc 1 253 0
  94 0004 0022     		movs	r2, #0
  95 0006 0192     		str	r2, [sp, #4]
  96 0008 2B4B     		ldr	r3, .L11
  97 000a 196C     		ldr	r1, [r3, #64]
  98 000c 41F08051 		orr	r1, r1, #268435456
  99 0010 1964     		str	r1, [r3, #64]
 100 0012 1B6C     		ldr	r3, [r3, #64]
 101 0014 03F08053 		and	r3, r3, #268435456
 102 0018 0193     		str	r3, [sp, #4]
 103 001a 019B     		ldr	r3, [sp, #4]
 104              	.LBE56:
 105              	.LBB57:
 255:Src/main.c    **** 
 106              		.loc 1 255 0
 107 001c 0292     		str	r2, [sp, #8]
 108 001e 2749     		ldr	r1, .L11+4
 109 0020 0B68     		ldr	r3, [r1]
 110 0022 23F44043 		bic	r3, r3, #49152
 111 0026 43F40043 		orr	r3, r3, #32768
 112 002a 0B60     		str	r3, [r1]
 113 002c 0B68     		ldr	r3, [r1]
 114 002e 03F44043 		and	r3, r3, #49152
 115 0032 0293     		str	r3, [sp, #8]
 116 0034 029B     		ldr	r3, [sp, #8]
 117              	.LBE57:
 259:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 118              		.loc 1 259 0
 119 0036 0221     		movs	r1, #2
 120 0038 0891     		str	r1, [sp, #32]
 260:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 121              		.loc 1 260 0
 122 003a 0123     		movs	r3, #1
 123 003c 0B93     		str	r3, [sp, #44]
 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 124              		.loc 1 261 0
 125 003e 1023     		movs	r3, #16
 126 0040 0C93     		str	r3, [sp, #48]
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 127              		.loc 1 262 0
 128 0042 0E91     		str	r1, [sp, #56]
 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 129              		.loc 1 263 0
 130 0044 0F92     		str	r2, [sp, #60]
 264:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 131              		.loc 1 264 0
 132 0046 1093     		str	r3, [sp, #64]
 265:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 133              		.loc 1 265 0
 134 0048 4FF4A873 		mov	r3, #336
 135 004c 1193     		str	r3, [sp, #68]
 266:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 136              		.loc 1 266 0
ARM GAS  /tmp/cc58ZD3F.s 			page 9


 137 004e 0423     		movs	r3, #4
 138 0050 1293     		str	r3, [sp, #72]
 267:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 139              		.loc 1 267 0
 140 0052 0723     		movs	r3, #7
 141 0054 1393     		str	r3, [sp, #76]
 268:Src/main.c    ****   {
 142              		.loc 1 268 0
 143 0056 08A8     		add	r0, sp, #32
 144 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 145              	.LVL3:
 146 005c 08BB     		cbnz	r0, .L9
 275:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 147              		.loc 1 275 0
 148 005e 0F23     		movs	r3, #15
 149 0060 0393     		str	r3, [sp, #12]
 277:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 150              		.loc 1 277 0
 151 0062 0221     		movs	r1, #2
 152 0064 0491     		str	r1, [sp, #16]
 278:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 153              		.loc 1 278 0
 154 0066 0023     		movs	r3, #0
 155 0068 0593     		str	r3, [sp, #20]
 279:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 156              		.loc 1 279 0
 157 006a 4FF48052 		mov	r2, #4096
 158 006e 0692     		str	r2, [sp, #24]
 280:Src/main.c    **** 
 159              		.loc 1 280 0
 160 0070 0793     		str	r3, [sp, #28]
 282:Src/main.c    ****   {
 161              		.loc 1 282 0
 162 0072 03A8     		add	r0, sp, #12
 163 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 164              	.LVL4:
 165 0078 C0B9     		cbnz	r0, .L10
 289:Src/main.c    **** 
 166              		.loc 1 289 0
 167 007a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 168              	.LVL5:
 169 007e 104B     		ldr	r3, .L11+8
 170 0080 A3FB0030 		umull	r3, r0, r3, r0
 171 0084 8009     		lsrs	r0, r0, #6
 172 0086 FFF7FEFF 		bl	HAL_SYSTICK_Config
 173              	.LVL6:
 293:Src/main.c    **** 
 174              		.loc 1 293 0
 175 008a 0420     		movs	r0, #4
 176 008c FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 177              	.LVL7:
 296:Src/main.c    **** }
 178              		.loc 1 296 0
 179 0090 0022     		movs	r2, #0
 180 0092 1146     		mov	r1, r2
 181 0094 4FF0FF30 		mov	r0, #-1
 182 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/cc58ZD3F.s 			page 10


 183              	.LVL8:
 297:Src/main.c    **** 
 184              		.loc 1 297 0
 185 009c 15B0     		add	sp, sp, #84
 186              	.LCFI3:
 187              		.cfi_remember_state
 188              		.cfi_def_cfa_offset 4
 189              		@ sp needed
 190 009e 5DF804FB 		ldr	pc, [sp], #4
 191              	.L9:
 192              	.LCFI4:
 193              		.cfi_restore_state
 270:Src/main.c    ****   }
 194              		.loc 1 270 0
 195 00a2 4FF48771 		mov	r1, #270
 196 00a6 0748     		ldr	r0, .L11+12
 197 00a8 FFF7FEFF 		bl	_Error_Handler
 198              	.LVL9:
 199              	.L10:
 284:Src/main.c    ****   }
 200              		.loc 1 284 0
 201 00ac 4FF48E71 		mov	r1, #284
 202 00b0 0448     		ldr	r0, .L11+12
 203 00b2 FFF7FEFF 		bl	_Error_Handler
 204              	.LVL10:
 205              	.L12:
 206 00b6 00BF     		.align	2
 207              	.L11:
 208 00b8 00380240 		.word	1073887232
 209 00bc 00700040 		.word	1073770496
 210 00c0 D34D6210 		.word	274877907
 211 00c4 00000000 		.word	.LC0
 212              		.cfi_endproc
 213              	.LFE680:
 215              		.section	.text.main,"ax",%progbits
 216              		.align	1
 217              		.global	main
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu fpv4-sp-d16
 223              	main:
 224              	.LFB679:
  80:Src/main.c    ****   /* USER CODE BEGIN 1 */
 225              		.loc 1 80 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 456
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 230              	.LCFI5:
 231              		.cfi_def_cfa_offset 20
 232              		.cfi_offset 4, -20
 233              		.cfi_offset 5, -16
 234              		.cfi_offset 6, -12
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 F3B0     		sub	sp, sp, #460
ARM GAS  /tmp/cc58ZD3F.s 			page 11


 238              	.LCFI6:
 239              		.cfi_def_cfa_offset 480
  88:Src/main.c    **** 
 240              		.loc 1 88 0
 241 0004 FFF7FEFF 		bl	HAL_Init
 242              	.LVL11:
  95:Src/main.c    **** 
 243              		.loc 1 95 0
 244 0008 FFF7FEFF 		bl	SystemClock_Config
 245              	.LVL12:
 102:Src/main.c    ****   MX_DMA_Init();
 246              		.loc 1 102 0
 247 000c FFF7FEFF 		bl	MX_GPIO_Init
 248              	.LVL13:
 103:Src/main.c    ****   MX_I2C1_Init();
 249              		.loc 1 103 0
 250 0010 FFF7FEFF 		bl	MX_DMA_Init
 251              	.LVL14:
 104:Src/main.c    ****   MX_I2C3_Init();
 252              		.loc 1 104 0
 253 0014 FFF7FEFF 		bl	MX_I2C1_Init
 254              	.LVL15:
 105:Src/main.c    ****   MX_USART1_UART_Init();
 255              		.loc 1 105 0
 256 0018 FFF7FEFF 		bl	MX_I2C3_Init
 257              	.LVL16:
 106:Src/main.c    ****   MX_USART2_UART_Init();
 258              		.loc 1 106 0
 259 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 260              	.LVL17:
 107:Src/main.c    ****   MX_USART6_UART_Init();
 261              		.loc 1 107 0
 262 0020 FFF7FEFF 		bl	MX_USART2_UART_Init
 263              	.LVL18:
 108:Src/main.c    ****   MX_TIM1_Init();
 264              		.loc 1 108 0
 265 0024 FFF7FEFF 		bl	MX_USART6_UART_Init
 266              	.LVL19:
 109:Src/main.c    ****   MX_TIM2_Init();
 267              		.loc 1 109 0
 268 0028 FFF7FEFF 		bl	MX_TIM1_Init
 269              	.LVL20:
 110:Src/main.c    ****   /* USER CODE BEGIN 2 */
 270              		.loc 1 110 0
 271 002c FFF7FEFF 		bl	MX_TIM2_Init
 272              	.LVL21:
 118:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_2, USART1, pi_iface);
 273              		.loc 1 118 0
 274 0030 674E     		ldr	r6, .L19
 275 0032 684D     		ldr	r5, .L19+4
 276 0034 684C     		ldr	r4, .L19+8
 277 0036 694F     		ldr	r7, .L19+12
 278 0038 3346     		mov	r3, r6
 279 003a 2A46     		mov	r2, r5
 280 003c 2146     		mov	r1, r4
 281 003e 3846     		mov	r0, r7
 282 0040 FFF7FEFF 		bl	RP_Init_Interface
ARM GAS  /tmp/cc58ZD3F.s 			page 12


 283              	.LVL22:
 119:Src/main.c    **** 
 284              		.loc 1 119 0
 285 0044 0837     		adds	r7, r7, #8
 286              	.LVL23:
 287              	.LBB58:
 288              	.LBB59:
 289              		.file 2 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
   1:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @file    stm32f4xx_ll_dma.h
   4:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @attention
   8:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
   9:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  10:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
  11:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      without specific prior written permission.
  21:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
  22:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
  33:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   ******************************************************************************
  34:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  35:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  36:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #ifndef __STM32F4xx_LL_DMA_H
  38:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __STM32F4xx_LL_DMA_H
  39:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  40:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #ifdef __cplusplus
  41:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** extern "C" {
  42:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #endif
  43:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  44:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #include "stm32f4xx.h"
  46:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  47:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @addtogroup STM32F4xx_LL_Driver
  48:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  49:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
ARM GAS  /tmp/cc58ZD3F.s 			page 13


  50:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  51:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  52:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  53:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  54:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  55:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  56:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  57:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  60:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  61:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  62:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Array used to get the DMA stream register offset versus stream index LL_DMA_STREAM_x */
  63:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** static const uint8_t STREAM_OFFSET_TAB[] =
  64:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
  65:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream0_BASE - DMA1_BASE),
  66:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream1_BASE - DMA1_BASE),
  67:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream2_BASE - DMA1_BASE),
  68:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream3_BASE - DMA1_BASE),
  69:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream4_BASE - DMA1_BASE),
  70:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream5_BASE - DMA1_BASE),
  71:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream6_BASE - DMA1_BASE),
  72:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream7_BASE - DMA1_BASE)
  73:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** };
  74:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  75:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
  76:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
  77:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  78:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  79:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  80:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Constants DMA Private Constants
  81:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  82:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  83:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
  84:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
  85:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  86:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  87:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  88:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  89:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  90:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  91:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  92:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  93:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  94:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** typedef struct
  95:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
  96:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  97:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
  98:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  99:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
ARM GAS  /tmp/cc58ZD3F.s 			page 14


 107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The circular buffer mode cannot be used if the memory
 115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                               data transfer direction is configured on the selected
 116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         is incremented or not.
 121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         is incremented or not.
 127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Channel;                /*!< Specifies the peripheral channel.
 151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_CHANNEL
 152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         
 160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t FIFOMode;               /*!< Specifies if the FIFO mode or Direct mode will be used for 
 161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_FIFOMODE
 162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The Direct mode (FIFO mode disabled) cannot be used i
 163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         memory-to-memory data transfer is configured on the selecte
ARM GAS  /tmp/cc58ZD3F.s 			page 15


 164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t FIFOThreshold;          /*!< Specifies the FIFO threshold level.
 168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_FIFOTHRESHO
 169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemBurst;               /*!< Specifies the Burst transfer configuration for the memory t
 173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         It specifies the amount of data to be transferred in a sing
 174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         transaction.
 175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MBURST 
 176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The burst mode is possible only if the address Increm
 177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphBurst;            /*!< Specifies the Burst transfer configuration for the peripher
 181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         It specifies the amount of data to be transferred in a sing
 182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         transaction. 
 183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PBURST
 184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The burst mode is possible only if the address Increm
 185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_STREAM STREAM
 199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_0                   0x00000000U
 202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_1                   0x00000001U
 203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_2                   0x00000002U
 204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_3                   0x00000003U
 205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_4                   0x00000004U
 206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_5                   0x00000005U
 207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_6                   0x00000006U
 208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_7                   0x00000007U
 209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_ALL                 0xFFFF0000U
 210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION DIRECTION
 215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U               /*!< Peripheral to memory direc
 218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_SxCR_DIR_0            /*!< Memory to peripheral direc
 219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_SxCR_DIR_1            /*!< Memory to memory direction
 220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cc58ZD3F.s 			page 16


 221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE MODE
 225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U               /*!< Normal Mode               
 228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_SxCR_CIRC             /*!< Circular Mode             
 229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MODE_PFCTRL                DMA_SxCR_PFCTRL           /*!< Peripheral flow control mo
 230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DOUBLEBUFFER_MODE DOUBLEBUFFER MODE
 235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DOUBLEBUFFER_MODE_DISABLE  0x00000000U               /*!< Disable double buffering m
 238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DOUBLEBUFFER_MODE_ENABLE   DMA_SxCR_DBM              /*!< Enable double buffering mo
 239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH PERIPH
 244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U               /*!< Peripheral increment mode 
 247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_SxCR_PINC             /*!< Peripheral increment mode 
 248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY MEMORY
 253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U               /*!< Memory increment mode Disa
 256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_SxCR_MINC             /*!< Memory increment mode Enab
 257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN PDATAALIGN
 262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U               /*!< Peripheral data alignment 
 265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_SxCR_PSIZE_0          /*!< Peripheral data alignment 
 266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_SxCR_PSIZE_1          /*!< Peripheral data alignment 
 267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN MDATAALIGN
 272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U               /*!< Memory data alignment : By
 275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_SxCR_MSIZE_0          /*!< Memory data alignment : Ha
 276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_SxCR_MSIZE_1          /*!< Memory data alignment : Wo
 277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cc58ZD3F.s 			page 17


 278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_OFFSETSIZE OFFSETSIZE
 282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_OFFSETSIZE_PSIZE           0x00000000U               /*!< Peripheral increment offse
 285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_OFFSETSIZE_FIXEDTO4        DMA_SxCR_PINCOS           /*!< Peripheral increment offse
 286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY PRIORITY
 291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U               /*!< Priority level : Low      
 294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_SxCR_PL_0             /*!< Priority level : Medium   
 295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_SxCR_PL_1             /*!< Priority level : High     
 296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_SxCR_PL               /*!< Priority level : Very_High
 297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_0                  0x00000000U                                              
 305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  DMA_SxCR_CHSEL_0                                         
 306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  DMA_SxCR_CHSEL_1                                         
 307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  (DMA_SxCR_CHSEL_0 | DMA_SxCR_CHSEL_1)                    
 308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  DMA_SxCR_CHSEL_2                                         
 309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  (DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_0)                    
 310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  (DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1)                    
 311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  (DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_0) 
 312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MBURST MBURST
 317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_SINGLE              0x00000000U                             /*!< Memory burst
 320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_INC4                DMA_SxCR_MBURST_0                       /*!< Memory burst
 321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_INC8                DMA_SxCR_MBURST_1                       /*!< Memory burst
 322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_INC16               (DMA_SxCR_MBURST_0 | DMA_SxCR_MBURST_1) /*!< Memory burst
 323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PBURST PBURST
 328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_SINGLE              0x00000000U                             /*!< Peripheral b
 331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_INC4                DMA_SxCR_PBURST_0                       /*!< Peripheral b
 332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_INC8                DMA_SxCR_PBURST_1                       /*!< Peripheral b
 333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_INC16               (DMA_SxCR_PBURST_0 | DMA_SxCR_PBURST_1) /*!< Peripheral b
 334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cc58ZD3F.s 			page 18


 335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   
 338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_FIFOMODE DMA_LL_FIFOMODE
 339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOMODE_DISABLE           0x00000000U                             /*!< FIFO mode di
 342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOMODE_ENABLE            DMA_SxFCR_DMDIS                         /*!< FIFO mode en
 343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */  
 346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_FIFOSTATUS_0 FIFOSTATUS 0
 348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_0_25            0x00000000U                             /*!< 0 < fifo_lev
 351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_25_50           DMA_SxFCR_FS_0                          /*!< 1/4 < fifo_l
 352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_50_75           DMA_SxFCR_FS_1                          /*!< 1/2 < fifo_l
 353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_75_100          (DMA_SxFCR_FS_1 | DMA_SxFCR_FS_0)       /*!< 3/4 < fifo_l
 354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_EMPTY           DMA_SxFCR_FS_2                          /*!< FIFO is empt
 355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_FULL            (DMA_SxFCR_FS_2 | DMA_SxFCR_FS_0)       /*!< FIFO is full
 356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_FIFOTHRESHOLD FIFOTHRESHOLD
 361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_1_4          0x00000000U                             /*!< FIFO thresho
 364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_1_2          DMA_SxFCR_FTH_0                         /*!< FIFO thresho
 365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_3_4          DMA_SxFCR_FTH_1                         /*!< FIFO thresho
 366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_FULL         DMA_SxFCR_FTH                           /*!< FIFO thresho
 367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     
 371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CURRENTTARGETMEM CURRENTTARGETMEM
 372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CURRENTTARGETMEM0          0x00000000U                             /*!< Set CurrentT
 375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CURRENTTARGETMEM1          DMA_SxCR_CT                             /*!< Set CurrentT
 376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
ARM GAS  /tmp/cc58ZD3F.s 			page 19


 392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Write a value in DMA register
 394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __REG__ Register to be written
 396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Read a value in DMA register
 403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __REG__ Register to be read
 405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Register value
 406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxStreamy
 413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Convert DMAx_Streamy into DMAx
 417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __STREAM_INSTANCE__ DMAx_Streamy
 418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval DMAx
 419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__STREAM_INSTANCE__)   \
 421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** (((uint32_t)(__STREAM_INSTANCE__) > ((uint32_t)DMA1_Stream7)) ?  DMA2 : DMA1)
 422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Convert DMAx_Streamy into LL_DMA_STREAM_y
 425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __STREAM_INSTANCE__ DMAx_Streamy
 426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __LL_DMA_GET_STREAM(__STREAM_INSTANCE__)   \
 429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** (((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream0)) ? LL_DMA_STREAM_0 : \
 430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream0)) ? LL_DMA_STREAM_0 : \
 431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream1)) ? LL_DMA_STREAM_1 : \
 432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream1)) ? LL_DMA_STREAM_1 : \
 433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream2)) ? LL_DMA_STREAM_2 : \
 434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream2)) ? LL_DMA_STREAM_2 : \
 435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream3)) ? LL_DMA_STREAM_3 : \
 436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream3)) ? LL_DMA_STREAM_3 : \
 437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream4)) ? LL_DMA_STREAM_4 : \
 438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream4)) ? LL_DMA_STREAM_4 : \
 439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream5)) ? LL_DMA_STREAM_5 : \
 440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream5)) ? LL_DMA_STREAM_5 : \
 441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream6)) ? LL_DMA_STREAM_6 : \
 442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream6)) ? LL_DMA_STREAM_6 : \
 443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  LL_DMA_STREAM_7)
 444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_STREAM_y into DMAx_Streamy
 447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __STREAM__ LL_DMA_STREAM_y
ARM GAS  /tmp/cc58ZD3F.s 			page 20


 449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval DMAx_Streamy
 450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __LL_DMA_GET_STREAM_INSTANCE(__DMA_INSTANCE__, __STREAM__)   \
 452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  DMA2_Stream7)
 468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable DMA stream.
 488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          EN            LL_DMA_EnableStream
 489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
 502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
 504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 21


 506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Disable DMA stream.
 508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          EN            LL_DMA_DisableStream
 509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
 522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Check if DMA stream is enabled or disabled.
 528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          EN            LL_DMA_IsEnabledStream
 529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledStream(DMA_TypeDef *DMAx, uint32_t Stream)
 542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Configure all parameters linked to DMA transfer.
 548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DIR           LL_DMA_ConfigTransfer\n
 549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          CIRC          LL_DMA_ConfigTransfer\n
 550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PINC          LL_DMA_ConfigTransfer\n
 551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          MINC          LL_DMA_ConfigTransfer\n
 552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PSIZE         LL_DMA_ConfigTransfer\n
 553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          MSIZE         LL_DMA_ConfigTransfer\n
 554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PL            LL_DMA_ConfigTransfer\n
 555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PFCTRL        LL_DMA_ConfigTransfer
 556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
ARM GAS  /tmp/cc58ZD3F.s 			page 22


 563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR  or @ref LL_DMA_MODE_PFCTRL
 569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *@retval None
 575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configurati
 577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****              DMA_SxCR_DIR | DMA_SxCR_CIRC | DMA_SxCR_PINC | DMA_SxCR_MINC | DMA_SxCR_PSIZE | DMA_Sx
 580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****              Configuration);
 581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Data transfer direction (read from peripheral or from memory).
 585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DIR           LL_DMA_SetDataTransferDirection
 586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  
 603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Data transfer direction (read from peripheral or from memory).
 609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DIR           LL_DMA_GetDataTransferDirection
 610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
ARM GAS  /tmp/cc58ZD3F.s 			page 23


 620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
 626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set DMA mode normal, circular or peripheral flow control.
 632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CIRC           LL_DMA_SetMode\n
 633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PFCTRL         LL_DMA_SetMode
 634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_PFCTRL
 648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
 651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get DMA mode normal, circular or peripheral flow control.
 657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CIRC           LL_DMA_GetMode\n
 658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PFCTRL         LL_DMA_GetMode
 659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_PFCTRL
 673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Stream)
 675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
ARM GAS  /tmp/cc58ZD3F.s 			page 24


 677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Peripheral increment mode.
 681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINC           LL_DMA_SetPeriphIncMode
 682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  IncrementMode This parameter can be one of the following values:
 693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Increment
 698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral increment mode.
 704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINC           LL_DMA_GetPeriphIncMode
 705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream)
 720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory increment mode.
 726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MINC           LL_DMA_SetMemoryIncMode
 727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
ARM GAS  /tmp/cc58ZD3F.s 			page 25


 734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  IncrementMode This parameter can be one of the following values:
 738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Increment
 743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory increment mode.
 749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MINC           LL_DMA_GetMemoryIncMode
 750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream)
 765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Peripheral size.
 771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PSIZE           LL_DMA_SetPeriphSize
 772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Size This parameter can be one of the following values:
 783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
 789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
ARM GAS  /tmp/cc58ZD3F.s 			page 26


 791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral size.
 795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PSIZE           LL_DMA_GetPeriphSize
 796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream)
 812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory size.
 818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MSIZE           LL_DMA_SetMemorySize
 819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Size This parameter can be one of the following values:
 830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
 836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory size.
 842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MSIZE           LL_DMA_GetMemorySize
 843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
ARM GAS  /tmp/cc58ZD3F.s 			page 27


 848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream)
 859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Peripheral increment offset size.
 865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINCOS           LL_DMA_SetIncOffsetSize
 866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  OffsetSize This parameter can be one of the following values:
 877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_PSIZE
 878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_FIXEDTO4
 879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetIncOffsetSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t OffsetSiz
 882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral increment offset size.
 888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINCOS           LL_DMA_GetIncOffsetSize
 889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_PSIZE
 901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_FIXEDTO4
 902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetIncOffsetSize(DMA_TypeDef *DMAx, uint32_t Stream)
 904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 28


 905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Stream priority level.
 910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PL           LL_DMA_SetStreamPriorityLevel
 911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Pr
 929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream priority level.
 935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PL           LL_DMA_GetStreamPriorityLevel
 936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream)
 953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Number of data to transfer.
 959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll NDTR          NDT           LL_DMA_SetDataLength
 960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This action has no effect if
 961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         stream is enabled.
ARM GAS  /tmp/cc58ZD3F.s 			page 29


 962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  NbData Between 0 to 0xFFFFFFFF
 973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
 976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR,
 978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Number of data to transfer.
 982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll NDTR          NDT           LL_DMA_GetDataLength
 983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Once the stream is enabled, the return value indicate the
 984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         remaining bytes to be transmitted.
 985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
 996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
 998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Select Channel number associated to the Stream.
1004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CHSEL           LL_DMA_SetChannelSelection
1005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_0
1017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
ARM GAS  /tmp/cc58ZD3F.s 			page 30


1019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channe
1027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get the Channel number associated to the Stream.
1033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CHSEL           LL_DMA_GetChannelSelection
1034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_0
1046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream)
1055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory burst transfer configuration.
1061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MBURST           LL_DMA_SetMemoryBurstxfer
1062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Mburst This parameter can be one of the following values:
1073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_SINGLE
1074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC4
1075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC8
ARM GAS  /tmp/cc58ZD3F.s 			page 31


1076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC16
1077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
1080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory burst transfer configuration.
1086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MBURST           LL_DMA_GetMemoryBurstxfer
1087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_SINGLE
1099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC4
1100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC8
1101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC16
1102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream)
1104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set  Peripheral burst transfer configuration.
1110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PBURST           LL_DMA_SetPeriphBurstxfer
1111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Pburst This parameter can be one of the following values:
1122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_SINGLE
1123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC4
1124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC8
1125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC16
1126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Pburst)
1129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 32


1133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral burst transfer configuration.
1135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PBURST           LL_DMA_GetPeriphBurstxfer
1136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_SINGLE
1148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC4
1149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC8
1150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC16
1151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream)
1153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Current target (only in double buffer mode) to Memory 1 or Memory 0.
1159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CT           LL_DMA_SetCurrentTargetMem 
1160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param CurrentMemory This parameter can be one of the following values:
1171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM0
1172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM1
1173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Curren
1176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****    MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, 
1178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Current target (only in double buffer mode) to Memory 1 or Memory 0.
1182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CT           LL_DMA_GetCurrentTargetMem 
1183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
ARM GAS  /tmp/cc58ZD3F.s 			page 33


1190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM0
1195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM1
1196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream)
1198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable the double buffer mode.
1204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DBM           LL_DMA_EnableDoubleBufferMode
1205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableDoubleBufferMode(DMA_TypeDef *DMAx, uint32_t Stream)
1218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
1220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Disable the double buffer mode.
1224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DBM           LL_DMA_DisableDoubleBufferMode 
1225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableDoubleBufferMode(DMA_TypeDef *DMAx, uint32_t Stream)
1238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get FIFO status.
1244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR          FS          LL_DMA_GetFIFOStatus
1245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
ARM GAS  /tmp/cc58ZD3F.s 			page 34


1247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_0_25
1257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_25_50
1258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_50_75
1259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_75_100
1260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_EMPTY
1261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_FULL
1262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetFIFOStatus(DMA_TypeDef *DMAx, uint32_t Stream)
1264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Disable Fifo mode.
1270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR          DMDIS          LL_DMA_DisableFifoMode
1271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
1284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, 
1286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Fifo mode.
1290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR          DMDIS          LL_DMA_EnableFifoMode 
1291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
ARM GAS  /tmp/cc58ZD3F.s 			page 35


1304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DM
1306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Select FIFO threshold.
1310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR         FTH          LL_DMA_SetFIFOThreshold
1311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Threshold This parameter can be one of the following values:
1322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_4
1323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_2
1324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
1325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
1326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Threshold
1329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, 
1331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get FIFO threshold.
1335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR         FTH          LL_DMA_GetFIFOThreshold
1336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_4
1348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_2
1349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
1350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
1351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream)
1353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Configure the FIFO .
1359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR         FTH          LL_DMA_ConfigFifo\n
1360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         FCR         DMDIS        LL_DMA_ConfigFifo
ARM GAS  /tmp/cc58ZD3F.s 			page 36


1361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  FifoMode This parameter can be one of the following values:
1372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOMODE_ENABLE
1373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOMODE_DISABLE
1374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  FifoThreshold This parameter can be one of the following values:
1375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_4
1376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_2
1377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
1378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
1379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigFifo(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t FifoMode, uint3
1382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, 
1384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Configure the Source and Destination addresses.
1388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA stream is enabled.
1389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_ConfigAddresses\n 
1390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         PAR         PA          LL_DMA_ConfigAddresses
1391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  SrcAddress Between 0 to 0xFFFFFFFF
1402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DstAddress Between 0 to 0xFFFFFFFF
1403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
1404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
1405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
1406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
1407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress
1410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   /* Direction Memory to Periph */
1412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
1413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR
1415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR,
1416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
ARM GAS  /tmp/cc58ZD3F.s 			page 37


1418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   else
1419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR,
1421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR
1422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Memory address.
1427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_SetMemoryAddress
1428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  MemoryAddress Between 0 to 0xFFFFFFFF
1441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAdd
1444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, 
 290              		.loc 2 1445 0
 291 0046 664B     		ldr	r3, .L19+16
 292 0048 DF60     		str	r7, [r3, #12]
 293              	.LVL24:
 294              	.LBE59:
 295              	.LBE58:
 296              	.LBB60:
 297              	.LBB61:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 298              		.loc 2 977 0
 299 004a 5A68     		ldr	r2, [r3, #4]
 300 004c 120C     		lsrs	r2, r2, #16
 301 004e 1204     		lsls	r2, r2, #16
 302 0050 42F48072 		orr	r2, r2, #256
 303 0054 5A60     		str	r2, [r3, #4]
 304              	.LVL25:
 305              	.LBE61:
 306              	.LBE60:
 307              	.LBB62:
 308              	.LBB63:
1446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Peripheral address.
1450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_SetPeriphAddress
1451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
ARM GAS  /tmp/cc58ZD3F.s 			page 38


1455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  PeriphAddress Between 0 to 0xFFFFFFFF
1464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAdd
1467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, P
 309              		.loc 2 1468 0
 310 0056 634A     		ldr	r2, .L19+20
 311 0058 9A60     		str	r2, [r3, #8]
 312              	.LVL26:
 313              	.LBE63:
 314              	.LBE62:
 315              	.LBB64:
 316              	.LBB65:
1469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Memory address.
1473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_GetMemoryAddress
1474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Peripheral address.
1494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_GetPeriphAddress
1495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
ARM GAS  /tmp/cc58ZD3F.s 			page 39


1504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))
1511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_SetM2MSrcAddress
1516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  MemoryAddress Between 0 to 0xFFFFFFFF
1529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAdd
1532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, M
1534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_SetM2MDstAddress
1539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  MemoryAddress Between 0 to 0xFFFFFFFF
1552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAdd
1555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR
1557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
ARM GAS  /tmp/cc58ZD3F.s 			page 40


1561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_GetM2MSrcAddress
1562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****    return (READ_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream]))
1578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_GetM2MDstAddress
1583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  return (READ_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->
1599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory 1 address (used in case of Double buffer mode).
1603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M1AR        M1A         LL_DMA_SetMemory1Address
1604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Address Between 0 to 0xFFFFFFFF
1615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Address)
ARM GAS  /tmp/cc58ZD3F.s 			page 41


1618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR,
1620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory 1 address (used in case of Double buffer mode).
1624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M1AR        M1A         LL_DMA_GetMemory1Address
1625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream)
1638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR);
1640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
1644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
1647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
1648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 half transfer flag.
1652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF0    LL_DMA_IsActiveFlag_HT0
1653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT0(DMA_TypeDef *DMAx)
1657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF0)==(DMA_LISR_HTIF0));
1659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 half transfer flag.
1663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF1    LL_DMA_IsActiveFlag_HT1
1664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
1668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF1)==(DMA_LISR_HTIF1));
1670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 half transfer flag.
1674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF2    LL_DMA_IsActiveFlag_HT2
ARM GAS  /tmp/cc58ZD3F.s 			page 42


1675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
1679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF2)==(DMA_LISR_HTIF2));
1681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 half transfer flag.
1685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF3    LL_DMA_IsActiveFlag_HT3
1686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
1690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF3)==(DMA_LISR_HTIF3));
1692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 half transfer flag.
1696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF4    LL_DMA_IsActiveFlag_HT4
1697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
1701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF4)==(DMA_HISR_HTIF4));
1703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 half transfer flag.
1707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF0    LL_DMA_IsActiveFlag_HT5
1708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
1712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF5)==(DMA_HISR_HTIF5));
1714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 half transfer flag.
1718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF6    LL_DMA_IsActiveFlag_HT6
1719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
1723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF6)==(DMA_HISR_HTIF6));
1725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 half transfer flag.
1729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF7    LL_DMA_IsActiveFlag_HT7
1730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cc58ZD3F.s 			page 43


1732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
1734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF7)==(DMA_HISR_HTIF7));
1736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } 
1737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 transfer complete flag.
1740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF0    LL_DMA_IsActiveFlag_TC0
1741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC0(DMA_TypeDef *DMAx)
1745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
1747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 transfer complete flag.
1751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
1752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
1756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
1758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 transfer complete flag.
1762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF2    LL_DMA_IsActiveFlag_TC2
1763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
1767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
1769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 transfer complete flag.
1773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF3    LL_DMA_IsActiveFlag_TC3
1774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
1778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF3)==(DMA_LISR_TCIF3));
1780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 transfer complete flag.
1784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF4    LL_DMA_IsActiveFlag_TC4
1785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
ARM GAS  /tmp/cc58ZD3F.s 			page 44


1789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
1791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 transfer complete flag.
1795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
1796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
1800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
1802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 transfer complete flag.
1806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
1807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
1811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
1813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 transfer complete flag.
1817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF7    LL_DMA_IsActiveFlag_TC7
1818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
1822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
1824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } 
1825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 transfer error flag.
1828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF0    LL_DMA_IsActiveFlag_TE0
1829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE0(DMA_TypeDef *DMAx)
1833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
1835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 transfer error flag.
1839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF1    LL_DMA_IsActiveFlag_TE1
1840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
1844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF1)==(DMA_LISR_TEIF1));
ARM GAS  /tmp/cc58ZD3F.s 			page 45


1846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 transfer error flag.
1850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF2    LL_DMA_IsActiveFlag_TE2
1851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
1855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF2)==(DMA_LISR_TEIF2));
1857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 transfer error flag.
1861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF3    LL_DMA_IsActiveFlag_TE3
1862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
1866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF3)==(DMA_LISR_TEIF3));
1868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 transfer error flag.
1872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF4    LL_DMA_IsActiveFlag_TE4
1873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
1877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
1879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 transfer error flag.
1883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF0    LL_DMA_IsActiveFlag_TE5
1884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
1888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
1890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 transfer error flag.
1894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF6    LL_DMA_IsActiveFlag_TE6
1895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
1899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
1901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 46


1903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 transfer error flag.
1905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF7    LL_DMA_IsActiveFlag_TE7
1906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
1910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF7)==(DMA_HISR_TEIF7));
1912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } 
1913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 direct mode error flag.
1916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF0    LL_DMA_IsActiveFlag_DME0
1917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME0(DMA_TypeDef *DMAx)
1921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF0)==(DMA_LISR_DMEIF0));
1923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 direct mode error flag.
1927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF1    LL_DMA_IsActiveFlag_DME1
1928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME1(DMA_TypeDef *DMAx)
1932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF1)==(DMA_LISR_DMEIF1));
1934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 direct mode error flag.
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF2    LL_DMA_IsActiveFlag_DME2
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME2(DMA_TypeDef *DMAx)
1943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF2)==(DMA_LISR_DMEIF2));
1945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 direct mode error flag.
1949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF3    LL_DMA_IsActiveFlag_DME3
1950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME3(DMA_TypeDef *DMAx)
1954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF3)==(DMA_LISR_DMEIF3));
1956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 direct mode error flag.
ARM GAS  /tmp/cc58ZD3F.s 			page 47


1960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF4    LL_DMA_IsActiveFlag_DME4
1961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME4(DMA_TypeDef *DMAx)
1965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF4)==(DMA_HISR_DMEIF4));
1967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 direct mode error flag.
1971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF0    LL_DMA_IsActiveFlag_DME5
1972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME5(DMA_TypeDef *DMAx)
1976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF5)==(DMA_HISR_DMEIF5));
1978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 direct mode error flag.
1982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF6    LL_DMA_IsActiveFlag_DME6
1983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME6(DMA_TypeDef *DMAx)
1987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF6)==(DMA_HISR_DMEIF6));
1989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 direct mode error flag.
1993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF7    LL_DMA_IsActiveFlag_DME7
1994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME7(DMA_TypeDef *DMAx)
1998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF7)==(DMA_HISR_DMEIF7));
2000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 FIFO error flag.
2004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF0    LL_DMA_IsActiveFlag_FE0
2005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE0(DMA_TypeDef *DMAx)
2009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF0)==(DMA_LISR_FEIF0));
2011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 FIFO error flag.
2015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF1    LL_DMA_IsActiveFlag_FE1
2016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/cc58ZD3F.s 			page 48


2017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE1(DMA_TypeDef *DMAx)
2020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF1)==(DMA_LISR_FEIF1));
2022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 FIFO error flag.
2026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF2    LL_DMA_IsActiveFlag_FE2
2027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE2(DMA_TypeDef *DMAx)
2031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF2)==(DMA_LISR_FEIF2));
2033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 FIFO error flag.
2037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF3    LL_DMA_IsActiveFlag_FE3
2038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE3(DMA_TypeDef *DMAx)
2042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF3)==(DMA_LISR_FEIF3));
2044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 FIFO error flag.
2048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF4    LL_DMA_IsActiveFlag_FE4
2049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE4(DMA_TypeDef *DMAx)
2053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF4)==(DMA_HISR_FEIF4));
2055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 FIFO error flag.
2059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF0    LL_DMA_IsActiveFlag_FE5
2060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE5(DMA_TypeDef *DMAx)
2064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF5)==(DMA_HISR_FEIF5));
2066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 FIFO error flag.
2070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF6    LL_DMA_IsActiveFlag_FE6
2071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
ARM GAS  /tmp/cc58ZD3F.s 			page 49


2074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE6(DMA_TypeDef *DMAx)
2075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF6)==(DMA_HISR_FEIF6));
2077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 FIFO error flag.
2081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF7    LL_DMA_IsActiveFlag_FE7
2082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE7(DMA_TypeDef *DMAx)
2086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF7)==(DMA_HISR_FEIF7));
2088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 half transfer flag.
2092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF0    LL_DMA_ClearFlag_HT0
2093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT0(DMA_TypeDef *DMAx)
2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
2099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 half transfer flag.
2103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
2104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
2108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
2110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 half transfer flag.
2114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF2    LL_DMA_ClearFlag_HT2
2115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
2119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
2121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 half transfer flag.
2125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF3    LL_DMA_ClearFlag_HT3
2126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
2130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 50


2131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF3);
2132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 half transfer flag.
2136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF4    LL_DMA_ClearFlag_HT4
2137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
2141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF4);
2143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 half transfer flag.
2147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF5    LL_DMA_ClearFlag_HT5
2148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
2152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF5);
2154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 half transfer flag.
2158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF6    LL_DMA_ClearFlag_HT6
2159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
2163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
2165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 half transfer flag.
2169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF7    LL_DMA_ClearFlag_HT7
2170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
2174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF7);
2176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 transfer complete flag.
2180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF0    LL_DMA_ClearFlag_TC0
2181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
2185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
2187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
ARM GAS  /tmp/cc58ZD3F.s 			page 51


2188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 transfer complete flag.
2191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
2192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
2196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
2198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 transfer complete flag.
2202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
2203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
2207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
2209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 transfer complete flag.
2213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF3    LL_DMA_ClearFlag_TC3
2214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
2218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF3);
2220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 transfer complete flag.
2224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
2225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
2229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
2231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 transfer complete flag.
2235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
2236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
2240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
2242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cc58ZD3F.s 			page 52


2245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 transfer complete flag.
2246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
2247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
2251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
2253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 transfer complete flag.
2257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF7    LL_DMA_ClearFlag_TC7
2258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
2262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
2264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 transfer error flag.
2268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF0    LL_DMA_ClearFlag_TE0
2269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
2273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
2275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 transfer error flag.
2279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
2280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
2284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
2286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 transfer error flag.
2290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF2    LL_DMA_ClearFlag_TE2
2291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
2295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
2297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 transfer error flag.
2301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF3    LL_DMA_ClearFlag_TE3
ARM GAS  /tmp/cc58ZD3F.s 			page 53


2302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
2306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF3);
2308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 transfer error flag.
2312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
2313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
2317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
2319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 transfer error flag.
2323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF5    LL_DMA_ClearFlag_TE5
2324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
2328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF5);
2330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 transfer error flag.
2334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF6    LL_DMA_ClearFlag_TE6
2335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
2339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
2341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 transfer error flag.
2345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF7    LL_DMA_ClearFlag_TE7
2346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
2350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF7);
2352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 direct mode error flag.
2356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF0    LL_DMA_ClearFlag_DME0
2357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
ARM GAS  /tmp/cc58ZD3F.s 			page 54


2359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME0(DMA_TypeDef *DMAx)
2361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF0);
2363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 direct mode error flag.
2367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF1    LL_DMA_ClearFlag_DME1
2368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME1(DMA_TypeDef *DMAx)
2372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF1);
2374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 direct mode error flag.
2378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF2    LL_DMA_ClearFlag_DME2
2379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME2(DMA_TypeDef *DMAx)
2383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF2);
2385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 direct mode error flag.
2389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF3    LL_DMA_ClearFlag_DME3
2390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME3(DMA_TypeDef *DMAx)
2394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF3);
2396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 direct mode error flag.
2400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF4    LL_DMA_ClearFlag_DME4
2401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME4(DMA_TypeDef *DMAx)
2405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF4);
2407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 direct mode error flag.
2411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF5    LL_DMA_ClearFlag_DME5
2412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME5(DMA_TypeDef *DMAx)
ARM GAS  /tmp/cc58ZD3F.s 			page 55


2416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF5);
2418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 direct mode error flag.
2422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF6    LL_DMA_ClearFlag_DME6
2423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME6(DMA_TypeDef *DMAx)
2427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF6);
2429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 direct mode error flag.
2433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF7    LL_DMA_ClearFlag_DME7
2434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME7(DMA_TypeDef *DMAx)
2438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF7);
2440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 FIFO error flag.
2444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF0    LL_DMA_ClearFlag_FE0
2445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE0(DMA_TypeDef *DMAx)
2449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF0);
2451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 FIFO error flag.
2455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF1    LL_DMA_ClearFlag_FE1
2456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE1(DMA_TypeDef *DMAx)
2460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF1);
2462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 FIFO error flag.
2466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF2    LL_DMA_ClearFlag_FE2
2467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE2(DMA_TypeDef *DMAx)
2471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF2);
ARM GAS  /tmp/cc58ZD3F.s 			page 56


2473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 FIFO error flag.
2477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF3    LL_DMA_ClearFlag_FE3
2478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE3(DMA_TypeDef *DMAx)
2482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF3);
2484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 FIFO error flag.
2488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF4    LL_DMA_ClearFlag_FE4
2489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE4(DMA_TypeDef *DMAx)
2493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF4);
2495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 FIFO error flag.
2499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF5    LL_DMA_ClearFlag_FE5
2500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE5(DMA_TypeDef *DMAx)
2504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF5);
2506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 FIFO error flag.
2510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF6    LL_DMA_ClearFlag_FE6
2511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE6(DMA_TypeDef *DMAx)
2515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF6);
2517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 FIFO error flag.
2521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF7    LL_DMA_ClearFlag_FE7
2522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE7(DMA_TypeDef *DMAx)
2526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF7);
2528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 57


2530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
2532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_IT_Management IT_Management
2535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
2536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Half transfer interrupt.
2540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR        HTIE         LL_DMA_EnableIT_HT
2541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
2543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
2544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
2545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
2546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
2547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
2548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
2549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
2550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
2551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
2554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
 317              		.loc 2 2555 0
 318 005a 1A68     		ldr	r2, [r3]
 319 005c 42F00802 		orr	r2, r2, #8
 320 0060 1A60     		str	r2, [r3]
 321              	.LVL27:
 322              	.LBE65:
 323              	.LBE64:
 324              	.LBB66:
 325              	.LBB67:
2556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Transfer error interrupt.
2560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR        TEIE         LL_DMA_EnableIT_TE
2561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
2563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
2564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
2565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
2566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
2567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
2568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
2569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
2570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
2571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
2574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
2576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 58


2578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Transfer complete interrupt.
2580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR        TCIE         LL_DMA_EnableIT_TC
2581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
2583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
2584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
2585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
2586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
2587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
2588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
2589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
2590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
2591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
2594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
 326              		.loc 2 2595 0
 327 0062 1A68     		ldr	r2, [r3]
 328 0064 42F01002 		orr	r2, r2, #16
 329 0068 1A60     		str	r2, [r3]
 330              	.LVL28:
 331              	.LBE67:
 332              	.LBE66:
 333              	.LBB68:
 334              	.LBB69:
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 335              		.loc 2 503 0
 336 006a 1A68     		ldr	r2, [r3]
 337 006c 42F00102 		orr	r2, r2, #1
 338 0070 1A60     		str	r2, [r3]
 339              	.LVL29:
 340              	.LBE69:
 341              	.LBE68:
 342              	.LBB70:
 343              	.LBB71:
 344              		.file 3 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h"
   1:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @file    stm32f4xx_ll_usart.h
   4:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
   9:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  10:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  11:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /tmp/cc58ZD3F.s 			page 59


  20:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      without specific prior written permission.
  21:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  22:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  33:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
  34:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  35:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  36:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #ifndef __STM32F4xx_LL_USART_H
  38:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __STM32F4xx_LL_USART_H
  39:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  40:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #ifdef __cplusplus
  41:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** extern "C" {
  42:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif
  43:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  44:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #include "stm32f4xx.h"
  46:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  47:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @addtogroup STM32F4xx_LL_Driver
  48:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  49:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  50:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  51:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (USART6) || defined (UART4)
  52:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  53:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL USART
  54:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  55:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  56:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  57:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  60:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  61:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  62:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  63:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  64:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  65:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  66:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  67:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  68:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
  69:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  70:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  71:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  72:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  73:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  74:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  75:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  76:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /tmp/cc58ZD3F.s 			page 60


  77:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
  78:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  79:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  80:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  81:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  82:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  83:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  84:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  85:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  86:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  87:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  88:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  89:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  90:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** typedef struct
  91:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
  92:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  93:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  94:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  95:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  96:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  97:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  98:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  99:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** typedef struct
 132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
ARM GAS  /tmp/cc58ZD3F.s 			page 61


 134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
 183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
ARM GAS  /tmp/cc58ZD3F.s 			page 62


 191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */ 
 219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
ARM GAS  /tmp/cc58ZD3F.s 			page 63


 248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
ARM GAS  /tmp/cc58ZD3F.s 			page 64


 305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Write a value in USART register
 347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be written
 349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read a value in USART register
 356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Register value
 359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /tmp/cc58ZD3F.s 			page 65


 362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      (((__PERIPHCLK__)*25)/(2*(__
 377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
 378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (((__LL_USART_DIV_SAMPLING8_
 379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            ((__LL_USART_DIVFRAQ_SAM
 383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     (((__PERIPHCLK__)*25)/(4*(__
 393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (((__LL_USART_DIV_SAMPLING16
 395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 66


 419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Enable
 421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
 435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Disable
 468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/cc58ZD3F.s 			page 67


 476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Enable
 479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Disable
 490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         of Transmitter and Receiver
 502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 68


 533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc58ZD3F.s 			page 69


 590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
 611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Oversampling mode
 637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/cc58ZD3F.s 			page 70


 647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
ARM GAS  /tmp/cc58ZD3F.s 			page 71


 704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
ARM GAS  /tmp/cc58ZD3F.s 			page 72


 761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
 805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
ARM GAS  /tmp/cc58ZD3F.s 			page 73


 818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
 821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
 836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
 845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                               uint32_t StopBits)
 867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
ARM GAS  /tmp/cc58ZD3F.s 			page 74


 875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         for wake up with address mark detection.
 876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
 894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
 896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc58ZD3F.s 			page 75


 932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
 948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
 983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
ARM GAS  /tmp/cc58ZD3F.s 			page 76


 989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
 994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (Baud rate value != 0)
1026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                           uint32_t BaudRate)
1037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   else
1043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
ARM GAS  /tmp/cc58ZD3F.s 			page 77


1046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Baud Rate
1059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     {
1071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     }
1074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   else
1076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     {
1079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     }
1081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (brrresult);
1083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IrDA mode
1095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 78


1103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IrDA mode
1108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 79


1160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
ARM GAS  /tmp/cc58ZD3F.s 			page 80


1217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc58ZD3F.s 			page 81


1274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc58ZD3F.s 			page 82


1331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
1379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
ARM GAS  /tmp/cc58ZD3F.s 			page 83


1388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
1396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
1409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
1418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN mode
1424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN mode
1437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 84


1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
1446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
1453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
1457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
1466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
1472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/cc58ZD3F.s 			page 85


1502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
1505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
1523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
ARM GAS  /tmp/cc58ZD3F.s 			page 86


1559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
1560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
1562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
1567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
ARM GAS  /tmp/cc58ZD3F.s 			page 87


1616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
1637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
1643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
ARM GAS  /tmp/cc58ZD3F.s 			page 88


1673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
1681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
1694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc58ZD3F.s 			page 89


1730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
1753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
1764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
1775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
1786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 90


1787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
1788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
1797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
1803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
1808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
1810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
1814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
1819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
1821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
1830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
1832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
1843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cc58ZD3F.s 			page 91


1844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
1852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
1856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
1867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
1878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 92


1901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
1922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
1950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 93


1958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
1960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
1964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
1965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
1969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
1979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
1980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
1984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_TC));
1986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
1990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
1991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
1995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_RXNE));
1997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
2001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
2004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
2008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_LBD));
2010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
2014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc58ZD3F.s 			page 94


2015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_CTS));
2023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
2031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
ARM GAS  /tmp/cc58ZD3F.s 			page 95


2072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
2093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
2114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cc58ZD3F.s 			page 96


2129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
ARM GAS  /tmp/cc58ZD3F.s 			page 97


2186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
2221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
2223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
2227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
2232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc58ZD3F.s 			page 98


2243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
2254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
2260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
2265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
2276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
2289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc58ZD3F.s 			page 99


2300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
2313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
2323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 345              		.loc 3 2333 0
 346 0072 6369     		ldr	r3, [r4, #20]
 347 0074 43F04003 		orr	r3, r3, #64
 348 0078 6361     		str	r3, [r4, #20]
 349              	.LVL30:
 350              	.LBE71:
 351              	.LBE70:
 352              	.LBB72:
 353              	.LBB73:
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 354              		.loc 3 2041 0
 355 007a E368     		ldr	r3, [r4, #12]
 356 007c 43F01003 		orr	r3, r3, #16
 357 0080 E360     		str	r3, [r4, #12]
 358              	.LVL31:
 359              	.LBE73:
 360              	.LBE72:
 361              	.LBB74:
 362              	.LBB75:
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 363              		.loc 3 427 0
 364 0082 E368     		ldr	r3, [r4, #12]
 365 0084 43F40053 		orr	r3, r3, #8192
ARM GAS  /tmp/cc58ZD3F.s 			page 100


 366 0088 E360     		str	r3, [r4, #12]
 367              	.LVL32:
 368              	.LBE75:
 369              	.LBE74:
 122:Src/main.c    ****   RP_INIT_UART_DMA(DMA1, LL_DMA_STREAM_5, USART2, pos_iface);
 370              		.loc 1 122 0
 371 008a A4F54C44 		sub	r4, r4, #52224
 372 008e 564F     		ldr	r7, .L19+24
 373 0090 3346     		mov	r3, r6
 374 0092 2A46     		mov	r2, r5
 375 0094 2146     		mov	r1, r4
 376 0096 3846     		mov	r0, r7
 377 0098 FFF7FEFF 		bl	RP_Init_Interface
 378              	.LVL33:
 123:Src/main.c    **** 
 379              		.loc 1 123 0
 380 009c 0837     		adds	r7, r7, #8
 381              	.LVL34:
 382              	.LBB76:
 383              	.LBB77:
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 384              		.loc 2 1445 0
 385 009e 534B     		ldr	r3, .L19+28
 386 00a0 DF60     		str	r7, [r3, #12]
 387              	.LVL35:
 388              	.LBE77:
 389              	.LBE76:
 390              	.LBB78:
 391              	.LBB79:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 392              		.loc 2 977 0
 393 00a2 5A68     		ldr	r2, [r3, #4]
 394 00a4 120C     		lsrs	r2, r2, #16
 395 00a6 1204     		lsls	r2, r2, #16
 396 00a8 42F48072 		orr	r2, r2, #256
 397 00ac 5A60     		str	r2, [r3, #4]
 398              	.LVL36:
 399              	.LBE79:
 400              	.LBE78:
 401              	.LBB80:
 402              	.LBB81:
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 403              		.loc 2 1468 0
 404 00ae 504A     		ldr	r2, .L19+32
 405 00b0 9A60     		str	r2, [r3, #8]
 406              	.LVL37:
 407              	.LBE81:
 408              	.LBE80:
 409              	.LBB82:
 410              	.LBB83:
2555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 411              		.loc 2 2555 0
 412 00b2 1A68     		ldr	r2, [r3]
 413 00b4 42F00802 		orr	r2, r2, #8
 414 00b8 1A60     		str	r2, [r3]
 415              	.LVL38:
 416              	.LBE83:
ARM GAS  /tmp/cc58ZD3F.s 			page 101


 417              	.LBE82:
 418              	.LBB84:
 419              	.LBB85:
 420              		.loc 2 2595 0
 421 00ba 1A68     		ldr	r2, [r3]
 422 00bc 42F01002 		orr	r2, r2, #16
 423 00c0 1A60     		str	r2, [r3]
 424              	.LVL39:
 425              	.LBE85:
 426              	.LBE84:
 427              	.LBB86:
 428              	.LBB87:
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 429              		.loc 2 503 0
 430 00c2 1A68     		ldr	r2, [r3]
 431 00c4 42F00102 		orr	r2, r2, #1
 432 00c8 1A60     		str	r2, [r3]
 433              	.LVL40:
 434              	.LBE87:
 435              	.LBE86:
 436              	.LBB88:
 437              	.LBB89:
 438              		.loc 3 2333 0
 439 00ca 6369     		ldr	r3, [r4, #20]
 440 00cc 43F04003 		orr	r3, r3, #64
 441 00d0 6361     		str	r3, [r4, #20]
 442              	.LVL41:
 443              	.LBE89:
 444              	.LBE88:
 445              	.LBB90:
 446              	.LBB91:
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 447              		.loc 3 2041 0
 448 00d2 E368     		ldr	r3, [r4, #12]
 449 00d4 43F01003 		orr	r3, r3, #16
 450 00d8 E360     		str	r3, [r4, #12]
 451              	.LVL42:
 452              	.LBE91:
 453              	.LBE90:
 454              	.LBB92:
 455              	.LBB93:
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 456              		.loc 3 427 0
 457 00da E368     		ldr	r3, [r4, #12]
 458 00dc 43F40053 		orr	r3, r3, #8192
 459 00e0 E360     		str	r3, [r4, #12]
 460              	.LVL43:
 461              	.LBE93:
 462              	.LBE92:
 126:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_1, USART6, z_iface);
 463              		.loc 1 126 0
 464 00e2 04F55044 		add	r4, r4, #53248
 465 00e6 434F     		ldr	r7, .L19+36
 466 00e8 3346     		mov	r3, r6
 467 00ea 2A46     		mov	r2, r5
 468 00ec 2146     		mov	r1, r4
 469 00ee 3846     		mov	r0, r7
ARM GAS  /tmp/cc58ZD3F.s 			page 102


 470 00f0 FFF7FEFF 		bl	RP_Init_Interface
 471              	.LVL44:
 127:Src/main.c    **** 
 472              		.loc 1 127 0
 473 00f4 0837     		adds	r7, r7, #8
 474              	.LVL45:
 475              	.LBB94:
 476              	.LBB95:
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 477              		.loc 2 1445 0
 478 00f6 404B     		ldr	r3, .L19+40
 479 00f8 DF60     		str	r7, [r3, #12]
 480              	.LVL46:
 481              	.LBE95:
 482              	.LBE94:
 483              	.LBB96:
 484              	.LBB97:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 485              		.loc 2 977 0
 486 00fa 5A68     		ldr	r2, [r3, #4]
 487 00fc 120C     		lsrs	r2, r2, #16
 488 00fe 1204     		lsls	r2, r2, #16
 489 0100 42F48072 		orr	r2, r2, #256
 490 0104 5A60     		str	r2, [r3, #4]
 491              	.LVL47:
 492              	.LBE97:
 493              	.LBE96:
 494              	.LBB98:
 495              	.LBB99:
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 496              		.loc 2 1468 0
 497 0106 3D4A     		ldr	r2, .L19+44
 498 0108 9A60     		str	r2, [r3, #8]
 499              	.LVL48:
 500              	.LBE99:
 501              	.LBE98:
 502              	.LBB100:
 503              	.LBB101:
2555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 504              		.loc 2 2555 0
 505 010a 1A68     		ldr	r2, [r3]
 506 010c 42F00802 		orr	r2, r2, #8
 507 0110 1A60     		str	r2, [r3]
 508              	.LVL49:
 509              	.LBE101:
 510              	.LBE100:
 511              	.LBB102:
 512              	.LBB103:
 513              		.loc 2 2595 0
 514 0112 1A68     		ldr	r2, [r3]
 515 0114 42F01002 		orr	r2, r2, #16
 516 0118 1A60     		str	r2, [r3]
 517              	.LVL50:
 518              	.LBE103:
 519              	.LBE102:
 520              	.LBB104:
 521              	.LBB105:
ARM GAS  /tmp/cc58ZD3F.s 			page 103


 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 522              		.loc 2 503 0
 523 011a 1A68     		ldr	r2, [r3]
 524 011c 42F00102 		orr	r2, r2, #1
 525 0120 1A60     		str	r2, [r3]
 526              	.LVL51:
 527              	.LBE105:
 528              	.LBE104:
 529              	.LBB106:
 530              	.LBB107:
 531              		.loc 3 2333 0
 532 0122 6369     		ldr	r3, [r4, #20]
 533 0124 43F04003 		orr	r3, r3, #64
 534 0128 6361     		str	r3, [r4, #20]
 535              	.LVL52:
 536              	.LBE107:
 537              	.LBE106:
 538              	.LBB108:
 539              	.LBB109:
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 540              		.loc 3 2041 0
 541 012a E368     		ldr	r3, [r4, #12]
 542 012c 43F01003 		orr	r3, r3, #16
 543 0130 E360     		str	r3, [r4, #12]
 544              	.LVL53:
 545              	.LBE109:
 546              	.LBE108:
 547              	.LBB110:
 548              	.LBB111:
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 549              		.loc 3 427 0
 550 0132 E368     		ldr	r3, [r4, #12]
 551 0134 43F40053 		orr	r3, r3, #8192
 552 0138 E360     		str	r3, [r4, #12]
 553              	.LVL54:
 554              	.LBE111:
 555              	.LBE110:
 134:Src/main.c    ****   
 556              		.loc 1 134 0
 557 013a FFF7FEFF 		bl	PI_Init
 558              	.LVL55:
 140:Src/main.c    ****   PI_Start();
 559              		.loc 1 140 0
 560 013e FFF7FEFF 		bl	wait_start
 561              	.LVL56:
 141:Src/main.c    **** 
 562              		.loc 1 141 0
 563 0142 FFF7FEFF 		bl	PI_Start
 564              	.LVL57:
 143:Src/main.c    ****   PI_Asser_Test();
 565              		.loc 1 143 0
 566 0146 4FF4FA60 		mov	r0, #2000
 567 014a FFF7FEFF 		bl	HAL_Delay
 568              	.LVL58:
 144:Src/main.c    ****   
 569              		.loc 1 144 0
 570 014e FFF7FEFF 		bl	PI_Asser_Test
ARM GAS  /tmp/cc58ZD3F.s 			page 104


 571              	.LVL59:
 199:Src/main.c    ****   
 572              		.loc 1 199 0
 573 0152 5222     		movs	r2, #82
 574 0154 2A49     		ldr	r1, .L19+48
 575 0156 0EA8     		add	r0, sp, #56
 576 0158 FFF7FEFF 		bl	ToF_Init_Struct
 577              	.LVL60:
 203:Src/main.c    ****       break;
 578              		.loc 1 203 0
 579 015c 0EA8     		add	r0, sp, #56
 580 015e FFF7FEFF 		bl	ToF_Poke
 581              	.LVL61:
 582 0162 B0F1FF3F 		cmp	r0, #-1
 583 0166 25D0     		beq	.L15
 207:Src/main.c    ****       break;
 584              		.loc 1 207 0
 585 0168 5221     		movs	r1, #82
 586 016a 0EA8     		add	r0, sp, #56
 587 016c FFF7FEFF 		bl	ToF_Set_Address
 588              	.LVL62:
 589 0170 B0F1FF3F 		cmp	r0, #-1
 590 0174 1ED0     		beq	.L15
 211:Src/main.c    ****       break;
 591              		.loc 1 211 0
 592 0176 0EA8     		add	r0, sp, #56
 593 0178 FFF7FEFF 		bl	ToF_Init_Device
 594              	.LVL63:
 595 017c B0F1FF3F 		cmp	r0, #-1
 596 0180 18D0     		beq	.L15
 215:Src/main.c    **** 
 597              		.loc 1 215 0
 598 0182 4FF48043 		mov	r3, #16384
 599 0186 0A93     		str	r3, [sp, #40]
 600 0188 4FF49013 		mov	r3, #1179648
 601 018c 0B93     		str	r3, [sp, #44]
 602 018e 48F2E803 		movw	r3, #33000
 603 0192 0C93     		str	r3, [sp, #48]
 604 0194 0E23     		movs	r3, #14
 605 0196 8DF83430 		strb	r3, [sp, #52]
 606 019a 0A23     		movs	r3, #10
 607 019c 8DF83530 		strb	r3, [sp, #53]
 218:Src/main.c    ****   }while(0);
 608              		.loc 1 218 0
 609 01a0 07A9     		add	r1, sp, #28
 610 01a2 0EA8     		add	r0, sp, #56
 611 01a4 FFF7FEFF 		bl	ToF_Configure_Device
 612              	.LVL64:
 613 01a8 04E0     		b	.L15
 614              	.L16:
 230:Src/main.c    ****     }
 615              		.loc 1 230 0
 616 01aa 0022     		movs	r2, #0
 617 01ac 2021     		movs	r1, #32
 618 01ae 1548     		ldr	r0, .L19+52
 619 01b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 620              	.LVL65:
ARM GAS  /tmp/cc58ZD3F.s 			page 105


 621              	.L15:
 224:Src/main.c    ****     if(tof_data.RangeStatus == 0){
 622              		.loc 1 224 0
 623 01b4 6946     		mov	r1, sp
 624 01b6 0EA8     		add	r0, sp, #56
 625 01b8 FFF7FEFF 		bl	ToF_Perform_Measurement
 626              	.LVL66:
 225:Src/main.c    ****       //tof_dev.LeakyRange (mm)
 627              		.loc 1 225 0
 628 01bc 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 629 01c0 002B     		cmp	r3, #0
 630 01c2 F2D1     		bne	.L16
 227:Src/main.c    ****     }else{
 631              		.loc 1 227 0
 632 01c4 0122     		movs	r2, #1
 633 01c6 2021     		movs	r1, #32
 634 01c8 0E48     		ldr	r0, .L19+52
 635 01ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 636              	.LVL67:
 637 01ce F1E7     		b	.L15
 638              	.L20:
 639              		.align	2
 640              	.L19:
 641 01d0 00000000 		.word	HAL_GetTick
 642 01d4 00000000 		.word	RP_UART_Transmit
 643 01d8 00100140 		.word	1073811456
 644 01dc 00000000 		.word	pi_iface
 645 01e0 40640240 		.word	1073898560
 646 01e4 04100140 		.word	1073811460
 647 01e8 00000000 		.word	pos_iface
 648 01ec 88600240 		.word	1073897608
 649 01f0 04440040 		.word	1073759236
 650 01f4 00000000 		.word	z_iface
 651 01f8 28640240 		.word	1073898536
 652 01fc 04140140 		.word	1073812484
 653 0200 00000000 		.word	hi2c3
 654 0204 00000240 		.word	1073872896
 655              		.cfi_endproc
 656              	.LFE679:
 658              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 659              		.align	2
 660              	.LC0:
 661 0000 5372632F 		.ascii	"Src/main.c\000"
 661      6D61696E 
 661      2E6300
 662              		.text
 663              	.Letext0:
 664              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 665              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 666              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 667              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 668              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 669              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 670              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 671              		.file 11 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 672              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 673              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  /tmp/cc58ZD3F.s 			page 106


 674              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 675              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 676              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 677              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 678              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 679              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 680              		.file 20 "Inc/i2c.h"
 681              		.file 21 "Inc/crc_16.h"
 682              		.file 22 "Inc/robotronik_protocol.h"
 683              		.file 23 "Inc/usart.h"
 684              		.file 24 "/usr/arm-none-eabi/include/stdlib.h"
 685              		.file 25 "Inc/system.h"
 686              		.file 26 "Inc/tim.h"
 687              		.file 27 "Drivers/VL53L0X/API/vl53l0x_types.h"
 688              		.file 28 "Drivers/VL53L0X/API/vl53l0x_device.h"
 689              		.file 29 "Drivers/VL53L0X/API/vl53l0x_def.h"
 690              		.file 30 "Drivers/VL53L0X/Platform/vl53l0x_platform.h"
 691              		.file 31 "Inc/tof.h"
 692              		.file 32 "Inc/pi_client.h"
 693              		.file 33 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 694              		.file 34 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 695              		.file 35 "Inc/gpio.h"
 696              		.file 36 "Inc/dma.h"
ARM GAS  /tmp/cc58ZD3F.s 			page 107


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc58ZD3F.s:18     .text.HardFault_Handler:0000000000000000 $t
     /tmp/cc58ZD3F.s:25     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cc58ZD3F.s:49     .text._Error_Handler:0000000000000000 $t
     /tmp/cc58ZD3F.s:56     .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc58ZD3F.s:71     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc58ZD3F.s:78     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc58ZD3F.s:208    .text.SystemClock_Config:00000000000000b8 $d
     /tmp/cc58ZD3F.s:216    .text.main:0000000000000000 $t
     /tmp/cc58ZD3F.s:223    .text.main:0000000000000000 main
     /tmp/cc58ZD3F.s:641    .text.main:00000000000001d0 $d
     /tmp/cc58ZD3F.s:659    .rodata.SystemClock_Config.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
PI_Error
hlt
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_I2C1_Init
MX_I2C3_Init
MX_USART1_UART_Init
MX_USART2_UART_Init
MX_USART6_UART_Init
MX_TIM1_Init
MX_TIM2_Init
RP_Init_Interface
PI_Init
wait_start
PI_Start
HAL_Delay
PI_Asser_Test
ToF_Init_Struct
ToF_Poke
ToF_Set_Address
ToF_Init_Device
ToF_Configure_Device
HAL_GPIO_WritePin
ToF_Perform_Measurement
HAL_GetTick
RP_UART_Transmit
pi_iface
pos_iface
z_iface
hi2c3
