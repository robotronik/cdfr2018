ARM GAS  /tmp/cciP3Jzd.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Init_ToF,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	Init_ToF:
  25              	.LFB682:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/cciP3Jzd.s 			page 2


  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f4xx_hal.h"
  42:Src/main.c    **** #include "dma.h"
  43:Src/main.c    **** #include "i2c.h"
  44:Src/main.c    **** #include "tim.h"
  45:Src/main.c    **** #include "usart.h"
  46:Src/main.c    **** #include "gpio.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE BEGIN Includes */
  49:Src/main.c    **** #include "system.h"
  50:Src/main.c    **** #include "pi_client.h"
  51:Src/main.c    **** #include "tof.h"
  52:Src/main.c    **** #include <stdio.h>
  53:Src/main.c    **** #include "strategy.h"
  54:Src/main.c    **** #include "map.h"
  55:Src/main.c    **** #include "position_client.h"
  56:Src/main.c    **** #include "z_client.h"
  57:Src/main.c    **** #include "gas.h"
  58:Src/main.c    **** #include "build.h"
  59:Src/main.c    **** #include "obstacle.h"
  60:Src/main.c    **** /* USER CODE END Includes */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE BEGIN PV */
  65:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PV */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void SystemClock_Config(void);
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN PFP */
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END PFP */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN 0 */
  78:Src/main.c    **** 
  79:Src/main.c    **** ToF_Handler tof[NB_TOF];
  80:Src/main.c    **** 
  81:Src/main.c    **** static int Init_ToF(ToF_Handler *htof, uint8_t i2c_addr, GPIO_TypeDef *xshut_port, uint32_t xshut_p
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE END 0 */
  84:Src/main.c    **** 
  85:Src/main.c    **** /**
  86:Src/main.c    ****   * @brief  The application entry point.
  87:Src/main.c    ****   *
  88:Src/main.c    ****   * @retval None
  89:Src/main.c    ****   */
ARM GAS  /tmp/cciP3Jzd.s 			page 3


  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  92:Src/main.c    ****   /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****   HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Configure the system clock */
 106:Src/main.c    ****   SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Initialize all configured peripherals */
 113:Src/main.c    ****   MX_GPIO_Init();
 114:Src/main.c    ****   MX_DMA_Init();
 115:Src/main.c    ****   MX_I2C1_Init();
 116:Src/main.c    ****   MX_I2C3_Init();
 117:Src/main.c    ****   MX_USART1_UART_Init();
 118:Src/main.c    ****   MX_USART2_UART_Init();
 119:Src/main.c    ****   MX_USART6_UART_Init();
 120:Src/main.c    ****   MX_TIM2_Init();
 121:Src/main.c    ****   MX_TIM3_Init();
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   //==================================================//
 125:Src/main.c    ****   //            ToF Initialisation                    //
 126:Src/main.c    ****   //==================================================//
 127:Src/main.c    ****   //Wait for the devices to reset
 128:Src/main.c    ****   HAL_Delay(TOF_DELAY);
 129:Src/main.c    **** 
 130:Src/main.c    ****   //Init the time of flight sensors
 131:Src/main.c    ****   Init_ToF(&tof[TOF_FRONT_LEFT], 0x54, TOF_FL_RESET_GPIO_Port, TOF_FL_RESET_Pin);
 132:Src/main.c    ****   Init_ToF(&tof[TOF_FRONT_RIGHT], 0x56, TOF_FR_RESET_GPIO_Port, TOF_FR_RESET_Pin);
 133:Src/main.c    ****   Init_ToF(&tof[TOF_REAR_LEFT], 0x58, TOF_RL_RESET_GPIO_Port, TOF_RL_RESET_Pin);
 134:Src/main.c    ****   Init_ToF(&tof[TOF_REAR_RIGHT], 0x60, TOF_RR_RESET_GPIO_Port, TOF_RR_RESET_Pin);
 135:Src/main.c    ****   
 136:Src/main.c    ****   //==================================================//
 137:Src/main.c    ****   //           UART Protocol Init                     //
 138:Src/main.c    ****   //==================================================//
 139:Src/main.c    **** 
 140:Src/main.c    ****   //Raspberry
 141:Src/main.c    ****   RP_Init_Interface(&pi_iface, USART1, RP_UART_Transmit, HAL_GetTick);
 142:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_2, USART1, pi_iface);
 143:Src/main.c    **** 
 144:Src/main.c    ****   //Position
 145:Src/main.c    ****   RP_Init_Interface(&pos_iface, USART2, RP_UART_Transmit, HAL_GetTick);
 146:Src/main.c    ****   RP_INIT_UART_DMA(DMA1, LL_DMA_STREAM_5, USART2, pos_iface);
ARM GAS  /tmp/cciP3Jzd.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    ****   //Z-Axis
 149:Src/main.c    ****   RP_Init_Interface(&z_iface, USART6, RP_UART_Transmit, HAL_GetTick);
 150:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_1, USART6, z_iface);
 151:Src/main.c    **** 
 152:Src/main.c    ****   //==================================================//
 153:Src/main.c    ****   //           Remote Call Client Init                //
 154:Src/main.c    ****   //==================================================//
 155:Src/main.c    ****   PI_Init();
 156:Src/main.c    ****   Position_Init();
 157:Src/main.c    ****   
 158:Src/main.c    ****   Pos_Reset();
 159:Src/main.c    ****   Brake();
 160:Src/main.c    **** 
 161:Src/main.c    ****   Z_Init();
 162:Src/main.c    ****   Z_Reset();
 163:Src/main.c    **** 
 164:Src/main.c    ****   HAL_Delay(1000);
 165:Src/main.c    **** 
 166:Src/main.c    ****   
 167:Src/main.c    ****   //==================================================//
 168:Src/main.c    ****   //                 Wait Start                       //
 169:Src/main.c    ****   //==================================================//
 170:Src/main.c    ****   wait_start();
 171:Src/main.c    ****   switch(team){
 172:Src/main.c    ****   case GREEN_TEAM:
 173:Src/main.c    ****     PI_Log("Green team\n");
 174:Src/main.c    ****     break;
 175:Src/main.c    ****   case ORANGE_TEAM:
 176:Src/main.c    ****     PI_Log("Orange team\n");
 177:Src/main.c    ****     break;
 178:Src/main.c    ****   }
 179:Src/main.c    ****   PI_Start();
 180:Src/main.c    ****   
 181:Src/main.c    ****   Init_Strategy(team);
 182:Src/main.c    ****   Position_Init_Odometry();
 183:Src/main.c    **** 
 184:Src/main.c    ****   //Pos_Go_Forward(100, 25);
 185:Src/main.c    ****   //Rotate(me.angle -3.14/4);
 186:Src/main.c    ****   //HAL_Delay(5000);
 187:Src/main.c    ****   //Rotate(me.angle + 3.14/4);
 188:Src/main.c    ****   //Go_Straight(me.x + 25,  me.y, true, 0.1);
 189:Src/main.c    **** 
 190:Src/main.c    ****   /*int i;
 191:Src/main.c    ****   switch(team){
 192:Src/main.c    ****   case GREEN_TEAM:
 193:Src/main.c    ****     Pos_Go_Forward(100, 300);
 194:Src/main.c    ****     for(i = 0; i < 100; i++){
 195:Src/main.c    ****       HAL_Delay(100);
 196:Src/main.c    ****       if(!Can_Rotate()){
 197:Src/main.c    **** 	Brake();
 198:Src/main.c    ****       }
 199:Src/main.c    ****     }
 200:Src/main.c    ****     Rotate(-3.14/2);
 201:Src/main.c    ****     Pos_Go_Forward(100, 300);
 202:Src/main.c    ****     for(i = 0; i < 100; i++){
 203:Src/main.c    ****       HAL_Delay(100);
ARM GAS  /tmp/cciP3Jzd.s 			page 5


 204:Src/main.c    ****       if(!Can_Rotate()){
 205:Src/main.c    **** 	Brake();
 206:Src/main.c    ****       }
 207:Src/main.c    ****     }
 208:Src/main.c    ****     Pos_Go_Forward(100, -300);
 209:Src/main.c    ****     for(i = 0; i < 100; i++){
 210:Src/main.c    ****       HAL_Delay(100);
 211:Src/main.c    ****       if(!Can_Rotate()){
 212:Src/main.c    **** 	Brake();
 213:Src/main.c    ****       }
 214:Src/main.c    ****     }
 215:Src/main.c    ****     break;
 216:Src/main.c    ****   case ORANGE_TEAM:
 217:Src/main.c    ****     Pos_Go_Forward(100, 300);
 218:Src/main.c    ****     for(i = 0; i < 100; i++){
 219:Src/main.c    ****       HAL_Delay(100);
 220:Src/main.c    ****       if(!Can_Rotate()){
 221:Src/main.c    **** 	Brake();
 222:Src/main.c    ****       }
 223:Src/main.c    ****     }
 224:Src/main.c    ****     Rotate(3.14/2);
 225:Src/main.c    ****     Pos_Go_Forward(100, 300);
 226:Src/main.c    ****     for(i = 0; i < 100; i++){
 227:Src/main.c    ****       HAL_Delay(100);
 228:Src/main.c    ****       if(!Can_Rotate()){
 229:Src/main.c    **** 	Brake();
 230:Src/main.c    ****       }
 231:Src/main.c    ****     }
 232:Src/main.c    ****     Pos_Go_Forward(100, -300);
 233:Src/main.c    ****     for(i = 0; i < 100; i++){
 234:Src/main.c    ****       HAL_Delay(100);
 235:Src/main.c    ****       if(!Can_Rotate()){
 236:Src/main.c    **** 	Brake();
 237:Src/main.c    ****       }
 238:Src/main.c    ****     }
 239:Src/main.c    ****     break;
 240:Src/main.c    ****   }
 241:Src/main.c    ****   */
 242:Src/main.c    ****     
 243:Src/main.c    ****   Z_Arm_In();
 244:Src/main.c    ****   HAL_Delay(1000);
 245:Src/main.c    ****   Z_Arm_Out();
 246:Src/main.c    ****   HAL_Delay(1000);
 247:Src/main.c    ****   Z_Place();
 248:Src/main.c    ****   Z_State state;
 249:Src/main.c    ****   if(Z_Wait_State(&state) == -1){
 250:Src/main.c    ****     PI_Log("Z State error\n");
 251:Src/main.c    ****   }
 252:Src/main.c    ****   switch(state){
 253:Src/main.c    ****   case Z_SUCCESS:
 254:Src/main.c    ****     PI_Log("Z_SUCCESS\n");
 255:Src/main.c    ****     break;
 256:Src/main.c    ****   case Z_ERROR:
 257:Src/main.c    ****     PI_Log("Z_ERROR\n");
 258:Src/main.c    ****     break;
 259:Src/main.c    ****   }
 260:Src/main.c    ****   PI_Log("Z End\n");
ARM GAS  /tmp/cciP3Jzd.s 			page 6


 261:Src/main.c    ****   
 262:Src/main.c    ****   if(Pos_Get_Position() == -1){
 263:Src/main.c    ****     PI_Log("Pos get : pas de réponse.\n");
 264:Src/main.c    ****   }else{
 265:Src/main.c    ****     PI_Log("%u %u %f\n", me.x, me.y, me.angle);
 266:Src/main.c    ****   }
 267:Src/main.c    **** 
 268:Src/main.c    ****   
 269:Src/main.c    ****   
 270:Src/main.c    ****   //<homologation>
 271:Src/main.c    ****   //Go_Straight((t==GREEN_TEAM)?610:(AREA_WIDTH-610), 180-DIST_APPROACH-CUBE_SIZE, true, 0.2), Z_Pl
 272:Src/main.c    ****   //</homologation>
 273:Src/main.c    ****   
 274:Src/main.c    ****   //TODO : init strategy, odometry, ...
 275:Src/main.c    ****   
 276:Src/main.c    ****   /*
 277:Src/main.c    ****   Set_Construction_Plan(ORANGE, GREEN, BLUE);
 278:Src/main.c    ****   volatile uint32_t ticks = HAL_GetTick();
 279:Src/main.c    ****   Refresh_Map();//8ms
 280:Src/main.c    ****   Cell *start = &Get_Cell(me.x, me.y);
 281:Src/main.c    ****   int x_goal = MAP_WIDTH-3;
 282:Src/main.c    ****   int y_goal = MAP_HEIGHT-3;
 283:Src/main.c    ****   Cell *end = Compute_Path(start, &map[y_goal][x_goal]);//11ms
 284:Src/main.c    ****   Compute_Building_Strategy();//110ms
 285:Src/main.c    ****   ticks = HAL_GetTick() - ticks;
 286:Src/main.c    ****   HAL_Delay(ticks);
 287:Src/main.c    ****   */
 288:Src/main.c    **** 
 289:Src/main.c    ****   /* USER CODE END 2 */
 290:Src/main.c    **** 
 291:Src/main.c    ****   /* Infinite loop */
 292:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 293:Src/main.c    **** 
 294:Src/main.c    **** 
 295:Src/main.c    ****   //me.angle = 0;
 296:Src/main.c    ****   me.x = AREA_WIDTH/2;
 297:Src/main.c    ****   me.y = AREA_HEIGHT/2;
 298:Src/main.c    ****   while (1){
 299:Src/main.c    ****     Pos_Get_Position();
 300:Src/main.c    ****     /*__disable_irq();
 301:Src/main.c    ****     Print_Obstacles();
 302:Src/main.c    ****     PI_Log("\n\n");
 303:Src/main.c    ****     __enable_irq();*/
 304:Src/main.c    ****     //Print_ToF();
 305:Src/main.c    ****     PI_Log("%u %u %f\n", me.x, me.y, me.angle);
 306:Src/main.c    ****     HAL_Delay(500);
 307:Src/main.c    ****   /* USER CODE END WHILE */
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE BEGIN 3 */
 310:Src/main.c    ****     
 311:Src/main.c    ****   }
 312:Src/main.c    ****   /* USER CODE END 3 */
 313:Src/main.c    **** 
 314:Src/main.c    **** }
 315:Src/main.c    **** 
 316:Src/main.c    **** /**
 317:Src/main.c    ****   * @brief System Clock Configuration
ARM GAS  /tmp/cciP3Jzd.s 			page 7


 318:Src/main.c    ****   * @retval None
 319:Src/main.c    ****   */
 320:Src/main.c    **** void SystemClock_Config(void)
 321:Src/main.c    **** {
 322:Src/main.c    **** 
 323:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 324:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 325:Src/main.c    **** 
 326:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 327:Src/main.c    ****     */
 328:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 329:Src/main.c    **** 
 330:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 331:Src/main.c    **** 
 332:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 333:Src/main.c    ****     */
 334:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 335:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 336:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 341:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 342:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 343:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 344:Src/main.c    ****   {
 345:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 346:Src/main.c    ****   }
 347:Src/main.c    **** 
 348:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 349:Src/main.c    ****     */
 350:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 351:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 352:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 353:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 354:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 355:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 356:Src/main.c    **** 
 357:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 358:Src/main.c    ****   {
 359:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 360:Src/main.c    ****   }
 361:Src/main.c    **** 
 362:Src/main.c    ****     /**Configure the Systick interrupt time 
 363:Src/main.c    ****     */
 364:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 365:Src/main.c    **** 
 366:Src/main.c    ****     /**Configure the Systick 
 367:Src/main.c    ****     */
 368:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 369:Src/main.c    **** 
 370:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 371:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** /* USER CODE BEGIN 4 */
ARM GAS  /tmp/cciP3Jzd.s 			page 8


 375:Src/main.c    **** void HardFault_Handler(void){
 376:Src/main.c    ****   PI_Error();
 377:Src/main.c    ****   hlt();
 378:Src/main.c    **** }
 379:Src/main.c    **** 
 380:Src/main.c    **** static int Init_ToF(ToF_Handler *htof, uint8_t i2c_addr, GPIO_TypeDef *xshut_port, uint32_t xshut_p
  27              		.loc 1 380 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 48
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8DB0     		sub	sp, sp, #52
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 64
  41 0004 0446     		mov	r4, r0
  42 0006 0D46     		mov	r5, r1
 381:Src/main.c    ****   //You definitely don't want to know what we're doing
 382:Src/main.c    ****   //there. Seriously, don't do that. Please.
 383:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 384:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  43              		.loc 1 384 0
  44 0008 0321     		movs	r1, #3
  45              	.LVL1:
  46 000a 0891     		str	r1, [sp, #32]
 385:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  47              		.loc 1 385 0
  48 000c 0021     		movs	r1, #0
  49 000e 0991     		str	r1, [sp, #36]
 386:Src/main.c    ****   GPIO_InitStruct.Pin = xshut_pin;
  50              		.loc 1 386 0
  51 0010 0CA9     		add	r1, sp, #48
  52 0012 41F8143D 		str	r3, [r1, #-20]!
 387:Src/main.c    ****   
 388:Src/main.c    ****   HAL_GPIO_Init(xshut_port, &GPIO_InitStruct);
  53              		.loc 1 388 0
  54 0016 1046     		mov	r0, r2
  55              	.LVL2:
  56 0018 FFF7FEFF 		bl	HAL_GPIO_Init
  57              	.LVL3:
 389:Src/main.c    **** 
 390:Src/main.c    ****   //Wait for the chip to start
 391:Src/main.c    ****   HAL_Delay(TOF_DELAY);
  58              		.loc 1 391 0
  59 001c 0A20     		movs	r0, #10
  60 001e FFF7FEFF 		bl	HAL_Delay
  61              	.LVL4:
 392:Src/main.c    **** 
 393:Src/main.c    ****   //Init structure
 394:Src/main.c    ****   ToF_Init_Struct(htof, &hi2c3);
  62              		.loc 1 394 0
  63 0022 1B49     		ldr	r1, .L5
ARM GAS  /tmp/cciP3Jzd.s 			page 9


  64 0024 2046     		mov	r0, r4
  65 0026 FFF7FEFF 		bl	ToF_Init_Struct
  66              	.LVL5:
 395:Src/main.c    **** 
 396:Src/main.c    ****   ToF_Params params;
 397:Src/main.c    ****     
 398:Src/main.c    ****   //Check the initial address
 399:Src/main.c    ****   if(ToF_Poke(&htof->dev) == -1)
  67              		.loc 1 399 0
  68 002a 2046     		mov	r0, r4
  69 002c FFF7FEFF 		bl	ToF_Poke
  70              	.LVL6:
  71 0030 B0F1FF3F 		cmp	r0, #-1
  72 0034 2AD0     		beq	.L1
 400:Src/main.c    ****     return -1;
 401:Src/main.c    **** 
 402:Src/main.c    ****   //Set the new address
 403:Src/main.c    ****   if(ToF_Set_Address(&htof->dev, i2c_addr) == -1)
  73              		.loc 1 403 0
  74 0036 2946     		mov	r1, r5
  75 0038 2046     		mov	r0, r4
  76 003a FFF7FEFF 		bl	ToF_Set_Address
  77              	.LVL7:
  78 003e B0F1FF3F 		cmp	r0, #-1
  79 0042 23D0     		beq	.L1
 404:Src/main.c    ****     return -1;
 405:Src/main.c    ****     
 406:Src/main.c    ****   //Init the device
 407:Src/main.c    ****   if(ToF_Init_Device(&htof->dev) == -1)
  80              		.loc 1 407 0
  81 0044 2046     		mov	r0, r4
  82 0046 FFF7FEFF 		bl	ToF_Init_Device
  83              	.LVL8:
  84 004a B0F1FF3F 		cmp	r0, #-1
  85 004e 1DD0     		beq	.L1
 408:Src/main.c    ****     return -1;
 409:Src/main.c    **** 
 410:Src/main.c    ****   //Long range config
 411:Src/main.c    ****   TOF_LONG_RANGE_CONFIG(params);
  86              		.loc 1 411 0
  87 0050 4FF48043 		mov	r3, #16384
  88 0054 0393     		str	r3, [sp, #12]
  89 0056 4FF49013 		mov	r3, #1179648
  90 005a 0493     		str	r3, [sp, #16]
  91 005c 48F2E803 		movw	r3, #33000
  92 0060 0593     		str	r3, [sp, #20]
  93 0062 0E23     		movs	r3, #14
  94 0064 8DF81830 		strb	r3, [sp, #24]
  95 0068 0A23     		movs	r3, #10
  96 006a 8DF81930 		strb	r3, [sp, #25]
 412:Src/main.c    **** 
 413:Src/main.c    ****   //Configure the device
 414:Src/main.c    ****   if(ToF_Configure_Device(&htof->dev, &params, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING)== -1)
  97              		.loc 1 414 0
  98 006e 0122     		movs	r2, #1
  99 0070 6946     		mov	r1, sp
 100 0072 2046     		mov	r0, r4
ARM GAS  /tmp/cciP3Jzd.s 			page 10


 101 0074 FFF7FEFF 		bl	ToF_Configure_Device
 102              	.LVL9:
 103 0078 B0F1FF3F 		cmp	r0, #-1
 104 007c 06D0     		beq	.L1
 415:Src/main.c    ****     return -1;
 416:Src/main.c    **** 
 417:Src/main.c    ****   //Start the device
 418:Src/main.c    ****   if(VL53L0X_StartMeasurement(&htof->dev) == -1)
 105              		.loc 1 418 0
 106 007e 2046     		mov	r0, r4
 107 0080 FFF7FEFF 		bl	VL53L0X_StartMeasurement
 108              	.LVL10:
 109 0084 B0F1FF3F 		cmp	r0, #-1
 110 0088 00D0     		beq	.L1
 419:Src/main.c    ****     return -1;
 420:Src/main.c    ****     
 421:Src/main.c    ****   return 0;
 111              		.loc 1 421 0
 112 008a 0020     		movs	r0, #0
 113              	.L1:
 422:Src/main.c    **** }
 114              		.loc 1 422 0
 115 008c 0DB0     		add	sp, sp, #52
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 12
 118              		@ sp needed
 119 008e 30BD     		pop	{r4, r5, pc}
 120              	.LVL11:
 121              	.L6:
 122              		.align	2
 123              	.L5:
 124 0090 00000000 		.word	hi2c3
 125              		.cfi_endproc
 126              	.LFE682:
 128              		.section	.text.HardFault_Handler,"ax",%progbits
 129              		.align	1
 130              		.global	HardFault_Handler
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	HardFault_Handler:
 137              	.LFB681:
 375:Src/main.c    ****   PI_Error();
 138              		.loc 1 375 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 08B5     		push	{r3, lr}
 143              	.LCFI3:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 3, -8
 146              		.cfi_offset 14, -4
 376:Src/main.c    ****   hlt();
 147              		.loc 1 376 0
 148 0002 FFF7FEFF 		bl	PI_Error
 149              	.LVL12:
ARM GAS  /tmp/cciP3Jzd.s 			page 11


 377:Src/main.c    **** }
 150              		.loc 1 377 0
 151 0006 FFF7FEFF 		bl	hlt
 152              	.LVL13:
 378:Src/main.c    **** 
 153              		.loc 1 378 0
 154 000a 08BD     		pop	{r3, pc}
 155              		.cfi_endproc
 156              	.LFE681:
 158              		.section	.text._Error_Handler,"ax",%progbits
 159              		.align	1
 160              		.global	_Error_Handler
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu fpv4-sp-d16
 166              	_Error_Handler:
 167              	.LFB683:
 423:Src/main.c    **** /* USER CODE END 4 */
 424:Src/main.c    **** 
 425:Src/main.c    **** /**
 426:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 427:Src/main.c    ****   * @param  file: The file name as string.
 428:Src/main.c    ****   * @param  line: The line in file as a number.
 429:Src/main.c    ****   * @retval None
 430:Src/main.c    ****   */
 431:Src/main.c    **** void _Error_Handler(char *file, int line)
 432:Src/main.c    **** {
 168              		.loc 1 432 0
 169              		.cfi_startproc
 170              		@ Volatile: function does not return.
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174              	.LVL14:
 175              	.L10:
 176 0000 FEE7     		b	.L10
 177              		.cfi_endproc
 178              	.LFE683:
 180              		.section	.text.SystemClock_Config,"ax",%progbits
 181              		.align	1
 182              		.global	SystemClock_Config
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	SystemClock_Config:
 189              	.LFB680:
 321:Src/main.c    **** 
 190              		.loc 1 321 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 80
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 321:Src/main.c    **** 
 194              		.loc 1 321 0
 195 0000 00B5     		push	{lr}
 196              	.LCFI4:
ARM GAS  /tmp/cciP3Jzd.s 			page 12


 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 14, -4
 199 0002 95B0     		sub	sp, sp, #84
 200              	.LCFI5:
 201              		.cfi_def_cfa_offset 88
 202              	.LBB56:
 328:Src/main.c    **** 
 203              		.loc 1 328 0
 204 0004 0022     		movs	r2, #0
 205 0006 0192     		str	r2, [sp, #4]
 206 0008 2B4B     		ldr	r3, .L17
 207 000a 196C     		ldr	r1, [r3, #64]
 208 000c 41F08051 		orr	r1, r1, #268435456
 209 0010 1964     		str	r1, [r3, #64]
 210 0012 1B6C     		ldr	r3, [r3, #64]
 211 0014 03F08053 		and	r3, r3, #268435456
 212 0018 0193     		str	r3, [sp, #4]
 213 001a 019B     		ldr	r3, [sp, #4]
 214              	.LBE56:
 215              	.LBB57:
 330:Src/main.c    **** 
 216              		.loc 1 330 0
 217 001c 0292     		str	r2, [sp, #8]
 218 001e 2749     		ldr	r1, .L17+4
 219 0020 0B68     		ldr	r3, [r1]
 220 0022 23F44043 		bic	r3, r3, #49152
 221 0026 43F40043 		orr	r3, r3, #32768
 222 002a 0B60     		str	r3, [r1]
 223 002c 0B68     		ldr	r3, [r1]
 224 002e 03F44043 		and	r3, r3, #49152
 225 0032 0293     		str	r3, [sp, #8]
 226 0034 029B     		ldr	r3, [sp, #8]
 227              	.LBE57:
 334:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 228              		.loc 1 334 0
 229 0036 0221     		movs	r1, #2
 230 0038 0891     		str	r1, [sp, #32]
 335:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 231              		.loc 1 335 0
 232 003a 0123     		movs	r3, #1
 233 003c 0B93     		str	r3, [sp, #44]
 336:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 234              		.loc 1 336 0
 235 003e 1023     		movs	r3, #16
 236 0040 0C93     		str	r3, [sp, #48]
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 237              		.loc 1 337 0
 238 0042 0E91     		str	r1, [sp, #56]
 338:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 239              		.loc 1 338 0
 240 0044 0F92     		str	r2, [sp, #60]
 339:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 241              		.loc 1 339 0
 242 0046 1093     		str	r3, [sp, #64]
 340:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 243              		.loc 1 340 0
 244 0048 4FF4A873 		mov	r3, #336
ARM GAS  /tmp/cciP3Jzd.s 			page 13


 245 004c 1193     		str	r3, [sp, #68]
 341:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 246              		.loc 1 341 0
 247 004e 0423     		movs	r3, #4
 248 0050 1293     		str	r3, [sp, #72]
 342:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 249              		.loc 1 342 0
 250 0052 0723     		movs	r3, #7
 251 0054 1393     		str	r3, [sp, #76]
 343:Src/main.c    ****   {
 252              		.loc 1 343 0
 253 0056 08A8     		add	r0, sp, #32
 254 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 255              	.LVL15:
 256 005c 08BB     		cbnz	r0, .L15
 350:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 257              		.loc 1 350 0
 258 005e 0F23     		movs	r3, #15
 259 0060 0393     		str	r3, [sp, #12]
 352:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 260              		.loc 1 352 0
 261 0062 0221     		movs	r1, #2
 262 0064 0491     		str	r1, [sp, #16]
 353:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 263              		.loc 1 353 0
 264 0066 0023     		movs	r3, #0
 265 0068 0593     		str	r3, [sp, #20]
 354:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 266              		.loc 1 354 0
 267 006a 4FF48052 		mov	r2, #4096
 268 006e 0692     		str	r2, [sp, #24]
 355:Src/main.c    **** 
 269              		.loc 1 355 0
 270 0070 0793     		str	r3, [sp, #28]
 357:Src/main.c    ****   {
 271              		.loc 1 357 0
 272 0072 03A8     		add	r0, sp, #12
 273 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 274              	.LVL16:
 275 0078 C0B9     		cbnz	r0, .L16
 364:Src/main.c    **** 
 276              		.loc 1 364 0
 277 007a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 278              	.LVL17:
 279 007e 104B     		ldr	r3, .L17+8
 280 0080 A3FB0030 		umull	r3, r0, r3, r0
 281 0084 8009     		lsrs	r0, r0, #6
 282 0086 FFF7FEFF 		bl	HAL_SYSTICK_Config
 283              	.LVL18:
 368:Src/main.c    **** 
 284              		.loc 1 368 0
 285 008a 0420     		movs	r0, #4
 286 008c FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 287              	.LVL19:
 371:Src/main.c    **** }
 288              		.loc 1 371 0
 289 0090 0022     		movs	r2, #0
ARM GAS  /tmp/cciP3Jzd.s 			page 14


 290 0092 1146     		mov	r1, r2
 291 0094 4FF0FF30 		mov	r0, #-1
 292 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 293              	.LVL20:
 372:Src/main.c    **** 
 294              		.loc 1 372 0
 295 009c 15B0     		add	sp, sp, #84
 296              	.LCFI6:
 297              		.cfi_remember_state
 298              		.cfi_def_cfa_offset 4
 299              		@ sp needed
 300 009e 5DF804FB 		ldr	pc, [sp], #4
 301              	.L15:
 302              	.LCFI7:
 303              		.cfi_restore_state
 345:Src/main.c    ****   }
 304              		.loc 1 345 0
 305 00a2 40F25911 		movw	r1, #345
 306 00a6 0748     		ldr	r0, .L17+12
 307 00a8 FFF7FEFF 		bl	_Error_Handler
 308              	.LVL21:
 309              	.L16:
 359:Src/main.c    ****   }
 310              		.loc 1 359 0
 311 00ac 40F26711 		movw	r1, #359
 312 00b0 0448     		ldr	r0, .L17+12
 313 00b2 FFF7FEFF 		bl	_Error_Handler
 314              	.LVL22:
 315              	.L18:
 316 00b6 00BF     		.align	2
 317              	.L17:
 318 00b8 00380240 		.word	1073887232
 319 00bc 00700040 		.word	1073770496
 320 00c0 D34D6210 		.word	274877907
 321 00c4 00000000 		.word	.LC0
 322              		.cfi_endproc
 323              	.LFE680:
 325              		.global	__aeabi_f2d
 326              		.section	.text.main,"ax",%progbits
 327              		.align	1
 328              		.global	main
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	main:
 335              	.LFB679:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 336              		.loc 1 91 0
 337              		.cfi_startproc
 338              		@ Volatile: function does not return.
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 80B5     		push	{r7, lr}
 342              	.LCFI8:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 7, -8
ARM GAS  /tmp/cciP3Jzd.s 			page 15


 345              		.cfi_offset 14, -4
 346 0002 84B0     		sub	sp, sp, #16
 347              	.LCFI9:
 348              		.cfi_def_cfa_offset 24
  99:Src/main.c    **** 
 349              		.loc 1 99 0
 350 0004 FFF7FEFF 		bl	HAL_Init
 351              	.LVL23:
 106:Src/main.c    **** 
 352              		.loc 1 106 0
 353 0008 FFF7FEFF 		bl	SystemClock_Config
 354              	.LVL24:
 113:Src/main.c    ****   MX_DMA_Init();
 355              		.loc 1 113 0
 356 000c FFF7FEFF 		bl	MX_GPIO_Init
 357              	.LVL25:
 114:Src/main.c    ****   MX_I2C1_Init();
 358              		.loc 1 114 0
 359 0010 FFF7FEFF 		bl	MX_DMA_Init
 360              	.LVL26:
 115:Src/main.c    ****   MX_I2C3_Init();
 361              		.loc 1 115 0
 362 0014 FFF7FEFF 		bl	MX_I2C1_Init
 363              	.LVL27:
 116:Src/main.c    ****   MX_USART1_UART_Init();
 364              		.loc 1 116 0
 365 0018 FFF7FEFF 		bl	MX_I2C3_Init
 366              	.LVL28:
 117:Src/main.c    ****   MX_USART2_UART_Init();
 367              		.loc 1 117 0
 368 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 369              	.LVL29:
 118:Src/main.c    ****   MX_USART6_UART_Init();
 370              		.loc 1 118 0
 371 0020 FFF7FEFF 		bl	MX_USART2_UART_Init
 372              	.LVL30:
 119:Src/main.c    ****   MX_TIM2_Init();
 373              		.loc 1 119 0
 374 0024 FFF7FEFF 		bl	MX_USART6_UART_Init
 375              	.LVL31:
 120:Src/main.c    ****   MX_TIM3_Init();
 376              		.loc 1 120 0
 377 0028 FFF7FEFF 		bl	MX_TIM2_Init
 378              	.LVL32:
 121:Src/main.c    ****   /* USER CODE BEGIN 2 */
 379              		.loc 1 121 0
 380 002c FFF7FEFF 		bl	MX_TIM3_Init
 381              	.LVL33:
 128:Src/main.c    **** 
 382              		.loc 1 128 0
 383 0030 0A20     		movs	r0, #10
 384 0032 FFF7FEFF 		bl	HAL_Delay
 385              	.LVL34:
 131:Src/main.c    ****   Init_ToF(&tof[TOF_FRONT_RIGHT], 0x56, TOF_FR_RESET_GPIO_Port, TOF_FR_RESET_Pin);
 386              		.loc 1 131 0
 387 0036 934D     		ldr	r5, .L33
 388 0038 934C     		ldr	r4, .L33+4
ARM GAS  /tmp/cciP3Jzd.s 			page 16


 389 003a 0823     		movs	r3, #8
 390 003c 2A46     		mov	r2, r5
 391 003e 5421     		movs	r1, #84
 392 0040 2046     		mov	r0, r4
 393 0042 FFF7FEFF 		bl	Init_ToF
 394              	.LVL35:
 132:Src/main.c    ****   Init_ToF(&tof[TOF_REAR_LEFT], 0x58, TOF_RL_RESET_GPIO_Port, TOF_RL_RESET_Pin);
 395              		.loc 1 132 0
 396 0046 1023     		movs	r3, #16
 397 0048 2A46     		mov	r2, r5
 398 004a 5621     		movs	r1, #86
 399 004c 04F5D670 		add	r0, r4, #428
 400 0050 FFF7FEFF 		bl	Init_ToF
 401              	.LVL36:
 133:Src/main.c    ****   Init_ToF(&tof[TOF_REAR_RIGHT], 0x60, TOF_RR_RESET_GPIO_Port, TOF_RR_RESET_Pin);
 402              		.loc 1 133 0
 403 0054 4FF40063 		mov	r3, #2048
 404 0058 2A46     		mov	r2, r5
 405 005a 5821     		movs	r1, #88
 406 005c 04F55670 		add	r0, r4, #856
 407 0060 FFF7FEFF 		bl	Init_ToF
 408              	.LVL37:
 134:Src/main.c    ****   
 409              		.loc 1 134 0
 410 0064 4FF40073 		mov	r3, #512
 411 0068 2A46     		mov	r2, r5
 412 006a 6021     		movs	r1, #96
 413 006c 04F20450 		addw	r0, r4, #1284
 414 0070 FFF7FEFF 		bl	Init_ToF
 415              	.LVL38:
 141:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_2, USART1, pi_iface);
 416              		.loc 1 141 0
 417 0074 854E     		ldr	r6, .L33+8
 418 0076 864D     		ldr	r5, .L33+12
 419 0078 864C     		ldr	r4, .L33+16
 420 007a 874F     		ldr	r7, .L33+20
 421 007c 3346     		mov	r3, r6
 422 007e 2A46     		mov	r2, r5
 423 0080 2146     		mov	r1, r4
 424 0082 3846     		mov	r0, r7
 425 0084 FFF7FEFF 		bl	RP_Init_Interface
 426              	.LVL39:
 142:Src/main.c    **** 
 427              		.loc 1 142 0
 428 0088 0837     		adds	r7, r7, #8
 429              	.LVL40:
 430              	.LBB58:
 431              	.LBB59:
 432              		.file 2 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
   1:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @file    stm32f4xx_ll_dma.h
   4:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @attention
   8:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
ARM GAS  /tmp/cciP3Jzd.s 			page 17


   9:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  10:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
  11:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *      without specific prior written permission.
  21:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
  22:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *
  33:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   ******************************************************************************
  34:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  35:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  36:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #ifndef __STM32F4xx_LL_DMA_H
  38:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __STM32F4xx_LL_DMA_H
  39:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  40:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #ifdef __cplusplus
  41:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** extern "C" {
  42:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #endif
  43:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  44:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #include "stm32f4xx.h"
  46:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  47:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @addtogroup STM32F4xx_LL_Driver
  48:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  49:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  50:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  51:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  52:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  53:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  54:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  55:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  56:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  57:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  60:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  61:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  62:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Array used to get the DMA stream register offset versus stream index LL_DMA_STREAM_x */
  63:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** static const uint8_t STREAM_OFFSET_TAB[] =
  64:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
  65:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream0_BASE - DMA1_BASE),
ARM GAS  /tmp/cciP3Jzd.s 			page 18


  66:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream1_BASE - DMA1_BASE),
  67:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream2_BASE - DMA1_BASE),
  68:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream3_BASE - DMA1_BASE),
  69:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream4_BASE - DMA1_BASE),
  70:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream5_BASE - DMA1_BASE),
  71:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream6_BASE - DMA1_BASE),
  72:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   (uint8_t)(DMA1_Stream7_BASE - DMA1_BASE)
  73:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** };
  74:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  75:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
  76:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
  77:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  78:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  79:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
  80:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Constants DMA Private Constants
  81:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  82:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  83:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
  84:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
  85:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  86:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  87:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  88:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  89:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  90:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  91:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  92:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
  93:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
  94:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** typedef struct
  95:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
  96:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  97:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
  98:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
  99:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
 107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The circular buffer mode cannot be used if the memory
 115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                               data transfer direction is configured on the selected
 116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         is incremented or not.
 121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 19


 123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         is incremented or not.
 127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Channel;                /*!< Specifies the peripheral channel.
 151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_CHANNEL
 152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         
 160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t FIFOMode;               /*!< Specifies if the FIFO mode or Direct mode will be used for 
 161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_FIFOMODE
 162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The Direct mode (FIFO mode disabled) cannot be used i
 163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         memory-to-memory data transfer is configured on the selecte
 164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t FIFOThreshold;          /*!< Specifies the FIFO threshold level.
 168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_FIFOTHRESHO
 169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t MemBurst;               /*!< Specifies the Burst transfer configuration for the memory t
 173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         It specifies the amount of data to be transferred in a sing
 174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         transaction.
 175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MBURST 
 176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The burst mode is possible only if the address Increm
 177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 20


 180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   uint32_t PeriphBurst;            /*!< Specifies the Burst transfer configuration for the peripher
 181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         It specifies the amount of data to be transferred in a sing
 182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         transaction. 
 183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PBURST
 184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         @note The burst mode is possible only if the address Increm
 185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_STREAM STREAM
 199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_0                   0x00000000U
 202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_1                   0x00000001U
 203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_2                   0x00000002U
 204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_3                   0x00000003U
 205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_4                   0x00000004U
 206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_5                   0x00000005U
 207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_6                   0x00000006U
 208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_7                   0x00000007U
 209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_STREAM_ALL                 0xFFFF0000U
 210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION DIRECTION
 215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U               /*!< Peripheral to memory direc
 218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_SxCR_DIR_0            /*!< Memory to peripheral direc
 219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_SxCR_DIR_1            /*!< Memory to memory direction
 220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE MODE
 225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U               /*!< Normal Mode               
 228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_SxCR_CIRC             /*!< Circular Mode             
 229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MODE_PFCTRL                DMA_SxCR_PFCTRL           /*!< Peripheral flow control mo
 230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DOUBLEBUFFER_MODE DOUBLEBUFFER MODE
 235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
ARM GAS  /tmp/cciP3Jzd.s 			page 21


 237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DOUBLEBUFFER_MODE_DISABLE  0x00000000U               /*!< Disable double buffering m
 238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_DOUBLEBUFFER_MODE_ENABLE   DMA_SxCR_DBM              /*!< Enable double buffering mo
 239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH PERIPH
 244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U               /*!< Peripheral increment mode 
 247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_SxCR_PINC             /*!< Peripheral increment mode 
 248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY MEMORY
 253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U               /*!< Memory increment mode Disa
 256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_SxCR_MINC             /*!< Memory increment mode Enab
 257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN PDATAALIGN
 262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U               /*!< Peripheral data alignment 
 265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_SxCR_PSIZE_0          /*!< Peripheral data alignment 
 266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_SxCR_PSIZE_1          /*!< Peripheral data alignment 
 267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN MDATAALIGN
 272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U               /*!< Memory data alignment : By
 275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_SxCR_MSIZE_0          /*!< Memory data alignment : Ha
 276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_SxCR_MSIZE_1          /*!< Memory data alignment : Wo
 277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_OFFSETSIZE OFFSETSIZE
 282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_OFFSETSIZE_PSIZE           0x00000000U               /*!< Peripheral increment offse
 285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_OFFSETSIZE_FIXEDTO4        DMA_SxCR_PINCOS           /*!< Peripheral increment offse
 286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY PRIORITY
 291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U               /*!< Priority level : Low      
ARM GAS  /tmp/cciP3Jzd.s 			page 22


 294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_SxCR_PL_0             /*!< Priority level : Medium   
 295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_SxCR_PL_1             /*!< Priority level : High     
 296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_SxCR_PL               /*!< Priority level : Very_High
 297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_0                  0x00000000U                                              
 305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  DMA_SxCR_CHSEL_0                                         
 306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  DMA_SxCR_CHSEL_1                                         
 307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  (DMA_SxCR_CHSEL_0 | DMA_SxCR_CHSEL_1)                    
 308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  DMA_SxCR_CHSEL_2                                         
 309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  (DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_0)                    
 310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  (DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1)                    
 311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  (DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_0) 
 312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MBURST MBURST
 317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_SINGLE              0x00000000U                             /*!< Memory burst
 320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_INC4                DMA_SxCR_MBURST_0                       /*!< Memory burst
 321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_INC8                DMA_SxCR_MBURST_1                       /*!< Memory burst
 322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_MBURST_INC16               (DMA_SxCR_MBURST_0 | DMA_SxCR_MBURST_1) /*!< Memory burst
 323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PBURST PBURST
 328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_SINGLE              0x00000000U                             /*!< Peripheral b
 331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_INC4                DMA_SxCR_PBURST_0                       /*!< Peripheral b
 332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_INC8                DMA_SxCR_PBURST_1                       /*!< Peripheral b
 333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_PBURST_INC16               (DMA_SxCR_PBURST_0 | DMA_SxCR_PBURST_1) /*!< Peripheral b
 334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   
 338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_FIFOMODE DMA_LL_FIFOMODE
 339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOMODE_DISABLE           0x00000000U                             /*!< FIFO mode di
 342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOMODE_ENABLE            DMA_SxFCR_DMDIS                         /*!< FIFO mode en
 343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */  
 346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_FIFOSTATUS_0 FIFOSTATUS 0
 348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_0_25            0x00000000U                             /*!< 0 < fifo_lev
ARM GAS  /tmp/cciP3Jzd.s 			page 23


 351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_25_50           DMA_SxFCR_FS_0                          /*!< 1/4 < fifo_l
 352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_50_75           DMA_SxFCR_FS_1                          /*!< 1/2 < fifo_l
 353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_75_100          (DMA_SxFCR_FS_1 | DMA_SxFCR_FS_0)       /*!< 3/4 < fifo_l
 354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_EMPTY           DMA_SxFCR_FS_2                          /*!< FIFO is empt
 355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOSTATUS_FULL            (DMA_SxFCR_FS_2 | DMA_SxFCR_FS_0)       /*!< FIFO is full
 356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_FIFOTHRESHOLD FIFOTHRESHOLD
 361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_1_4          0x00000000U                             /*!< FIFO thresho
 364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_1_2          DMA_SxFCR_FTH_0                         /*!< FIFO thresho
 365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_3_4          DMA_SxFCR_FTH_1                         /*!< FIFO thresho
 366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_FIFOTHRESHOLD_FULL         DMA_SxFCR_FTH                           /*!< FIFO thresho
 367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     
 371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CURRENTTARGETMEM CURRENTTARGETMEM
 372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CURRENTTARGETMEM0          0x00000000U                             /*!< Set CurrentT
 375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_CURRENTTARGETMEM1          DMA_SxCR_CT                             /*!< Set CurrentT
 376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Write a value in DMA register
 394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __REG__ Register to be written
 396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Read a value in DMA register
 403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __REG__ Register to be read
 405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Register value
 406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
ARM GAS  /tmp/cciP3Jzd.s 			page 24


 408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxStreamy
 413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Convert DMAx_Streamy into DMAx
 417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __STREAM_INSTANCE__ DMAx_Streamy
 418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval DMAx
 419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__STREAM_INSTANCE__)   \
 421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** (((uint32_t)(__STREAM_INSTANCE__) > ((uint32_t)DMA1_Stream7)) ?  DMA2 : DMA1)
 422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Convert DMAx_Streamy into LL_DMA_STREAM_y
 425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __STREAM_INSTANCE__ DMAx_Streamy
 426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __LL_DMA_GET_STREAM(__STREAM_INSTANCE__)   \
 429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** (((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream0)) ? LL_DMA_STREAM_0 : \
 430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream0)) ? LL_DMA_STREAM_0 : \
 431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream1)) ? LL_DMA_STREAM_1 : \
 432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream1)) ? LL_DMA_STREAM_1 : \
 433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream2)) ? LL_DMA_STREAM_2 : \
 434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream2)) ? LL_DMA_STREAM_2 : \
 435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream3)) ? LL_DMA_STREAM_3 : \
 436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream3)) ? LL_DMA_STREAM_3 : \
 437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream4)) ? LL_DMA_STREAM_4 : \
 438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream4)) ? LL_DMA_STREAM_4 : \
 439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream5)) ? LL_DMA_STREAM_5 : \
 440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream5)) ? LL_DMA_STREAM_5 : \
 441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA1_Stream6)) ? LL_DMA_STREAM_6 : \
 442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  ((uint32_t)(__STREAM_INSTANCE__) == ((uint32_t)DMA2_Stream6)) ? LL_DMA_STREAM_6 : \
 443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  LL_DMA_STREAM_7)
 444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_STREAM_y into DMAx_Streamy
 447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  __STREAM__ LL_DMA_STREAM_y
 449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval DMAx_Streamy
 450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** #define __LL_DMA_GET_STREAM_INSTANCE(__DMA_INSTANCE__, __STREAM__)   \
 452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
ARM GAS  /tmp/cciP3Jzd.s 			page 25


 465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__STREAM__) == ((uint32_t)LL_DM
 467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  DMA2_Stream7)
 468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
 475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
 485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable DMA stream.
 488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          EN            LL_DMA_EnableStream
 489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
 502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
 504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Disable DMA stream.
 508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          EN            LL_DMA_DisableStream
 509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
ARM GAS  /tmp/cciP3Jzd.s 			page 26


 522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Check if DMA stream is enabled or disabled.
 528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          EN            LL_DMA_IsEnabledStream
 529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledStream(DMA_TypeDef *DMAx, uint32_t Stream)
 542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Configure all parameters linked to DMA transfer.
 548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DIR           LL_DMA_ConfigTransfer\n
 549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          CIRC          LL_DMA_ConfigTransfer\n
 550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PINC          LL_DMA_ConfigTransfer\n
 551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          MINC          LL_DMA_ConfigTransfer\n
 552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PSIZE         LL_DMA_ConfigTransfer\n
 553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          MSIZE         LL_DMA_ConfigTransfer\n
 554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PL            LL_DMA_ConfigTransfer\n
 555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PFCTRL        LL_DMA_ConfigTransfer
 556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR  or @ref LL_DMA_MODE_PFCTRL
 569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *@retval None
 575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configurati
 577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
ARM GAS  /tmp/cciP3Jzd.s 			page 27


 579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****              DMA_SxCR_DIR | DMA_SxCR_CIRC | DMA_SxCR_PINC | DMA_SxCR_MINC | DMA_SxCR_PSIZE | DMA_Sx
 580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****              Configuration);
 581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Data transfer direction (read from peripheral or from memory).
 585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DIR           LL_DMA_SetDataTransferDirection
 586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  
 603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Data transfer direction (read from peripheral or from memory).
 609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DIR           LL_DMA_GetDataTransferDirection
 610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
 626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set DMA mode normal, circular or peripheral flow control.
 632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CIRC           LL_DMA_SetMode\n
 633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PFCTRL         LL_DMA_SetMode
 634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
ARM GAS  /tmp/cciP3Jzd.s 			page 28


 636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_PFCTRL
 648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
 651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get DMA mode normal, circular or peripheral flow control.
 657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CIRC           LL_DMA_GetMode\n
 658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         CR          PFCTRL         LL_DMA_GetMode
 659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_PFCTRL
 673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Stream)
 675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Peripheral increment mode.
 681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINC           LL_DMA_SetPeriphIncMode
 682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  IncrementMode This parameter can be one of the following values:
ARM GAS  /tmp/cciP3Jzd.s 			page 29


 693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Increment
 698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral increment mode.
 704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINC           LL_DMA_GetPeriphIncMode
 705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream)
 720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory increment mode.
 726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MINC           LL_DMA_SetMemoryIncMode
 727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  IncrementMode This parameter can be one of the following values:
 738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Increment
 743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory increment mode.
 749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MINC           LL_DMA_GetMemoryIncMode
ARM GAS  /tmp/cciP3Jzd.s 			page 30


 750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream)
 765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Peripheral size.
 771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PSIZE           LL_DMA_SetPeriphSize
 772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Size This parameter can be one of the following values:
 783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
 789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral size.
 795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PSIZE           LL_DMA_GetPeriphSize
 796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/cciP3Jzd.s 			page 31


 807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream)
 812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory size.
 818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MSIZE           LL_DMA_SetMemorySize
 819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Size This parameter can be one of the following values:
 830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
 836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory size.
 842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MSIZE           LL_DMA_GetMemorySize
 843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream)
 859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cciP3Jzd.s 			page 32


 864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Peripheral increment offset size.
 865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINCOS           LL_DMA_SetIncOffsetSize
 866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  OffsetSize This parameter can be one of the following values:
 877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_PSIZE
 878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_FIXEDTO4
 879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetIncOffsetSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t OffsetSiz
 882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral increment offset size.
 888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PINCOS           LL_DMA_GetIncOffsetSize
 889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_PSIZE
 901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_OFFSETSIZE_FIXEDTO4
 902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetIncOffsetSize(DMA_TypeDef *DMAx, uint32_t Stream)
 904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Stream priority level.
 910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PL           LL_DMA_SetStreamPriorityLevel
 911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
ARM GAS  /tmp/cciP3Jzd.s 			page 33


 921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Pr
 929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
 931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream priority level.
 935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PL           LL_DMA_GetStreamPriorityLevel
 936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream)
 953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
 955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Number of data to transfer.
 959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll NDTR          NDT           LL_DMA_SetDataLength
 960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This action has no effect if
 961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         stream is enabled.
 962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  NbData Between 0 to 0xFFFFFFFF
 973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
 974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
 976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR,
ARM GAS  /tmp/cciP3Jzd.s 			page 34


 978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
 980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
 981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Number of data to transfer.
 982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll NDTR          NDT           LL_DMA_GetDataLength
 983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Once the stream is enabled, the return value indicate the
 984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         remaining bytes to be transmitted.
 985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
 987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
 988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
 989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
 990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
 991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
 992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
 993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
 994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
 995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
 996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
 997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef* DMAx, uint32_t Stream)
 998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
 999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Select Channel number associated to the Stream.
1004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CHSEL           LL_DMA_SetChannelSelection
1005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_0
1017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channe
1027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get the Channel number associated to the Stream.
1033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CHSEL           LL_DMA_GetChannelSelection
1034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/cciP3Jzd.s 			page 35


1035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_0
1046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7
1053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream)
1055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory burst transfer configuration.
1061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MBURST           LL_DMA_SetMemoryBurstxfer
1062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Mburst This parameter can be one of the following values:
1073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_SINGLE
1074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC4
1075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC8
1076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC16
1077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
1080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory burst transfer configuration.
1086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          MBURST           LL_DMA_GetMemoryBurstxfer
1087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
ARM GAS  /tmp/cciP3Jzd.s 			page 36


1092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_SINGLE
1099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC4
1100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC8
1101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MBURST_INC16
1102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream)
1104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set  Peripheral burst transfer configuration.
1110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PBURST           LL_DMA_SetPeriphBurstxfer
1111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Pburst This parameter can be one of the following values:
1122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_SINGLE
1123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC4
1124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC8
1125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC16
1126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Pburst)
1129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Peripheral burst transfer configuration.
1135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          PBURST           LL_DMA_GetPeriphBurstxfer
1136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_SINGLE
1148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC4
ARM GAS  /tmp/cciP3Jzd.s 			page 37


1149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC8
1150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PBURST_INC16
1151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream)
1153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Current target (only in double buffer mode) to Memory 1 or Memory 0.
1159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CT           LL_DMA_SetCurrentTargetMem 
1160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param CurrentMemory This parameter can be one of the following values:
1171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM0
1172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM1
1173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Curren
1176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****    MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, 
1178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Current target (only in double buffer mode) to Memory 1 or Memory 0.
1182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          CT           LL_DMA_GetCurrentTargetMem 
1183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM0
1195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CURRENTTARGETMEM1
1196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream)
1198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable the double buffer mode.
1204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DBM           LL_DMA_EnableDoubleBufferMode
1205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/cciP3Jzd.s 			page 38


1206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableDoubleBufferMode(DMA_TypeDef *DMAx, uint32_t Stream)
1218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
1220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Disable the double buffer mode.
1224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR          DBM           LL_DMA_DisableDoubleBufferMode 
1225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableDoubleBufferMode(DMA_TypeDef *DMAx, uint32_t Stream)
1238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, D
1240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get FIFO status.
1244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR          FS          LL_DMA_GetFIFOStatus
1245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_0_25
1257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_25_50
1258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_50_75
1259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_75_100
1260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_EMPTY
1261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOSTATUS_FULL
1262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
ARM GAS  /tmp/cciP3Jzd.s 			page 39


1263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetFIFOStatus(DMA_TypeDef *DMAx, uint32_t Stream)
1264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Disable Fifo mode.
1270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR          DMDIS          LL_DMA_DisableFifoMode
1271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
1284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, 
1286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Fifo mode.
1290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR          DMDIS          LL_DMA_EnableFifoMode 
1291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
1304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DM
1306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Select FIFO threshold.
1310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR         FTH          LL_DMA_SetFIFOThreshold
1311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
ARM GAS  /tmp/cciP3Jzd.s 			page 40


1320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Threshold This parameter can be one of the following values:
1322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_4
1323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_2
1324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
1325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
1326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Threshold
1329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, 
1331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get FIFO threshold.
1335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR         FTH          LL_DMA_GetFIFOThreshold
1336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_4
1348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_2
1349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
1350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
1351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream)
1353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Configure the FIFO .
1359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll FCR         FTH          LL_DMA_ConfigFifo\n
1360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         FCR         DMDIS        LL_DMA_ConfigFifo
1361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  FifoMode This parameter can be one of the following values:
1372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOMODE_ENABLE
1373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOMODE_DISABLE
1374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  FifoThreshold This parameter can be one of the following values:
1375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_4
1376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_1_2
ARM GAS  /tmp/cciP3Jzd.s 			page 41


1377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_3_4
1378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_FIFOTHRESHOLD_FULL
1379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigFifo(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t FifoMode, uint3
1382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, 
1384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Configure the Source and Destination addresses.
1388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA stream is enabled.
1389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_ConfigAddresses\n 
1390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         PAR         PA          LL_DMA_ConfigAddresses
1391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  SrcAddress Between 0 to 0xFFFFFFFF
1402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DstAddress Between 0 to 0xFFFFFFFF
1403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
1404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
1405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
1406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
1407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress
1410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   /* Direction Memory to Periph */
1412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
1413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR
1415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR,
1416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
1418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   else
1419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR,
1421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR
1422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Memory address.
1427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_SetMemoryAddress
1428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
ARM GAS  /tmp/cciP3Jzd.s 			page 42


1434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  MemoryAddress Between 0 to 0xFFFFFFFF
1441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAdd
1444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, 
 433              		.loc 2 1445 0
 434 008a 844B     		ldr	r3, .L33+24
 435 008c DF60     		str	r7, [r3, #12]
 436              	.LVL41:
 437              	.LBE59:
 438              	.LBE58:
 439              	.LBB60:
 440              	.LBB61:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 441              		.loc 2 977 0
 442 008e 5A68     		ldr	r2, [r3, #4]
 443 0090 120C     		lsrs	r2, r2, #16
 444 0092 1204     		lsls	r2, r2, #16
 445 0094 42F48072 		orr	r2, r2, #256
 446 0098 5A60     		str	r2, [r3, #4]
 447              	.LVL42:
 448              	.LBE61:
 449              	.LBE60:
 450              	.LBB62:
 451              	.LBB63:
1446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Peripheral address.
1450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_SetPeriphAddress
1451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  PeriphAddress Between 0 to 0xFFFFFFFF
1464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAdd
1467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, P
 452              		.loc 2 1468 0
 453 009a 814A     		ldr	r2, .L33+28
ARM GAS  /tmp/cciP3Jzd.s 			page 43


 454 009c 9A60     		str	r2, [r3, #8]
 455              	.LVL43:
 456              	.LBE63:
 457              	.LBE62:
 458              	.LBB64:
 459              	.LBB65:
1469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Memory address.
1473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_GetMemoryAddress
1474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))-
1490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Peripheral address.
1494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_GetPeriphAddress
1495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))
1511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_SetM2MSrcAddress
1516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
ARM GAS  /tmp/cciP3Jzd.s 			page 44


1520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  MemoryAddress Between 0 to 0xFFFFFFFF
1529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAdd
1532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, M
1534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_SetM2MDstAddress
1539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  MemoryAddress Between 0 to 0xFFFFFFFF
1552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAdd
1555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
1556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****     WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR
1557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
1561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll PAR        PA         LL_DMA_GetM2MSrcAddress
1562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   {
ARM GAS  /tmp/cciP3Jzd.s 			page 45


1577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****    return (READ_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream]))
1578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   }
1579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M0AR        M0A         LL_DMA_GetM2MDstAddress
1583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef* DMAx, uint32_t Stream)
1597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****  return (READ_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->
1599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Set Memory 1 address (used in case of Double buffer mode).
1603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M1AR        M1A         LL_DMA_SetMemory1Address
1604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
1613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Address Between 0 to 0xFFFFFFFF
1615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
1616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Address)
1618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR,
1620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Memory 1 address (used in case of Double buffer mode).
1624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll M1AR        M1A         LL_DMA_GetMemory1Address
1625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
1627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
1628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
1629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
1630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
1631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
1632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
1633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
ARM GAS  /tmp/cciP3Jzd.s 			page 46


1634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
1635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval Between 0 to 0xFFFFFFFF
1636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream)
1638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR);
1640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
1644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
1647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
1648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 half transfer flag.
1652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF0    LL_DMA_IsActiveFlag_HT0
1653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT0(DMA_TypeDef *DMAx)
1657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF0)==(DMA_LISR_HTIF0));
1659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 half transfer flag.
1663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF1    LL_DMA_IsActiveFlag_HT1
1664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
1668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF1)==(DMA_LISR_HTIF1));
1670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 half transfer flag.
1674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF2    LL_DMA_IsActiveFlag_HT2
1675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
1679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF2)==(DMA_LISR_HTIF2));
1681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 half transfer flag.
1685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  HTIF3    LL_DMA_IsActiveFlag_HT3
1686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
1690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
ARM GAS  /tmp/cciP3Jzd.s 			page 47


1691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF3)==(DMA_LISR_HTIF3));
1692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 half transfer flag.
1696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF4    LL_DMA_IsActiveFlag_HT4
1697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
1701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF4)==(DMA_HISR_HTIF4));
1703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 half transfer flag.
1707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF0    LL_DMA_IsActiveFlag_HT5
1708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
1712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF5)==(DMA_HISR_HTIF5));
1714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 half transfer flag.
1718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF6    LL_DMA_IsActiveFlag_HT6
1719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
1723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF6)==(DMA_HISR_HTIF6));
1725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 half transfer flag.
1729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  HTIF7    LL_DMA_IsActiveFlag_HT7
1730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
1734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF7)==(DMA_HISR_HTIF7));
1736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } 
1737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 transfer complete flag.
1740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF0    LL_DMA_IsActiveFlag_TC0
1741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC0(DMA_TypeDef *DMAx)
1745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
1747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
ARM GAS  /tmp/cciP3Jzd.s 			page 48


1748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 transfer complete flag.
1751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
1752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
1756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
1758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 transfer complete flag.
1762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF2    LL_DMA_IsActiveFlag_TC2
1763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
1767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
1769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 transfer complete flag.
1773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TCIF3    LL_DMA_IsActiveFlag_TC3
1774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
1778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF3)==(DMA_LISR_TCIF3));
1780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 transfer complete flag.
1784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF4    LL_DMA_IsActiveFlag_TC4
1785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
1789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
1791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 transfer complete flag.
1795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
1796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
1800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
1802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cciP3Jzd.s 			page 49


1805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 transfer complete flag.
1806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
1807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
1811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
1813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 transfer complete flag.
1817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TCIF7    LL_DMA_IsActiveFlag_TC7
1818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
1822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
1824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } 
1825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 transfer error flag.
1828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF0    LL_DMA_IsActiveFlag_TE0
1829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE0(DMA_TypeDef *DMAx)
1833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
1835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 transfer error flag.
1839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF1    LL_DMA_IsActiveFlag_TE1
1840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
1844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF1)==(DMA_LISR_TEIF1));
1846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 transfer error flag.
1850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF2    LL_DMA_IsActiveFlag_TE2
1851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
1855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF2)==(DMA_LISR_TEIF2));
1857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 transfer error flag.
1861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  TEIF3    LL_DMA_IsActiveFlag_TE3
ARM GAS  /tmp/cciP3Jzd.s 			page 50


1862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
1866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF3)==(DMA_LISR_TEIF3));
1868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 transfer error flag.
1872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF4    LL_DMA_IsActiveFlag_TE4
1873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
1877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
1879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 transfer error flag.
1883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF0    LL_DMA_IsActiveFlag_TE5
1884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
1888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF5)==(DMA_HISR_TEIF5));
1890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 transfer error flag.
1894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF6    LL_DMA_IsActiveFlag_TE6
1895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
1899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF6)==(DMA_HISR_TEIF6));
1901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 transfer error flag.
1905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  TEIF7    LL_DMA_IsActiveFlag_TE7
1906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
1910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF7)==(DMA_HISR_TEIF7));
1912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** } 
1913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 direct mode error flag.
1916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF0    LL_DMA_IsActiveFlag_DME0
1917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cciP3Jzd.s 			page 51


1919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME0(DMA_TypeDef *DMAx)
1921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF0)==(DMA_LISR_DMEIF0));
1923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 direct mode error flag.
1927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF1    LL_DMA_IsActiveFlag_DME1
1928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME1(DMA_TypeDef *DMAx)
1932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF1)==(DMA_LISR_DMEIF1));
1934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 direct mode error flag.
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF2    LL_DMA_IsActiveFlag_DME2
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME2(DMA_TypeDef *DMAx)
1943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF2)==(DMA_LISR_DMEIF2));
1945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 direct mode error flag.
1949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  DMEIF3    LL_DMA_IsActiveFlag_DME3
1950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME3(DMA_TypeDef *DMAx)
1954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF3)==(DMA_LISR_DMEIF3));
1956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 direct mode error flag.
1960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF4    LL_DMA_IsActiveFlag_DME4
1961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME4(DMA_TypeDef *DMAx)
1965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF4)==(DMA_HISR_DMEIF4));
1967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 direct mode error flag.
1971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF0    LL_DMA_IsActiveFlag_DME5
1972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME5(DMA_TypeDef *DMAx)
ARM GAS  /tmp/cciP3Jzd.s 			page 52


1976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF5)==(DMA_HISR_DMEIF5));
1978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 direct mode error flag.
1982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF6    LL_DMA_IsActiveFlag_DME6
1983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME6(DMA_TypeDef *DMAx)
1987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF6)==(DMA_HISR_DMEIF6));
1989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
1990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
1991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
1992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 direct mode error flag.
1993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  DMEIF7    LL_DMA_IsActiveFlag_DME7
1994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
1997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME7(DMA_TypeDef *DMAx)
1998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
1999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_DMEIF7)==(DMA_HISR_DMEIF7));
2000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 0 FIFO error flag.
2004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF0    LL_DMA_IsActiveFlag_FE0
2005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE0(DMA_TypeDef *DMAx)
2009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF0)==(DMA_LISR_FEIF0));
2011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 1 FIFO error flag.
2015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF1    LL_DMA_IsActiveFlag_FE1
2016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE1(DMA_TypeDef *DMAx)
2020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF1)==(DMA_LISR_FEIF1));
2022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 2 FIFO error flag.
2026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF2    LL_DMA_IsActiveFlag_FE2
2027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE2(DMA_TypeDef *DMAx)
2031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF2)==(DMA_LISR_FEIF2));
ARM GAS  /tmp/cciP3Jzd.s 			page 53


2033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 3 FIFO error flag.
2037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LISR  FEIF3    LL_DMA_IsActiveFlag_FE3
2038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE3(DMA_TypeDef *DMAx)
2042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF3)==(DMA_LISR_FEIF3));
2044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 4 FIFO error flag.
2048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF4    LL_DMA_IsActiveFlag_FE4
2049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE4(DMA_TypeDef *DMAx)
2053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF4)==(DMA_HISR_FEIF4));
2055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 5 FIFO error flag.
2059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF0    LL_DMA_IsActiveFlag_FE5
2060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE5(DMA_TypeDef *DMAx)
2064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF5)==(DMA_HISR_FEIF5));
2066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 6 FIFO error flag.
2070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF6    LL_DMA_IsActiveFlag_FE6
2071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE6(DMA_TypeDef *DMAx)
2075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF6)==(DMA_HISR_FEIF6));
2077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Get Stream 7 FIFO error flag.
2081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HISR  FEIF7    LL_DMA_IsActiveFlag_FE7
2082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
2084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE7(DMA_TypeDef *DMAx)
2086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   return (READ_BIT(DMAx->HISR ,DMA_HISR_FEIF7)==(DMA_HISR_FEIF7));
2088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 54


2090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 half transfer flag.
2092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF0    LL_DMA_ClearFlag_HT0
2093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT0(DMA_TypeDef *DMAx)
2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
2099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 half transfer flag.
2103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
2104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
2108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
2110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 half transfer flag.
2114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF2    LL_DMA_ClearFlag_HT2
2115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
2119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
2121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 half transfer flag.
2125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CHTIF3    LL_DMA_ClearFlag_HT3
2126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
2130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF3);
2132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 half transfer flag.
2136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF4    LL_DMA_ClearFlag_HT4
2137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
2141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF4);
2143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 half transfer flag.
ARM GAS  /tmp/cciP3Jzd.s 			page 55


2147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF5    LL_DMA_ClearFlag_HT5
2148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
2152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF5);
2154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 half transfer flag.
2158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF6    LL_DMA_ClearFlag_HT6
2159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
2163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
2165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 half transfer flag.
2169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CHTIF7    LL_DMA_ClearFlag_HT7
2170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
2174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF7);
2176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 transfer complete flag.
2180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF0    LL_DMA_ClearFlag_TC0
2181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
2185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
2187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 transfer complete flag.
2191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
2192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
2196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
2198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 transfer complete flag.
2202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
2203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/cciP3Jzd.s 			page 56


2204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
2207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
2209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 transfer complete flag.
2213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTCIF3    LL_DMA_ClearFlag_TC3
2214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
2218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF3);
2220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 transfer complete flag.
2224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
2225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
2229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
2231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 transfer complete flag.
2235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
2236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
2240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
2242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 transfer complete flag.
2246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
2247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
2251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
2253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 transfer complete flag.
2257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTCIF7    LL_DMA_ClearFlag_TC7
2258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
ARM GAS  /tmp/cciP3Jzd.s 			page 57


2261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
2262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
2264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 transfer error flag.
2268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF0    LL_DMA_ClearFlag_TE0
2269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
2273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
2275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 transfer error flag.
2279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
2280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
2284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
2286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 transfer error flag.
2290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF2    LL_DMA_ClearFlag_TE2
2291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
2295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
2297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 transfer error flag.
2301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CTEIF3    LL_DMA_ClearFlag_TE3
2302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
2306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF3);
2308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 transfer error flag.
2312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
2313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
2317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
ARM GAS  /tmp/cciP3Jzd.s 			page 58


2318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
2319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 transfer error flag.
2323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF5    LL_DMA_ClearFlag_TE5
2324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
2328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF5);
2330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 transfer error flag.
2334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF6    LL_DMA_ClearFlag_TE6
2335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
2339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
2341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 transfer error flag.
2345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CTEIF7    LL_DMA_ClearFlag_TE7
2346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
2350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF7);
2352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 direct mode error flag.
2356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF0    LL_DMA_ClearFlag_DME0
2357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME0(DMA_TypeDef *DMAx)
2361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF0);
2363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 direct mode error flag.
2367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF1    LL_DMA_ClearFlag_DME1
2368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME1(DMA_TypeDef *DMAx)
2372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF1);
2374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
ARM GAS  /tmp/cciP3Jzd.s 			page 59


2375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 direct mode error flag.
2378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF2    LL_DMA_ClearFlag_DME2
2379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME2(DMA_TypeDef *DMAx)
2383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF2);
2385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 direct mode error flag.
2389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CDMEIF3    LL_DMA_ClearFlag_DME3
2390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME3(DMA_TypeDef *DMAx)
2394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF3);
2396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 direct mode error flag.
2400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF4    LL_DMA_ClearFlag_DME4
2401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME4(DMA_TypeDef *DMAx)
2405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF4);
2407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 direct mode error flag.
2411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF5    LL_DMA_ClearFlag_DME5
2412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME5(DMA_TypeDef *DMAx)
2416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF5);
2418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 direct mode error flag.
2422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF6    LL_DMA_ClearFlag_DME6
2423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME6(DMA_TypeDef *DMAx)
2427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF6);
2429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
ARM GAS  /tmp/cciP3Jzd.s 			page 60


2432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 direct mode error flag.
2433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CDMEIF7    LL_DMA_ClearFlag_DME7
2434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_DME7(DMA_TypeDef *DMAx)
2438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CDMEIF7);
2440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 0 FIFO error flag.
2444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF0    LL_DMA_ClearFlag_FE0
2445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE0(DMA_TypeDef *DMAx)
2449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF0);
2451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 1 FIFO error flag.
2455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF1    LL_DMA_ClearFlag_FE1
2456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE1(DMA_TypeDef *DMAx)
2460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF1);
2462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 2 FIFO error flag.
2466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF2    LL_DMA_ClearFlag_FE2
2467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE2(DMA_TypeDef *DMAx)
2471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF2);
2473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 3 FIFO error flag.
2477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll LIFCR  CFEIF3    LL_DMA_ClearFlag_FE3
2478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE3(DMA_TypeDef *DMAx)
2482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF3);
2484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 4 FIFO error flag.
2488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF4    LL_DMA_ClearFlag_FE4
ARM GAS  /tmp/cciP3Jzd.s 			page 61


2489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE4(DMA_TypeDef *DMAx)
2493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF4);
2495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 5 FIFO error flag.
2499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF5    LL_DMA_ClearFlag_FE5
2500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE5(DMA_TypeDef *DMAx)
2504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF5);
2506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 6 FIFO error flag.
2510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF6    LL_DMA_ClearFlag_FE6
2511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE6(DMA_TypeDef *DMAx)
2515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF6);
2517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Clear Stream 7 FIFO error flag.
2521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll HIFCR  CFEIF7    LL_DMA_ClearFlag_FE7
2522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_FE7(DMA_TypeDef *DMAx)
2526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CFEIF7);
2528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @}
2532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_IT_Management IT_Management
2535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @{
2536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Half transfer interrupt.
2540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR        HTIE         LL_DMA_EnableIT_HT
2541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
2543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
2544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
2545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
ARM GAS  /tmp/cciP3Jzd.s 			page 62


2546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
2547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
2548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
2549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
2550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
2551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
2554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
 460              		.loc 2 2555 0
 461 009e 1A68     		ldr	r2, [r3]
 462 00a0 42F00802 		orr	r2, r2, #8
 463 00a4 1A60     		str	r2, [r3]
 464              	.LVL44:
 465              	.LBE65:
 466              	.LBE64:
 467              	.LBB66:
 468              	.LBB67:
2556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Transfer error interrupt.
2560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR        TEIE         LL_DMA_EnableIT_TE
2561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
2563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
2564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
2565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
2566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
2567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
2568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
2569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
2570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
2571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
2574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
2576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
2577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** 
2578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** /**
2579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @brief Enable Transfer complete interrupt.
2580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @rmtoll CR        TCIE         LL_DMA_EnableIT_TC
2581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @param  Stream This parameter can be one of the following values:
2583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_0
2584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_1
2585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_2
2586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_3
2587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_4
2588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_5
2589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_6
2590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   *         @arg @ref LL_DMA_STREAM_7
2591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   * @retval None
2592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   */
2593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
ARM GAS  /tmp/cciP3Jzd.s 			page 63


2594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** {
2595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h ****   SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA
 469              		.loc 2 2595 0
 470 00a6 1A68     		ldr	r2, [r3]
 471 00a8 42F01002 		orr	r2, r2, #16
 472 00ac 1A60     		str	r2, [r3]
 473              	.LVL45:
 474              	.LBE67:
 475              	.LBE66:
 476              	.LBB68:
 477              	.LBB69:
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 478              		.loc 2 503 0
 479 00ae 1A68     		ldr	r2, [r3]
 480 00b0 42F00102 		orr	r2, r2, #1
 481 00b4 1A60     		str	r2, [r3]
 482              	.LVL46:
 483              	.LBE69:
 484              	.LBE68:
 485              	.LBB70:
 486              	.LBB71:
 487              		.file 3 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h"
   1:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @file    stm32f4xx_ll_usart.h
   4:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @attention
   8:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
   9:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  10:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  11:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * Redistribution and use in source and binary forms, with or without modification,
  12:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * are permitted provided that the following conditions are met:
  13:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *   1. Redistributions of source code must retain the above copyright notice,
  14:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      this list of conditions and the following disclaimer.
  15:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  16:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      this list of conditions and the following disclaimer in the documentation
  17:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      and/or other materials provided with the distribution.
  18:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  19:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      may be used to endorse or promote products derived from this software
  20:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *      without specific prior written permission.
  21:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  22:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *
  33:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   ******************************************************************************
  34:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  35:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 64


  36:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  37:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #ifndef __STM32F4xx_LL_USART_H
  38:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __STM32F4xx_LL_USART_H
  39:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  40:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #ifdef __cplusplus
  41:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** extern "C" {
  42:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif
  43:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  44:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  45:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #include "stm32f4xx.h"
  46:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  47:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @addtogroup STM32F4xx_LL_Driver
  48:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  49:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  50:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  51:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (USART6) || defined (UART4)
  52:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  53:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL USART
  54:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  55:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  56:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  57:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  58:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  60:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  61:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  62:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  63:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  64:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  65:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  66:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  67:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  68:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
  69:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  70:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  71:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  72:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  73:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  74:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  75:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  76:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  77:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
  78:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  79:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  80:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  81:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  82:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  83:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  84:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
  85:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  86:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  87:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
  88:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  89:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
  90:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** typedef struct
  91:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
  92:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
ARM GAS  /tmp/cciP3Jzd.s 			page 65


  93:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  94:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  95:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  96:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  97:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  98:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
  99:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** typedef struct
 132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
ARM GAS  /tmp/cciP3Jzd.s 			page 66


 150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
 183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
ARM GAS  /tmp/cciP3Jzd.s 			page 67


 207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */ 
 219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
ARM GAS  /tmp/cciP3Jzd.s 			page 68


 264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
ARM GAS  /tmp/cciP3Jzd.s 			page 69


 321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Write a value in USART register
 347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be written
 349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Read a value in USART register
 356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Register value
 359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      (((__PERIPHCLK__)*25)/(2*(__
 377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
ARM GAS  /tmp/cciP3Jzd.s 			page 70


 378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (((__LL_USART_DIV_SAMPLING8_
 379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            ((__LL_USART_DIVFRAQ_SAM
 383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     (((__PERIPHCLK__)*25)/(4*(__
 393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (((__LL_USART_DIV_SAMPLING16
 395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
 407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
 417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Enable
 421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
ARM GAS  /tmp/cciP3Jzd.s 			page 71


 435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
 451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RE);
 464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Receiver Disable
 468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Enable
 479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TE);
 486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Transmitter Disable
 490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cciP3Jzd.s 			page 72


 492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         of Transmitter and Receiver
 502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
 529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cciP3Jzd.s 			page 73


 549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
 563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
 590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
ARM GAS  /tmp/cciP3Jzd.s 			page 74


 606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
 611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
 617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Oversampling mode
 637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
 644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/cciP3Jzd.s 			page 75


 663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
 676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
 707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
ARM GAS  /tmp/cciP3Jzd.s 			page 76


 720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
 725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
 738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/cciP3Jzd.s 			page 77


 777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
 799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
 805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
 821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
ARM GAS  /tmp/cciP3Jzd.s 			page 78


 834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
 836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
 845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                               uint32_t StopBits)
 867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
 875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         for wake up with address mark detection.
 876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cciP3Jzd.s 			page 79


 891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
 894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
 896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
ARM GAS  /tmp/cciP3Jzd.s 			page 80


 948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
 983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
 989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
 991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
 992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
 993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
 994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
 995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
 998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
 999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
ARM GAS  /tmp/cciP3Jzd.s 			page 81


1005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
1016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (Baud rate value != 0)
1026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****                                           uint32_t BaudRate)
1037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   else
1043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Baud Rate
1059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t O
1061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cciP3Jzd.s 			page 82


1062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   register uint32_t usartdiv = 0x0U;
1063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   register uint32_t brrresult = 0x0U;
1064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     {
1071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     }
1074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   else
1076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   {
1077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     {
1079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****     }
1081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   }
1082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (brrresult);
1083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IrDA mode
1095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IrDA mode
1108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 83


1119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
1124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
1128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
1159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
ARM GAS  /tmp/cciP3Jzd.s 			page 84


1176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
1188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cciP3Jzd.s 			page 85


1233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
1235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
1274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cciP3Jzd.s 			page 86


1290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
1295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
1303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
1332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1334:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1335:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1336:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1337:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1338:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1339:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1340:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1341:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1342:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1343:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1344:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1345:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1346:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cciP3Jzd.s 			page 87


1347:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1348:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1349:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1350:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1351:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1352:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1353:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1354:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1355:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1356:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1357:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1358:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1359:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1360:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1361:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1362:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1363:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1364:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1365:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1366:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1367:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1368:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1369:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1370:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1371:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1372:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1373:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1374:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1375:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1376:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1377:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1378:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
1379:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1380:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1381:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1382:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1383:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1384:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1385:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1386:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1387:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
1388:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1389:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1390:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1391:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1392:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1393:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1394:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1395:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
1396:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1397:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1398:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1399:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1400:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1401:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1402:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1403:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
ARM GAS  /tmp/cciP3Jzd.s 			page 88


1404:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1405:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1406:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1407:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1408:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
1409:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1410:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1411:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1412:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1413:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1414:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1415:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1416:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1417:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
1418:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1419:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1420:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1421:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1422:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1423:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN mode
1424:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1425:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1426:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1428:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1429:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1430:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1431:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1432:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1433:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1434:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1435:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1436:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN mode
1437:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1438:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1439:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1440:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1441:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1442:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1443:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1444:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
1446:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1447:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1448:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1449:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1450:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1451:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1452:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
1453:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1454:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1455:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1456:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
1457:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1458:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1459:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1460:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 89


1461:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1462:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1463:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1464:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1465:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
1466:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1467:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1469:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1470:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1471:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
1472:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1473:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1474:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1475:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1476:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1477:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1478:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1479:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1480:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1481:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1482:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1483:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1484:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1485:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1486:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1487:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1488:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1489:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1490:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1491:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1492:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1493:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1494:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1495:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1496:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1497:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1498:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1499:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1500:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1501:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1502:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1504:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
1505:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1506:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1507:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1508:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1509:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1510:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1511:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_USART_INSTANCE(USARTx) can be used to check whether or not
1512:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1513:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1514:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1515:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1516:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1517:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
ARM GAS  /tmp/cciP3Jzd.s 			page 90


1518:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1519:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1520:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1521:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1522:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
1523:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1524:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1525:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1526:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1527:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1528:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1529:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1530:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1531:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1532:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1533:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1534:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1535:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1536:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1537:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1538:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1539:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1540:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1541:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1542:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1543:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1544:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1545:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1546:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1547:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1548:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1549:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1550:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1551:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1552:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1553:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1554:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1556:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1557:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1558:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
1559:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
1560:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1561:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
1562:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1563:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1564:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1565:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1566:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
1567:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1568:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1569:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1570:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1571:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1572:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1573:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1574:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
ARM GAS  /tmp/cciP3Jzd.s 			page 91


1575:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1576:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1577:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1578:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1579:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1580:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1581:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1582:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1583:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1584:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1585:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1586:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1587:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1588:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1589:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1590:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1591:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1592:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1593:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1594:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1595:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1596:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1597:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1598:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1599:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1600:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1601:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1602:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1603:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1604:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1605:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1606:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1607:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1608:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1609:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1610:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1611:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1612:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1613:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1614:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1615:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
1616:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1617:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1618:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1619:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1620:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1621:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1622:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1623:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1624:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1625:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1626:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1627:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1628:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1629:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1630:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1631:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
ARM GAS  /tmp/cciP3Jzd.s 			page 92


1632:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1633:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1634:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1635:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1636:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
1637:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1638:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1639:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1640:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1641:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1642:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
1643:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1644:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1645:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1646:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1647:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1648:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1649:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1650:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1651:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1652:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1653:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1654:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1655:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1656:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1657:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1658:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1659:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1660:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1661:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1662:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1663:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1664:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1665:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1666:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1667:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1668:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1669:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1670:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1671:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1672:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1673:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1674:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1675:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1676:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1677:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1678:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1679:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1680:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
1681:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1682:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1683:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1684:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1685:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1686:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1687:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1688:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/cciP3Jzd.s 			page 93


1689:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1690:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1691:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1692:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1693:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
1694:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1695:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1696:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1697:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1698:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1699:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1700:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1701:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1702:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1703:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1704:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1705:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1706:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1707:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1708:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1709:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1710:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1711:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1712:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1713:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1714:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1715:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1716:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1717:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1718:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1719:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1720:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         dedicated functions
1721:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1722:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1723:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1724:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1725:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1726:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1727:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1728:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1729:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
1730:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1731:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1732:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1733:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1734:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1735:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1736:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1737:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1738:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1739:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
1740:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1741:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1742:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1743:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
1744:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1745:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 94


1746:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1747:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1748:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1749:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1750:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1751:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1752:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
1753:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1754:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1755:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1756:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1757:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1758:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1759:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1760:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1761:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1762:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1763:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
1764:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1765:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1766:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1767:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1768:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1769:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1770:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1771:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1772:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1773:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1774:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
1775:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1776:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1777:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1778:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1779:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1780:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1781:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1782:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1783:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1784:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1785:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
1786:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1787:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
1788:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1789:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1790:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1791:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1792:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1793:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1794:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1795:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1796:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
1797:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1798:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1799:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1800:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1801:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1802:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
ARM GAS  /tmp/cciP3Jzd.s 			page 95


1803:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1804:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1805:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1806:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1807:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
1808:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1809:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
1810:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1811:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1812:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1813:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
1814:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1815:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1816:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1817:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1818:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
1819:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1820:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
1821:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1822:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1823:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1824:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1825:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1826:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1827:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1828:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1829:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
1830:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1831:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
1832:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1833:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1834:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1835:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1836:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1837:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1838:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1839:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1840:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1841:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1842:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
1843:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1844:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1845:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1846:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1847:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1848:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1849:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1850:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1851:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
1852:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1853:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1854:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1855:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
1856:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1857:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1858:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1859:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 96


1860:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1861:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1862:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1863:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1864:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1865:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1866:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
1867:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1868:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1869:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1870:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1871:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1872:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1873:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1874:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1875:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1876:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1877:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
1878:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1879:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1880:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1881:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1882:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1883:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1884:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1885:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1886:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1887:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1888:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1889:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1890:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1891:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1892:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1893:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1894:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1895:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1896:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1897:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1898:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1899:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1900:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1901:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1902:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1903:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1904:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1905:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1906:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1907:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1908:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1909:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1910:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1911:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1912:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1913:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1914:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1915:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1916:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
ARM GAS  /tmp/cciP3Jzd.s 			page 97


1917:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1918:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1919:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1920:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1921:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
1922:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1923:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1924:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1925:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1926:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1927:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1928:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1929:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1930:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1931:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1932:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1933:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1934:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1935:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1936:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1937:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1938:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1939:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1940:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1941:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1942:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1943:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1944:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1945:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1946:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1947:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1948:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1949:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
1950:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1951:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1952:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1953:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1954:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
1955:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1956:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1957:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1958:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1959:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
1960:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1961:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1962:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as 
1963:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
1964:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
1965:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1966:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1967:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1968:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
1969:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1970:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   __IO uint32_t tmpreg;
1971:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->SR;
1972:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1973:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   tmpreg = USARTx->DR;
ARM GAS  /tmp/cciP3Jzd.s 			page 98


1974:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   (void) tmpreg;
1975:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1976:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1978:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
1979:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
1980:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1981:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1982:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1983:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
1984:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1985:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_TC));
1986:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1987:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1988:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
1989:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
1990:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
1991:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
1992:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
1993:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
1994:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
1995:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
1996:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_RXNE));
1997:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
1998:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
1999:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2000:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
2001:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2002:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2003:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
2004:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2005:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2006:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2007:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
2008:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2009:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_LBD));
2010:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2011:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2012:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2013:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
2014:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2015:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2016:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2017:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2018:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2019:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2020:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2021:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2022:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   WRITE_REG(USARTx->SR , ~(USART_SR_CTS));
2023:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2024:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2025:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2026:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2027:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2028:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2029:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2030:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
ARM GAS  /tmp/cciP3Jzd.s 			page 99


2031:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2032:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2033:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2034:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2035:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
2036:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2037:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2038:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2039:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2040:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2042:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2043:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2044:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2045:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2046:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2047:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2048:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2049:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2050:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2051:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2052:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2053:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2054:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2055:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2056:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2057:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2058:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2059:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2060:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2061:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2062:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2063:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2064:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2065:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2066:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2067:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2068:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2069:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2070:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2071:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2072:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2073:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2074:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2075:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2076:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2077:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2078:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2079:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2080:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2081:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2082:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2083:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2084:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2085:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2086:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2087:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
ARM GAS  /tmp/cciP3Jzd.s 			page 100


2088:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2089:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2090:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2091:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2092:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
2093:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2094:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2095:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2096:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2097:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2098:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2099:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2100:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2101:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2102:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2103:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2104:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2105:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
2106:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2107:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2108:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2109:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2110:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2111:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2112:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2113:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_EIE);
2114:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2115:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2116:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2117:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2118:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2119:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2120:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2121:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2122:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2123:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2124:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2125:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2126:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2127:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2128:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2129:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2130:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2131:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2132:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2133:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2134:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2135:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2136:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2137:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2138:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2139:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2140:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2141:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2142:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2143:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2144:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/cciP3Jzd.s 			page 101


2145:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2146:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2147:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2148:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2149:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2150:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2151:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2152:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2153:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2154:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2155:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2156:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2157:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2158:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2159:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2160:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2161:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2162:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2163:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2164:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2165:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2166:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2167:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2168:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2169:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2170:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2171:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2172:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2173:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2174:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2175:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2176:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2177:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2178:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2179:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2180:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2181:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2182:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2183:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2184:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2185:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
2186:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2187:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2188:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2189:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2190:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2191:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2192:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2193:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2194:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2195:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2196:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2197:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2198:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2199:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2200:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2201:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           0: Interrupt is inhibited
ARM GAS  /tmp/cciP3Jzd.s 			page 102


2202:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2203:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2204:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2205:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2206:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2207:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2208:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2209:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2210:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2211:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2212:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2213:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2214:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2215:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2216:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2217:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2218:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2219:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2220:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
2221:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2222:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
2223:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2224:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2225:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2226:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
2227:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2228:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2229:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2230:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2231:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
2232:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2233:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2234:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2235:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2236:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2237:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2238:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2239:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2240:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2241:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2242:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
2243:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2244:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2245:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2246:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2247:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2248:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2249:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2250:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2251:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2252:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2253:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
2254:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2255:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2256:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2257:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2258:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
ARM GAS  /tmp/cciP3Jzd.s 			page 103


2259:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
2260:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2261:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2262:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2263:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2264:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(USART_TypeDef *USARTx)
2265:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2266:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2267:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2268:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2269:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2270:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2271:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2272:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2273:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2274:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2275:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
2276:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2277:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2278:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2279:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2280:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2281:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2282:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2283:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2284:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2285:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2286:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2287:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2288:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
2289:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2290:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2291:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2292:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2293:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2294:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2295:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2296:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2297:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2298:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2299:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
2300:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2301:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2302:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
2303:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2304:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2305:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2306:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @note   Macro @ref IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2307:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2308:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2309:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2310:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2311:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2312:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
2313:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2314:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2315:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
ARM GAS  /tmp/cciP3Jzd.s 			page 104


2316:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2317:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2318:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @}
2319:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2320:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2321:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2322:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @{
2323:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2324:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** 
2325:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** /**
2326:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2327:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2328:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @param  USARTx USART Instance
2329:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   * @retval None
2330:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   */
2331:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2332:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** {
2333:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 488              		.loc 3 2333 0
 489 00b6 6369     		ldr	r3, [r4, #20]
 490 00b8 43F04003 		orr	r3, r3, #64
 491 00bc 6361     		str	r3, [r4, #20]
 492              	.LVL47:
 493              	.LBE71:
 494              	.LBE70:
 495              	.LBB72:
 496              	.LBB73:
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 497              		.loc 3 2041 0
 498 00be E368     		ldr	r3, [r4, #12]
 499 00c0 43F01003 		orr	r3, r3, #16
 500 00c4 E360     		str	r3, [r4, #12]
 501              	.LVL48:
 502              	.LBE73:
 503              	.LBE72:
 504              	.LBB74:
 505              	.LBB75:
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 506              		.loc 3 427 0
 507 00c6 E368     		ldr	r3, [r4, #12]
 508 00c8 43F40053 		orr	r3, r3, #8192
 509 00cc E360     		str	r3, [r4, #12]
 510              	.LVL49:
 511              	.LBE75:
 512              	.LBE74:
 145:Src/main.c    ****   RP_INIT_UART_DMA(DMA1, LL_DMA_STREAM_5, USART2, pos_iface);
 513              		.loc 1 145 0
 514 00ce A4F54C44 		sub	r4, r4, #52224
 515 00d2 744F     		ldr	r7, .L33+32
 516 00d4 3346     		mov	r3, r6
 517 00d6 2A46     		mov	r2, r5
 518 00d8 2146     		mov	r1, r4
 519 00da 3846     		mov	r0, r7
 520 00dc FFF7FEFF 		bl	RP_Init_Interface
 521              	.LVL50:
 146:Src/main.c    **** 
 522              		.loc 1 146 0
ARM GAS  /tmp/cciP3Jzd.s 			page 105


 523 00e0 0837     		adds	r7, r7, #8
 524              	.LVL51:
 525              	.LBB76:
 526              	.LBB77:
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 527              		.loc 2 1445 0
 528 00e2 714B     		ldr	r3, .L33+36
 529 00e4 DF60     		str	r7, [r3, #12]
 530              	.LVL52:
 531              	.LBE77:
 532              	.LBE76:
 533              	.LBB78:
 534              	.LBB79:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 535              		.loc 2 977 0
 536 00e6 5A68     		ldr	r2, [r3, #4]
 537 00e8 120C     		lsrs	r2, r2, #16
 538 00ea 1204     		lsls	r2, r2, #16
 539 00ec 42F48072 		orr	r2, r2, #256
 540 00f0 5A60     		str	r2, [r3, #4]
 541              	.LVL53:
 542              	.LBE79:
 543              	.LBE78:
 544              	.LBB80:
 545              	.LBB81:
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 546              		.loc 2 1468 0
 547 00f2 6E4A     		ldr	r2, .L33+40
 548 00f4 9A60     		str	r2, [r3, #8]
 549              	.LVL54:
 550              	.LBE81:
 551              	.LBE80:
 552              	.LBB82:
 553              	.LBB83:
2555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 554              		.loc 2 2555 0
 555 00f6 1A68     		ldr	r2, [r3]
 556 00f8 42F00802 		orr	r2, r2, #8
 557 00fc 1A60     		str	r2, [r3]
 558              	.LVL55:
 559              	.LBE83:
 560              	.LBE82:
 561              	.LBB84:
 562              	.LBB85:
 563              		.loc 2 2595 0
 564 00fe 1A68     		ldr	r2, [r3]
 565 0100 42F01002 		orr	r2, r2, #16
 566 0104 1A60     		str	r2, [r3]
 567              	.LVL56:
 568              	.LBE85:
 569              	.LBE84:
 570              	.LBB86:
 571              	.LBB87:
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 572              		.loc 2 503 0
 573 0106 1A68     		ldr	r2, [r3]
 574 0108 42F00102 		orr	r2, r2, #1
ARM GAS  /tmp/cciP3Jzd.s 			page 106


 575 010c 1A60     		str	r2, [r3]
 576              	.LVL57:
 577              	.LBE87:
 578              	.LBE86:
 579              	.LBB88:
 580              	.LBB89:
 581              		.loc 3 2333 0
 582 010e 6369     		ldr	r3, [r4, #20]
 583 0110 43F04003 		orr	r3, r3, #64
 584 0114 6361     		str	r3, [r4, #20]
 585              	.LVL58:
 586              	.LBE89:
 587              	.LBE88:
 588              	.LBB90:
 589              	.LBB91:
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 590              		.loc 3 2041 0
 591 0116 E368     		ldr	r3, [r4, #12]
 592 0118 43F01003 		orr	r3, r3, #16
 593 011c E360     		str	r3, [r4, #12]
 594              	.LVL59:
 595              	.LBE91:
 596              	.LBE90:
 597              	.LBB92:
 598              	.LBB93:
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 599              		.loc 3 427 0
 600 011e E368     		ldr	r3, [r4, #12]
 601 0120 43F40053 		orr	r3, r3, #8192
 602 0124 E360     		str	r3, [r4, #12]
 603              	.LVL60:
 604              	.LBE93:
 605              	.LBE92:
 149:Src/main.c    ****   RP_INIT_UART_DMA(DMA2, LL_DMA_STREAM_1, USART6, z_iface);
 606              		.loc 1 149 0
 607 0126 04F55044 		add	r4, r4, #53248
 608 012a 614F     		ldr	r7, .L33+44
 609 012c 3346     		mov	r3, r6
 610 012e 2A46     		mov	r2, r5
 611 0130 2146     		mov	r1, r4
 612 0132 3846     		mov	r0, r7
 613 0134 FFF7FEFF 		bl	RP_Init_Interface
 614              	.LVL61:
 150:Src/main.c    **** 
 615              		.loc 1 150 0
 616 0138 0837     		adds	r7, r7, #8
 617              	.LVL62:
 618              	.LBB94:
 619              	.LBB95:
1445:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 620              		.loc 2 1445 0
 621 013a 5E4B     		ldr	r3, .L33+48
 622 013c DF60     		str	r7, [r3, #12]
 623              	.LVL63:
 624              	.LBE95:
 625              	.LBE94:
 626              	.LBB96:
ARM GAS  /tmp/cciP3Jzd.s 			page 107


 627              	.LBB97:
 977:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 628              		.loc 2 977 0
 629 013e 5A68     		ldr	r2, [r3, #4]
 630 0140 120C     		lsrs	r2, r2, #16
 631 0142 1204     		lsls	r2, r2, #16
 632 0144 42F48072 		orr	r2, r2, #256
 633 0148 5A60     		str	r2, [r3, #4]
 634              	.LVL64:
 635              	.LBE97:
 636              	.LBE96:
 637              	.LBB98:
 638              	.LBB99:
1468:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 639              		.loc 2 1468 0
 640 014a 5B4A     		ldr	r2, .L33+52
 641 014c 9A60     		str	r2, [r3, #8]
 642              	.LVL65:
 643              	.LBE99:
 644              	.LBE98:
 645              	.LBB100:
 646              	.LBB101:
2555:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 647              		.loc 2 2555 0
 648 014e 1A68     		ldr	r2, [r3]
 649 0150 42F00802 		orr	r2, r2, #8
 650 0154 1A60     		str	r2, [r3]
 651              	.LVL66:
 652              	.LBE101:
 653              	.LBE100:
 654              	.LBB102:
 655              	.LBB103:
 656              		.loc 2 2595 0
 657 0156 1A68     		ldr	r2, [r3]
 658 0158 42F01002 		orr	r2, r2, #16
 659 015c 1A60     		str	r2, [r3]
 660              	.LVL67:
 661              	.LBE103:
 662              	.LBE102:
 663              	.LBB104:
 664              	.LBB105:
 503:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h **** }
 665              		.loc 2 503 0
 666 015e 1A68     		ldr	r2, [r3]
 667 0160 42F00102 		orr	r2, r2, #1
 668 0164 1A60     		str	r2, [r3]
 669              	.LVL68:
 670              	.LBE105:
 671              	.LBE104:
 672              	.LBB106:
 673              	.LBB107:
 674              		.loc 3 2333 0
 675 0166 6369     		ldr	r3, [r4, #20]
 676 0168 43F04003 		orr	r3, r3, #64
 677 016c 6361     		str	r3, [r4, #20]
 678              	.LVL69:
 679              	.LBE107:
ARM GAS  /tmp/cciP3Jzd.s 			page 108


 680              	.LBE106:
 681              	.LBB108:
 682              	.LBB109:
2041:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 683              		.loc 3 2041 0
 684 016e E368     		ldr	r3, [r4, #12]
 685 0170 43F01003 		orr	r3, r3, #16
 686 0174 E360     		str	r3, [r4, #12]
 687              	.LVL70:
 688              	.LBE109:
 689              	.LBE108:
 690              	.LBB110:
 691              	.LBB111:
 427:Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h **** }
 692              		.loc 3 427 0
 693 0176 E368     		ldr	r3, [r4, #12]
 694 0178 43F40053 		orr	r3, r3, #8192
 695 017c E360     		str	r3, [r4, #12]
 696              	.LVL71:
 697              	.LBE111:
 698              	.LBE110:
 155:Src/main.c    ****   Position_Init();
 699              		.loc 1 155 0
 700 017e FFF7FEFF 		bl	PI_Init
 701              	.LVL72:
 156:Src/main.c    ****   
 702              		.loc 1 156 0
 703 0182 FFF7FEFF 		bl	Position_Init
 704              	.LVL73:
 158:Src/main.c    ****   Brake();
 705              		.loc 1 158 0
 706 0186 FFF7FEFF 		bl	Pos_Reset
 707              	.LVL74:
 159:Src/main.c    **** 
 708              		.loc 1 159 0
 709 018a FFF7FEFF 		bl	Brake
 710              	.LVL75:
 161:Src/main.c    ****   Z_Reset();
 711              		.loc 1 161 0
 712 018e FFF7FEFF 		bl	Z_Init
 713              	.LVL76:
 162:Src/main.c    **** 
 714              		.loc 1 162 0
 715 0192 FFF7FEFF 		bl	Z_Reset
 716              	.LVL77:
 164:Src/main.c    **** 
 717              		.loc 1 164 0
 718 0196 4FF47A70 		mov	r0, #1000
 719 019a FFF7FEFF 		bl	HAL_Delay
 720              	.LVL78:
 170:Src/main.c    ****   switch(team){
 721              		.loc 1 170 0
 722 019e FFF7FEFF 		bl	wait_start
 723              	.LVL79:
 171:Src/main.c    ****   case GREEN_TEAM:
 724              		.loc 1 171 0
 725 01a2 464B     		ldr	r3, .L33+56
ARM GAS  /tmp/cciP3Jzd.s 			page 109


 726 01a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 01a6 002B     		cmp	r3, #0
 728 01a8 54D0     		beq	.L21
 729 01aa 012B     		cmp	r3, #1
 730 01ac 56D0     		beq	.L22
 731              	.L20:
 179:Src/main.c    ****   
 732              		.loc 1 179 0
 733 01ae FFF7FEFF 		bl	PI_Start
 734              	.LVL80:
 181:Src/main.c    ****   Position_Init_Odometry();
 735              		.loc 1 181 0
 736 01b2 424B     		ldr	r3, .L33+56
 737 01b4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 738 01b6 FFF7FEFF 		bl	Init_Strategy
 739              	.LVL81:
 182:Src/main.c    **** 
 740              		.loc 1 182 0
 741 01ba FFF7FEFF 		bl	Position_Init_Odometry
 742              	.LVL82:
 243:Src/main.c    ****   HAL_Delay(1000);
 743              		.loc 1 243 0
 744 01be FFF7FEFF 		bl	Z_Arm_In
 745              	.LVL83:
 244:Src/main.c    ****   Z_Arm_Out();
 746              		.loc 1 244 0
 747 01c2 4FF47A70 		mov	r0, #1000
 748 01c6 FFF7FEFF 		bl	HAL_Delay
 749              	.LVL84:
 245:Src/main.c    ****   HAL_Delay(1000);
 750              		.loc 1 245 0
 751 01ca FFF7FEFF 		bl	Z_Arm_Out
 752              	.LVL85:
 246:Src/main.c    ****   Z_Place();
 753              		.loc 1 246 0
 754 01ce 4FF47A70 		mov	r0, #1000
 755 01d2 FFF7FEFF 		bl	HAL_Delay
 756              	.LVL86:
 247:Src/main.c    ****   Z_State state;
 757              		.loc 1 247 0
 758 01d6 FFF7FEFF 		bl	Z_Place
 759              	.LVL87:
 249:Src/main.c    ****     PI_Log("Z State error\n");
 760              		.loc 1 249 0
 761 01da 0DF10F00 		add	r0, sp, #15
 762 01de FFF7FEFF 		bl	Z_Wait_State
 763              	.LVL88:
 764 01e2 B0F1FF3F 		cmp	r0, #-1
 765 01e6 3DD0     		beq	.L31
 766              	.L23:
 252:Src/main.c    ****   case Z_SUCCESS:
 767              		.loc 1 252 0
 768 01e8 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 769 01ec 012B     		cmp	r3, #1
 770 01ee 3DD0     		beq	.L25
 771 01f0 022B     		cmp	r3, #2
 772 01f2 3FD0     		beq	.L26
ARM GAS  /tmp/cciP3Jzd.s 			page 110


 773              	.L24:
 260:Src/main.c    ****   
 774              		.loc 1 260 0
 775 01f4 3248     		ldr	r0, .L33+60
 776 01f6 FFF7FEFF 		bl	PI_Log
 777              	.LVL89:
 262:Src/main.c    ****     PI_Log("Pos get : pas de réponse.\n");
 778              		.loc 1 262 0
 779 01fa FFF7FEFF 		bl	Pos_Get_Position
 780              	.LVL90:
 781 01fe B0F1FF3F 		cmp	r0, #-1
 782 0202 3BD0     		beq	.L32
 265:Src/main.c    ****   }
 783              		.loc 1 265 0
 784 0204 2F4B     		ldr	r3, .L33+64
 785 0206 1C88     		ldrh	r4, [r3]
 786 0208 5D88     		ldrh	r5, [r3, #2]
 787 020a 5868     		ldr	r0, [r3, #4]	@ float
 788 020c FFF7FEFF 		bl	__aeabi_f2d
 789              	.LVL91:
 790 0210 CDE90001 		strd	r0, [sp]
 791 0214 2A46     		mov	r2, r5
 792 0216 2146     		mov	r1, r4
 793 0218 2B48     		ldr	r0, .L33+68
 794 021a FFF7FEFF 		bl	PI_Log
 795              	.LVL92:
 796              	.L28:
 296:Src/main.c    ****   me.y = AREA_HEIGHT/2;
 797              		.loc 1 296 0
 798 021e 294B     		ldr	r3, .L33+64
 799 0220 40F2DC52 		movw	r2, #1500
 800 0224 1A80     		strh	r2, [r3]	@ movhi
 297:Src/main.c    ****   while (1){
 801              		.loc 1 297 0
 802 0226 4FF47A72 		mov	r2, #1000
 803 022a 5A80     		strh	r2, [r3, #2]	@ movhi
 804              	.L29:
 299:Src/main.c    ****     /*__disable_irq();
 805              		.loc 1 299 0 discriminator 1
 806 022c FFF7FEFF 		bl	Pos_Get_Position
 807              	.LVL93:
 305:Src/main.c    ****     HAL_Delay(500);
 808              		.loc 1 305 0 discriminator 1
 809 0230 244B     		ldr	r3, .L33+64
 810 0232 1C88     		ldrh	r4, [r3]
 811 0234 5D88     		ldrh	r5, [r3, #2]
 812 0236 5868     		ldr	r0, [r3, #4]	@ float
 813 0238 FFF7FEFF 		bl	__aeabi_f2d
 814              	.LVL94:
 815 023c CDE90001 		strd	r0, [sp]
 816 0240 2A46     		mov	r2, r5
 817 0242 2146     		mov	r1, r4
 818 0244 2048     		ldr	r0, .L33+68
 819 0246 FFF7FEFF 		bl	PI_Log
 820              	.LVL95:
 306:Src/main.c    ****   /* USER CODE END WHILE */
 821              		.loc 1 306 0 discriminator 1
ARM GAS  /tmp/cciP3Jzd.s 			page 111


 822 024a 4FF4FA70 		mov	r0, #500
 823 024e FFF7FEFF 		bl	HAL_Delay
 824              	.LVL96:
 825 0252 EBE7     		b	.L29
 826              	.L21:
 173:Src/main.c    ****     break;
 827              		.loc 1 173 0
 828 0254 1D48     		ldr	r0, .L33+72
 829 0256 FFF7FEFF 		bl	PI_Log
 830              	.LVL97:
 174:Src/main.c    ****   case ORANGE_TEAM:
 831              		.loc 1 174 0
 832 025a A8E7     		b	.L20
 833              	.L22:
 176:Src/main.c    ****     break;
 834              		.loc 1 176 0
 835 025c 1C48     		ldr	r0, .L33+76
 836 025e FFF7FEFF 		bl	PI_Log
 837              	.LVL98:
 177:Src/main.c    ****   }
 838              		.loc 1 177 0
 839 0262 A4E7     		b	.L20
 840              	.L31:
 250:Src/main.c    ****   }
 841              		.loc 1 250 0
 842 0264 1B48     		ldr	r0, .L33+80
 843 0266 FFF7FEFF 		bl	PI_Log
 844              	.LVL99:
 845 026a BDE7     		b	.L23
 846              	.L25:
 254:Src/main.c    ****     break;
 847              		.loc 1 254 0
 848 026c 1A48     		ldr	r0, .L33+84
 849 026e FFF7FEFF 		bl	PI_Log
 850              	.LVL100:
 255:Src/main.c    ****   case Z_ERROR:
 851              		.loc 1 255 0
 852 0272 BFE7     		b	.L24
 853              	.L26:
 257:Src/main.c    ****     break;
 854              		.loc 1 257 0
 855 0274 1948     		ldr	r0, .L33+88
 856 0276 FFF7FEFF 		bl	PI_Log
 857              	.LVL101:
 258:Src/main.c    ****   }
 858              		.loc 1 258 0
 859 027a BBE7     		b	.L24
 860              	.L32:
 263:Src/main.c    ****   }else{
 861              		.loc 1 263 0
 862 027c 1848     		ldr	r0, .L33+92
 863 027e FFF7FEFF 		bl	PI_Log
 864              	.LVL102:
 865 0282 CCE7     		b	.L28
 866              	.L34:
 867              		.align	2
 868              	.L33:
ARM GAS  /tmp/cciP3Jzd.s 			page 112


 869 0284 00080240 		.word	1073874944
 870 0288 00000000 		.word	tof
 871 028c 00000000 		.word	HAL_GetTick
 872 0290 00000000 		.word	RP_UART_Transmit
 873 0294 00100140 		.word	1073811456
 874 0298 00000000 		.word	pi_iface
 875 029c 40640240 		.word	1073898560
 876 02a0 04100140 		.word	1073811460
 877 02a4 00000000 		.word	pos_iface
 878 02a8 88600240 		.word	1073897608
 879 02ac 04440040 		.word	1073759236
 880 02b0 00000000 		.word	z_iface
 881 02b4 28640240 		.word	1073898536
 882 02b8 04140140 		.word	1073812484
 883 02bc 00000000 		.word	team
 884 02c0 44000000 		.word	.LC6
 885 02c4 00000000 		.word	me
 886 02c8 68000000 		.word	.LC8
 887 02cc 00000000 		.word	.LC1
 888 02d0 0C000000 		.word	.LC2
 889 02d4 1C000000 		.word	.LC3
 890 02d8 2C000000 		.word	.LC4
 891 02dc 38000000 		.word	.LC5
 892 02e0 4C000000 		.word	.LC7
 893              		.cfi_endproc
 894              	.LFE679:
 896              		.comm	tof,1712,4
 897              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 898              		.align	2
 899              	.LC0:
 900 0000 5372632F 		.ascii	"Src/main.c\000"
 900      6D61696E 
 900      2E6300
 901              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 902              		.align	2
 903              	.LC1:
 904 0000 47726565 		.ascii	"Green team\012\000"
 904      6E207465 
 904      616D0A00 
 905              	.LC2:
 906 000c 4F72616E 		.ascii	"Orange team\012\000"
 906      67652074 
 906      65616D0A 
 906      00
 907 0019 000000   		.space	3
 908              	.LC3:
 909 001c 5A205374 		.ascii	"Z State error\012\000"
 909      61746520 
 909      6572726F 
 909      720A00
 910 002b 00       		.space	1
 911              	.LC4:
 912 002c 5A5F5355 		.ascii	"Z_SUCCESS\012\000"
 912      43434553 
 912      530A00
 913 0037 00       		.space	1
 914              	.LC5:
ARM GAS  /tmp/cciP3Jzd.s 			page 113


 915 0038 5A5F4552 		.ascii	"Z_ERROR\012\000"
 915      524F520A 
 915      00
 916 0041 000000   		.space	3
 917              	.LC6:
 918 0044 5A20456E 		.ascii	"Z End\012\000"
 918      640A00
 919 004b 00       		.space	1
 920              	.LC7:
 921 004c 506F7320 		.ascii	"Pos get : pas de r\303\251ponse.\012\000"
 921      67657420 
 921      3A207061 
 921      73206465 
 921      2072C3A9 
 922              	.LC8:
 923 0068 25752025 		.ascii	"%u %u %f\012\000"
 923      75202566 
 923      0A00
 924              		.text
 925              	.Letext0:
 926              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 927              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 928              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 929              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 930              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 931              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 932              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 933              		.file 11 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 934              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 935              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 936              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 937              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 938              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 939              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 940              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 941              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 942              		.file 20 "Inc/i2c.h"
 943              		.file 21 "Inc/crc_16.h"
 944              		.file 22 "Inc/robotronik_protocol.h"
 945              		.file 23 "Inc/usart.h"
 946              		.file 24 "/usr/arm-none-eabi/include/stdlib.h"
 947              		.file 25 "Inc/main.h"
 948              		.file 26 "Inc/game_defs.h"
 949              		.file 27 "Inc/strategy.h"
 950              		.file 28 "Inc/tim.h"
 951              		.file 29 "Drivers/VL53L0X/API/vl53l0x_types.h"
 952              		.file 30 "Drivers/VL53L0X/API/vl53l0x_device.h"
 953              		.file 31 "Drivers/VL53L0X/API/vl53l0x_def.h"
 954              		.file 32 "Drivers/VL53L0X/Platform/vl53l0x_platform.h"
 955              		.file 33 "Inc/tof.h"
 956              		.file 34 "Inc/map.h"
 957              		.file 35 "Inc/z_client.h"
 958              		.file 36 "Inc/obstacle.h"
 959              		.file 37 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 960              		.file 38 "Drivers/VL53L0X/API/vl53l0x_api.h"
 961              		.file 39 "Inc/pi_client.h"
 962              		.file 40 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/cciP3Jzd.s 			page 114


 963              		.file 41 "Inc/gpio.h"
 964              		.file 42 "Inc/dma.h"
 965              		.file 43 "Inc/position_client.h"
 966              		.file 44 "Inc/gas.h"
 967              		.file 45 "Inc/system.h"
ARM GAS  /tmp/cciP3Jzd.s 			page 115


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cciP3Jzd.s:18     .text.Init_ToF:0000000000000000 $t
     /tmp/cciP3Jzd.s:24     .text.Init_ToF:0000000000000000 Init_ToF
     /tmp/cciP3Jzd.s:124    .text.Init_ToF:0000000000000090 $d
     /tmp/cciP3Jzd.s:129    .text.HardFault_Handler:0000000000000000 $t
     /tmp/cciP3Jzd.s:136    .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/cciP3Jzd.s:159    .text._Error_Handler:0000000000000000 $t
     /tmp/cciP3Jzd.s:166    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cciP3Jzd.s:181    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cciP3Jzd.s:188    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cciP3Jzd.s:318    .text.SystemClock_Config:00000000000000b8 $d
     /tmp/cciP3Jzd.s:327    .text.main:0000000000000000 $t
     /tmp/cciP3Jzd.s:334    .text.main:0000000000000000 main
     /tmp/cciP3Jzd.s:869    .text.main:0000000000000284 $d
                            *COM*:00000000000006b0 tof
     /tmp/cciP3Jzd.s:898    .rodata.SystemClock_Config.str1.4:0000000000000000 $d
     /tmp/cciP3Jzd.s:902    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_Delay
ToF_Init_Struct
ToF_Poke
ToF_Set_Address
ToF_Init_Device
ToF_Configure_Device
VL53L0X_StartMeasurement
hi2c3
PI_Error
hlt
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_f2d
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_I2C1_Init
MX_I2C3_Init
MX_USART1_UART_Init
MX_USART2_UART_Init
MX_USART6_UART_Init
MX_TIM2_Init
MX_TIM3_Init
RP_Init_Interface
PI_Init
Position_Init
Pos_Reset
Brake
Z_Init
Z_Reset
wait_start
PI_Start
ARM GAS  /tmp/cciP3Jzd.s 			page 116


Init_Strategy
Position_Init_Odometry
Z_Arm_In
Z_Arm_Out
Z_Place
Z_Wait_State
PI_Log
Pos_Get_Position
HAL_GetTick
RP_UART_Transmit
pi_iface
pos_iface
z_iface
team
me
