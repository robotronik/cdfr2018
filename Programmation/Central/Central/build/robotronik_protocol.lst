ARM GAS  /tmp/ccQHyITR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"robotronik_protocol.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RP_FSM_INIT,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	RP_FSM_INIT:
  25              	.LFB8:
  26              		.file 1 "Src/robotronik_protocol.c"
   1:Src/robotronik_protocol.c **** /**
   2:Src/robotronik_protocol.c ****  * Library Robotronik Protocol
   3:Src/robotronik_protocol.c ****  * robotronik_protocol.c
   4:Src/robotronik_protocol.c ****  *
   5:Src/robotronik_protocol.c ****  * This library is meant to implement a light and reliable protocol
   6:Src/robotronik_protocol.c ****  * for communication between two MCUs. The protocol was designed for
   7:Src/robotronik_protocol.c ****  * request-response oriented communications. It is why it focuses on
   8:Src/robotronik_protocol.c ****  * performance for asynchronous reception.
   9:Src/robotronik_protocol.c ****  * 
  10:Src/robotronik_protocol.c ****  * It uses the Consistent Overhead Byte Stuffing algorithm to delimit
  11:Src/robotronik_protocol.c ****  * the frames and for synchronization purposes. CRC-16/BUYPASS is
  12:Src/robotronik_protocol.c ****  * used to detect corrupted frames.
  13:Src/robotronik_protocol.c ****  *
  14:Src/robotronik_protocol.c ****  * Copyright 2018 Antonin Hirschy
  15:Src/robotronik_protocol.c ****  *
  16:Src/robotronik_protocol.c ****  * This program is free software: you can redistribute it and/or modify
  17:Src/robotronik_protocol.c ****  * it under the terms of the GNU General Public License as published by
  18:Src/robotronik_protocol.c ****  * the Free Software Foundation, either version 3 of the License, or
  19:Src/robotronik_protocol.c ****  * (at your option) any later version.
  20:Src/robotronik_protocol.c ****  * 
  21:Src/robotronik_protocol.c ****  * This program is distributed in the hope that it will be useful,
  22:Src/robotronik_protocol.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  23:Src/robotronik_protocol.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  24:Src/robotronik_protocol.c ****  * GNU General Public License for more details.
  25:Src/robotronik_protocol.c ****  *
  26:Src/robotronik_protocol.c ****  * You should have received a copy of the GNU General Public License
  27:Src/robotronik_protocol.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  28:Src/robotronik_protocol.c ****  */
  29:Src/robotronik_protocol.c **** #include "robotronik_protocol.h"
  30:Src/robotronik_protocol.c **** 
  31:Src/robotronik_protocol.c **** #define RP_EOF 0x00
  32:Src/robotronik_protocol.c **** #define WRITE_BUFF(p_buffer,byte) *(p_buffer++) = byte;
ARM GAS  /tmp/ccQHyITR.s 			page 2


  33:Src/robotronik_protocol.c **** #define ENCODE_BYTE(byte,p_buffer,p_code) {\
  34:Src/robotronik_protocol.c ****     if(byte == RP_EOF){			   \
  35:Src/robotronik_protocol.c ****       *p_code = p_buffer - p_code;	   \
  36:Src/robotronik_protocol.c ****       p_code = p_buffer++;		   \
  37:Src/robotronik_protocol.c ****     }					   \
  38:Src/robotronik_protocol.c ****     else{				   \
  39:Src/robotronik_protocol.c ****       *(p_buffer++) = byte;		   \
  40:Src/robotronik_protocol.c ****     }					   \
  41:Src/robotronik_protocol.c ****   }
  42:Src/robotronik_protocol.c **** 
  43:Src/robotronik_protocol.c **** static uint16_t err;
  44:Src/robotronik_protocol.c **** 
  45:Src/robotronik_protocol.c **** static void RP_FSM_INIT(RP_Interface *interface);
  46:Src/robotronik_protocol.c **** static void RP_FSM_ID(RP_Interface *interface);
  47:Src/robotronik_protocol.c **** static void RP_FSM_SIZE(RP_Interface *interface);
  48:Src/robotronik_protocol.c **** static void RP_FSM_DATA(RP_Interface *interface);
  49:Src/robotronik_protocol.c **** static void RP_FSM_CRC_LOW(RP_Interface *interface);
  50:Src/robotronik_protocol.c **** static void RP_FSM_CRC_HIGH(RP_Interface *interface);
  51:Src/robotronik_protocol.c **** static void RP_FSM_END(RP_Interface *interface);
  52:Src/robotronik_protocol.c **** 
  53:Src/robotronik_protocol.c **** //==================================================
  54:Src/robotronik_protocol.c **** //           Initialization functions
  55:Src/robotronik_protocol.c **** //==================================================
  56:Src/robotronik_protocol.c **** 
  57:Src/robotronik_protocol.c **** void RP_Init_Interface(RP_Interface *interface,
  58:Src/robotronik_protocol.c **** 		       void* link_handler,
  59:Src/robotronik_protocol.c **** 		       uint8_t (*send)(void*, uint8_t *, uint16_t, uint32_t),
  60:Src/robotronik_protocol.c **** 		       uint32_t (*get_tick)()){
  61:Src/robotronik_protocol.c ****   interface->link_handler = link_handler;
  62:Src/robotronik_protocol.c ****   interface->send = send;
  63:Src/robotronik_protocol.c ****   interface->get_tick = get_tick;
  64:Src/robotronik_protocol.c ****   interface->received = false;
  65:Src/robotronik_protocol.c ****   
  66:Src/robotronik_protocol.c ****   //FSM
  67:Src/robotronik_protocol.c ****   interface->update_state = RP_FSM_INIT;
  68:Src/robotronik_protocol.c ****   interface->p_in = interface->buffer_in;
  69:Src/robotronik_protocol.c ****   interface->p_out = interface->r_packet.data;
  70:Src/robotronik_protocol.c ****   interface->crc_accum = 0;
  71:Src/robotronik_protocol.c **** }
  72:Src/robotronik_protocol.c **** 
  73:Src/robotronik_protocol.c **** void __attribute__((weak)) RP_Packet_Received(RP_Interface* interface, RP_Packet* packet){
  74:Src/robotronik_protocol.c ****   //Avoid compiler warnings.
  75:Src/robotronik_protocol.c ****   (void)interface;
  76:Src/robotronik_protocol.c ****   (void)packet;
  77:Src/robotronik_protocol.c **** }
  78:Src/robotronik_protocol.c **** 
  79:Src/robotronik_protocol.c **** void __attribute__((weak)) RP_Error_Handler(RP_Interface* interface, uint16_t err){
  80:Src/robotronik_protocol.c ****   //Avoid compiler warnings.
  81:Src/robotronik_protocol.c ****   (void)interface;
  82:Src/robotronik_protocol.c ****   (void)err;
  83:Src/robotronik_protocol.c ****  }
  84:Src/robotronik_protocol.c **** 
  85:Src/robotronik_protocol.c **** //==================================================
  86:Src/robotronik_protocol.c **** //           Sending functions
  87:Src/robotronik_protocol.c **** //==================================================
  88:Src/robotronik_protocol.c **** 
  89:Src/robotronik_protocol.c **** int RP_Build_Frame(RP_Packet *packet, uint8_t buffer[RP_BUFFER_SIZE]){
ARM GAS  /tmp/ccQHyITR.s 			page 3


  90:Src/robotronik_protocol.c ****   if((packet->len <= 0) || (packet->len + 6 > RP_BUFFER_SIZE) || (packet->len > RP_MAX_PACKET_SIZE)
  91:Src/robotronik_protocol.c ****     err =  RP_ERR_INTERNAL | RP_ERR_ILLEGAL_ARGUMENTS;
  92:Src/robotronik_protocol.c ****     return -1;
  93:Src/robotronik_protocol.c ****   }
  94:Src/robotronik_protocol.c **** 
  95:Src/robotronik_protocol.c ****   uint8_t *p_buffer = buffer;
  96:Src/robotronik_protocol.c ****   uint8_t *p_code = p_buffer++;
  97:Src/robotronik_protocol.c ****   uint16_t crc_accum = CRC_INIT;
  98:Src/robotronik_protocol.c **** 
  99:Src/robotronik_protocol.c ****   //ID
 100:Src/robotronik_protocol.c ****   const uint8_t id = packet->id;
 101:Src/robotronik_protocol.c ****   UPDATE_CRC(crc_accum, id);
 102:Src/robotronik_protocol.c ****   ENCODE_BYTE(id, p_buffer, p_code);
 103:Src/robotronik_protocol.c ****     
 104:Src/robotronik_protocol.c ****   //Size (remaining bytes)
 105:Src/robotronik_protocol.c ****   const uint8_t size = 4 + packet->len;
 106:Src/robotronik_protocol.c ****   UPDATE_CRC(crc_accum, size);
 107:Src/robotronik_protocol.c ****   *(p_buffer++) = size;
 108:Src/robotronik_protocol.c ****   
 109:Src/robotronik_protocol.c ****   int i;
 110:Src/robotronik_protocol.c ****   for(i = 0; i < packet->len; i++){
 111:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 112:Src/robotronik_protocol.c ****     UPDATE_CRC(crc_accum, byte);
 113:Src/robotronik_protocol.c ****     ENCODE_BYTE(byte, p_buffer, p_code);
 114:Src/robotronik_protocol.c ****   }
 115:Src/robotronik_protocol.c ****   
 116:Src/robotronik_protocol.c ****   //CRC-16
 117:Src/robotronik_protocol.c ****   uint8_t crc_low = crc_accum & 0xFF;
 118:Src/robotronik_protocol.c ****   uint8_t crc_high = crc_accum >> 8;
 119:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_low, p_buffer, p_code);
 120:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_high, p_buffer, p_code);
 121:Src/robotronik_protocol.c ****   
 122:Src/robotronik_protocol.c ****   //RP_EOF
 123:Src/robotronik_protocol.c ****   *p_code = p_buffer - p_code;
 124:Src/robotronik_protocol.c ****   *(p_buffer++) = RP_EOF;
 125:Src/robotronik_protocol.c **** 
 126:Src/robotronik_protocol.c ****   return p_buffer - buffer;
 127:Src/robotronik_protocol.c **** }
 128:Src/robotronik_protocol.c **** 
 129:Src/robotronik_protocol.c **** int RP_Sync(RP_Interface *interface, uint32_t timeout){
 130:Src/robotronik_protocol.c ****   uint8_t byte = RP_EOF;
 131:Src/robotronik_protocol.c **** 
 132:Src/robotronik_protocol.c ****   if(interface->send(interface->link_handler, &byte, 1, timeout) != 0){
 133:Src/robotronik_protocol.c ****     err = RP_ERR_LINK | RP_ERR_TIMEOUT;
 134:Src/robotronik_protocol.c ****     return -1;
 135:Src/robotronik_protocol.c ****   }
 136:Src/robotronik_protocol.c ****   
 137:Src/robotronik_protocol.c ****   return 0;
 138:Src/robotronik_protocol.c **** }
 139:Src/robotronik_protocol.c **** 
 140:Src/robotronik_protocol.c **** int RP_Send(RP_Interface *interface, RP_Packet *packet, uint32_t timeout){
 141:Src/robotronik_protocol.c ****   int len = RP_Build_Frame(packet, interface->buffer_out);
 142:Src/robotronik_protocol.c **** 
 143:Src/robotronik_protocol.c ****   if(len == -1){
 144:Src/robotronik_protocol.c ****     return -1;
 145:Src/robotronik_protocol.c ****   }
 146:Src/robotronik_protocol.c **** 
ARM GAS  /tmp/ccQHyITR.s 			page 4


 147:Src/robotronik_protocol.c ****   if(interface->send(interface->link_handler, interface->buffer_out, len, timeout) != 0){
 148:Src/robotronik_protocol.c ****     err = RP_ERR_LINK | RP_ERR_TIMEOUT;
 149:Src/robotronik_protocol.c ****     return -1;
 150:Src/robotronik_protocol.c ****   }
 151:Src/robotronik_protocol.c ****   
 152:Src/robotronik_protocol.c ****   return 0;
 153:Src/robotronik_protocol.c **** }
 154:Src/robotronik_protocol.c **** 
 155:Src/robotronik_protocol.c **** //==================================================
 156:Src/robotronik_protocol.c **** //           Receiving functions
 157:Src/robotronik_protocol.c **** //==================================================
 158:Src/robotronik_protocol.c **** 
 159:Src/robotronik_protocol.c **** void RP_Process_Data(RP_Interface *interface, uint8_t *data, uint16_t len){
 160:Src/robotronik_protocol.c ****   interface->p_in = data;
 161:Src/robotronik_protocol.c **** 
 162:Src/robotronik_protocol.c ****   while(len--){
 163:Src/robotronik_protocol.c ****     interface->update_state(interface);
 164:Src/robotronik_protocol.c ****   }
 165:Src/robotronik_protocol.c **** }
 166:Src/robotronik_protocol.c **** 
 167:Src/robotronik_protocol.c **** int RP_Wait_Packet(RP_Interface *interface, uint32_t timeout_ms){
 168:Src/robotronik_protocol.c ****   int start = interface->get_tick();
 169:Src/robotronik_protocol.c ****   
 170:Src/robotronik_protocol.c ****   interface->received = false;
 171:Src/robotronik_protocol.c ****   while(!interface->received && (interface->get_tick() - start < timeout_ms));
 172:Src/robotronik_protocol.c ****   
 173:Src/robotronik_protocol.c ****   if(!interface->received){
 174:Src/robotronik_protocol.c ****     return -1;
 175:Src/robotronik_protocol.c ****   }
 176:Src/robotronik_protocol.c ****   
 177:Src/robotronik_protocol.c ****   interface->received = false;
 178:Src/robotronik_protocol.c ****   
 179:Src/robotronik_protocol.c ****   return 0;
 180:Src/robotronik_protocol.c **** }
 181:Src/robotronik_protocol.c **** 
 182:Src/robotronik_protocol.c **** #define FSM_UPDATE(fsm,state_function) fsm->update_state = state_function
 183:Src/robotronik_protocol.c **** 
 184:Src/robotronik_protocol.c **** #define FSM_GET_BYTE(fsm) uint8_t byte = *(fsm->p_in++);
 185:Src/robotronik_protocol.c **** 
 186:Src/robotronik_protocol.c **** #define FSM_BYTE byte
 187:Src/robotronik_protocol.c **** 
 188:Src/robotronik_protocol.c **** #define FSM_RESET(fsm) {						\
 189:Src/robotronik_protocol.c ****     FSM_UPDATE(fsm, RP_FSM_INIT);					\
 190:Src/robotronik_protocol.c ****     fsm->crc_accum = 0;							\
 191:Src/robotronik_protocol.c ****     fsm->p_out = fsm->r_packet.data;					\
 192:Src/robotronik_protocol.c ****     return;								\
 193:Src/robotronik_protocol.c ****   }
 194:Src/robotronik_protocol.c **** 
 195:Src/robotronik_protocol.c **** #define FSM_ERR(fsm, err_code) {		\
 196:Src/robotronik_protocol.c ****   err = err_code;				\
 197:Src/robotronik_protocol.c ****   RP_Error_Handler(fsm, err);			\
 198:Src/robotronik_protocol.c ****   FSM_RESET(fsm);				\
 199:Src/robotronik_protocol.c ****   }
 200:Src/robotronik_protocol.c **** 
 201:Src/robotronik_protocol.c **** #define FSM_CHECK_ERR(fsm, err_code) {		\
 202:Src/robotronik_protocol.c ****     if(FSM_BYTE == RP_EOF){			\
 203:Src/robotronik_protocol.c ****       FSM_ERR(fsm, err_code);			\
ARM GAS  /tmp/ccQHyITR.s 			page 5


 204:Src/robotronik_protocol.c ****     }						\
 205:Src/robotronik_protocol.c ****   }
 206:Src/robotronik_protocol.c **** 
 207:Src/robotronik_protocol.c **** #define FSM_CHECK_EOF(fsm) {			\
 208:Src/robotronik_protocol.c ****     if(FSM_BYTE == RP_EOF) {FSM_RESET(fsm);}	\
 209:Src/robotronik_protocol.c ****   }
 210:Src/robotronik_protocol.c **** /**
 211:Src/robotronik_protocol.c ****  * Reinit the FSM when EOF is reached.
 212:Src/robotronik_protocol.c ****  * Set the 'valid' flag of FSM
 213:Src/robotronik_protocol.c ****  * and the error code.
 214:Src/robotronik_protocol.c ****  */
 215:Src/robotronik_protocol.c **** 
 216:Src/robotronik_protocol.c **** #define FSM_DECODE_BYTE(fsm, byte)			\
 217:Src/robotronik_protocol.c ****   (((--fsm->bs_count) == 0)?				\
 218:Src/robotronik_protocol.c ****    (fsm->bs_count = byte, (uint8_t) RP_EOF):		\
 219:Src/robotronik_protocol.c ****    (byte))
 220:Src/robotronik_protocol.c **** /**
 221:Src/robotronik_protocol.c ****  * Update the COBS counter and decode the current byte. This macro can
 222:Src/robotronik_protocol.c ****  * be used once and only once in an fsm state. If the macro is not
 223:Src/robotronik_protocol.c ****  * used and the FSM is not reset, bs_count MUST be updated manually.
 224:Src/robotronik_protocol.c ****  */
 225:Src/robotronik_protocol.c **** 
 226:Src/robotronik_protocol.c **** static void RP_FSM_INIT(RP_Interface *interface){
  27              		.loc 1 226 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 227:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
  33              		.loc 1 227 0
  34 0000 D0F80834 		ldr	r3, [r0, #1032]
  35 0004 5A1C     		adds	r2, r3, #1
  36 0006 C0F80824 		str	r2, [r0, #1032]
  37 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  38              	.LVL1:
 228:Src/robotronik_protocol.c ****   /* 
 229:Src/robotronik_protocol.c ****    * If current byte is EOF, the fsm is reset but no error is set :
 230:Src/robotronik_protocol.c ****    * it's just a blank frame that can be used for synchronisation
 231:Src/robotronik_protocol.c ****    * purpose.
 232:Src/robotronik_protocol.c ****    */
 233:Src/robotronik_protocol.c ****   FSM_CHECK_EOF(interface);
  39              		.loc 1 233 0
  40 000c 2BB1     		cbz	r3, .L4
 234:Src/robotronik_protocol.c **** 
 235:Src/robotronik_protocol.c ****   /*
 236:Src/robotronik_protocol.c ****    * The first byte initializes the COBS algorithm.
 237:Src/robotronik_protocol.c ****    */
 238:Src/robotronik_protocol.c ****   interface->bs_count = FSM_BYTE;
  41              		.loc 1 238 0
  42 000e 80F80434 		strb	r3, [r0, #1028]
 239:Src/robotronik_protocol.c **** 
 240:Src/robotronik_protocol.c ****   FSM_UPDATE(interface, RP_FSM_ID);
  43              		.loc 1 240 0
  44 0012 074B     		ldr	r3, .L5
  45              	.LVL2:
  46 0014 C0F80034 		str	r3, [r0, #1024]
ARM GAS  /tmp/ccQHyITR.s 			page 6


 241:Src/robotronik_protocol.c **** }
  47              		.loc 1 241 0
  48 0018 7047     		bx	lr
  49              	.LVL3:
  50              	.L4:
 233:Src/robotronik_protocol.c **** 
  51              		.loc 1 233 0 discriminator 1
  52 001a 064B     		ldr	r3, .L5+4
  53              	.LVL4:
  54 001c C0F80034 		str	r3, [r0, #1024]
  55              	.LVL5:
  56 0020 0023     		movs	r3, #0
  57 0022 A0F81034 		strh	r3, [r0, #1040]	@ movhi
  58 0026 00F58573 		add	r3, r0, #266
  59 002a C0F80C34 		str	r3, [r0, #1036]
  60 002e 7047     		bx	lr
  61              	.L6:
  62              		.align	2
  63              	.L5:
  64 0030 00000000 		.word	RP_FSM_ID
  65 0034 00000000 		.word	RP_FSM_INIT
  66              		.cfi_endproc
  67              	.LFE8:
  69              		.section	.text.RP_Init_Interface,"ax",%progbits
  70              		.align	1
  71              		.global	RP_Init_Interface
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv4-sp-d16
  77              	RP_Init_Interface:
  78              	.LFB0:
  60:Src/robotronik_protocol.c ****   interface->link_handler = link_handler;
  79              		.loc 1 60 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL6:
  61:Src/robotronik_protocol.c ****   interface->send = send;
  85              		.loc 1 61 0
  86 0000 C0F81814 		str	r1, [r0, #1048]
  62:Src/robotronik_protocol.c ****   interface->get_tick = get_tick;
  87              		.loc 1 62 0
  88 0004 0260     		str	r2, [r0]
  63:Src/robotronik_protocol.c ****   interface->received = false;
  89              		.loc 1 63 0
  90 0006 4360     		str	r3, [r0, #4]
  64:Src/robotronik_protocol.c ****   
  91              		.loc 1 64 0
  92 0008 0023     		movs	r3, #0
  93              	.LVL7:
  94 000a 80F81234 		strb	r3, [r0, #1042]
  67:Src/robotronik_protocol.c ****   interface->p_in = interface->buffer_in;
  95              		.loc 1 67 0
  96 000e 074A     		ldr	r2, .L8
  97              	.LVL8:
ARM GAS  /tmp/ccQHyITR.s 			page 7


  98 0010 C0F80024 		str	r2, [r0, #1024]
  68:Src/robotronik_protocol.c ****   interface->p_out = interface->r_packet.data;
  99              		.loc 1 68 0
 100 0014 00F10802 		add	r2, r0, #8
 101 0018 C0F80824 		str	r2, [r0, #1032]
  69:Src/robotronik_protocol.c ****   interface->crc_accum = 0;
 102              		.loc 1 69 0
 103 001c 00F58572 		add	r2, r0, #266
 104 0020 C0F80C24 		str	r2, [r0, #1036]
  70:Src/robotronik_protocol.c **** }
 105              		.loc 1 70 0
 106 0024 A0F81034 		strh	r3, [r0, #1040]	@ movhi
  71:Src/robotronik_protocol.c **** 
 107              		.loc 1 71 0
 108 0028 7047     		bx	lr
 109              	.L9:
 110 002a 00BF     		.align	2
 111              	.L8:
 112 002c 00000000 		.word	RP_FSM_INIT
 113              		.cfi_endproc
 114              	.LFE0:
 116              		.section	.text.RP_Packet_Received,"ax",%progbits
 117              		.align	1
 118              		.weak	RP_Packet_Received
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	RP_Packet_Received:
 125              	.LFB1:
  73:Src/robotronik_protocol.c ****   //Avoid compiler warnings.
 126              		.loc 1 73 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.LVL9:
  77:Src/robotronik_protocol.c **** 
 132              		.loc 1 77 0
 133 0000 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE1:
 137              		.section	.text.RP_Error_Handler,"ax",%progbits
 138              		.align	1
 139              		.weak	RP_Error_Handler
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	RP_Error_Handler:
 146              	.LFB2:
  79:Src/robotronik_protocol.c ****   //Avoid compiler warnings.
 147              		.loc 1 79 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
ARM GAS  /tmp/ccQHyITR.s 			page 8


 152              	.LVL10:
  83:Src/robotronik_protocol.c **** 
 153              		.loc 1 83 0
 154 0000 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE2:
 158              		.section	.text.RP_FSM_ID,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	RP_FSM_ID:
 166              	.LFB9:
 242:Src/robotronik_protocol.c **** 
 243:Src/robotronik_protocol.c **** static void RP_FSM_ID(RP_Interface *interface){
 167              		.loc 1 243 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              	.LVL11:
 244:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 172              		.loc 1 244 0
 173 0000 D0F80834 		ldr	r3, [r0, #1032]
 174 0004 5A1C     		adds	r2, r3, #1
 175 0006 C0F80824 		str	r2, [r0, #1032]
 176 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 177              	.LVL12:
 245:Src/robotronik_protocol.c **** 
 246:Src/robotronik_protocol.c ****   /*
 247:Src/robotronik_protocol.c ****    * From this byte, reaching an EOF flag before the END state is
 248:Src/robotronik_protocol.c ****    * unexpected and will trigger an error.
 249:Src/robotronik_protocol.c ****    */
 250:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 178              		.loc 1 250 0
 179 000c D3B1     		cbz	r3, .L20
 251:Src/robotronik_protocol.c **** 
 252:Src/robotronik_protocol.c ****   /*
 253:Src/robotronik_protocol.c ****    * Note that the CRC is computed AFTER the byte is decoded. Indeed,
 254:Src/robotronik_protocol.c ****    * the CRC concerns the useful data.
 255:Src/robotronik_protocol.c ****    */
 256:Src/robotronik_protocol.c ****   FSM_BYTE = FSM_DECODE_BYTE(interface, FSM_BYTE);
 180              		.loc 1 256 0
 181 000e 90F80424 		ldrb	r2, [r0, #1028]	@ zero_extendqisi2
 182 0012 013A     		subs	r2, r2, #1
 183 0014 D2B2     		uxtb	r2, r2
 184 0016 80F80424 		strb	r2, [r0, #1028]
 185 001a 12B9     		cbnz	r2, .L15
 186              		.loc 1 256 0 is_stmt 0 discriminator 1
 187 001c 80F80434 		strb	r3, [r0, #1028]
 188 0020 1346     		mov	r3, r2
 189              	.LVL13:
 190              	.L15:
 257:Src/robotronik_protocol.c ****   interface->r_packet.id = FSM_BYTE;
 191              		.loc 1 257 0 is_stmt 1 discriminator 4
 192 0022 80F80831 		strb	r3, [r0, #264]
 258:Src/robotronik_protocol.c ****   UPDATE_CRC(interface->crc_accum, FSM_BYTE);
ARM GAS  /tmp/ccQHyITR.s 			page 9


 193              		.loc 1 258 0 discriminator 4
 194 0026 B0F81024 		ldrh	r2, [r0, #1040]
 195 002a 83EA1223 		eor	r3, r3, r2, lsr #8
 196              	.LVL14:
 197 002e 0F49     		ldr	r1, .L21
 198 0030 31F91330 		ldrsh	r3, [r1, r3, lsl #1]
 199 0034 83EA0223 		eor	r3, r3, r2, lsl #8
 200 0038 A0F81034 		strh	r3, [r0, #1040]	@ movhi
 259:Src/robotronik_protocol.c **** 
 260:Src/robotronik_protocol.c ****   FSM_UPDATE(interface, RP_FSM_SIZE);
 201              		.loc 1 260 0 discriminator 4
 202 003c 0C4B     		ldr	r3, .L21+4
 203 003e C0F80034 		str	r3, [r0, #1024]
 204 0042 7047     		bx	lr
 205              	.LVL15:
 206              	.L20:
 243:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 207              		.loc 1 243 0 discriminator 1
 208 0044 10B5     		push	{r4, lr}
 209              	.LCFI0:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 213 0046 0446     		mov	r4, r0
 250:Src/robotronik_protocol.c **** 
 214              		.loc 1 250 0 discriminator 1
 215 0048 40F20121 		movw	r1, #513
 216 004c 094B     		ldr	r3, .L21+8
 217              	.LVL16:
 218 004e 1980     		strh	r1, [r3]	@ movhi
 219 0050 FFF7FEFF 		bl	RP_Error_Handler
 220              	.LVL17:
 221 0054 084B     		ldr	r3, .L21+12
 222 0056 C4F80034 		str	r3, [r4, #1024]
 223 005a 0023     		movs	r3, #0
 224 005c A4F81034 		strh	r3, [r4, #1040]	@ movhi
 225 0060 04F58573 		add	r3, r4, #266
 226 0064 C4F80C34 		str	r3, [r4, #1036]
 261:Src/robotronik_protocol.c **** }
 227              		.loc 1 261 0 discriminator 1
 228 0068 10BD     		pop	{r4, pc}
 229              	.LVL18:
 230              	.L22:
 231 006a 00BF     		.align	2
 232              	.L21:
 233 006c 00000000 		.word	crc_table
 234 0070 00000000 		.word	RP_FSM_SIZE
 235 0074 00000000 		.word	.LANCHOR0
 236 0078 00000000 		.word	RP_FSM_INIT
 237              		.cfi_endproc
 238              	.LFE9:
 240              		.section	.text.RP_FSM_SIZE,"ax",%progbits
 241              		.align	1
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQHyITR.s 			page 10


 247              	RP_FSM_SIZE:
 248              	.LFB10:
 262:Src/robotronik_protocol.c **** 
 263:Src/robotronik_protocol.c **** static void RP_FSM_SIZE(RP_Interface *interface){
 249              		.loc 1 263 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL19:
 254 0000 10B5     		push	{r4, lr}
 255              	.LCFI1:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 4, -8
 258              		.cfi_offset 14, -4
 259 0002 0446     		mov	r4, r0
 264:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 260              		.loc 1 264 0
 261 0004 D0F80834 		ldr	r3, [r0, #1032]
 262 0008 5A1C     		adds	r2, r3, #1
 263 000a C0F80824 		str	r2, [r0, #1032]
 264 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 265              	.LVL20:
 265:Src/robotronik_protocol.c **** 
 266:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 266              		.loc 1 266 0
 267 0010 EBB1     		cbz	r3, .L28
 267:Src/robotronik_protocol.c **** 
 268:Src/robotronik_protocol.c ****   /*
 269:Src/robotronik_protocol.c ****    * FSM_DECODE_BYTE is not used here because the protocol requires
 270:Src/robotronik_protocol.c ****    * that the size is > 0. So bs_count is decremented manually.
 271:Src/robotronik_protocol.c ****    */
 272:Src/robotronik_protocol.c ****   --(interface->bs_count);
 268              		.loc 1 272 0
 269 0012 90F80424 		ldrb	r2, [r0, #1028]	@ zero_extendqisi2
 270 0016 013A     		subs	r2, r2, #1
 271 0018 80F80424 		strb	r2, [r0, #1028]
 273:Src/robotronik_protocol.c **** 
 274:Src/robotronik_protocol.c ****   /*
 275:Src/robotronik_protocol.c ****    * For the states RP_FSM_SIZE and RP_FSM_DATA, the CRC must be
 276:Src/robotronik_protocol.c ****    * updated for each byte.
 277:Src/robotronik_protocol.c ****    */
 278:Src/robotronik_protocol.c ****   UPDATE_CRC(interface->crc_accum, FSM_BYTE);
 272              		.loc 1 278 0
 273 001c B0F81014 		ldrh	r1, [r0, #1040]
 274 0020 83EA1120 		eor	r0, r3, r1, lsr #8
 275              	.LVL21:
 276 0024 1B4A     		ldr	r2, .L30
 277 0026 32F91020 		ldrsh	r2, [r2, r0, lsl #1]
 278 002a 82EA0122 		eor	r2, r2, r1, lsl #8
 279 002e A4F81024 		strh	r2, [r4, #1040]	@ movhi
 279:Src/robotronik_protocol.c ****   /*
 280:Src/robotronik_protocol.c ****    * Get the packet length. It will be used to find the CRC position.
 281:Src/robotronik_protocol.c ****    */
 282:Src/robotronik_protocol.c ****   interface->size = interface->remaining = FSM_BYTE - 4;
 280              		.loc 1 282 0
 281 0032 043B     		subs	r3, r3, #4
 282              	.LVL22:
ARM GAS  /tmp/ccQHyITR.s 			page 11


 283 0034 DBB2     		uxtb	r3, r3
 284              	.LVL23:
 285 0036 84F80634 		strb	r3, [r4, #1030]
 286 003a 84F80534 		strb	r3, [r4, #1029]
 283:Src/robotronik_protocol.c ****   interface->r_packet.len = interface->size;
 287              		.loc 1 283 0
 288 003e 84F80931 		strb	r3, [r4, #265]
 284:Src/robotronik_protocol.c ****   
 285:Src/robotronik_protocol.c ****   /*
 286:Src/robotronik_protocol.c ****    * Checks wether or not the read size is consistent.
 287:Src/robotronik_protocol.c ****    */
 288:Src/robotronik_protocol.c ****   if(interface->size > RP_MAX_PACKET_SIZE){
 289              		.loc 1 288 0
 290 0042 FA2B     		cmp	r3, #250
 291 0044 14D8     		bhi	.L29
 289:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_SIZE);
 290:Src/robotronik_protocol.c ****   }
 291:Src/robotronik_protocol.c ****   
 292:Src/robotronik_protocol.c ****   FSM_UPDATE(interface, RP_FSM_DATA);
 292              		.loc 1 292 0
 293 0046 144B     		ldr	r3, .L30+4
 294 0048 C4F80034 		str	r3, [r4, #1024]
 295              	.L23:
 293:Src/robotronik_protocol.c **** }
 296              		.loc 1 293 0
 297 004c 10BD     		pop	{r4, pc}
 298              	.LVL24:
 299              	.L28:
 266:Src/robotronik_protocol.c **** 
 300              		.loc 1 266 0 discriminator 1
 301 004e 40F20121 		movw	r1, #513
 302 0052 124B     		ldr	r3, .L30+8
 303              	.LVL25:
 304 0054 1980     		strh	r1, [r3]	@ movhi
 305 0056 FFF7FEFF 		bl	RP_Error_Handler
 306              	.LVL26:
 307 005a 114B     		ldr	r3, .L30+12
 308 005c C4F80034 		str	r3, [r4, #1024]
 309 0060 0023     		movs	r3, #0
 310 0062 A4F81034 		strh	r3, [r4, #1040]	@ movhi
 311 0066 04F58573 		add	r3, r4, #266
 312 006a C4F80C34 		str	r3, [r4, #1036]
 313 006e EDE7     		b	.L23
 314              	.L29:
 289:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_SIZE);
 315              		.loc 1 289 0
 316 0070 40F20221 		movw	r1, #514
 317 0074 094B     		ldr	r3, .L30+8
 318 0076 1980     		strh	r1, [r3]	@ movhi
 319 0078 2046     		mov	r0, r4
 320 007a FFF7FEFF 		bl	RP_Error_Handler
 321              	.LVL27:
 322 007e 084B     		ldr	r3, .L30+12
 323 0080 C4F80034 		str	r3, [r4, #1024]
 324 0084 0023     		movs	r3, #0
 325 0086 A4F81034 		strh	r3, [r4, #1040]	@ movhi
 326 008a 04F58573 		add	r3, r4, #266
ARM GAS  /tmp/ccQHyITR.s 			page 12


 327 008e C4F80C34 		str	r3, [r4, #1036]
 328 0092 DBE7     		b	.L23
 329              	.L31:
 330              		.align	2
 331              	.L30:
 332 0094 00000000 		.word	crc_table
 333 0098 00000000 		.word	RP_FSM_DATA
 334 009c 00000000 		.word	.LANCHOR0
 335 00a0 00000000 		.word	RP_FSM_INIT
 336              		.cfi_endproc
 337              	.LFE10:
 339              		.section	.text.RP_FSM_DATA,"ax",%progbits
 340              		.align	1
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	RP_FSM_DATA:
 347              	.LFB11:
 294:Src/robotronik_protocol.c **** 
 295:Src/robotronik_protocol.c **** static void RP_FSM_DATA(RP_Interface *interface){
 348              		.loc 1 295 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              	.LVL28:
 296:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 353              		.loc 1 296 0
 354 0000 D0F80834 		ldr	r3, [r0, #1032]
 355 0004 5A1C     		adds	r2, r3, #1
 356 0006 C0F80824 		str	r2, [r0, #1032]
 357 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 358              	.LVL29:
 297:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 359              		.loc 1 297 0
 360 000c 2BB3     		cbz	r3, .L40
 298:Src/robotronik_protocol.c **** 
 299:Src/robotronik_protocol.c ****   FSM_BYTE = FSM_DECODE_BYTE(interface, FSM_BYTE);
 361              		.loc 1 299 0
 362 000e 90F80424 		ldrb	r2, [r0, #1028]	@ zero_extendqisi2
 363 0012 013A     		subs	r2, r2, #1
 364 0014 D2B2     		uxtb	r2, r2
 365 0016 80F80424 		strb	r2, [r0, #1028]
 366 001a 12B9     		cbnz	r2, .L35
 367              		.loc 1 299 0 is_stmt 0 discriminator 1
 368 001c 80F80434 		strb	r3, [r0, #1028]
 369 0020 1346     		mov	r3, r2
 370              	.LVL30:
 371              	.L35:
 300:Src/robotronik_protocol.c ****   *(interface->p_out++) = FSM_BYTE;
 372              		.loc 1 300 0 is_stmt 1 discriminator 4
 373 0022 D0F80C24 		ldr	r2, [r0, #1036]
 374 0026 511C     		adds	r1, r2, #1
 375 0028 C0F80C14 		str	r1, [r0, #1036]
 376 002c 1370     		strb	r3, [r2]
 301:Src/robotronik_protocol.c ****   UPDATE_CRC(interface->crc_accum, FSM_BYTE);
 377              		.loc 1 301 0 discriminator 4
ARM GAS  /tmp/ccQHyITR.s 			page 13


 378 002e B0F81024 		ldrh	r2, [r0, #1040]
 379 0032 83EA1223 		eor	r3, r3, r2, lsr #8
 380              	.LVL31:
 381 0036 1349     		ldr	r1, .L41
 382              	.LVL32:
 383 0038 31F91330 		ldrsh	r3, [r1, r3, lsl #1]
 384 003c 83EA0223 		eor	r3, r3, r2, lsl #8
 385 0040 A0F81034 		strh	r3, [r0, #1040]	@ movhi
 302:Src/robotronik_protocol.c **** 
 303:Src/robotronik_protocol.c ****   if(!(--interface->remaining)){
 386              		.loc 1 303 0 discriminator 4
 387 0044 90F80634 		ldrb	r3, [r0, #1030]	@ zero_extendqisi2
 388 0048 013B     		subs	r3, r3, #1
 389 004a DBB2     		uxtb	r3, r3
 390 004c 80F80634 		strb	r3, [r0, #1030]
 391 0050 B3B9     		cbnz	r3, .L37
 304:Src/robotronik_protocol.c ****     /*
 305:Src/robotronik_protocol.c ****      * According to the size read, the next bytes should contains CRC
 306:Src/robotronik_protocol.c ****      * information.
 307:Src/robotronik_protocol.c ****      */
 308:Src/robotronik_protocol.c ****     FSM_UPDATE(interface, RP_FSM_CRC_LOW);
 392              		.loc 1 308 0
 393 0052 0D4B     		ldr	r3, .L41+4
 394 0054 C0F80034 		str	r3, [r0, #1024]
 395 0058 7047     		bx	lr
 396              	.LVL33:
 397              	.L40:
 295:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 398              		.loc 1 295 0 discriminator 1
 399 005a 10B5     		push	{r4, lr}
 400              	.LCFI2:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 4, -8
 403              		.cfi_offset 14, -4
 404 005c 0446     		mov	r4, r0
 297:Src/robotronik_protocol.c **** 
 405              		.loc 1 297 0 discriminator 1
 406 005e 40F20121 		movw	r1, #513
 407 0062 0A4B     		ldr	r3, .L41+8
 408              	.LVL34:
 409 0064 1980     		strh	r1, [r3]	@ movhi
 410 0066 FFF7FEFF 		bl	RP_Error_Handler
 411              	.LVL35:
 412 006a 094B     		ldr	r3, .L41+12
 413 006c C4F80034 		str	r3, [r4, #1024]
 414 0070 0023     		movs	r3, #0
 415 0072 A4F81034 		strh	r3, [r4, #1040]	@ movhi
 416 0076 04F58573 		add	r3, r4, #266
 417 007a C4F80C34 		str	r3, [r4, #1036]
 309:Src/robotronik_protocol.c ****   }
 310:Src/robotronik_protocol.c **** }
 418              		.loc 1 310 0 discriminator 1
 419 007e 10BD     		pop	{r4, pc}
 420              	.LVL36:
 421              	.L37:
 422              	.LCFI3:
 423              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccQHyITR.s 			page 14


 424              		.cfi_restore 4
 425              		.cfi_restore 14
 426 0080 7047     		bx	lr
 427              	.L42:
 428 0082 00BF     		.align	2
 429              	.L41:
 430 0084 00000000 		.word	crc_table
 431 0088 00000000 		.word	RP_FSM_CRC_LOW
 432 008c 00000000 		.word	.LANCHOR0
 433 0090 00000000 		.word	RP_FSM_INIT
 434              		.cfi_endproc
 435              	.LFE11:
 437              		.section	.text.RP_FSM_CRC_LOW,"ax",%progbits
 438              		.align	1
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	RP_FSM_CRC_LOW:
 445              	.LFB12:
 311:Src/robotronik_protocol.c **** 
 312:Src/robotronik_protocol.c **** static void RP_FSM_CRC_LOW(RP_Interface *interface){
 446              		.loc 1 312 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              	.LVL37:
 451 0000 10B5     		push	{r4, lr}
 452              	.LCFI4:
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 4, -8
 455              		.cfi_offset 14, -4
 456 0002 0446     		mov	r4, r0
 313:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 457              		.loc 1 313 0
 458 0004 D0F80834 		ldr	r3, [r0, #1032]
 459 0008 5A1C     		adds	r2, r3, #1
 460 000a C0F80824 		str	r2, [r0, #1032]
 461 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 462              	.LVL38:
 314:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 463              		.loc 1 314 0
 464 0010 8AB1     		cbz	r2, .L50
 315:Src/robotronik_protocol.c **** 
 316:Src/robotronik_protocol.c ****   /*
 317:Src/robotronik_protocol.c ****    * Checks the low byte of CRC, and triggers an error if it doesn't match.
 318:Src/robotronik_protocol.c ****    */
 319:Src/robotronik_protocol.c ****   if((interface->crc_accum & 0xFF) != FSM_DECODE_BYTE(interface, FSM_BYTE)){
 465              		.loc 1 319 0
 466 0012 90F81014 		ldrb	r1, [r0, #1040]	@ zero_extendqisi2
 467 0016 90F80434 		ldrb	r3, [r0, #1028]	@ zero_extendqisi2
 468 001a 013B     		subs	r3, r3, #1
 469 001c DBB2     		uxtb	r3, r3
 470 001e 80F80434 		strb	r3, [r0, #1028]
 471 0022 13B9     		cbnz	r3, .L47
 472              		.loc 1 319 0 is_stmt 0 discriminator 1
 473 0024 80F80424 		strb	r2, [r0, #1028]
ARM GAS  /tmp/ccQHyITR.s 			page 15


 474 0028 0022     		movs	r2, #0
 475              	.LVL39:
 476              	.L47:
 477              		.loc 1 319 0 discriminator 4
 478 002a 9142     		cmp	r1, r2
 479 002c 14D1     		bne	.L51
 320:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_CRC);
 321:Src/robotronik_protocol.c ****   }else{
 322:Src/robotronik_protocol.c ****     FSM_UPDATE(interface, RP_FSM_CRC_HIGH);
 480              		.loc 1 322 0 is_stmt 1
 481 002e 134B     		ldr	r3, .L52
 482 0030 C4F80034 		str	r3, [r4, #1024]
 483              	.LVL40:
 484              	.L43:
 323:Src/robotronik_protocol.c ****   }
 324:Src/robotronik_protocol.c **** }
 485              		.loc 1 324 0
 486 0034 10BD     		pop	{r4, pc}
 487              	.LVL41:
 488              	.L50:
 314:Src/robotronik_protocol.c **** 
 489              		.loc 1 314 0 discriminator 1
 490 0036 40F20121 		movw	r1, #513
 491 003a 114B     		ldr	r3, .L52+4
 492 003c 1980     		strh	r1, [r3]	@ movhi
 493 003e FFF7FEFF 		bl	RP_Error_Handler
 494              	.LVL42:
 495 0042 104B     		ldr	r3, .L52+8
 496 0044 C4F80034 		str	r3, [r4, #1024]
 497 0048 0023     		movs	r3, #0
 498 004a A4F81034 		strh	r3, [r4, #1040]	@ movhi
 499 004e 04F58573 		add	r3, r4, #266
 500 0052 C4F80C34 		str	r3, [r4, #1036]
 501 0056 EDE7     		b	.L43
 502              	.LVL43:
 503              	.L51:
 320:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_CRC);
 504              		.loc 1 320 0
 505 0058 40F20321 		movw	r1, #515
 506 005c 084B     		ldr	r3, .L52+4
 507 005e 1980     		strh	r1, [r3]	@ movhi
 508 0060 2046     		mov	r0, r4
 509              	.LVL44:
 510 0062 FFF7FEFF 		bl	RP_Error_Handler
 511              	.LVL45:
 512 0066 074B     		ldr	r3, .L52+8
 513 0068 C4F80034 		str	r3, [r4, #1024]
 514 006c 0023     		movs	r3, #0
 515 006e A4F81034 		strh	r3, [r4, #1040]	@ movhi
 516 0072 04F58573 		add	r3, r4, #266
 517 0076 C4F80C34 		str	r3, [r4, #1036]
 518 007a DBE7     		b	.L43
 519              	.L53:
 520              		.align	2
 521              	.L52:
 522 007c 00000000 		.word	RP_FSM_CRC_HIGH
 523 0080 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccQHyITR.s 			page 16


 524 0084 00000000 		.word	RP_FSM_INIT
 525              		.cfi_endproc
 526              	.LFE12:
 528              		.section	.text.RP_FSM_CRC_HIGH,"ax",%progbits
 529              		.align	1
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu fpv4-sp-d16
 535              	RP_FSM_CRC_HIGH:
 536              	.LFB13:
 325:Src/robotronik_protocol.c **** 
 326:Src/robotronik_protocol.c **** static void RP_FSM_CRC_HIGH(RP_Interface *interface){
 537              		.loc 1 326 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL46:
 542 0000 10B5     		push	{r4, lr}
 543              	.LCFI5:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 4, -8
 546              		.cfi_offset 14, -4
 547 0002 0446     		mov	r4, r0
 327:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 548              		.loc 1 327 0
 549 0004 D0F80834 		ldr	r3, [r0, #1032]
 550 0008 5A1C     		adds	r2, r3, #1
 551 000a C0F80824 		str	r2, [r0, #1032]
 552 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 553              	.LVL47:
 328:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 554              		.loc 1 328 0
 555 0010 92B1     		cbz	r2, .L61
 329:Src/robotronik_protocol.c **** 
 330:Src/robotronik_protocol.c ****   /*
 331:Src/robotronik_protocol.c ****    * Checks the high byte of CRC, and triggers an error if it doesn't match.
 332:Src/robotronik_protocol.c ****    */
 333:Src/robotronik_protocol.c ****   if((interface->crc_accum >> 8) != FSM_DECODE_BYTE(interface, FSM_BYTE)){
 556              		.loc 1 333 0
 557 0012 B0F81014 		ldrh	r1, [r0, #1040]
 558 0016 090A     		lsrs	r1, r1, #8
 559 0018 90F80434 		ldrb	r3, [r0, #1028]	@ zero_extendqisi2
 560 001c 013B     		subs	r3, r3, #1
 561 001e DBB2     		uxtb	r3, r3
 562 0020 80F80434 		strb	r3, [r0, #1028]
 563 0024 13B9     		cbnz	r3, .L58
 564              		.loc 1 333 0 is_stmt 0 discriminator 1
 565 0026 80F80424 		strb	r2, [r0, #1028]
 566 002a 0022     		movs	r2, #0
 567              	.LVL48:
 568              	.L58:
 569              		.loc 1 333 0 discriminator 4
 570 002c 9142     		cmp	r1, r2
 571 002e 14D1     		bne	.L62
 334:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_CRC);
 335:Src/robotronik_protocol.c ****   }else{
ARM GAS  /tmp/ccQHyITR.s 			page 17


 336:Src/robotronik_protocol.c ****     FSM_UPDATE(interface, RP_FSM_END);
 572              		.loc 1 336 0 is_stmt 1
 573 0030 134B     		ldr	r3, .L63
 574 0032 C4F80034 		str	r3, [r4, #1024]
 575              	.LVL49:
 576              	.L54:
 337:Src/robotronik_protocol.c ****   }
 338:Src/robotronik_protocol.c **** }
 577              		.loc 1 338 0
 578 0036 10BD     		pop	{r4, pc}
 579              	.LVL50:
 580              	.L61:
 328:Src/robotronik_protocol.c **** 
 581              		.loc 1 328 0 discriminator 1
 582 0038 40F20121 		movw	r1, #513
 583 003c 114B     		ldr	r3, .L63+4
 584 003e 1980     		strh	r1, [r3]	@ movhi
 585 0040 FFF7FEFF 		bl	RP_Error_Handler
 586              	.LVL51:
 587 0044 104B     		ldr	r3, .L63+8
 588 0046 C4F80034 		str	r3, [r4, #1024]
 589 004a 0023     		movs	r3, #0
 590 004c A4F81034 		strh	r3, [r4, #1040]	@ movhi
 591 0050 04F58573 		add	r3, r4, #266
 592 0054 C4F80C34 		str	r3, [r4, #1036]
 593 0058 EDE7     		b	.L54
 594              	.LVL52:
 595              	.L62:
 334:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_CRC);
 596              		.loc 1 334 0
 597 005a 40F20321 		movw	r1, #515
 598 005e 094B     		ldr	r3, .L63+4
 599 0060 1980     		strh	r1, [r3]	@ movhi
 600 0062 2046     		mov	r0, r4
 601              	.LVL53:
 602 0064 FFF7FEFF 		bl	RP_Error_Handler
 603              	.LVL54:
 604 0068 074B     		ldr	r3, .L63+8
 605 006a C4F80034 		str	r3, [r4, #1024]
 606 006e 0023     		movs	r3, #0
 607 0070 A4F81034 		strh	r3, [r4, #1040]	@ movhi
 608 0074 04F58573 		add	r3, r4, #266
 609 0078 C4F80C34 		str	r3, [r4, #1036]
 610 007c DBE7     		b	.L54
 611              	.L64:
 612 007e 00BF     		.align	2
 613              	.L63:
 614 0080 00000000 		.word	RP_FSM_END
 615 0084 00000000 		.word	.LANCHOR0
 616 0088 00000000 		.word	RP_FSM_INIT
 617              		.cfi_endproc
 618              	.LFE13:
 620              		.section	.text.RP_FSM_END,"ax",%progbits
 621              		.align	1
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
ARM GAS  /tmp/ccQHyITR.s 			page 18


 625              		.fpu fpv4-sp-d16
 627              	RP_FSM_END:
 628              	.LFB14:
 339:Src/robotronik_protocol.c **** 
 340:Src/robotronik_protocol.c **** static void RP_FSM_END(RP_Interface *interface){
 629              		.loc 1 340 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL55:
 634 0000 10B5     		push	{r4, lr}
 635              	.LCFI6:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 4, -8
 638              		.cfi_offset 14, -4
 639 0002 0446     		mov	r4, r0
 341:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 640              		.loc 1 341 0
 641 0004 D0F80834 		ldr	r3, [r0, #1032]
 642 0008 5A1C     		adds	r2, r3, #1
 643 000a C0F80824 		str	r2, [r0, #1032]
 644 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 645              	.LVL56:
 342:Src/robotronik_protocol.c **** 
 343:Src/robotronik_protocol.c ****   /*
 344:Src/robotronik_protocol.c ****    * The last byte must be EOF. Otherwise, it is an error.
 345:Src/robotronik_protocol.c ****    */
 346:Src/robotronik_protocol.c ****   if(FSM_BYTE == 0x00){
 646              		.loc 1 346 0
 647 0010 83B1     		cbz	r3, .L69
 347:Src/robotronik_protocol.c ****     interface->received = true;
 348:Src/robotronik_protocol.c ****     RP_Packet_Received(interface, &interface->r_packet);
 349:Src/robotronik_protocol.c ****     FSM_RESET(interface);
 350:Src/robotronik_protocol.c ****   }else{
 351:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_SIZE);
 648              		.loc 1 351 0
 649 0012 40F20221 		movw	r1, #514
 650 0016 104B     		ldr	r3, .L70
 651              	.LVL57:
 652 0018 1980     		strh	r1, [r3]	@ movhi
 653 001a FFF7FEFF 		bl	RP_Error_Handler
 654              	.LVL58:
 655 001e 0F4B     		ldr	r3, .L70+4
 656 0020 C4F80034 		str	r3, [r4, #1024]
 657 0024 0023     		movs	r3, #0
 658 0026 A4F81034 		strh	r3, [r4, #1040]	@ movhi
 659 002a 04F58573 		add	r3, r4, #266
 660 002e C4F80C34 		str	r3, [r4, #1036]
 661              	.L65:
 352:Src/robotronik_protocol.c ****   }
 353:Src/robotronik_protocol.c **** }
 662              		.loc 1 353 0
 663 0032 10BD     		pop	{r4, pc}
 664              	.LVL59:
 665              	.L69:
 347:Src/robotronik_protocol.c ****     interface->received = true;
 666              		.loc 1 347 0
ARM GAS  /tmp/ccQHyITR.s 			page 19


 667 0034 0123     		movs	r3, #1
 668              	.LVL60:
 669 0036 80F81234 		strb	r3, [r0, #1042]
 670              	.LVL61:
 348:Src/robotronik_protocol.c ****     FSM_RESET(interface);
 671              		.loc 1 348 0
 672 003a 00F58471 		add	r1, r0, #264
 673 003e FFF7FEFF 		bl	RP_Packet_Received
 674              	.LVL62:
 349:Src/robotronik_protocol.c ****   }else{
 675              		.loc 1 349 0
 676 0042 064B     		ldr	r3, .L70+4
 677 0044 C4F80034 		str	r3, [r4, #1024]
 678 0048 0023     		movs	r3, #0
 679 004a A4F81034 		strh	r3, [r4, #1040]	@ movhi
 680 004e 04F58573 		add	r3, r4, #266
 681 0052 C4F80C34 		str	r3, [r4, #1036]
 682 0056 ECE7     		b	.L65
 683              	.L71:
 684              		.align	2
 685              	.L70:
 686 0058 00000000 		.word	.LANCHOR0
 687 005c 00000000 		.word	RP_FSM_INIT
 688              		.cfi_endproc
 689              	.LFE14:
 691              		.section	.text.RP_Build_Frame,"ax",%progbits
 692              		.align	1
 693              		.global	RP_Build_Frame
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu fpv4-sp-d16
 699              	RP_Build_Frame:
 700              	.LFB3:
  89:Src/robotronik_protocol.c ****   if((packet->len <= 0) || (packet->len + 6 > RP_BUFFER_SIZE) || (packet->len > RP_MAX_PACKET_SIZE)
 701              		.loc 1 89 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705              		@ link register save eliminated.
 706              	.LVL63:
  90:Src/robotronik_protocol.c ****     err =  RP_ERR_INTERNAL | RP_ERR_ILLEGAL_ARGUMENTS;
 707              		.loc 1 90 0
 708 0000 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 709 0002 FBB1     		cbz	r3, .L73
  90:Src/robotronik_protocol.c ****     err =  RP_ERR_INTERNAL | RP_ERR_ILLEGAL_ARGUMENTS;
 710              		.loc 1 90 0 is_stmt 0 discriminator 1
 711 0004 9A1D     		adds	r2, r3, #6
 712 0006 B2F5807F 		cmp	r2, #256
 713 000a 1BDC     		bgt	.L73
  90:Src/robotronik_protocol.c ****     err =  RP_ERR_INTERNAL | RP_ERR_ILLEGAL_ARGUMENTS;
 714              		.loc 1 90 0 discriminator 2
 715 000c FA2B     		cmp	r3, #250
 716 000e 19D8     		bhi	.L73
  89:Src/robotronik_protocol.c ****   if((packet->len <= 0) || (packet->len + 6 > RP_BUFFER_SIZE) || (packet->len > RP_MAX_PACKET_SIZE)
 717              		.loc 1 89 0 is_stmt 1
 718 0010 F0B4     		push	{r4, r5, r6, r7}
ARM GAS  /tmp/ccQHyITR.s 			page 20


 719              	.LCFI7:
 720              		.cfi_def_cfa_offset 16
 721              		.cfi_offset 4, -16
 722              		.cfi_offset 5, -12
 723              		.cfi_offset 6, -8
 724              		.cfi_offset 7, -4
 725              	.LVL64:
  96:Src/robotronik_protocol.c ****   uint16_t crc_accum = CRC_INIT;
 726              		.loc 1 96 0
 727 0012 4F1C     		adds	r7, r1, #1
 728              	.LVL65:
 100:Src/robotronik_protocol.c ****   UPDATE_CRC(crc_accum, id);
 729              		.loc 1 100 0
 730 0014 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 731              	.LVL66:
 101:Src/robotronik_protocol.c ****   ENCODE_BYTE(id, p_buffer, p_code);
 732              		.loc 1 101 0
 733 0016 2A4B     		ldr	r3, .L90
 734 0018 33F81250 		ldrh	r5, [r3, r2, lsl #1]
 735              	.LVL67:
 102:Src/robotronik_protocol.c ****     
 736              		.loc 1 102 0
 737 001c CAB9     		cbnz	r2, .L76
 102:Src/robotronik_protocol.c ****     
 738              		.loc 1 102 0 is_stmt 0 discriminator 1
 739 001e 0C46     		mov	r4, r1
 740 0020 0123     		movs	r3, #1
 741 0022 04F8023B 		strb	r3, [r4], #2
 742              	.LVL68:
 743              	.L77:
 105:Src/robotronik_protocol.c ****   UPDATE_CRC(crc_accum, size);
 744              		.loc 1 105 0 is_stmt 1
 745 0026 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 746              	.LVL69:
 747 0028 0432     		adds	r2, r2, #4
 748 002a D2B2     		uxtb	r2, r2
 749              	.LVL70:
 106:Src/robotronik_protocol.c ****   *(p_buffer++) = size;
 750              		.loc 1 106 0
 751 002c 82EA1526 		eor	r6, r2, r5, lsr #8
 752 0030 234B     		ldr	r3, .L90
 753 0032 33F91630 		ldrsh	r3, [r3, r6, lsl #1]
 754 0036 83EA0523 		eor	r3, r3, r5, lsl #8
 755 003a 9BB2     		uxth	r3, r3
 756              	.LVL71:
 107:Src/robotronik_protocol.c ****   
 757              		.loc 1 107 0
 758 003c 651C     		adds	r5, r4, #1
 759              	.LVL72:
 760 003e 2270     		strb	r2, [r4]
 761              	.LVL73:
 110:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 762              		.loc 1 110 0
 763 0040 0022     		movs	r2, #0
 764              	.LVL74:
 765 0042 0DE0     		b	.L78
 766              	.LVL75:
ARM GAS  /tmp/ccQHyITR.s 			page 21


 767              	.L73:
 768              	.LCFI8:
 769              		.cfi_def_cfa_offset 0
 770              		.cfi_restore 4
 771              		.cfi_restore 5
 772              		.cfi_restore 6
 773              		.cfi_restore 7
  91:Src/robotronik_protocol.c ****     return -1;
 774              		.loc 1 91 0
 775 0044 1F4B     		ldr	r3, .L90+4
 776 0046 4FF48072 		mov	r2, #256
 777 004a 1A80     		strh	r2, [r3]	@ movhi
  92:Src/robotronik_protocol.c ****   }
 778              		.loc 1 92 0
 779 004c 4FF0FF30 		mov	r0, #-1
 780              	.LVL76:
 127:Src/robotronik_protocol.c **** 
 781              		.loc 1 127 0
 782 0050 7047     		bx	lr
 783              	.LVL77:
 784              	.L76:
 785              	.LCFI9:
 786              		.cfi_def_cfa_offset 16
 787              		.cfi_offset 4, -16
 788              		.cfi_offset 5, -12
 789              		.cfi_offset 6, -8
 790              		.cfi_offset 7, -4
 102:Src/robotronik_protocol.c ****     
 791              		.loc 1 102 0 discriminator 2
 792 0052 8C1C     		adds	r4, r1, #2
 793              	.LVL78:
 794 0054 4A70     		strb	r2, [r1, #1]
  96:Src/robotronik_protocol.c ****   uint16_t crc_accum = CRC_INIT;
 795              		.loc 1 96 0 discriminator 2
 796 0056 0F46     		mov	r7, r1
 797 0058 E5E7     		b	.L77
 798              	.LVL79:
 799              	.L79:
 800              	.LBB2:
 113:Src/robotronik_protocol.c ****   }
 801              		.loc 1 113 0 discriminator 2
 802 005a 2E70     		strb	r6, [r5]
 803 005c 0135     		adds	r5, r5, #1
 804              	.LVL80:
 805              	.L80:
 806              	.LBE2:
 110:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 807              		.loc 1 110 0 discriminator 2
 808 005e 0132     		adds	r2, r2, #1
 809              	.LVL81:
 810              	.L78:
 110:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 811              		.loc 1 110 0 is_stmt 0 discriminator 1
 812 0060 4478     		ldrb	r4, [r0, #1]	@ zero_extendqisi2
 813 0062 9442     		cmp	r4, r2
 814 0064 10DD     		ble	.L89
 815              	.LBB3:
ARM GAS  /tmp/ccQHyITR.s 			page 22


 111:Src/robotronik_protocol.c ****     UPDATE_CRC(crc_accum, byte);
 816              		.loc 1 111 0 is_stmt 1
 817 0066 8418     		adds	r4, r0, r2
 818 0068 A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
 819              	.LVL82:
 112:Src/robotronik_protocol.c ****     ENCODE_BYTE(byte, p_buffer, p_code);
 820              		.loc 1 112 0
 821 006a 86EA132C 		eor	ip, r6, r3, lsr #8
 822 006e 144C     		ldr	r4, .L90
 823 0070 34F91C40 		ldrsh	r4, [r4, ip, lsl #1]
 824 0074 84EA0323 		eor	r3, r4, r3, lsl #8
 825              	.LVL83:
 826 0078 9BB2     		uxth	r3, r3
 827              	.LVL84:
 113:Src/robotronik_protocol.c ****   }
 828              		.loc 1 113 0
 829 007a 002E     		cmp	r6, #0
 830 007c EDD1     		bne	.L79
 113:Src/robotronik_protocol.c ****   }
 831              		.loc 1 113 0 is_stmt 0 discriminator 1
 832 007e EC1B     		subs	r4, r5, r7
 833 0080 3C70     		strb	r4, [r7]
 834              	.LVL85:
 835 0082 2F46     		mov	r7, r5
 836 0084 0135     		adds	r5, r5, #1
 837              	.LVL86:
 838 0086 EAE7     		b	.L80
 839              	.LVL87:
 840              	.L89:
 841              	.LBE3:
 118:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_low, p_buffer, p_code);
 842              		.loc 1 118 0 is_stmt 1
 843 0088 180A     		lsrs	r0, r3, #8
 844              	.LVL88:
 119:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_high, p_buffer, p_code);
 845              		.loc 1 119 0
 846 008a 13F0FF03 		ands	r3, r3, #255
 847              	.LVL89:
 848 008e 0ED1     		bne	.L82
 119:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_high, p_buffer, p_code);
 849              		.loc 1 119 0 is_stmt 0 discriminator 1
 850 0090 EB1B     		subs	r3, r5, r7
 851 0092 3B70     		strb	r3, [r7]
 852 0094 6A1C     		adds	r2, r5, #1
 853              	.LVL90:
 854              	.L83:
 120:Src/robotronik_protocol.c ****   
 855              		.loc 1 120 0 is_stmt 1
 856 0096 70B9     		cbnz	r0, .L84
 120:Src/robotronik_protocol.c ****   
 857              		.loc 1 120 0 is_stmt 0 discriminator 1
 858 0098 531B     		subs	r3, r2, r5
 859 009a 2B70     		strb	r3, [r5]
 860 009c 531C     		adds	r3, r2, #1
 861              	.LVL91:
 862              	.L85:
 123:Src/robotronik_protocol.c ****   *(p_buffer++) = RP_EOF;
ARM GAS  /tmp/ccQHyITR.s 			page 23


 863              		.loc 1 123 0 is_stmt 1
 864 009e 981A     		subs	r0, r3, r2
 865              	.LVL92:
 866 00a0 1070     		strb	r0, [r2]
 124:Src/robotronik_protocol.c **** 
 867              		.loc 1 124 0
 868 00a2 581C     		adds	r0, r3, #1
 869              	.LVL93:
 870 00a4 0022     		movs	r2, #0
 871              	.LVL94:
 872 00a6 1A70     		strb	r2, [r3]
 126:Src/robotronik_protocol.c **** }
 873              		.loc 1 126 0
 874 00a8 401A     		subs	r0, r0, r1
 875              	.LVL95:
 127:Src/robotronik_protocol.c **** 
 876              		.loc 1 127 0
 877 00aa F0BC     		pop	{r4, r5, r6, r7}
 878              	.LCFI10:
 879              		.cfi_remember_state
 880              		.cfi_restore 7
 881              		.cfi_restore 6
 882              		.cfi_restore 5
 883              		.cfi_restore 4
 884              		.cfi_def_cfa_offset 0
 885 00ac 7047     		bx	lr
 886              	.LVL96:
 887              	.L82:
 888              	.LCFI11:
 889              		.cfi_restore_state
 119:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_high, p_buffer, p_code);
 890              		.loc 1 119 0 discriminator 2
 891 00ae 6A1C     		adds	r2, r5, #1
 892              	.LVL97:
 893 00b0 2B70     		strb	r3, [r5]
 894 00b2 3D46     		mov	r5, r7
 895 00b4 EFE7     		b	.L83
 896              	.LVL98:
 897              	.L84:
 120:Src/robotronik_protocol.c ****   
 898              		.loc 1 120 0 discriminator 2
 899 00b6 531C     		adds	r3, r2, #1
 900              	.LVL99:
 901 00b8 1070     		strb	r0, [r2]
 902 00ba 2A46     		mov	r2, r5
 903 00bc EFE7     		b	.L85
 904              	.L91:
 905 00be 00BF     		.align	2
 906              	.L90:
 907 00c0 00000000 		.word	crc_table
 908 00c4 00000000 		.word	.LANCHOR0
 909              		.cfi_endproc
 910              	.LFE3:
 912              		.section	.text.RP_Sync,"ax",%progbits
 913              		.align	1
 914              		.global	RP_Sync
 915              		.syntax unified
ARM GAS  /tmp/ccQHyITR.s 			page 24


 916              		.thumb
 917              		.thumb_func
 918              		.fpu fpv4-sp-d16
 920              	RP_Sync:
 921              	.LFB4:
 129:Src/robotronik_protocol.c ****   uint8_t byte = RP_EOF;
 922              		.loc 1 129 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 8
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL100:
 927 0000 30B5     		push	{r4, r5, lr}
 928              	.LCFI12:
 929              		.cfi_def_cfa_offset 12
 930              		.cfi_offset 4, -12
 931              		.cfi_offset 5, -8
 932              		.cfi_offset 14, -4
 933 0002 83B0     		sub	sp, sp, #12
 934              	.LCFI13:
 935              		.cfi_def_cfa_offset 24
 130:Src/robotronik_protocol.c **** 
 936              		.loc 1 130 0
 937 0004 02AC     		add	r4, sp, #8
 938 0006 0023     		movs	r3, #0
 939 0008 04F8013D 		strb	r3, [r4, #-1]!
 132:Src/robotronik_protocol.c ****     err = RP_ERR_LINK | RP_ERR_TIMEOUT;
 940              		.loc 1 132 0
 941 000c 0568     		ldr	r5, [r0]
 942 000e 0B46     		mov	r3, r1
 943 0010 0122     		movs	r2, #1
 944 0012 2146     		mov	r1, r4
 945              	.LVL101:
 946 0014 D0F81804 		ldr	r0, [r0, #1048]
 947              	.LVL102:
 948 0018 A847     		blx	r5
 949              	.LVL103:
 950 001a 10B9     		cbnz	r0, .L96
 137:Src/robotronik_protocol.c **** }
 951              		.loc 1 137 0
 952 001c 0020     		movs	r0, #0
 953              	.L92:
 138:Src/robotronik_protocol.c **** 
 954              		.loc 1 138 0
 955 001e 03B0     		add	sp, sp, #12
 956              	.LCFI14:
 957              		.cfi_remember_state
 958              		.cfi_def_cfa_offset 12
 959              		@ sp needed
 960 0020 30BD     		pop	{r4, r5, pc}
 961              	.L96:
 962              	.LCFI15:
 963              		.cfi_restore_state
 133:Src/robotronik_protocol.c ****     return -1;
 964              		.loc 1 133 0
 965 0022 034B     		ldr	r3, .L97
 966 0024 4FF40072 		mov	r2, #512
 967 0028 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccQHyITR.s 			page 25


 134:Src/robotronik_protocol.c ****   }
 968              		.loc 1 134 0
 969 002a 4FF0FF30 		mov	r0, #-1
 970 002e F6E7     		b	.L92
 971              	.L98:
 972              		.align	2
 973              	.L97:
 974 0030 00000000 		.word	.LANCHOR0
 975              		.cfi_endproc
 976              	.LFE4:
 978              		.section	.text.RP_Send,"ax",%progbits
 979              		.align	1
 980              		.global	RP_Send
 981              		.syntax unified
 982              		.thumb
 983              		.thumb_func
 984              		.fpu fpv4-sp-d16
 986              	RP_Send:
 987              	.LFB5:
 140:Src/robotronik_protocol.c ****   int len = RP_Build_Frame(packet, interface->buffer_out);
 988              		.loc 1 140 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              	.LVL104:
 993 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 994              	.LCFI16:
 995              		.cfi_def_cfa_offset 24
 996              		.cfi_offset 3, -24
 997              		.cfi_offset 4, -20
 998              		.cfi_offset 5, -16
 999              		.cfi_offset 6, -12
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 0002 0446     		mov	r4, r0
 1003 0004 0846     		mov	r0, r1
 1004              	.LVL105:
 1005 0006 1646     		mov	r6, r2
 141:Src/robotronik_protocol.c **** 
 1006              		.loc 1 141 0
 1007 0008 04F54075 		add	r5, r4, #768
 1008 000c 2946     		mov	r1, r5
 1009              	.LVL106:
 1010 000e FFF7FEFF 		bl	RP_Build_Frame
 1011              	.LVL107:
 143:Src/robotronik_protocol.c ****     return -1;
 1012              		.loc 1 143 0
 1013 0012 B0F1FF3F 		cmp	r0, #-1
 1014 0016 08D0     		beq	.L99
 147:Src/robotronik_protocol.c ****     err = RP_ERR_LINK | RP_ERR_TIMEOUT;
 1015              		.loc 1 147 0
 1016 0018 2768     		ldr	r7, [r4]
 1017 001a 3346     		mov	r3, r6
 1018 001c 82B2     		uxth	r2, r0
 1019 001e 2946     		mov	r1, r5
 1020 0020 D4F81804 		ldr	r0, [r4, #1048]
 1021              	.LVL108:
ARM GAS  /tmp/ccQHyITR.s 			page 26


 1022 0024 B847     		blx	r7
 1023              	.LVL109:
 1024 0026 08B9     		cbnz	r0, .L103
 152:Src/robotronik_protocol.c **** }
 1025              		.loc 1 152 0
 1026 0028 0020     		movs	r0, #0
 1027              	.L99:
 153:Src/robotronik_protocol.c **** 
 1028              		.loc 1 153 0
 1029 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1030              	.LVL110:
 1031              	.L103:
 148:Src/robotronik_protocol.c ****     return -1;
 1032              		.loc 1 148 0
 1033 002c 034B     		ldr	r3, .L104
 1034 002e 4FF40072 		mov	r2, #512
 1035 0032 1A80     		strh	r2, [r3]	@ movhi
 149:Src/robotronik_protocol.c ****   }
 1036              		.loc 1 149 0
 1037 0034 4FF0FF30 		mov	r0, #-1
 1038 0038 F7E7     		b	.L99
 1039              	.L105:
 1040 003a 00BF     		.align	2
 1041              	.L104:
 1042 003c 00000000 		.word	.LANCHOR0
 1043              		.cfi_endproc
 1044              	.LFE5:
 1046              		.section	.text.RP_Process_Data,"ax",%progbits
 1047              		.align	1
 1048              		.global	RP_Process_Data
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1052              		.fpu fpv4-sp-d16
 1054              	RP_Process_Data:
 1055              	.LFB6:
 159:Src/robotronik_protocol.c ****   interface->p_in = data;
 1056              		.loc 1 159 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 1060              	.LVL111:
 1061 0000 38B5     		push	{r3, r4, r5, lr}
 1062              	.LCFI17:
 1063              		.cfi_def_cfa_offset 16
 1064              		.cfi_offset 3, -16
 1065              		.cfi_offset 4, -12
 1066              		.cfi_offset 5, -8
 1067              		.cfi_offset 14, -4
 1068 0002 0546     		mov	r5, r0
 160:Src/robotronik_protocol.c **** 
 1069              		.loc 1 160 0
 1070 0004 C0F80814 		str	r1, [r0, #1032]
 162:Src/robotronik_protocol.c ****     interface->update_state(interface);
 1071              		.loc 1 162 0
 1072 0008 04E0     		b	.L107
 1073              	.LVL112:
ARM GAS  /tmp/ccQHyITR.s 			page 27


 1074              	.L108:
 163:Src/robotronik_protocol.c ****   }
 1075              		.loc 1 163 0
 1076 000a D5F80034 		ldr	r3, [r5, #1024]
 1077 000e 2846     		mov	r0, r5
 1078 0010 9847     		blx	r3
 1079              	.LVL113:
 162:Src/robotronik_protocol.c ****     interface->update_state(interface);
 1080              		.loc 1 162 0
 1081 0012 2246     		mov	r2, r4
 1082              	.LVL114:
 1083              	.L107:
 1084 0014 531E     		subs	r3, r2, #1
 1085 0016 9CB2     		uxth	r4, r3
 1086              	.LVL115:
 1087 0018 002A     		cmp	r2, #0
 1088 001a F6D1     		bne	.L108
 165:Src/robotronik_protocol.c **** 
 1089              		.loc 1 165 0
 1090 001c 38BD     		pop	{r3, r4, r5, pc}
 1091              		.cfi_endproc
 1092              	.LFE6:
 1094              		.section	.text.RP_Wait_Packet,"ax",%progbits
 1095              		.align	1
 1096              		.global	RP_Wait_Packet
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu fpv4-sp-d16
 1102              	RP_Wait_Packet:
 1103              	.LFB7:
 167:Src/robotronik_protocol.c ****   int start = interface->get_tick();
 1104              		.loc 1 167 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              	.LVL116:
 1109 0000 70B5     		push	{r4, r5, r6, lr}
 1110              	.LCFI18:
 1111              		.cfi_def_cfa_offset 16
 1112              		.cfi_offset 4, -16
 1113              		.cfi_offset 5, -12
 1114              		.cfi_offset 6, -8
 1115              		.cfi_offset 14, -4
 1116 0002 0446     		mov	r4, r0
 1117 0004 0E46     		mov	r6, r1
 168:Src/robotronik_protocol.c ****   
 1118              		.loc 1 168 0
 1119 0006 4368     		ldr	r3, [r0, #4]
 1120 0008 9847     		blx	r3
 1121              	.LVL117:
 1122 000a 0546     		mov	r5, r0
 1123              	.LVL118:
 170:Src/robotronik_protocol.c ****   while(!interface->received && (interface->get_tick() - start < timeout_ms));
 1124              		.loc 1 170 0
 1125 000c 0023     		movs	r3, #0
 1126 000e 84F81234 		strb	r3, [r4, #1042]
ARM GAS  /tmp/ccQHyITR.s 			page 28


 1127              	.LVL119:
 1128              	.L112:
 171:Src/robotronik_protocol.c ****   
 1129              		.loc 1 171 0 discriminator 2
 1130 0012 94F81234 		ldrb	r3, [r4, #1042]	@ zero_extendqisi2
 1131 0016 23B9     		cbnz	r3, .L111
 171:Src/robotronik_protocol.c ****   
 1132              		.loc 1 171 0 is_stmt 0 discriminator 1
 1133 0018 6368     		ldr	r3, [r4, #4]
 1134 001a 9847     		blx	r3
 1135              	.LVL120:
 1136 001c 401B     		subs	r0, r0, r5
 1137 001e B042     		cmp	r0, r6
 1138 0020 F7D3     		bcc	.L112
 1139              	.L111:
 173:Src/robotronik_protocol.c ****     return -1;
 1140              		.loc 1 173 0 is_stmt 1
 1141 0022 94F81234 		ldrb	r3, [r4, #1042]	@ zero_extendqisi2
 1142 0026 1BB1     		cbz	r3, .L114
 177:Src/robotronik_protocol.c ****   
 1143              		.loc 1 177 0
 1144 0028 0020     		movs	r0, #0
 1145 002a 84F81204 		strb	r0, [r4, #1042]
 1146              	.L110:
 180:Src/robotronik_protocol.c **** 
 1147              		.loc 1 180 0
 1148 002e 70BD     		pop	{r4, r5, r6, pc}
 1149              	.LVL121:
 1150              	.L114:
 174:Src/robotronik_protocol.c ****   }
 1151              		.loc 1 174 0
 1152 0030 4FF0FF30 		mov	r0, #-1
 1153 0034 FBE7     		b	.L110
 1154              		.cfi_endproc
 1155              	.LFE7:
 1157              		.section	.text.RP_Get_Error,"ax",%progbits
 1158              		.align	1
 1159              		.global	RP_Get_Error
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu fpv4-sp-d16
 1165              	RP_Get_Error:
 1166              	.LFB15:
 354:Src/robotronik_protocol.c **** 
 355:Src/robotronik_protocol.c **** uint16_t RP_Get_Error(){
 1167              		.loc 1 355 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 356:Src/robotronik_protocol.c ****   return err;
 357:Src/robotronik_protocol.c **** }
 1172              		.loc 1 357 0
 1173 0000 014B     		ldr	r3, .L117
 1174 0002 1888     		ldrh	r0, [r3]
 1175 0004 7047     		bx	lr
ARM GAS  /tmp/ccQHyITR.s 			page 29


 1176              	.L118:
 1177 0006 00BF     		.align	2
 1178              	.L117:
 1179 0008 00000000 		.word	.LANCHOR0
 1180              		.cfi_endproc
 1181              	.LFE15:
 1183              		.section	.bss.err,"aw",%nobits
 1184              		.align	1
 1185              		.set	.LANCHOR0,. + 0
 1188              	err:
 1189 0000 0000     		.space	2
 1190              		.text
 1191              	.Letext0:
 1192              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1193              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1194              		.file 4 "Inc/robotronik_protocol.h"
 1195              		.file 5 "Inc/crc_16.h"
ARM GAS  /tmp/ccQHyITR.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 robotronik_protocol.c
     /tmp/ccQHyITR.s:18     .text.RP_FSM_INIT:0000000000000000 $t
     /tmp/ccQHyITR.s:24     .text.RP_FSM_INIT:0000000000000000 RP_FSM_INIT
     /tmp/ccQHyITR.s:64     .text.RP_FSM_INIT:0000000000000030 $d
     /tmp/ccQHyITR.s:165    .text.RP_FSM_ID:0000000000000000 RP_FSM_ID
     /tmp/ccQHyITR.s:70     .text.RP_Init_Interface:0000000000000000 $t
     /tmp/ccQHyITR.s:77     .text.RP_Init_Interface:0000000000000000 RP_Init_Interface
     /tmp/ccQHyITR.s:112    .text.RP_Init_Interface:000000000000002c $d
     /tmp/ccQHyITR.s:117    .text.RP_Packet_Received:0000000000000000 $t
     /tmp/ccQHyITR.s:124    .text.RP_Packet_Received:0000000000000000 RP_Packet_Received
     /tmp/ccQHyITR.s:138    .text.RP_Error_Handler:0000000000000000 $t
     /tmp/ccQHyITR.s:145    .text.RP_Error_Handler:0000000000000000 RP_Error_Handler
     /tmp/ccQHyITR.s:159    .text.RP_FSM_ID:0000000000000000 $t
     /tmp/ccQHyITR.s:233    .text.RP_FSM_ID:000000000000006c $d
     /tmp/ccQHyITR.s:247    .text.RP_FSM_SIZE:0000000000000000 RP_FSM_SIZE
     /tmp/ccQHyITR.s:241    .text.RP_FSM_SIZE:0000000000000000 $t
     /tmp/ccQHyITR.s:332    .text.RP_FSM_SIZE:0000000000000094 $d
     /tmp/ccQHyITR.s:346    .text.RP_FSM_DATA:0000000000000000 RP_FSM_DATA
     /tmp/ccQHyITR.s:340    .text.RP_FSM_DATA:0000000000000000 $t
     /tmp/ccQHyITR.s:430    .text.RP_FSM_DATA:0000000000000084 $d
     /tmp/ccQHyITR.s:444    .text.RP_FSM_CRC_LOW:0000000000000000 RP_FSM_CRC_LOW
     /tmp/ccQHyITR.s:438    .text.RP_FSM_CRC_LOW:0000000000000000 $t
     /tmp/ccQHyITR.s:522    .text.RP_FSM_CRC_LOW:000000000000007c $d
     /tmp/ccQHyITR.s:535    .text.RP_FSM_CRC_HIGH:0000000000000000 RP_FSM_CRC_HIGH
     /tmp/ccQHyITR.s:529    .text.RP_FSM_CRC_HIGH:0000000000000000 $t
     /tmp/ccQHyITR.s:614    .text.RP_FSM_CRC_HIGH:0000000000000080 $d
     /tmp/ccQHyITR.s:627    .text.RP_FSM_END:0000000000000000 RP_FSM_END
     /tmp/ccQHyITR.s:621    .text.RP_FSM_END:0000000000000000 $t
     /tmp/ccQHyITR.s:686    .text.RP_FSM_END:0000000000000058 $d
     /tmp/ccQHyITR.s:692    .text.RP_Build_Frame:0000000000000000 $t
     /tmp/ccQHyITR.s:699    .text.RP_Build_Frame:0000000000000000 RP_Build_Frame
     /tmp/ccQHyITR.s:907    .text.RP_Build_Frame:00000000000000c0 $d
     /tmp/ccQHyITR.s:913    .text.RP_Sync:0000000000000000 $t
     /tmp/ccQHyITR.s:920    .text.RP_Sync:0000000000000000 RP_Sync
     /tmp/ccQHyITR.s:974    .text.RP_Sync:0000000000000030 $d
     /tmp/ccQHyITR.s:979    .text.RP_Send:0000000000000000 $t
     /tmp/ccQHyITR.s:986    .text.RP_Send:0000000000000000 RP_Send
     /tmp/ccQHyITR.s:1042   .text.RP_Send:000000000000003c $d
     /tmp/ccQHyITR.s:1047   .text.RP_Process_Data:0000000000000000 $t
     /tmp/ccQHyITR.s:1054   .text.RP_Process_Data:0000000000000000 RP_Process_Data
     /tmp/ccQHyITR.s:1095   .text.RP_Wait_Packet:0000000000000000 $t
     /tmp/ccQHyITR.s:1102   .text.RP_Wait_Packet:0000000000000000 RP_Wait_Packet
     /tmp/ccQHyITR.s:1158   .text.RP_Get_Error:0000000000000000 $t
     /tmp/ccQHyITR.s:1165   .text.RP_Get_Error:0000000000000000 RP_Get_Error
     /tmp/ccQHyITR.s:1179   .text.RP_Get_Error:0000000000000008 $d
     /tmp/ccQHyITR.s:1184   .bss.err:0000000000000000 $d
     /tmp/ccQHyITR.s:1188   .bss.err:0000000000000000 err

UNDEFINED SYMBOLS
crc_table
