ARM GAS  /tmp/ccRda2as.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"strategy.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Init_Cube_Sort,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	Init_Cube_Sort:
  25              	.LFB3:
  26              		.file 1 "Src/strategy.c"
   1:Src/strategy.c **** #include "strategy.h"
   2:Src/strategy.c **** 
   3:Src/strategy.c **** #include <stdlib.h>
   4:Src/strategy.c **** #include <stdio.h>//TMP
   5:Src/strategy.c **** #include <math.h>
   6:Src/strategy.c **** #define PI 3.14159265358979323846
   7:Src/strategy.c **** 
   8:Src/strategy.c **** #include "map.h"
   9:Src/strategy.c **** 
  10:Src/strategy.c **** #define swap(type, a, b) {type tmp = (a); (a) = (b); (b) = tmp;}
  11:Src/strategy.c **** 
  12:Src/strategy.c **** Team team;
  13:Src/strategy.c **** Robot me;
  14:Src/strategy.c **** 
  15:Src/strategy.c **** uint16_t score = 0;
  16:Src/strategy.c **** 
  17:Src/strategy.c **** static Cube_Color construction_plan[3];
  18:Src/strategy.c **** static uint8_t valid_plan = 0;
  19:Src/strategy.c **** static int score_per_size[6] = {0, 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5};
  20:Src/strategy.c **** Builder_Context build_ctx = {.on_set = false, .set_number = 0, .align_dir = 0, .nb_built = 0};
  21:Src/strategy.c **** 
  22:Src/strategy.c **** char color_str[5][16] = {
  23:Src/strategy.c ****     [GREEN] = "GREEN",
  24:Src/strategy.c ****     [YELLOW] = "YELLOW",
  25:Src/strategy.c ****     [ORANGE] = "ORANGE",
  26:Src/strategy.c ****     [BLACK] = "BLACK",
  27:Src/strategy.c ****     [BLUE] = "BLUE"
  28:Src/strategy.c ****   };
  29:Src/strategy.c **** 
  30:Src/strategy.c **** #define PLAN_TOP construction_plan[0]
  31:Src/strategy.c **** #define PLAN_MIDDLE construction_plan[1]
  32:Src/strategy.c **** #define PLAN_BOTTOM construction_plan[2]
ARM GAS  /tmp/ccRda2as.s 			page 2


  33:Src/strategy.c **** 
  34:Src/strategy.c **** static int Get_Nb_Cubes_Set(int index_set);
  35:Src/strategy.c **** static Cube* Find_Cube(Cube_Color color, uint8_t no_pattern);
  36:Src/strategy.c **** static int Find_Cubes(Cube_Color color, uint8_t no_pattern, Cube *to_complete[CUBES_PER_SET], int *
  37:Src/strategy.c **** static void Eval_Combination(Cube* comb_ref[], uint8_t mask, float *best_rank);
  38:Src/strategy.c **** static void Eval_Permutation(Cube* comb[], int size, float *best_rank);
  39:Src/strategy.c **** static float Eval_Move(Robot *robot, uint16_t dest_x, uint16_t dest_y);
  40:Src/strategy.c **** static float Eval_Align_Stack(Target *t, Robot *robot);
  41:Src/strategy.c **** static float Eval_Place(Robot *robot);
  42:Src/strategy.c **** static float Eval_Return_Approach(Robot *robot);
  43:Src/strategy.c **** 
  44:Src/strategy.c **** //==================================================//
  45:Src/strategy.c **** //                     Cubes                        //
  46:Src/strategy.c **** //==================================================//
  47:Src/strategy.c **** #define EXPAND_CUBES_FROM_POS(_x, _y, _side)				\
  48:Src/strategy.c ****   {.x = _x - CUBE_SIZE, .y = _y, .color = (_side==GREEN_TEAM)?GREEN:ORANGE}, \
  49:Src/strategy.c ****   {.x = _x, .y = _y, .color = YELLOW},					\
  50:Src/strategy.c ****   {.x = _x + CUBE_SIZE, .y = _y, .color = (_side==GREEN_TEAM)?ORANGE:GREEN}, \
  51:Src/strategy.c ****   {.x = _x, .y = _y - CUBE_SIZE, .color = BLACK},			\
  52:Src/strategy.c ****   {.x = _x, .y = _y + CUBE_SIZE, .color = BLUE}
  53:Src/strategy.c **** 
  54:Src/strategy.c **** Cube cube[NB_CUBES] = {
  55:Src/strategy.c ****   EXPAND_CUBES_FROM_POS(300, 1190, GREEN_TEAM),
  56:Src/strategy.c ****   EXPAND_CUBES_FROM_POS(850, 540, GREEN_TEAM),
  57:Src/strategy.c ****   EXPAND_CUBES_FROM_POS(1100, 1500, GREEN_TEAM),
  58:Src/strategy.c ****   EXPAND_CUBES_FROM_POS(1900, 1500, ORANGE_TEAM),
  59:Src/strategy.c ****   EXPAND_CUBES_FROM_POS(2150, 540, ORANGE_TEAM),
  60:Src/strategy.c ****   EXPAND_CUBES_FROM_POS(2700, 1190, ORANGE_TEAM),
  61:Src/strategy.c **** };
  62:Src/strategy.c **** 
  63:Src/strategy.c **** //==================================================//
  64:Src/strategy.c **** //                  Cubes sets                      //
  65:Src/strategy.c **** //==================================================//
  66:Src/strategy.c **** Cube_Set set[NB_SETS] = {
  67:Src/strategy.c ****   {.x = 300, .y = 1190},
  68:Src/strategy.c ****   {.x = 850, .y = 540},
  69:Src/strategy.c ****   {.x = 1100, .y = 1500},
  70:Src/strategy.c ****   {.x = 1900, .y = 1500},
  71:Src/strategy.c ****   {.x = 2150, .y = 540},
  72:Src/strategy.c ****   {.x = 2700, .y = 1190}
  73:Src/strategy.c **** };
  74:Src/strategy.c **** 
  75:Src/strategy.c **** //==================================================//
  76:Src/strategy.c **** //                 Cubes sort                       //
  77:Src/strategy.c **** //==================================================//
  78:Src/strategy.c **** 
  79:Src/strategy.c **** static Cube *cube_sort[NB_CUBES];
  80:Src/strategy.c **** uint16_t from_x, from_y;
  81:Src/strategy.c **** 
  82:Src/strategy.c **** static void Init_Cube_Sort(){
  27              		.loc 1 82 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  83:Src/strategy.c ****   int i;
ARM GAS  /tmp/ccRda2as.s 			page 3


  84:Src/strategy.c ****   for(i = 0; i < NB_CUBES; i++){
  33              		.loc 1 84 0
  34 0000 0023     		movs	r3, #0
  35 0002 08E0     		b	.L2
  36              	.LVL1:
  37              	.L3:
  85:Src/strategy.c ****     cube_sort[i] = &cube[i];
  38              		.loc 1 85 0 discriminator 3
  39 0004 03EB4302 		add	r2, r3, r3, lsl #1
  40 0008 5100     		lsls	r1, r2, #1
  41 000a 044A     		ldr	r2, .L4
  42 000c 0A44     		add	r2, r2, r1
  43 000e 0449     		ldr	r1, .L4+4
  44 0010 41F82320 		str	r2, [r1, r3, lsl #2]
  84:Src/strategy.c ****     cube_sort[i] = &cube[i];
  45              		.loc 1 84 0 discriminator 3
  46 0014 0133     		adds	r3, r3, #1
  47              	.LVL2:
  48              	.L2:
  84:Src/strategy.c ****     cube_sort[i] = &cube[i];
  49              		.loc 1 84 0 is_stmt 0 discriminator 1
  50 0016 1D2B     		cmp	r3, #29
  51 0018 F4DD     		ble	.L3
  86:Src/strategy.c ****   }
  87:Src/strategy.c **** }
  52              		.loc 1 87 0 is_stmt 1
  53 001a 7047     		bx	lr
  54              	.L5:
  55              		.align	2
  56              	.L4:
  57 001c 00000000 		.word	.LANCHOR0
  58 0020 00000000 		.word	.LANCHOR1
  59              		.cfi_endproc
  60              	.LFE3:
  62              		.section	.text.Get_Nb_Cubes_Set,"ax",%progbits
  63              		.align	1
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu fpv4-sp-d16
  69              	Get_Nb_Cubes_Set:
  70              	.LFB12:
  88:Src/strategy.c **** 
  89:Src/strategy.c **** static int Compare_Cubes(const void* a, const void* b){
  90:Src/strategy.c ****   Cube *const c_a = *((Cube**)a);
  91:Src/strategy.c ****   Cube *const c_b = *((Cube**)b);
  92:Src/strategy.c **** 
  93:Src/strategy.c ****   if(c_a->availability < c_b->availability){
  94:Src/strategy.c ****     return 1;
  95:Src/strategy.c ****   }else if(c_a->availability == c_b->availability){
  96:Src/strategy.c ****     float dist_a = dist(from_x, from_y, c_a->x, c_a->y);
  97:Src/strategy.c ****     float dist_b = dist(from_x, from_y, c_b->x, c_b->y);
  98:Src/strategy.c ****     if(dist_a > dist_b){
  99:Src/strategy.c ****       return 1;
 100:Src/strategy.c ****     }else if(dist_a == dist_b){
 101:Src/strategy.c ****       return 0;
 102:Src/strategy.c ****     }
ARM GAS  /tmp/ccRda2as.s 			page 4


 103:Src/strategy.c ****   }
 104:Src/strategy.c ****   return -1;
 105:Src/strategy.c **** } 
 106:Src/strategy.c **** 
 107:Src/strategy.c **** 
 108:Src/strategy.c **** static void Cube_Sort(uint16_t from_x_, uint16_t from_y_){
 109:Src/strategy.c ****   from_x = from_x_;
 110:Src/strategy.c ****   from_y = from_y_;
 111:Src/strategy.c ****   qsort(cube_sort, NB_CUBES, sizeof(Cube*), Compare_Cubes);
 112:Src/strategy.c **** }
 113:Src/strategy.c **** 
 114:Src/strategy.c **** //==================================================//
 115:Src/strategy.c **** //               Init Strategy                      //
 116:Src/strategy.c **** //==================================================//
 117:Src/strategy.c **** 
 118:Src/strategy.c **** void Init_Strategy(){
 119:Src/strategy.c ****   me.x = (team == GREEN_TEAM)?ROBOT_X0:(AREA_WIDTH-ROBOT_X0);
 120:Src/strategy.c ****   me.y = ROBOT_Y0;
 121:Src/strategy.c ****   me.angle = (team == GREEN_TEAM)?ROBOT_A0:PI;
 122:Src/strategy.c ****   me.on_target = 0;
 123:Src/strategy.c ****   score = 0;
 124:Src/strategy.c **** 
 125:Src/strategy.c ****   //Initializing objects availability
 126:Src/strategy.c ****   int k;
 127:Src/strategy.c ****   for(k = 0; k < NB_CUBES; k++){
 128:Src/strategy.c ****     cube[k].availability = ((team==GREEN_TEAM) != (k >= (NB_CUBES/2)))?LIKELY:UNCERTAIN;
 129:Src/strategy.c ****   }
 130:Src/strategy.c ****   for(k = 0; k < NB_SETS; k++){
 131:Src/strategy.c ****     set[k].availability = CUBE_SET(k, 0).availability;
 132:Src/strategy.c ****   }
 133:Src/strategy.c **** 
 134:Src/strategy.c ****   //Map positions
 135:Src/strategy.c ****   Init_Map();
 136:Src/strategy.c ****     
 137:Src/strategy.c ****   Refresh_Map();
 138:Src/strategy.c **** 
 139:Src/strategy.c ****   //Construction init
 140:Src/strategy.c ****   Init_Construction(&build_ctx.construction);
 141:Src/strategy.c **** 
 142:Src/strategy.c ****   Init_Cube_Sort();
 143:Src/strategy.c **** }
 144:Src/strategy.c **** 
 145:Src/strategy.c **** void Set_Construction_Plan(Cube_Color bottom, Cube_Color middle, Cube_Color top){
 146:Src/strategy.c ****   PLAN_TOP = top;
 147:Src/strategy.c ****   PLAN_MIDDLE = middle;
 148:Src/strategy.c ****   PLAN_BOTTOM = bottom;
 149:Src/strategy.c ****   valid_plan = 1;
 150:Src/strategy.c **** }
 151:Src/strategy.c **** 
 152:Src/strategy.c **** //==================================================//
 153:Src/strategy.c **** //                  Construction                    //
 154:Src/strategy.c **** //==================================================//
 155:Src/strategy.c **** void Init_Construction(Construction *construction){
 156:Src/strategy.c ****   construction->size = 0;
 157:Src/strategy.c ****   construction->plan_state = FSM_PLAN_NONE;
 158:Src/strategy.c **** }
 159:Src/strategy.c **** 
ARM GAS  /tmp/ccRda2as.s 			page 5


 160:Src/strategy.c **** int Update_Construction(Cube *c, Construction *construction){
 161:Src/strategy.c ****   //Check size
 162:Src/strategy.c ****   if(construction->size == CUBES_PER_SET){
 163:Src/strategy.c ****     return -1;
 164:Src/strategy.c ****   }
 165:Src/strategy.c **** 
 166:Src/strategy.c ****   //Add cube
 167:Src/strategy.c ****   construction->c[construction->size++] = c;
 168:Src/strategy.c **** 
 169:Src/strategy.c ****   //Update plan state
 170:Src/strategy.c ****   switch(construction->plan_state){
 171:Src/strategy.c ****   case FSM_PLAN_NONE:
 172:Src/strategy.c ****     if(c->color == PLAN_TOP){
 173:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_T;
 174:Src/strategy.c ****       }else if(c->color == PLAN_BOTTOM){
 175:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_B;
 176:Src/strategy.c ****       }
 177:Src/strategy.c ****       break;
 178:Src/strategy.c ****     case FSM_PLAN_T:
 179:Src/strategy.c ****       if(c->color == PLAN_MIDDLE){
 180:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_TM;
 181:Src/strategy.c ****       }else if(c->color == PLAN_BOTTOM){
 182:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_B;
 183:Src/strategy.c ****       }else if(c->color != PLAN_TOP){
 184:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_NONE;
 185:Src/strategy.c ****       }
 186:Src/strategy.c ****       break;
 187:Src/strategy.c ****     case FSM_PLAN_B:
 188:Src/strategy.c ****       if(c->color == PLAN_MIDDLE){
 189:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_BM;
 190:Src/strategy.c ****       }else if(c->color == PLAN_TOP){
 191:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_T;
 192:Src/strategy.c ****       }else if(c->color != PLAN_BOTTOM){
 193:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_NONE;
 194:Src/strategy.c ****       }
 195:Src/strategy.c ****       break;
 196:Src/strategy.c ****     case FSM_PLAN_TM:
 197:Src/strategy.c ****       if(c->color == PLAN_BOTTOM){
 198:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_COMPLETE;
 199:Src/strategy.c ****       }else if(c->color == PLAN_TOP){
 200:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_T;
 201:Src/strategy.c ****       }else{
 202:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_NONE;
 203:Src/strategy.c ****       }
 204:Src/strategy.c ****       break;
 205:Src/strategy.c ****     case FSM_PLAN_BM:
 206:Src/strategy.c ****       if(c->color == PLAN_TOP){
 207:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_COMPLETE;
 208:Src/strategy.c ****       }else if(c->color == PLAN_BOTTOM){
 209:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_B;
 210:Src/strategy.c ****       }else{
 211:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_NONE;
 212:Src/strategy.c ****       }
 213:Src/strategy.c ****       break;
 214:Src/strategy.c ****     case FSM_PLAN_COMPLETE:
 215:Src/strategy.c ****       break;
 216:Src/strategy.c ****   }
ARM GAS  /tmp/ccRda2as.s 			page 6


 217:Src/strategy.c ****   
 218:Src/strategy.c ****   return 0;
 219:Src/strategy.c **** }
 220:Src/strategy.c **** 
 221:Src/strategy.c **** uint16_t Get_Construction_Score(Construction *construction){
 222:Src/strategy.c ****   return score_per_size[construction->size]
 223:Src/strategy.c ****     + (construction->plan_state == FSM_PLAN_COMPLETE)?30:0;
 224:Src/strategy.c **** }
 225:Src/strategy.c **** 
 226:Src/strategy.c **** //==================================================//
 227:Src/strategy.c **** //               Building Strategy                  //
 228:Src/strategy.c **** //==================================================//
 229:Src/strategy.c **** Building_Strategy strat;
 230:Src/strategy.c **** 
 231:Src/strategy.c **** void Compute_Building_Strategy(){
 232:Src/strategy.c ****   strat.nb_targets = 0;
 233:Src/strategy.c ****   strat.nb_materials = Select_Building_Materials(strat.materials);
 234:Src/strategy.c ****   //printf("Nb materials : %d\n", strat.nb_materials);
 235:Src/strategy.c ****   John_The_Builder();
 236:Src/strategy.c ****   //Eval_Move(&me, 205, 450);
 237:Src/strategy.c ****   
 238:Src/strategy.c **** }
 239:Src/strategy.c **** 
 240:Src/strategy.c **** #define CHECK_ACCESSIBILITY(k, color, ncs, mcb, stack) (((CUBE_SET(k, color)).availability >= UNCER
 241:Src/strategy.c **** 
 242:Src/strategy.c **** static int Get_Nb_Cubes_Set(int index_set){
  71              		.loc 1 242 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              	.LVL3:
  77 0000 10B4     		push	{r4}
  78              	.LCFI0:
  79              		.cfi_def_cfa_offset 4
  80              		.cfi_offset 4, -4
  81              	.LVL4:
 243:Src/strategy.c ****   int nb_cubes_set = 0;
 244:Src/strategy.c ****   int i;
 245:Src/strategy.c ****   for(i = 0; i < CUBES_PER_SET; i++){
  82              		.loc 1 245 0
  83 0002 0022     		movs	r2, #0
 243:Src/strategy.c ****   int nb_cubes_set = 0;
  84              		.loc 1 243 0
  85 0004 1446     		mov	r4, r2
  86              		.loc 1 245 0
  87 0006 00E0     		b	.L7
  88              	.LVL5:
  89              	.L8:
  90              		.loc 1 245 0 is_stmt 0 discriminator 2
  91 0008 0132     		adds	r2, r2, #1
  92              	.LVL6:
  93              	.L7:
  94              		.loc 1 245 0 discriminator 1
  95 000a 042A     		cmp	r2, #4
  96 000c 0CDC     		bgt	.L11
 246:Src/strategy.c ****     if(CUBE_SET(index_set, i).availability >= UNCERTAIN){
ARM GAS  /tmp/ccRda2as.s 			page 7


  97              		.loc 1 246 0 is_stmt 1
  98 000e 00EB8003 		add	r3, r0, r0, lsl #2
  99 0012 1344     		add	r3, r3, r2
 100 0014 03EB4303 		add	r3, r3, r3, lsl #1
 101 0018 5900     		lsls	r1, r3, #1
 102 001a 054B     		ldr	r3, .L12
 103 001c 0B44     		add	r3, r3, r1
 104 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 105 0020 012B     		cmp	r3, #1
 106 0022 F1D9     		bls	.L8
 247:Src/strategy.c ****       nb_cubes_set++;
 107              		.loc 1 247 0
 108 0024 0134     		adds	r4, r4, #1
 109              	.LVL7:
 110 0026 EFE7     		b	.L8
 111              	.L11:
 248:Src/strategy.c ****     }
 249:Src/strategy.c ****   }
 250:Src/strategy.c **** 
 251:Src/strategy.c ****   return nb_cubes_set;
 252:Src/strategy.c **** }
 112              		.loc 1 252 0
 113 0028 2046     		mov	r0, r4
 114              	.LVL8:
 115 002a 5DF8044B 		ldr	r4, [sp], #4
 116              	.LCFI1:
 117              		.cfi_restore 4
 118              		.cfi_def_cfa_offset 0
 119              	.LVL9:
 120 002e 7047     		bx	lr
 121              	.L13:
 122              		.align	2
 123              	.L12:
 124 0030 00000000 		.word	.LANCHOR0
 125              		.cfi_endproc
 126              	.LFE12:
 128              		.section	.text.Find_Cubes,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 133              		.fpu fpv4-sp-d16
 135              	Find_Cubes:
 136              	.LFB13:
 253:Src/strategy.c **** 
 254:Src/strategy.c **** static int Find_Cubes(Cube_Color color, uint8_t no_pattern, Cube *to_complete[CUBES_PER_SET], int *
 137              		.loc 1 254 0
 138              		.cfi_startproc
 139              		@ args = 4, pretend = 0, frame = 8
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              	.LVL10:
 142 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 36
 145              		.cfi_offset 4, -36
 146              		.cfi_offset 5, -32
 147              		.cfi_offset 6, -28
ARM GAS  /tmp/ccRda2as.s 			page 8


 148              		.cfi_offset 7, -24
 149              		.cfi_offset 8, -20
 150              		.cfi_offset 9, -16
 151              		.cfi_offset 10, -12
 152              		.cfi_offset 11, -8
 153              		.cfi_offset 14, -4
 154 0004 83B0     		sub	sp, sp, #12
 155              	.LCFI3:
 156              		.cfi_def_cfa_offset 48
 157 0006 8346     		mov	fp, r0
 158 0008 8846     		mov	r8, r1
 159 000a 0192     		str	r2, [sp, #4]
 160 000c 9946     		mov	r9, r3
 161 000e DDF830A0 		ldr	r10, [sp, #48]
 162              	.LVL11:
 255:Src/strategy.c **** 
 256:Src/strategy.c ****   int k, n;
 257:Src/strategy.c ****   for(k = 0, n = 0; (k < NB_CUBES) && (n < nmax) && (*current_size < CUBES_PER_SET); k++){
 163              		.loc 1 257 0
 164 0012 0027     		movs	r7, #0
 165 0014 3C46     		mov	r4, r7
 166 0016 0DE0     		b	.L15
 167              	.LVL12:
 168              	.L18:
 169              	.LBB2:
 258:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 259:Src/strategy.c **** 
 260:Src/strategy.c ****     //Checking color
 261:Src/strategy.c ****     if((no_pattern && ((current_cube->color == PLAN_TOP)
 262:Src/strategy.c **** 		       || (current_cube->color == PLAN_MIDDLE)
 263:Src/strategy.c **** 		       || (current_cube->color == PLAN_BOTTOM)))
 264:Src/strategy.c ****        || (!no_pattern && current_cube->color != color)
 265:Src/strategy.c ****        || (color == CENTER_COLOR && Get_Nb_Cubes_Set((current_cube-&cube[0])/CUBES_PER_SET) > 2)
 170              		.loc 1 265 0
 171 0018 BBF1010F 		cmp	fp, #1
 172 001c 2CD0     		beq	.L23
 173              	.L19:
 266:Src/strategy.c ****        || current_cube->availability <= UNLIKELY)
 174              		.loc 1 266 0
 175 001e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 176 0020 012B     		cmp	r3, #1
 177 0022 06D9     		bls	.L17
 267:Src/strategy.c ****       continue;
 268:Src/strategy.c **** 
 269:Src/strategy.c ****     n++;
 178              		.loc 1 269 0
 179 0024 0137     		adds	r7, r7, #1
 180              	.LVL13:
 270:Src/strategy.c ****     to_complete[(*current_size)++] = current_cube;
 181              		.loc 1 270 0
 182 0026 731C     		adds	r3, r6, #1
 183 0028 C9F80030 		str	r3, [r9]
 184 002c 019B     		ldr	r3, [sp, #4]
 185 002e 43F82650 		str	r5, [r3, r6, lsl #2]
 186              	.L17:
 187              	.LBE2:
 257:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
ARM GAS  /tmp/ccRda2as.s 			page 9


 188              		.loc 1 257 0 discriminator 2
 189 0032 0134     		adds	r4, r4, #1
 190              	.LVL14:
 191              	.L15:
 257:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 192              		.loc 1 257 0 is_stmt 0 discriminator 1
 193 0034 1D2C     		cmp	r4, #29
 194 0036 30DC     		bgt	.L20
 257:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 195              		.loc 1 257 0 discriminator 3
 196 0038 5745     		cmp	r7, r10
 197 003a 2EDA     		bge	.L20
 257:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 198              		.loc 1 257 0 discriminator 4
 199 003c D9F80060 		ldr	r6, [r9]
 200 0040 042E     		cmp	r6, #4
 201 0042 2ADC     		bgt	.L20
 202              	.LBB3:
 258:Src/strategy.c **** 
 203              		.loc 1 258 0 is_stmt 1
 204 0044 184B     		ldr	r3, .L24
 205 0046 53F82450 		ldr	r5, [r3, r4, lsl #2]
 206              	.LVL15:
 261:Src/strategy.c **** 		       || (current_cube->color == PLAN_MIDDLE)
 207              		.loc 1 261 0
 208 004a B8F1000F 		cmp	r8, #0
 209 004e 0CD0     		beq	.L16
 261:Src/strategy.c **** 		       || (current_cube->color == PLAN_MIDDLE)
 210              		.loc 1 261 0 is_stmt 0 discriminator 1
 211 0050 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 212 0052 164A     		ldr	r2, .L24+4
 213 0054 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 214 0056 9342     		cmp	r3, r2
 215 0058 EBD0     		beq	.L17
 262:Src/strategy.c **** 		       || (current_cube->color == PLAN_BOTTOM)))
 216              		.loc 1 262 0 is_stmt 1
 217 005a 144A     		ldr	r2, .L24+4
 218 005c 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 219 005e 9342     		cmp	r3, r2
 220 0060 E7D0     		beq	.L17
 263:Src/strategy.c ****        || (!no_pattern && current_cube->color != color)
 221              		.loc 1 263 0
 222 0062 124A     		ldr	r2, .L24+4
 223 0064 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 224 0066 9342     		cmp	r3, r2
 225 0068 E3D0     		beq	.L17
 226              	.L16:
 264:Src/strategy.c ****        || (color == CENTER_COLOR && Get_Nb_Cubes_Set((current_cube-&cube[0])/CUBES_PER_SET) > 2)
 227              		.loc 1 264 0
 228 006a B8F1000F 		cmp	r8, #0
 229 006e D3D1     		bne	.L18
 264:Src/strategy.c ****        || (color == CENTER_COLOR && Get_Nb_Cubes_Set((current_cube-&cube[0])/CUBES_PER_SET) > 2)
 230              		.loc 1 264 0 is_stmt 0 discriminator 1
 231 0070 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 232 0072 5B45     		cmp	r3, fp
 233 0074 D0D0     		beq	.L18
 234 0076 DCE7     		b	.L17
ARM GAS  /tmp/ccRda2as.s 			page 10


 235              	.L23:
 265:Src/strategy.c ****        || current_cube->availability <= UNLIKELY)
 236              		.loc 1 265 0 is_stmt 1 discriminator 1
 237 0078 0D4B     		ldr	r3, .L24+8
 238 007a EB1A     		subs	r3, r5, r3
 239 007c 5810     		asrs	r0, r3, #1
 240 007e 0D4B     		ldr	r3, .L24+12
 241 0080 03FB00F3 		mul	r3, r3, r0
 242 0084 0C48     		ldr	r0, .L24+16
 243 0086 80FB0320 		smull	r2, r0, r0, r3
 244 008a DB17     		asrs	r3, r3, #31
 245 008c C3EB6000 		rsb	r0, r3, r0, asr #1
 246 0090 FFF7FEFF 		bl	Get_Nb_Cubes_Set
 247              	.LVL16:
 248 0094 0228     		cmp	r0, #2
 249 0096 C2DD     		ble	.L19
 250 0098 CBE7     		b	.L17
 251              	.LVL17:
 252              	.L20:
 253              	.LBE3:
 271:Src/strategy.c ****   }
 272:Src/strategy.c **** 
 273:Src/strategy.c ****   return (n == nmax);
 274:Src/strategy.c **** }
 254              		.loc 1 274 0
 255 009a 5745     		cmp	r7, r10
 256 009c 14BF     		ite	ne
 257 009e 0020     		movne	r0, #0
 258 00a0 0120     		moveq	r0, #1
 259 00a2 03B0     		add	sp, sp, #12
 260              	.LCFI4:
 261              		.cfi_def_cfa_offset 36
 262              		@ sp needed
 263 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 264              	.LVL18:
 265              	.L25:
 266              		.align	2
 267              	.L24:
 268 00a8 00000000 		.word	.LANCHOR1
 269 00ac 00000000 		.word	.LANCHOR2
 270 00b0 00000000 		.word	.LANCHOR0
 271 00b4 ABAAAAAA 		.word	-1431655765
 272 00b8 67666666 		.word	1717986919
 273              		.cfi_endproc
 274              	.LFE13:
 276              		.section	.text.Find_Cube,"ax",%progbits
 277              		.align	1
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu fpv4-sp-d16
 283              	Find_Cube:
 284              	.LFB14:
 275:Src/strategy.c **** 
 276:Src/strategy.c **** static Cube* Find_Cube(Cube_Color color, uint8_t no_pattern){
 285              		.loc 1 276 0
 286              		.cfi_startproc
ARM GAS  /tmp/ccRda2as.s 			page 11


 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              	.LVL19:
 290 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 291              	.LCFI5:
 292              		.cfi_def_cfa_offset 24
 293              		.cfi_offset 3, -24
 294              		.cfi_offset 4, -20
 295              		.cfi_offset 5, -16
 296              		.cfi_offset 6, -12
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 0746     		mov	r7, r0
 300 0004 0E46     		mov	r6, r1
 301              	.LVL20:
 277:Src/strategy.c ****   int k;
 278:Src/strategy.c ****   for(k = 0; k < NB_CUBES; k++){
 302              		.loc 1 278 0
 303 0006 0024     		movs	r4, #0
 304 0008 10E0     		b	.L27
 305              	.LVL21:
 306              	.L36:
 307              	.LBB4:
 279:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 280:Src/strategy.c **** 
 281:Src/strategy.c ****     //Checking color
 282:Src/strategy.c ****     if((no_pattern && ((current_cube->color == PLAN_TOP)
 283:Src/strategy.c **** 		       || (current_cube->color == PLAN_MIDDLE)
 284:Src/strategy.c **** 		       || (current_cube->color == PLAN_BOTTOM)))
 285:Src/strategy.c ****        || (!no_pattern && current_cube->color != color)
 286:Src/strategy.c ****        || (color == CENTER_COLOR && Get_Nb_Cubes_Set((current_cube-&cube[0])/CUBES_PER_SET) > 2)
 308              		.loc 1 286 0 discriminator 1
 309 000a 184B     		ldr	r3, .L37
 310 000c EB1A     		subs	r3, r5, r3
 311 000e 5810     		asrs	r0, r3, #1
 312 0010 174B     		ldr	r3, .L37+4
 313 0012 03FB00F3 		mul	r3, r3, r0
 314 0016 1748     		ldr	r0, .L37+8
 315 0018 80FB0320 		smull	r2, r0, r0, r3
 316 001c DB17     		asrs	r3, r3, #31
 317 001e C3EB6000 		rsb	r0, r3, r0, asr #1
 318 0022 FFF7FEFF 		bl	Get_Nb_Cubes_Set
 319              	.LVL22:
 320 0026 0228     		cmp	r0, #2
 321 0028 19DD     		ble	.L31
 322              	.L29:
 323              	.LBE4:
 278:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 324              		.loc 1 278 0
 325 002a 0134     		adds	r4, r4, #1
 326              	.LVL23:
 327              	.L27:
 278:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 328              		.loc 1 278 0 is_stmt 0 discriminator 1
 329 002c 1D2C     		cmp	r4, #29
 330 002e 1BDC     		bgt	.L35
 331              	.LBB5:
ARM GAS  /tmp/ccRda2as.s 			page 12


 279:Src/strategy.c ****     Cube *const current_cube = cube_sort[k];
 332              		.loc 1 279 0 is_stmt 1
 333 0030 114B     		ldr	r3, .L37+12
 334 0032 53F82450 		ldr	r5, [r3, r4, lsl #2]
 335              	.LVL24:
 282:Src/strategy.c **** 		       || (current_cube->color == PLAN_MIDDLE)
 336              		.loc 1 282 0
 337 0036 66B1     		cbz	r6, .L28
 282:Src/strategy.c **** 		       || (current_cube->color == PLAN_MIDDLE)
 338              		.loc 1 282 0 is_stmt 0 discriminator 1
 339 0038 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 340 003a 104A     		ldr	r2, .L37+16
 341 003c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 342 003e 9342     		cmp	r3, r2
 343 0040 F3D0     		beq	.L29
 283:Src/strategy.c **** 		       || (current_cube->color == PLAN_BOTTOM)))
 344              		.loc 1 283 0 is_stmt 1
 345 0042 0E4A     		ldr	r2, .L37+16
 346 0044 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 347 0046 9342     		cmp	r3, r2
 348 0048 EFD0     		beq	.L29
 284:Src/strategy.c ****        || (!no_pattern && current_cube->color != color)
 349              		.loc 1 284 0
 350 004a 0C4A     		ldr	r2, .L37+16
 351 004c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 352 004e 9342     		cmp	r3, r2
 353 0050 EBD0     		beq	.L29
 354              	.L28:
 285:Src/strategy.c ****        || (color == CENTER_COLOR && Get_Nb_Cubes_Set((current_cube-&cube[0])/CUBES_PER_SET) > 2)
 355              		.loc 1 285 0
 356 0052 16B9     		cbnz	r6, .L30
 285:Src/strategy.c ****        || (color == CENTER_COLOR && Get_Nb_Cubes_Set((current_cube-&cube[0])/CUBES_PER_SET) > 2)
 357              		.loc 1 285 0 is_stmt 0 discriminator 1
 358 0054 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 359 0056 BB42     		cmp	r3, r7
 360 0058 E7D1     		bne	.L29
 361              	.L30:
 362              		.loc 1 286 0 is_stmt 1
 363 005a 012F     		cmp	r7, #1
 364 005c D5D0     		beq	.L36
 365              	.L31:
 287:Src/strategy.c ****        || current_cube->availability <= UNLIKELY)
 366              		.loc 1 287 0
 367 005e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 368 0060 012B     		cmp	r3, #1
 369 0062 E2D9     		bls	.L29
 370              	.LVL25:
 371              	.L26:
 372              	.LBE5:
 288:Src/strategy.c ****       continue;
 289:Src/strategy.c **** 
 290:Src/strategy.c ****     return current_cube;
 291:Src/strategy.c ****   }
 292:Src/strategy.c **** 
 293:Src/strategy.c ****   return NULL;
 294:Src/strategy.c **** }
 373              		.loc 1 294 0
ARM GAS  /tmp/ccRda2as.s 			page 13


 374 0064 2846     		mov	r0, r5
 375 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 376              	.LVL26:
 377              	.L35:
 293:Src/strategy.c **** }
 378              		.loc 1 293 0
 379 0068 0025     		movs	r5, #0
 380 006a FBE7     		b	.L26
 381              	.L38:
 382              		.align	2
 383              	.L37:
 384 006c 00000000 		.word	.LANCHOR0
 385 0070 ABAAAAAA 		.word	-1431655765
 386 0074 67666666 		.word	1717986919
 387 0078 00000000 		.word	.LANCHOR1
 388 007c 00000000 		.word	.LANCHOR2
 389              		.cfi_endproc
 390              	.LFE14:
 392              		.section	.text.Check_Target,"ax",%progbits
 393              		.align	1
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu fpv4-sp-d16
 399              	Check_Target:
 400              	.LFB18:
 295:Src/strategy.c **** 
 296:Src/strategy.c **** int Select_Building_Materials(Cube* materials[CUBES_PER_SET]){
 297:Src/strategy.c ****   //Checking current construction
 298:Src/strategy.c ****   //printf("Plan state : %d\n", build_ctx.construction.plan_state);
 299:Src/strategy.c **** 
 300:Src/strategy.c ****   Cube_Set *best_set = &set[0];
 301:Src/strategy.c ****   float best_distance = dist(0, 0, AREA_WIDTH, AREA_HEIGHT);
 302:Src/strategy.c ****   uint8_t best_is_pattern_compatible = 0;
 303:Src/strategy.c ****   int best_cubes_number = 0;
 304:Src/strategy.c ****   int best_found = 0;
 305:Src/strategy.c **** 
 306:Src/strategy.c ****   int k;
 307:Src/strategy.c ****   int nb_found = 0;
 308:Src/strategy.c ****   for(k = 0; k < NB_SETS; k++){
 309:Src/strategy.c ****     Cube_Set *const current_set = &set[k];
 310:Src/strategy.c ****     Cube *found_cubes[CUBES_PER_SET]; nb_found = 0;
 311:Src/strategy.c ****     float distance = dist(me.x, me.y, current_set->x, current_set->y);
 312:Src/strategy.c ****     
 313:Src/strategy.c ****     
 314:Src/strategy.c ****     //Sort cubes for finding
 315:Src/strategy.c ****     Cube_Sort(current_set->x, current_set->y);
 316:Src/strategy.c ****     
 317:Src/strategy.c ****     //printf("Checking set %d\n", k);
 318:Src/strategy.c **** 
 319:Src/strategy.c ****     if(current_set->availability == ZERO_PROBABILITY) continue;
 320:Src/strategy.c ****     
 321:Src/strategy.c ****     //Search for plan materials
 322:Src/strategy.c ****     uint8_t nb_cubes_set = Get_Nb_Cubes_Set(k);
 323:Src/strategy.c **** 
 324:Src/strategy.c ****     uint8_t pattern_compatible = 0;
 325:Src/strategy.c ****     if(valid_plan && build_ctx.construction.plan_state != FSM_PLAN_COMPLETE){
ARM GAS  /tmp/ccRda2as.s 			page 14


 326:Src/strategy.c ****       uint8_t mcbp;//max cube before pattern
 327:Src/strategy.c ****       if(build_ctx.construction.plan_state != FSM_PLAN_NONE){
 328:Src/strategy.c **** 	mcbp = 0;
 329:Src/strategy.c ****       }else{
 330:Src/strategy.c **** 	mcbp = max(0, 2-build_ctx.construction.size);
 331:Src/strategy.c ****       }
 332:Src/strategy.c **** 
 333:Src/strategy.c ****       //Searching for cubes to complete the pattern
 334:Src/strategy.c ****       Cube *top, *middle, *bottom;
 335:Src/strategy.c ****       switch(build_ctx.construction.plan_state){
 336:Src/strategy.c ****       case FSM_PLAN_NONE:
 337:Src/strategy.c **** 	if(build_ctx.construction.size > 2) break;
 338:Src/strategy.c ****         top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, mcbp + 2, stack_set);
 339:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, mcbp + 1, stack_set);
 340:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, mcbp + 2, stack_set);
 341:Src/strategy.c **** 	if(top != NULL && bottom != NULL && middle != NULL){
 342:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 343:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 344:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 345:Src/strategy.c **** 	  pattern_compatible = 1;
 346:Src/strategy.c **** 	}
 347:Src/strategy.c **** 	break;
 348:Src/strategy.c ****       case FSM_PLAN_T:
 349:Src/strategy.c **** 	if(build_ctx.construction.size > 3) break;
 350:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, 1, stack_set);
 351:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 352:Src/strategy.c **** 	if(bottom != NULL && middle != NULL){
 353:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 354:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 355:Src/strategy.c **** 	  pattern_compatible = 1;
 356:Src/strategy.c **** 	}
 357:Src/strategy.c **** 	break;
 358:Src/strategy.c ****       case FSM_PLAN_B:
 359:Src/strategy.c **** 	if(build_ctx.construction.size > 3) break;
 360:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 361:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 1, stack_set);
 362:Src/strategy.c **** 	if(middle != NULL && top != NULL){
 363:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 364:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 365:Src/strategy.c **** 	  pattern_compatible = 1;
 366:Src/strategy.c **** 	}
 367:Src/strategy.c **** 	break;
 368:Src/strategy.c ****       case FSM_PLAN_BM:
 369:Src/strategy.c **** 	if(build_ctx.construction.size > 4) break;
 370:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 0, stack_set);
 371:Src/strategy.c **** 	if(top != NULL){
 372:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 373:Src/strategy.c **** 	  pattern_compatible = 1;
 374:Src/strategy.c **** 	}
 375:Src/strategy.c **** 	break;
 376:Src/strategy.c ****       case FSM_PLAN_TM:
 377:Src/strategy.c **** 	if(build_ctx.construction.size > 4) break;
 378:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, 0, stack_set);
 379:Src/strategy.c **** 	if(bottom != NULL){
 380:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 381:Src/strategy.c **** 	  pattern_compatible = 1;
 382:Src/strategy.c **** 	}
ARM GAS  /tmp/ccRda2as.s 			page 15


 383:Src/strategy.c **** 	break;
 384:Src/strategy.c ****       default:
 385:Src/strategy.c **** 	break;
 386:Src/strategy.c ****       }
 387:Src/strategy.c ****     }else{
 388:Src/strategy.c ****       pattern_compatible = 1;
 389:Src/strategy.c ****     }
 390:Src/strategy.c **** 
 391:Src/strategy.c ****     //Checking pattern compatibility
 392:Src/strategy.c ****     if(best_is_pattern_compatible && !pattern_compatible){
 393:Src/strategy.c ****       //printf("Ignoring uncompatible set\n");
 394:Src/strategy.c ****       continue;
 395:Src/strategy.c ****     }
 396:Src/strategy.c **** 
 397:Src/strategy.c ****     //Completing set
 398:Src/strategy.c ****     Find_Cubes(0, 1, found_cubes, &nb_found, CUBES_PER_SET - build_ctx.construction.size - nb_found
 399:Src/strategy.c **** 
 400:Src/strategy.c ****     //Evaluating distances empirically
 401:Src/strategy.c ****     
 402:Src/strategy.c ****     int i;
 403:Src/strategy.c ****     for(i = 0; i < nb_found; i++){
 404:Src/strategy.c ****       distance += dist(current_set->x, current_set->y, found_cubes[i]->x, found_cubes[i]->y);
 405:Src/strategy.c ****     }
 406:Src/strategy.c ****     //printf("Distance : %f\n", distance);
 407:Src/strategy.c **** 
 408:Src/strategy.c ****     nb_cubes_set = nb_found;
 409:Src/strategy.c ****     //Making a decision
 410:Src/strategy.c ****     if(best_is_pattern_compatible && pattern_compatible){
 411:Src/strategy.c ****       if(current_set->availability < best_set->availability){
 412:Src/strategy.c **** 	continue;
 413:Src/strategy.c ****       }
 414:Src/strategy.c ****       else if(current_set->availability == best_set->availability){
 415:Src/strategy.c **** 	if(distance > best_distance){
 416:Src/strategy.c **** 	  continue;
 417:Src/strategy.c **** 	}else if(distance == best_distance){
 418:Src/strategy.c **** 	  if(nb_cubes_set <= best_cubes_number){
 419:Src/strategy.c **** 	    continue;
 420:Src/strategy.c **** 	  }
 421:Src/strategy.c **** 	}
 422:Src/strategy.c ****       }
 423:Src/strategy.c ****     }
 424:Src/strategy.c ****     
 425:Src/strategy.c ****     /*printf("compatibility : %hhu (%hhu)\n", pattern_compatible, best_is_pattern_compatible);
 426:Src/strategy.c ****     printf("availability : %d (%d)\n", current_set->availability, best_set->availability);
 427:Src/strategy.c ****     printf("distance : %f (%f)\n", distance, best_distance);
 428:Src/strategy.c ****     printf("cubes number : %hhu (%d)\n", nb_cubes_set, best_cubes_number);
 429:Src/strategy.c ****     printf("Set is the new best.\n");*/
 430:Src/strategy.c ****     
 431:Src/strategy.c ****     best_set = current_set;
 432:Src/strategy.c ****     for(i = 0; i < nb_found; i++){
 433:Src/strategy.c ****       materials[i] = found_cubes[i];
 434:Src/strategy.c ****     }
 435:Src/strategy.c **** 
 436:Src/strategy.c ****     best_distance = distance;
 437:Src/strategy.c ****     best_is_pattern_compatible = pattern_compatible;
 438:Src/strategy.c ****     best_cubes_number = nb_cubes_set;
 439:Src/strategy.c ****     best_found = nb_found;
ARM GAS  /tmp/ccRda2as.s 			page 16


 440:Src/strategy.c ****     //printf("\n");
 441:Src/strategy.c ****   }
 442:Src/strategy.c ****   
 443:Src/strategy.c ****   return best_found;
 444:Src/strategy.c **** }
 445:Src/strategy.c **** 
 446:Src/strategy.c **** 
 447:Src/strategy.c **** void John_The_Builder(){
 448:Src/strategy.c ****   Cube *comb_ref[5];
 449:Src/strategy.c **** 
 450:Src/strategy.c ****   float best_rank = 0;
 451:Src/strategy.c ****   
 452:Src/strategy.c ****   //Copy selected materials to comb_ref
 453:Src/strategy.c ****   int i;
 454:Src/strategy.c ****   for(i = 0; i < strat.nb_materials; i++){
 455:Src/strategy.c ****     comb_ref[i] = strat.materials[i];
 456:Src/strategy.c ****   }
 457:Src/strategy.c ****   
 458:Src/strategy.c ****   //For each number of cubes possible, generate all combinations
 459:Src/strategy.c ****   int n;
 460:Src/strategy.c ****   int m = strat.nb_materials;
 461:Src/strategy.c ****   for(n = 1; n <= m; n++){
 462:Src/strategy.c ****     uint8_t mask = (1 << n) - 1;//As most binary '1' as n.
 463:Src/strategy.c ****     uint8_t nb_left;
 464:Src/strategy.c ****     uint8_t current;
 465:Src/strategy.c **** 
 466:Src/strategy.c ****     if(n == m){
 467:Src/strategy.c ****       Eval_Combination(comb_ref, mask, &best_rank);
 468:Src/strategy.c ****       continue;
 469:Src/strategy.c ****     }
 470:Src/strategy.c ****     do{
 471:Src/strategy.c ****       //eval
 472:Src/strategy.c ****       //printf("%d\n", mask&(~(1<<materials->size)));
 473:Src/strategy.c ****       Eval_Combination(comb_ref, mask, &best_rank);
 474:Src/strategy.c ****       
 475:Src/strategy.c ****       //Count the number of bits "at left"
 476:Src/strategy.c ****       current = m-1;
 477:Src/strategy.c ****       nb_left = 0;
 478:Src/strategy.c ****       while(mask&(1<<current)){
 479:Src/strategy.c **** 	nb_left++;
 480:Src/strategy.c **** 	current--;
 481:Src/strategy.c ****       }
 482:Src/strategy.c **** 
 483:Src/strategy.c ****       //Get the next bit to move
 484:Src/strategy.c ****       while(!(mask&(1<<current))){
 485:Src/strategy.c **** 	current--;
 486:Src/strategy.c ****       }
 487:Src/strategy.c ****       mask &= ((1<<current)-1);
 488:Src/strategy.c ****       mask |= ((1<<(nb_left+1))-1)<<(current+1);
 489:Src/strategy.c **** 
 490:Src/strategy.c ****     }while(mask != (((1 << n) - 1) << (m - n)));
 491:Src/strategy.c ****     Eval_Combination(comb_ref, mask, &best_rank);
 492:Src/strategy.c ****   }
 493:Src/strategy.c **** }
 494:Src/strategy.c **** 
 495:Src/strategy.c **** static void Eval_Combination(Cube* comb_ref[], uint8_t mask, float *best_rank){
 496:Src/strategy.c ****   int i;
ARM GAS  /tmp/ccRda2as.s 			page 17


 497:Src/strategy.c ****   int c[5];
 498:Src/strategy.c ****   Cube* comb[5];
 499:Src/strategy.c **** 
 500:Src/strategy.c ****   int n = 0;
 501:Src/strategy.c ****   //Get size and init first permutation
 502:Src/strategy.c ****   for(i = 0; i < 5; i++){
 503:Src/strategy.c ****     if(mask&(1<<i)){
 504:Src/strategy.c ****       comb[n++] = comb_ref[i];
 505:Src/strategy.c ****     }
 506:Src/strategy.c ****     c[i] = 0;
 507:Src/strategy.c ****   }
 508:Src/strategy.c **** 
 509:Src/strategy.c ****   Eval_Permutation(comb, n, best_rank);
 510:Src/strategy.c ****     
 511:Src/strategy.c ****   i = 0;
 512:Src/strategy.c ****   while(i < n){
 513:Src/strategy.c ****     if(c[i] < i){
 514:Src/strategy.c ****       if(!(i%2)){
 515:Src/strategy.c **** 	swap(Cube*, comb[0], comb[i]);
 516:Src/strategy.c ****       }else{
 517:Src/strategy.c **** 	swap(Cube*, comb[c[i]], comb[i]);
 518:Src/strategy.c ****       }
 519:Src/strategy.c **** 
 520:Src/strategy.c ****       Eval_Permutation(comb, n, best_rank);
 521:Src/strategy.c **** 	
 522:Src/strategy.c ****       c[i]++;
 523:Src/strategy.c ****       i = 0;
 524:Src/strategy.c ****     }else{
 525:Src/strategy.c ****       c[i] = 0;
 526:Src/strategy.c ****       i++;
 527:Src/strategy.c ****     }
 528:Src/strategy.c ****   }
 529:Src/strategy.c **** }
 530:Src/strategy.c **** 
 531:Src/strategy.c **** #define IS_REMOVED(set_index, color) (CUBE_SET((set_index), (color)).availability == ZERO_PROBABILI
 532:Src/strategy.c **** 
 533:Src/strategy.c **** static int Check_Target(Target *t) {
 401              		.loc 1 533 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406              	.LVL27:
 534:Src/strategy.c ****   int set_i = (t->c-cube)/CUBES_PER_SET;
 407              		.loc 1 534 0
 408 0000 0168     		ldr	r1, [r0]
 409 0002 9A4B     		ldr	r3, .L88
 410 0004 CB1A     		subs	r3, r1, r3
 411 0006 5A10     		asrs	r2, r3, #1
 412 0008 994B     		ldr	r3, .L88+4
 413 000a 03FB02F3 		mul	r3, r3, r2
 414 000e 994A     		ldr	r2, .L88+8
 415 0010 82FB03C2 		smull	ip, r2, r2, r3
 416 0014 DB17     		asrs	r3, r3, #31
 417 0016 C3EB6203 		rsb	r3, r3, r2, asr #1
 418              	.LVL28:
 535:Src/strategy.c ****   switch (t->c->color) {
ARM GAS  /tmp/ccRda2as.s 			page 18


 419              		.loc 1 535 0
 420 001a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 421 001c 042A     		cmp	r2, #4
 422 001e 00F2F980 		bhi	.L56
 423 0022 DFE812F0 		tbh	[pc, r2, lsl #1]
 424              	.L42:
 425 0026 0500     		.2byte	(.L41-.L42)/2
 426 0028 2500     		.2byte	(.L43-.L42)/2
 427 002a B900     		.2byte	(.L44-.L42)/2
 428 002c D700     		.2byte	(.L45-.L42)/2
 429 002e E700     		.2byte	(.L46-.L42)/2
 430              		.p2align 1
 431              	.L41:
 536:Src/strategy.c ****   case GREEN:
 537:Src/strategy.c ****     if (IS_REMOVED(set_i, YELLOW)
 432              		.loc 1 537 0
 433 0030 03EB8303 		add	r3, r3, r3, lsl #2
 434              	.LVL29:
 435 0034 0133     		adds	r3, r3, #1
 436 0036 03EB4303 		add	r3, r3, r3, lsl #1
 437 003a 5A00     		lsls	r2, r3, #1
 438 003c 8B4B     		ldr	r3, .L88
 439              	.LVL30:
 440 003e 1344     		add	r3, r3, r2
 441              	.LVL31:
 442 0040 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 443 0042 002B     		cmp	r3, #0
 444 0044 00F0E880 		beq	.L57
 538:Src/strategy.c **** 	|| (t->d == FROM_RIGHT && team == ORANGE_TEAM)
 445              		.loc 1 538 0
 446 0048 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 447 004a 012B     		cmp	r3, #1
 448 004c 03D0     		beq	.L84
 449              	.L47:
 539:Src/strategy.c **** 	|| (t->d == FROM_LEFT && team == GREEN_TEAM))
 450              		.loc 1 539 0
 451 004e 032B     		cmp	r3, #3
 452 0050 07D0     		beq	.L85
 540:Src/strategy.c ****       return 1;
 541:Src/strategy.c ****     break;
 542:Src/strategy.c ****   case YELLOW:
 543:Src/strategy.c ****     switch (t->d) {
 544:Src/strategy.c ****     case FROM_UP:
 545:Src/strategy.c ****       if (IS_REMOVED(set_i, BLACK)
 546:Src/strategy.c **** 	  && IS_REMOVED(set_i, GREEN)
 547:Src/strategy.c **** 	  && IS_REMOVED(set_i, ORANGE))
 548:Src/strategy.c **** 	return 1;
 549:Src/strategy.c ****       break;
 550:Src/strategy.c ****     case FROM_RIGHT:
 551:Src/strategy.c ****       if (IS_REMOVED(set_i, BLACK)
 552:Src/strategy.c **** 	  && IS_REMOVED(set_i, BLUE)
 553:Src/strategy.c **** 	  && IS_REMOVED(set_i, ((team == GREEN_TEAM) ? ORANGE : GREEN)))
 554:Src/strategy.c **** 	return 1;
 555:Src/strategy.c ****       break;
 556:Src/strategy.c ****     case FROM_BOT:
 557:Src/strategy.c ****       if (IS_REMOVED(set_i, BLUE)
 558:Src/strategy.c **** 	  && IS_REMOVED(set_i, ORANGE)
ARM GAS  /tmp/ccRda2as.s 			page 19


 559:Src/strategy.c **** 	  && IS_REMOVED(set_i, GREEN))
 560:Src/strategy.c **** 	return 1;
 561:Src/strategy.c ****       break;
 562:Src/strategy.c ****     case FROM_LEFT:
 563:Src/strategy.c ****       if (IS_REMOVED(set_i, BLUE)
 564:Src/strategy.c **** 	  && IS_REMOVED(set_i, BLACK)
 565:Src/strategy.c **** 	  && IS_REMOVED(set_i, ((team == GREEN_TEAM) ? GREEN : ORANGE)))
 566:Src/strategy.c **** 	return 1;
 567:Src/strategy.c ****       break;
 568:Src/strategy.c ****     }
 569:Src/strategy.c ****     break;
 570:Src/strategy.c ****   case ORANGE:
 571:Src/strategy.c ****     if (IS_REMOVED(set_i, YELLOW)
 572:Src/strategy.c **** 	|| (t->d == FROM_LEFT && team == ORANGE_TEAM)
 573:Src/strategy.c **** 	|| (t->d == FROM_RIGHT && team == GREEN_TEAM))
 574:Src/strategy.c ****       return 1;
 575:Src/strategy.c ****     break;
 576:Src/strategy.c ****   case BLACK:
 577:Src/strategy.c ****     if (t->d == FROM_UP || IS_REMOVED(set_i, YELLOW))
 578:Src/strategy.c ****       return 1;
 579:Src/strategy.c ****     break;
 580:Src/strategy.c ****   case BLUE:
 581:Src/strategy.c ****     if (t->d == FROM_BOT || IS_REMOVED(set_i, YELLOW))
 582:Src/strategy.c ****       return 1;
 583:Src/strategy.c ****     break;
 584:Src/strategy.c ****   default:
 585:Src/strategy.c ****     return 0;
 586:Src/strategy.c ****     break;
 587:Src/strategy.c ****   }
 588:Src/strategy.c ****   
 589:Src/strategy.c ****   return 0;
 453              		.loc 1 589 0
 454 0052 0020     		movs	r0, #0
 455              	.LVL32:
 456 0054 7047     		bx	lr
 457              	.LVL33:
 458              	.L84:
 538:Src/strategy.c **** 	|| (t->d == FROM_LEFT && team == GREEN_TEAM))
 459              		.loc 1 538 0 discriminator 1
 460 0056 884A     		ldr	r2, .L88+12
 461 0058 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 462 005a 012A     		cmp	r2, #1
 463 005c F7D1     		bne	.L47
 540:Src/strategy.c ****       return 1;
 464              		.loc 1 540 0
 465 005e 0120     		movs	r0, #1
 466              	.LVL34:
 467 0060 7047     		bx	lr
 468              	.LVL35:
 469              	.L85:
 539:Src/strategy.c **** 	|| (t->d == FROM_LEFT && team == GREEN_TEAM))
 470              		.loc 1 539 0 discriminator 1
 471 0062 854B     		ldr	r3, .L88+12
 472 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 473 0066 002B     		cmp	r3, #0
 474 0068 00F0D880 		beq	.L60
 475              		.loc 1 589 0
ARM GAS  /tmp/ccRda2as.s 			page 20


 476 006c 0020     		movs	r0, #0
 477              	.LVL36:
 478 006e 7047     		bx	lr
 479              	.LVL37:
 480              	.L43:
 543:Src/strategy.c ****     case FROM_UP:
 481              		.loc 1 543 0
 482 0070 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 483 0072 032A     		cmp	r2, #3
 484 0074 00F2D480 		bhi	.L61
 485 0078 DFE802F0 		tbb	[pc, r2]
 486              	.L49:
 487 007c 02       		.byte	(.L48-.L49)/2
 488 007d 23       		.byte	(.L50-.L49)/2
 489 007e 4B       		.byte	(.L51-.L49)/2
 490 007f 6B       		.byte	(.L52-.L49)/2
 491              		.p2align 1
 492              	.L48:
 545:Src/strategy.c **** 	  && IS_REMOVED(set_i, GREEN)
 493              		.loc 1 545 0
 494 0080 03EB8303 		add	r3, r3, r3, lsl #2
 495              	.LVL38:
 496 0084 DA1C     		adds	r2, r3, #3
 497 0086 02EB4202 		add	r2, r2, r2, lsl #1
 498 008a 5100     		lsls	r1, r2, #1
 499 008c 774A     		ldr	r2, .L88
 500              	.LVL39:
 501 008e 0A44     		add	r2, r2, r1
 502              	.LVL40:
 503 0090 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 504 0092 002A     		cmp	r2, #0
 505 0094 40F0C680 		bne	.L62
 546:Src/strategy.c **** 	  && IS_REMOVED(set_i, ORANGE))
 506              		.loc 1 546 0
 507 0098 03EB4302 		add	r2, r3, r3, lsl #1
 508 009c 5100     		lsls	r1, r2, #1
 509 009e 734A     		ldr	r2, .L88
 510              	.LVL41:
 511 00a0 0A44     		add	r2, r2, r1
 512              	.LVL42:
 513 00a2 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 514 00a4 002A     		cmp	r2, #0
 515 00a6 40F0BF80 		bne	.L63
 547:Src/strategy.c **** 	return 1;
 516              		.loc 1 547 0
 517 00aa 0233     		adds	r3, r3, #2
 518 00ac 03EB4303 		add	r3, r3, r3, lsl #1
 519 00b0 5A00     		lsls	r2, r3, #1
 520 00b2 6E4B     		ldr	r3, .L88
 521              	.LVL43:
 522 00b4 1344     		add	r3, r3, r2
 523              	.LVL44:
 524 00b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 525 00b8 002B     		cmp	r3, #0
 526 00ba 00F0B780 		beq	.L64
 527              		.loc 1 589 0
 528 00be 0020     		movs	r0, #0
ARM GAS  /tmp/ccRda2as.s 			page 21


 529              	.LVL45:
 530 00c0 7047     		bx	lr
 531              	.LVL46:
 532              	.L50:
 551:Src/strategy.c **** 	  && IS_REMOVED(set_i, BLUE)
 533              		.loc 1 551 0
 534 00c2 03EB8303 		add	r3, r3, r3, lsl #2
 535              	.LVL47:
 536 00c6 DA1C     		adds	r2, r3, #3
 537 00c8 02EB4202 		add	r2, r2, r2, lsl #1
 538 00cc 5100     		lsls	r1, r2, #1
 539 00ce 674A     		ldr	r2, .L88
 540              	.LVL48:
 541 00d0 0A44     		add	r2, r2, r1
 542              	.LVL49:
 543 00d2 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 544 00d4 002A     		cmp	r2, #0
 545 00d6 40F0AB80 		bne	.L65
 552:Src/strategy.c **** 	  && IS_REMOVED(set_i, ((team == GREEN_TEAM) ? ORANGE : GREEN)))
 546              		.loc 1 552 0
 547 00da 1A1D     		adds	r2, r3, #4
 548 00dc 02EB4202 		add	r2, r2, r2, lsl #1
 549 00e0 5100     		lsls	r1, r2, #1
 550 00e2 624A     		ldr	r2, .L88
 551              	.LVL50:
 552 00e4 0A44     		add	r2, r2, r1
 553              	.LVL51:
 554 00e6 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 555 00e8 002A     		cmp	r2, #0
 556 00ea 40F0A380 		bne	.L66
 553:Src/strategy.c **** 	return 1;
 557              		.loc 1 553 0
 558 00ee 624A     		ldr	r2, .L88+12
 559 00f0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 560 00f2 62B9     		cbnz	r2, .L67
 561 00f4 0222     		movs	r2, #2
 562              	.L53:
 553:Src/strategy.c **** 	return 1;
 563              		.loc 1 553 0 is_stmt 0 discriminator 4
 564 00f6 1344     		add	r3, r3, r2
 565 00f8 03EB4303 		add	r3, r3, r3, lsl #1
 566 00fc 5A00     		lsls	r2, r3, #1
 567 00fe 5B4B     		ldr	r3, .L88
 568              	.LVL52:
 569 0100 1344     		add	r3, r3, r2
 570              	.LVL53:
 571 0102 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 572 0104 002B     		cmp	r3, #0
 573 0106 00F09780 		beq	.L68
 574              		.loc 1 589 0 is_stmt 1
 575 010a 0020     		movs	r0, #0
 576              	.LVL54:
 577 010c 7047     		bx	lr
 578              	.LVL55:
 579              	.L67:
 553:Src/strategy.c **** 	return 1;
 580              		.loc 1 553 0
ARM GAS  /tmp/ccRda2as.s 			page 22


 581 010e 0022     		movs	r2, #0
 582 0110 F1E7     		b	.L53
 583              	.LVL56:
 584              	.L51:
 557:Src/strategy.c **** 	  && IS_REMOVED(set_i, ORANGE)
 585              		.loc 1 557 0
 586 0112 03EB8303 		add	r3, r3, r3, lsl #2
 587              	.LVL57:
 588 0116 1A1D     		adds	r2, r3, #4
 589 0118 02EB4202 		add	r2, r2, r2, lsl #1
 590 011c 5100     		lsls	r1, r2, #1
 591 011e 534A     		ldr	r2, .L88
 592              	.LVL58:
 593 0120 0A44     		add	r2, r2, r1
 594              	.LVL59:
 595 0122 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 596 0124 002A     		cmp	r2, #0
 597 0126 40F08980 		bne	.L69
 558:Src/strategy.c **** 	  && IS_REMOVED(set_i, GREEN))
 598              		.loc 1 558 0
 599 012a 9A1C     		adds	r2, r3, #2
 600 012c 02EB4202 		add	r2, r2, r2, lsl #1
 601 0130 5100     		lsls	r1, r2, #1
 602 0132 4E4A     		ldr	r2, .L88
 603              	.LVL60:
 604 0134 0A44     		add	r2, r2, r1
 605              	.LVL61:
 606 0136 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 607 0138 002A     		cmp	r2, #0
 608 013a 40F08180 		bne	.L70
 559:Src/strategy.c **** 	return 1;
 609              		.loc 1 559 0
 610 013e 03EB4303 		add	r3, r3, r3, lsl #1
 611 0142 5A00     		lsls	r2, r3, #1
 612 0144 494B     		ldr	r3, .L88
 613              	.LVL62:
 614 0146 1344     		add	r3, r3, r2
 615              	.LVL63:
 616 0148 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 617 014a 002B     		cmp	r3, #0
 618 014c 7AD0     		beq	.L71
 619              		.loc 1 589 0
 620 014e 0020     		movs	r0, #0
 621              	.LVL64:
 622 0150 7047     		bx	lr
 623              	.LVL65:
 624              	.L52:
 563:Src/strategy.c **** 	  && IS_REMOVED(set_i, BLACK)
 625              		.loc 1 563 0
 626 0152 03EB8303 		add	r3, r3, r3, lsl #2
 627              	.LVL66:
 628 0156 1A1D     		adds	r2, r3, #4
 629 0158 02EB4202 		add	r2, r2, r2, lsl #1
 630 015c 5100     		lsls	r1, r2, #1
 631 015e 434A     		ldr	r2, .L88
 632              	.LVL67:
 633 0160 0A44     		add	r2, r2, r1
ARM GAS  /tmp/ccRda2as.s 			page 23


 634              	.LVL68:
 635 0162 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 636 0164 002A     		cmp	r2, #0
 637 0166 6FD1     		bne	.L72
 564:Src/strategy.c **** 	  && IS_REMOVED(set_i, ((team == GREEN_TEAM) ? GREEN : ORANGE)))
 638              		.loc 1 564 0
 639 0168 DA1C     		adds	r2, r3, #3
 640 016a 02EB4202 		add	r2, r2, r2, lsl #1
 641 016e 5100     		lsls	r1, r2, #1
 642 0170 3E4A     		ldr	r2, .L88
 643              	.LVL69:
 644 0172 0A44     		add	r2, r2, r1
 645              	.LVL70:
 646 0174 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 647 0176 002A     		cmp	r2, #0
 648 0178 68D1     		bne	.L73
 565:Src/strategy.c **** 	return 1;
 649              		.loc 1 565 0
 650 017a 3F4A     		ldr	r2, .L88+12
 651 017c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 652 017e 02B1     		cbz	r2, .L54
 653 0180 0222     		movs	r2, #2
 654              	.L54:
 565:Src/strategy.c **** 	return 1;
 655              		.loc 1 565 0 is_stmt 0 discriminator 4
 656 0182 1344     		add	r3, r3, r2
 657 0184 03EB4303 		add	r3, r3, r3, lsl #1
 658 0188 5A00     		lsls	r2, r3, #1
 659 018a 384B     		ldr	r3, .L88
 660              	.LVL71:
 661 018c 1344     		add	r3, r3, r2
 662              	.LVL72:
 663 018e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 664 0190 002B     		cmp	r3, #0
 665 0192 5DD0     		beq	.L75
 666              		.loc 1 589 0 is_stmt 1
 667 0194 0020     		movs	r0, #0
 668              	.LVL73:
 669 0196 7047     		bx	lr
 670              	.LVL74:
 671              	.L44:
 571:Src/strategy.c **** 	|| (t->d == FROM_LEFT && team == ORANGE_TEAM)
 672              		.loc 1 571 0
 673 0198 03EB8303 		add	r3, r3, r3, lsl #2
 674              	.LVL75:
 675 019c 0133     		adds	r3, r3, #1
 676 019e 03EB4303 		add	r3, r3, r3, lsl #1
 677 01a2 5A00     		lsls	r2, r3, #1
 678 01a4 314B     		ldr	r3, .L88
 679              	.LVL76:
 680 01a6 1344     		add	r3, r3, r2
 681              	.LVL77:
 682 01a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 683 01aa 002B     		cmp	r3, #0
 684 01ac 52D0     		beq	.L76
 572:Src/strategy.c **** 	|| (t->d == FROM_RIGHT && team == GREEN_TEAM))
 685              		.loc 1 572 0
ARM GAS  /tmp/ccRda2as.s 			page 24


 686 01ae 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 687 01b0 032B     		cmp	r3, #3
 688 01b2 03D0     		beq	.L86
 689              	.L55:
 573:Src/strategy.c ****       return 1;
 690              		.loc 1 573 0
 691 01b4 012B     		cmp	r3, #1
 692 01b6 07D0     		beq	.L87
 693              		.loc 1 589 0
 694 01b8 0020     		movs	r0, #0
 695              	.LVL78:
 696 01ba 7047     		bx	lr
 697              	.LVL79:
 698              	.L86:
 572:Src/strategy.c **** 	|| (t->d == FROM_RIGHT && team == GREEN_TEAM))
 699              		.loc 1 572 0 discriminator 1
 700 01bc 2E4A     		ldr	r2, .L88+12
 701 01be 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 702 01c0 012A     		cmp	r2, #1
 703 01c2 F7D1     		bne	.L55
 574:Src/strategy.c ****     break;
 704              		.loc 1 574 0
 705 01c4 0120     		movs	r0, #1
 706              	.LVL80:
 707 01c6 7047     		bx	lr
 708              	.LVL81:
 709              	.L87:
 573:Src/strategy.c ****       return 1;
 710              		.loc 1 573 0 discriminator 1
 711 01c8 2B4B     		ldr	r3, .L88+12
 712 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 713 01cc 002B     		cmp	r3, #0
 714 01ce 43D0     		beq	.L79
 715              		.loc 1 589 0
 716 01d0 0020     		movs	r0, #0
 717              	.LVL82:
 718 01d2 7047     		bx	lr
 719              	.LVL83:
 720              	.L45:
 577:Src/strategy.c ****       return 1;
 721              		.loc 1 577 0
 722 01d4 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 723 01d6 002A     		cmp	r2, #0
 724 01d8 40D0     		beq	.L80
 577:Src/strategy.c ****       return 1;
 725              		.loc 1 577 0 is_stmt 0 discriminator 1
 726 01da 03EB8303 		add	r3, r3, r3, lsl #2
 727              	.LVL84:
 728 01de 0133     		adds	r3, r3, #1
 729 01e0 03EB4303 		add	r3, r3, r3, lsl #1
 730 01e4 5A00     		lsls	r2, r3, #1
 731 01e6 214B     		ldr	r3, .L88
 732              	.LVL85:
 733 01e8 1344     		add	r3, r3, r2
 734              	.LVL86:
 735 01ea 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 736 01ec 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRda2as.s 			page 25


 737 01ee 37D0     		beq	.L81
 738              		.loc 1 589 0 is_stmt 1
 739 01f0 0020     		movs	r0, #0
 740              	.LVL87:
 741 01f2 7047     		bx	lr
 742              	.LVL88:
 743              	.L46:
 581:Src/strategy.c ****       return 1;
 744              		.loc 1 581 0
 745 01f4 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 746 01f6 022A     		cmp	r2, #2
 747 01f8 34D0     		beq	.L82
 581:Src/strategy.c ****       return 1;
 748              		.loc 1 581 0 is_stmt 0 discriminator 1
 749 01fa 03EB8303 		add	r3, r3, r3, lsl #2
 750              	.LVL89:
 751 01fe 0133     		adds	r3, r3, #1
 752 0200 03EB4303 		add	r3, r3, r3, lsl #1
 753 0204 5A00     		lsls	r2, r3, #1
 754 0206 194B     		ldr	r3, .L88
 755              	.LVL90:
 756 0208 1344     		add	r3, r3, r2
 757              	.LVL91:
 758 020a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 759 020c 002B     		cmp	r3, #0
 760 020e 2BD0     		beq	.L83
 761              		.loc 1 589 0 is_stmt 1
 762 0210 0020     		movs	r0, #0
 763              	.LVL92:
 764 0212 7047     		bx	lr
 765              	.LVL93:
 766              	.L56:
 585:Src/strategy.c ****     break;
 767              		.loc 1 585 0
 768 0214 0020     		movs	r0, #0
 769              	.LVL94:
 770 0216 7047     		bx	lr
 771              	.LVL95:
 772              	.L57:
 540:Src/strategy.c ****     break;
 773              		.loc 1 540 0
 774 0218 0120     		movs	r0, #1
 775              	.LVL96:
 776 021a 7047     		bx	lr
 777              	.LVL97:
 778              	.L60:
 779 021c 0120     		movs	r0, #1
 780              	.LVL98:
 781 021e 7047     		bx	lr
 782              	.LVL99:
 783              	.L61:
 784              		.loc 1 589 0
 785 0220 0020     		movs	r0, #0
 786              	.LVL100:
 787 0222 7047     		bx	lr
 788              	.LVL101:
 789              	.L62:
ARM GAS  /tmp/ccRda2as.s 			page 26


 790 0224 0020     		movs	r0, #0
 791              	.LVL102:
 792 0226 7047     		bx	lr
 793              	.LVL103:
 794              	.L63:
 795 0228 0020     		movs	r0, #0
 796              	.LVL104:
 797 022a 7047     		bx	lr
 798              	.LVL105:
 799              	.L64:
 548:Src/strategy.c ****       break;
 800              		.loc 1 548 0
 801 022c 0120     		movs	r0, #1
 802              	.LVL106:
 803 022e 7047     		bx	lr
 804              	.LVL107:
 805              	.L65:
 806              		.loc 1 589 0
 807 0230 0020     		movs	r0, #0
 808              	.LVL108:
 809 0232 7047     		bx	lr
 810              	.LVL109:
 811              	.L66:
 812 0234 0020     		movs	r0, #0
 813              	.LVL110:
 814 0236 7047     		bx	lr
 815              	.LVL111:
 816              	.L68:
 554:Src/strategy.c ****       break;
 817              		.loc 1 554 0
 818 0238 0120     		movs	r0, #1
 819              	.LVL112:
 820 023a 7047     		bx	lr
 821              	.LVL113:
 822              	.L69:
 823              		.loc 1 589 0
 824 023c 0020     		movs	r0, #0
 825              	.LVL114:
 826 023e 7047     		bx	lr
 827              	.LVL115:
 828              	.L70:
 829 0240 0020     		movs	r0, #0
 830              	.LVL116:
 831 0242 7047     		bx	lr
 832              	.LVL117:
 833              	.L71:
 560:Src/strategy.c ****       break;
 834              		.loc 1 560 0
 835 0244 0120     		movs	r0, #1
 836              	.LVL118:
 837 0246 7047     		bx	lr
 838              	.LVL119:
 839              	.L72:
 840              		.loc 1 589 0
 841 0248 0020     		movs	r0, #0
 842              	.LVL120:
 843 024a 7047     		bx	lr
ARM GAS  /tmp/ccRda2as.s 			page 27


 844              	.LVL121:
 845              	.L73:
 846 024c 0020     		movs	r0, #0
 847              	.LVL122:
 848 024e 7047     		bx	lr
 849              	.LVL123:
 850              	.L75:
 566:Src/strategy.c ****       break;
 851              		.loc 1 566 0
 852 0250 0120     		movs	r0, #1
 853              	.LVL124:
 854 0252 7047     		bx	lr
 855              	.LVL125:
 856              	.L76:
 574:Src/strategy.c ****     break;
 857              		.loc 1 574 0
 858 0254 0120     		movs	r0, #1
 859              	.LVL126:
 860 0256 7047     		bx	lr
 861              	.LVL127:
 862              	.L79:
 863 0258 0120     		movs	r0, #1
 864              	.LVL128:
 865 025a 7047     		bx	lr
 866              	.LVL129:
 867              	.L80:
 578:Src/strategy.c ****     break;
 868              		.loc 1 578 0
 869 025c 0120     		movs	r0, #1
 870              	.LVL130:
 871 025e 7047     		bx	lr
 872              	.LVL131:
 873              	.L81:
 874 0260 0120     		movs	r0, #1
 875              	.LVL132:
 876 0262 7047     		bx	lr
 877              	.LVL133:
 878              	.L82:
 582:Src/strategy.c ****     break;
 879              		.loc 1 582 0
 880 0264 0120     		movs	r0, #1
 881              	.LVL134:
 882 0266 7047     		bx	lr
 883              	.LVL135:
 884              	.L83:
 885 0268 0120     		movs	r0, #1
 886              	.LVL136:
 590:Src/strategy.c **** }
 887              		.loc 1 590 0
 888 026a 7047     		bx	lr
 889              	.L89:
 890              		.align	2
 891              	.L88:
 892 026c 00000000 		.word	.LANCHOR0
 893 0270 ABAAAAAA 		.word	-1431655765
 894 0274 67666666 		.word	1717986919
 895 0278 00000000 		.word	team
ARM GAS  /tmp/ccRda2as.s 			page 28


 896              		.cfi_endproc
 897              	.LFE18:
 899              		.global	__aeabi_f2d
 900              		.global	__aeabi_dmul
 901              		.global	__aeabi_dadd
 902              		.global	__aeabi_d2f
 903              		.section	.text.Eval_Align_Stack,"ax",%progbits
 904              		.align	1
 905              		.syntax unified
 906              		.thumb
 907              		.thumb_func
 908              		.fpu fpv4-sp-d16
 910              	Eval_Align_Stack:
 911              	.LFB21:
 591:Src/strategy.c ****  
 592:Src/strategy.c **** static float Eval_Target(Target *t, Robot *robot){
 593:Src/strategy.c ****   //printf("Position : (%hu, %hu)\n", robot->x, robot->y);
 594:Src/strategy.c ****   //printf("Angle : %f\n", robot->angle);
 595:Src/strategy.c ****   
 596:Src/strategy.c ****   float cost = 0;
 597:Src/strategy.c ****   
 598:Src/strategy.c ****   if(robot->on_target){
 599:Src/strategy.c ****     if((cube-robot->last_target.c)/CUBES_PER_SET == (cube-t->c)/CUBES_PER_SET){
 600:Src/strategy.c ****       if(robot->last_target.d == t->d){
 601:Src/strategy.c **** 	uint8_t ok = 0;
 602:Src/strategy.c **** 	switch(t->d){
 603:Src/strategy.c **** 	case FROM_UP:
 604:Src/strategy.c **** 	case FROM_BOT:
 605:Src/strategy.c **** 	  if(robot->x == t->c->x){
 606:Src/strategy.c **** 	    ok = 1;
 607:Src/strategy.c **** 	  }
 608:Src/strategy.c **** 	  break;
 609:Src/strategy.c **** 	case FROM_RIGHT:
 610:Src/strategy.c **** 	case FROM_LEFT:
 611:Src/strategy.c **** 	  if(robot->y == t->c->y){
 612:Src/strategy.c **** 	    ok = 1;
 613:Src/strategy.c **** 	  }
 614:Src/strategy.c **** 	  break;
 615:Src/strategy.c **** 	}
 616:Src/strategy.c **** 	
 617:Src/strategy.c **** 	if(ok){
 618:Src/strategy.c **** 	  cost += Eval_Align_Stack(t, robot);
 619:Src/strategy.c **** 	  return cost;
 620:Src/strategy.c **** 	}
 621:Src/strategy.c ****       }
 622:Src/strategy.c ****       
 623:Src/strategy.c ****       cost += Eval_Return_Approach(robot);
 624:Src/strategy.c **** 
 625:Src/strategy.c ****       float move = cost += Eval_Move(robot, t->approach_x, t->approach_y);
 626:Src/strategy.c ****       if((robot->last_target.d%2) == (t->d%2)){
 627:Src/strategy.c **** 	cost += 1.5*move;
 628:Src/strategy.c ****       }else{
 629:Src/strategy.c **** 	cost += move;
 630:Src/strategy.c ****       }
 631:Src/strategy.c ****       
 632:Src/strategy.c ****       cost += Eval_Align_Stack(t, robot);
 633:Src/strategy.c ****       return cost;
ARM GAS  /tmp/ccRda2as.s 			page 29


 634:Src/strategy.c ****     }
 635:Src/strategy.c **** 
 636:Src/strategy.c ****     cost += Eval_Return_Approach(robot);    
 637:Src/strategy.c ****   }
 638:Src/strategy.c ****   cost += Eval_Move(robot, t->approach_x, t->approach_y);
 639:Src/strategy.c ****   cost += Eval_Align_Stack(t, robot);
 640:Src/strategy.c ****   
 641:Src/strategy.c ****   return cost;
 642:Src/strategy.c **** }
 643:Src/strategy.c **** 
 644:Src/strategy.c **** static void Eval_Permutation(Cube* comb[], int size, float *best_rank){  
 645:Src/strategy.c ****   //Temporary data
 646:Src/strategy.c ****   Construction f_const = build_ctx.construction;
 647:Src/strategy.c ****   Robot f_robot = me;
 648:Src/strategy.c ****   
 649:Src/strategy.c ****   int score_ = 0;
 650:Src/strategy.c ****   int best_d = -1;
 651:Src/strategy.c ****   
 652:Src/strategy.c ****   Probability prob_backup[5];
 653:Src/strategy.c ****   Target target_list_tmp[5];
 654:Src/strategy.c **** 
 655:Src/strategy.c ****   float cost_accum = 0;
 656:Src/strategy.c **** 
 657:Src/strategy.c ****   int i;
 658:Src/strategy.c ****   //Backup probabilities
 659:Src/strategy.c ****   for(i = 0; i < size; i++){
 660:Src/strategy.c ****     prob_backup[i] = comb[i]->availability;
 661:Src/strategy.c ****   }
 662:Src/strategy.c ****   
 663:Src/strategy.c ****   for(i = 0; i < size; i++){
 664:Src/strategy.c ****     Cube*const c = comb[i];
 665:Src/strategy.c ****     
 666:Src/strategy.c ****     int d;
 667:Src/strategy.c ****     float best_cost = 100000.;
 668:Src/strategy.c ****     best_d = -1;
 669:Src/strategy.c ****     Robot next_robot;
 670:Src/strategy.c **** 
 671:Src/strategy.c **** //printf("----- %s BEGIN -----\n", color_str[c->color]);
 672:Src/strategy.c ****     for(d = 0; d < 4; d++){
 673:Src/strategy.c ****       Target t = {.c = c, .d = d};
 674:Src/strategy.c ****       switch(d){
 675:Src/strategy.c ****       case FROM_UP:
 676:Src/strategy.c **** 	t.approach_x = t.c->x;
 677:Src/strategy.c **** 	t.approach_y = t.c->y - APPROACH_DIST;
 678:Src/strategy.c **** 	break;
 679:Src/strategy.c ****       case FROM_RIGHT:
 680:Src/strategy.c **** 	t.approach_x = t.c->x + APPROACH_DIST;
 681:Src/strategy.c **** 	t.approach_y = t.c->y;
 682:Src/strategy.c **** 	break;
 683:Src/strategy.c ****       case FROM_BOT:
 684:Src/strategy.c **** 	t.approach_x = t.c->x;
 685:Src/strategy.c **** 	t.approach_y = t.c->y + APPROACH_DIST;
 686:Src/strategy.c **** 	break;
 687:Src/strategy.c ****       case FROM_LEFT:
 688:Src/strategy.c **** 	t.approach_x = t.c->x - APPROACH_DIST;
 689:Src/strategy.c **** 	t.approach_y = t.c->y;
 690:Src/strategy.c **** 	break;
ARM GAS  /tmp/ccRda2as.s 			page 30


 691:Src/strategy.c ****       }
 692:Src/strategy.c ****       if(Check_Target(&t)){
 693:Src/strategy.c **** 	Robot robot_tmp = f_robot;
 694:Src/strategy.c **** 	float cost = Eval_Target(&t, &robot_tmp);
 695:Src/strategy.c **** 	if(cost < best_cost){
 696:Src/strategy.c **** 	  best_cost = cost;
 697:Src/strategy.c **** 	  best_d = d;
 698:Src/strategy.c **** 	  next_robot = robot_tmp;
 699:Src/strategy.c **** 	  target_list_tmp[i] = t;
 700:Src/strategy.c **** 	}
 701:Src/strategy.c ****       }
 702:Src/strategy.c ****     }
 703:Src/strategy.c **** //printf("----- %s END -----\n", color_str[c->color]);
 704:Src/strategy.c ****     if(best_d == -1)
 705:Src/strategy.c ****       break;
 706:Src/strategy.c ****     
 707:Src/strategy.c ****     Update_Construction(c, &f_const);
 708:Src/strategy.c ****     c->availability = ZERO_PROBABILITY;
 709:Src/strategy.c ****     f_robot = next_robot;
 710:Src/strategy.c ****     cost_accum += best_cost;
 711:Src/strategy.c ****     //printf("%d", best_d);
 712:Src/strategy.c ****   }
 713:Src/strategy.c ****  
 714:Src/strategy.c ****   //Return to CZ
 715:Src/strategy.c ****   cost_accum += Eval_Place(&f_robot);
 716:Src/strategy.c **** 
 717:Src/strategy.c ****   //Restore proba
 718:Src/strategy.c ****   for(i = 0; i < size; i++){
 719:Src/strategy.c ****     comb[i]->availability = prob_backup[i];
 720:Src/strategy.c ****     if(best_d != -1){
 721:Src/strategy.c ****       //printf("%s\t", color_str[comb[i]->color]);
 722:Src/strategy.c ****     }
 723:Src/strategy.c ****   }
 724:Src/strategy.c **** 
 725:Src/strategy.c ****   score_ = Get_Construction_Score(&f_const);
 726:Src/strategy.c ****   
 727:Src/strategy.c ****   if(best_d != -1){
 728:Src/strategy.c ****     float rank = (float) score_ / cost_accum;
 729:Src/strategy.c ****     if(rank > *best_rank){
 730:Src/strategy.c ****       *best_rank = rank;
 731:Src/strategy.c ****       strat.nb_targets = size;
 732:Src/strategy.c ****       for(i = 0; i < strat.nb_targets; i++){
 733:Src/strategy.c ****         strat.steps_tab[i] = target_list_tmp[i];
 734:Src/strategy.c ****       }
 735:Src/strategy.c ****     }
 736:Src/strategy.c ****     //printf("Rank : %f (%d)\n", (float)score_/cost_accum, score_);
 737:Src/strategy.c ****   }
 738:Src/strategy.c **** }
 739:Src/strategy.c **** 
 740:Src/strategy.c **** static float Eval_Align_Stack(Target *t, Robot *robot){
 912              		.loc 1 740 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916              	.LVL137:
 917 0000 10B5     		push	{r4, lr}
 918              	.LCFI6:
ARM GAS  /tmp/ccRda2as.s 			page 31


 919              		.cfi_def_cfa_offset 8
 920              		.cfi_offset 4, -8
 921              		.cfi_offset 14, -4
 922 0002 2DED028B 		vpush.64	{d8}
 923              	.LCFI7:
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 80, -16
 926              		.cfi_offset 81, -12
 927 0006 0C46     		mov	r4, r1
 741:Src/strategy.c ****   float angle;
 742:Src/strategy.c ****   switch(t->d){
 928              		.loc 1 742 0
 929 0008 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 930 000a 032B     		cmp	r3, #3
 931 000c 51D8     		bhi	.L97
 932 000e DFE803F0 		tbb	[pc, r3]
 933              	.L93:
 934 0012 02       		.byte	(.L92-.L93)/2
 935 0013 32       		.byte	(.L94-.L93)/2
 936 0014 3C       		.byte	(.L95-.L93)/2
 937 0015 46       		.byte	(.L96-.L93)/2
 938              		.p2align 1
 939              	.L92:
 743:Src/strategy.c ****   case FROM_UP:
 744:Src/strategy.c ****     robot->x = t->c->x;
 940              		.loc 1 744 0
 941 0016 0368     		ldr	r3, [r0]
 942 0018 5B88     		ldrh	r3, [r3, #2]
 943 001a 0B80     		strh	r3, [r1]	@ movhi
 745:Src/strategy.c ****     robot->y = t->c->y - ALIGN_DIST;
 944              		.loc 1 745 0
 945 001c 0368     		ldr	r3, [r0]
 946 001e 9B88     		ldrh	r3, [r3, #4]
 947 0020 343B     		subs	r3, r3, #52
 948 0022 4B80     		strh	r3, [r1, #2]	@ movhi
 949              	.LVL138:
 746:Src/strategy.c ****     angle = PI/2;
 950              		.loc 1 746 0
 951 0024 9FED268A 		vldr.32	s16, .L99+8
 952              	.LVL139:
 953              	.L91:
 747:Src/strategy.c ****     break;
 748:Src/strategy.c ****   case FROM_RIGHT:
 749:Src/strategy.c ****     robot->x = t->c->x + ALIGN_DIST;
 750:Src/strategy.c ****     robot->y = t->c->y;
 751:Src/strategy.c ****     angle = PI;
 752:Src/strategy.c ****     break;
 753:Src/strategy.c ****   case FROM_BOT:
 754:Src/strategy.c ****     robot->x = t->c->x;
 755:Src/strategy.c ****     robot->y = t->c->y + ALIGN_DIST;
 756:Src/strategy.c ****     angle = -PI/2;
 757:Src/strategy.c ****     break;
 758:Src/strategy.c ****   case FROM_LEFT:
 759:Src/strategy.c ****     robot->x = t->c->x - ALIGN_DIST;
 760:Src/strategy.c ****     robot->y = t->c->y;
 761:Src/strategy.c ****     angle = 0;
 762:Src/strategy.c ****     break;
ARM GAS  /tmp/ccRda2as.s 			page 32


 763:Src/strategy.c ****   default:
 764:Src/strategy.c ****     //Should not happen
 765:Src/strategy.c ****     angle = 0;
 766:Src/strategy.c ****     break;
 767:Src/strategy.c ****   }
 768:Src/strategy.c ****   robot->on_target = 1;
 954              		.loc 1 768 0
 955 0028 0123     		movs	r3, #1
 956 002a 2372     		strb	r3, [r4, #8]
 769:Src/strategy.c ****   robot->last_target = *t;
 957              		.loc 1 769 0
 958 002c 04F10C03 		add	r3, r4, #12
 959 0030 07C8     		ldm	r0, {r0, r1, r2}
 960              	.LVL140:
 961 0032 83E80700 		stm	r3, {r0, r1, r2}
 770:Src/strategy.c **** 
 771:Src/strategy.c ****   float cost = ROTATE_COEFF*fabs(angle-robot->angle) + ALIGN_COST + STACK_COST;
 962              		.loc 1 771 0
 963 0036 D4ED017A 		vldr.32	s15, [r4, #4]
 964 003a 78EE677A 		vsub.f32	s15, s16, s15
 965 003e F0EEE77A 		vabs.f32	s15, s15
 966 0042 17EE900A 		vmov	r0, s15
 967 0046 FFF7FEFF 		bl	__aeabi_f2d
 968              	.LVL141:
 969 004a 1BA3     		adr	r3, .L99
 970 004c D3E90023 		ldrd	r2, [r3]
 971 0050 FFF7FEFF 		bl	__aeabi_dmul
 972              	.LVL142:
 973 0054 0022     		movs	r2, #0
 974 0056 1B4B     		ldr	r3, .L99+12
 975 0058 FFF7FEFF 		bl	__aeabi_dadd
 976              	.LVL143:
 977 005c 0022     		movs	r2, #0
 978 005e 194B     		ldr	r3, .L99+12
 979 0060 FFF7FEFF 		bl	__aeabi_dadd
 980              	.LVL144:
 981 0064 FFF7FEFF 		bl	__aeabi_d2f
 982              	.LVL145:
 772:Src/strategy.c ****   
 773:Src/strategy.c ****   robot->angle = angle;
 983              		.loc 1 773 0
 984 0068 84ED018A 		vstr.32	s16, [r4, #4]
 774:Src/strategy.c ****   
 775:Src/strategy.c ****   return cost;
 776:Src/strategy.c **** }
 985              		.loc 1 776 0
 986 006c 00EE100A 		vmov	s0, r0
 987 0070 BDEC028B 		vldm	sp!, {d8}
 988              	.LCFI8:
 989              		.cfi_remember_state
 990              		.cfi_restore 80
 991              		.cfi_restore 81
 992              		.cfi_def_cfa_offset 8
 993              	.LVL146:
 994 0074 10BD     		pop	{r4, pc}
 995              	.LVL147:
 996              	.L94:
ARM GAS  /tmp/ccRda2as.s 			page 33


 997              	.LCFI9:
 998              		.cfi_restore_state
 749:Src/strategy.c ****     robot->y = t->c->y;
 999              		.loc 1 749 0
 1000 0076 0368     		ldr	r3, [r0]
 1001 0078 5B88     		ldrh	r3, [r3, #2]
 1002 007a 3433     		adds	r3, r3, #52
 1003 007c 0B80     		strh	r3, [r1]	@ movhi
 750:Src/strategy.c ****     angle = PI;
 1004              		.loc 1 750 0
 1005 007e 0368     		ldr	r3, [r0]
 1006 0080 9B88     		ldrh	r3, [r3, #4]
 1007 0082 4B80     		strh	r3, [r1, #2]	@ movhi
 1008              	.LVL148:
 751:Src/strategy.c ****     break;
 1009              		.loc 1 751 0
 1010 0084 9FED108A 		vldr.32	s16, .L99+16
 752:Src/strategy.c ****   case FROM_BOT:
 1011              		.loc 1 752 0
 1012 0088 CEE7     		b	.L91
 1013              	.LVL149:
 1014              	.L95:
 754:Src/strategy.c ****     robot->y = t->c->y + ALIGN_DIST;
 1015              		.loc 1 754 0
 1016 008a 0368     		ldr	r3, [r0]
 1017 008c 5B88     		ldrh	r3, [r3, #2]
 1018 008e 0B80     		strh	r3, [r1]	@ movhi
 755:Src/strategy.c ****     angle = -PI/2;
 1019              		.loc 1 755 0
 1020 0090 0368     		ldr	r3, [r0]
 1021 0092 9B88     		ldrh	r3, [r3, #4]
 1022 0094 3433     		adds	r3, r3, #52
 1023 0096 4B80     		strh	r3, [r1, #2]	@ movhi
 1024              	.LVL150:
 756:Src/strategy.c ****     break;
 1025              		.loc 1 756 0
 1026 0098 9FED0C8A 		vldr.32	s16, .L99+20
 757:Src/strategy.c ****   case FROM_LEFT:
 1027              		.loc 1 757 0
 1028 009c C4E7     		b	.L91
 1029              	.LVL151:
 1030              	.L96:
 759:Src/strategy.c ****     robot->y = t->c->y;
 1031              		.loc 1 759 0
 1032 009e 0368     		ldr	r3, [r0]
 1033 00a0 5B88     		ldrh	r3, [r3, #2]
 1034 00a2 343B     		subs	r3, r3, #52
 1035 00a4 0B80     		strh	r3, [r1]	@ movhi
 760:Src/strategy.c ****     angle = 0;
 1036              		.loc 1 760 0
 1037 00a6 0368     		ldr	r3, [r0]
 1038 00a8 9B88     		ldrh	r3, [r3, #4]
 1039 00aa 4B80     		strh	r3, [r1, #2]	@ movhi
 1040              	.LVL152:
 761:Src/strategy.c ****     break;
 1041              		.loc 1 761 0
 1042 00ac 9FED088A 		vldr.32	s16, .L99+24
ARM GAS  /tmp/ccRda2as.s 			page 34


 762:Src/strategy.c ****   default:
 1043              		.loc 1 762 0
 1044 00b0 BAE7     		b	.L91
 1045              	.LVL153:
 1046              	.L97:
 765:Src/strategy.c ****     break;
 1047              		.loc 1 765 0
 1048 00b2 9FED078A 		vldr.32	s16, .L99+24
 1049 00b6 B7E7     		b	.L91
 1050              	.L100:
 1051              		.align	3
 1052              	.L99:
 1053 00b8 0AE3E4B4 		.word	3034899210
 1054 00bc 305FD43F 		.word	1070882608
 1055 00c0 DB0FC93F 		.word	1070141403
 1056 00c4 0000F03F 		.word	1072693248
 1057 00c8 DB0F4940 		.word	1078530011
 1058 00cc DB0FC9BF 		.word	3217625051
 1059 00d0 00000000 		.word	0
 1060              		.cfi_endproc
 1061              	.LFE21:
 1063              		.global	__aeabi_i2d
 1064              		.section	.text.Compare_Cubes,"ax",%progbits
 1065              		.align	1
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv4-sp-d16
 1071              	Compare_Cubes:
 1072              	.LFB4:
  89:Src/strategy.c ****   Cube *const c_a = *((Cube**)a);
 1073              		.loc 1 89 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              	.LVL154:
 1078 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1079              	.LCFI10:
 1080              		.cfi_def_cfa_offset 32
 1081              		.cfi_offset 3, -32
 1082              		.cfi_offset 4, -28
 1083              		.cfi_offset 5, -24
 1084              		.cfi_offset 6, -20
 1085              		.cfi_offset 7, -16
 1086              		.cfi_offset 8, -12
 1087              		.cfi_offset 9, -8
 1088              		.cfi_offset 14, -4
 1089 0004 2DED048B 		vpush.64	{d8, d9}
 1090              	.LCFI11:
 1091              		.cfi_def_cfa_offset 48
 1092              		.cfi_offset 80, -48
 1093              		.cfi_offset 81, -44
 1094              		.cfi_offset 82, -40
 1095              		.cfi_offset 83, -36
  90:Src/strategy.c ****   Cube *const c_b = *((Cube**)b);
 1096              		.loc 1 90 0
 1097 0008 0568     		ldr	r5, [r0]
ARM GAS  /tmp/ccRda2as.s 			page 35


 1098              	.LVL155:
  91:Src/strategy.c **** 
 1099              		.loc 1 91 0
 1100 000a 0C68     		ldr	r4, [r1]
 1101              	.LVL156:
  93:Src/strategy.c ****     return 1;
 1102              		.loc 1 93 0
 1103 000c 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 1104 000e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1105 0010 9A42     		cmp	r2, r3
 1106 0012 68D3     		bcc	.L103
  95:Src/strategy.c ****     float dist_a = dist(from_x, from_y, c_a->x, c_a->y);
 1107              		.loc 1 95 0
 1108 0014 6CD1     		bne	.L104
 1109              	.LBB6:
  96:Src/strategy.c ****     float dist_b = dist(from_x, from_y, c_b->x, c_b->y);
 1110              		.loc 1 96 0
 1111 0016 A888     		ldrh	r0, [r5, #4]
 1112              	.LVL157:
 1113 0018 3B4E     		ldr	r6, .L108+8
 1114 001a 3388     		ldrh	r3, [r6]
 1115 001c 9FED388B 		vldr.64	d8, .L108
 1116 0020 C01A     		subs	r0, r0, r3
 1117 0022 FFF7FEFF 		bl	__aeabi_i2d
 1118              	.LVL158:
 1119 0026 B0EE481A 		vmov.f32	s2, s16
 1120 002a F0EE681A 		vmov.f32	s3, s17
 1121 002e 41EC100B 		vmov	d0, r0, r1
 1122 0032 FFF7FEFF 		bl	pow
 1123              	.LVL159:
 1124 0036 59EC108B 		vmov	r8, r9, d0
 1125 003a 6888     		ldrh	r0, [r5, #2]
 1126 003c 334D     		ldr	r5, .L108+12
 1127              	.LVL160:
 1128 003e 2B88     		ldrh	r3, [r5]
 1129 0040 C01A     		subs	r0, r0, r3
 1130 0042 FFF7FEFF 		bl	__aeabi_i2d
 1131              	.LVL161:
 1132 0046 B0EE481A 		vmov.f32	s2, s16
 1133 004a F0EE681A 		vmov.f32	s3, s17
 1134 004e 41EC100B 		vmov	d0, r0, r1
 1135 0052 FFF7FEFF 		bl	pow
 1136              	.LVL162:
 1137 0056 53EC102B 		vmov	r2, r3, d0
 1138 005a 4046     		mov	r0, r8
 1139 005c 4946     		mov	r1, r9
 1140 005e FFF7FEFF 		bl	__aeabi_dadd
 1141              	.LVL163:
 1142 0062 41EC100B 		vmov	d0, r0, r1
 1143 0066 FFF7FEFF 		bl	sqrt
 1144              	.LVL164:
 1145 006a 51EC100B 		vmov	r0, r1, d0
 1146 006e FFF7FEFF 		bl	__aeabi_d2f
 1147              	.LVL165:
 1148 0072 09EE100A 		vmov	s18, r0
 1149              	.LVL166:
  97:Src/strategy.c ****     if(dist_a > dist_b){
ARM GAS  /tmp/ccRda2as.s 			page 36


 1150              		.loc 1 97 0
 1151 0076 A088     		ldrh	r0, [r4, #4]
 1152              	.LVL167:
 1153 0078 3388     		ldrh	r3, [r6]
 1154 007a C01A     		subs	r0, r0, r3
 1155 007c FFF7FEFF 		bl	__aeabi_i2d
 1156              	.LVL168:
 1157 0080 B0EE481A 		vmov.f32	s2, s16
 1158 0084 F0EE681A 		vmov.f32	s3, s17
 1159 0088 41EC100B 		vmov	d0, r0, r1
 1160 008c FFF7FEFF 		bl	pow
 1161              	.LVL169:
 1162 0090 57EC106B 		vmov	r6, r7, d0
 1163 0094 6088     		ldrh	r0, [r4, #2]
 1164 0096 2B88     		ldrh	r3, [r5]
 1165 0098 C01A     		subs	r0, r0, r3
 1166 009a FFF7FEFF 		bl	__aeabi_i2d
 1167              	.LVL170:
 1168 009e B0EE481A 		vmov.f32	s2, s16
 1169 00a2 F0EE681A 		vmov.f32	s3, s17
 1170 00a6 41EC100B 		vmov	d0, r0, r1
 1171 00aa FFF7FEFF 		bl	pow
 1172              	.LVL171:
 1173 00ae 53EC102B 		vmov	r2, r3, d0
 1174 00b2 3046     		mov	r0, r6
 1175 00b4 3946     		mov	r1, r7
 1176 00b6 FFF7FEFF 		bl	__aeabi_dadd
 1177              	.LVL172:
 1178 00ba 41EC100B 		vmov	d0, r0, r1
 1179 00be FFF7FEFF 		bl	sqrt
 1180              	.LVL173:
 1181 00c2 51EC100B 		vmov	r0, r1, d0
 1182 00c6 FFF7FEFF 		bl	__aeabi_d2f
 1183              	.LVL174:
 1184 00ca 07EE900A 		vmov	s15, r0
 1185              	.LVL175:
  98:Src/strategy.c ****       return 1;
 1186              		.loc 1 98 0
 1187 00ce B4EEE79A 		vcmpe.f32	s18, s15
 1188 00d2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1189 00d6 0EDC     		bgt	.L105
 100:Src/strategy.c ****       return 0;
 1190              		.loc 1 100 0
 1191 00d8 B4EE679A 		vcmp.f32	s18, s15
 1192 00dc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1193 00e0 0BD1     		bne	.L106
 101:Src/strategy.c ****     }
 1194              		.loc 1 101 0
 1195 00e2 0020     		movs	r0, #0
 1196              	.LVL176:
 1197 00e4 00E0     		b	.L101
 1198              	.LVL177:
 1199              	.L103:
 1200              	.LBE6:
  94:Src/strategy.c ****   }else if(c_a->availability == c_b->availability){
 1201              		.loc 1 94 0
 1202 00e6 0120     		movs	r0, #1
ARM GAS  /tmp/ccRda2as.s 			page 37


 1203              	.LVL178:
 1204              	.L101:
 105:Src/strategy.c **** 
 1205              		.loc 1 105 0
 1206 00e8 BDEC048B 		vldm	sp!, {d8-d9}
 1207              	.LCFI12:
 1208              		.cfi_remember_state
 1209              		.cfi_restore 82
 1210              		.cfi_restore 83
 1211              		.cfi_restore 80
 1212              		.cfi_restore 81
 1213              		.cfi_def_cfa_offset 32
 1214 00ec BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1215              	.LVL179:
 1216              	.L104:
 1217              	.LCFI13:
 1218              		.cfi_restore_state
 104:Src/strategy.c **** } 
 1219              		.loc 1 104 0
 1220 00f0 4FF0FF30 		mov	r0, #-1
 1221              	.LVL180:
 1222 00f4 F8E7     		b	.L101
 1223              	.LVL181:
 1224              	.L105:
 1225              	.LBB7:
  99:Src/strategy.c ****     }else if(dist_a == dist_b){
 1226              		.loc 1 99 0
 1227 00f6 0120     		movs	r0, #1
 1228              	.LVL182:
 1229 00f8 F6E7     		b	.L101
 1230              	.LVL183:
 1231              	.L106:
 1232              	.LBE7:
 104:Src/strategy.c **** } 
 1233              		.loc 1 104 0
 1234 00fa 4FF0FF30 		mov	r0, #-1
 1235              	.LVL184:
 1236 00fe F3E7     		b	.L101
 1237              	.L109:
 1238              		.align	3
 1239              	.L108:
 1240 0100 00000000 		.word	0
 1241 0104 00000040 		.word	1073741824
 1242 0108 00000000 		.word	from_y
 1243 010c 00000000 		.word	from_x
 1244              		.cfi_endproc
 1245              	.LFE4:
 1247              		.section	.text.Eval_Return_Approach,"ax",%progbits
 1248              		.align	1
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1252              		.fpu fpv4-sp-d16
 1254              	Eval_Return_Approach:
 1255              	.LFB24:
 777:Src/strategy.c **** 
 778:Src/strategy.c **** static float Eval_Move(Robot *robot, uint16_t dest_x, uint16_t dest_y){
ARM GAS  /tmp/ccRda2as.s 			page 38


 779:Src/strategy.c ****   float distance = dist(robot->x, robot->y, dest_x, dest_y);
 780:Src/strategy.c ****   float angle_path = angle(robot->x ,robot->y, dest_x, dest_y);
 781:Src/strategy.c ****   float delta_angle = fabs(angle_path - robot->angle);
 782:Src/strategy.c **** 
 783:Src/strategy.c **** if(delta_angle > PI){
 784:Src/strategy.c ****   delta_angle = 2*PI - delta_angle;
 785:Src/strategy.c ****  }
 786:Src/strategy.c **** 
 787:Src/strategy.c ****   //printf("Going from (%d, %d) to (%d, %d)\tDistance : %f\tInitial angle : %f\tFinal angle : %f\tD
 788:Src/strategy.c **** 
 789:Src/strategy.c ****   robot->x = dest_x;
 790:Src/strategy.c ****   robot->y = dest_y;
 791:Src/strategy.c ****   robot->angle = angle_path;
 792:Src/strategy.c **** 	
 793:Src/strategy.c ****   return MOVE_COEFF*distance + ROTATE_COEFF*delta_angle;
 794:Src/strategy.c **** }
 795:Src/strategy.c **** 
 796:Src/strategy.c **** static float Eval_Place(Robot *robot){
 797:Src/strategy.c ****   return STACK_COST + Eval_Move(robot, (team==GREEN_TEAM)?CZ_X:(AREA_WIDTH-CZ_X), 0);
 798:Src/strategy.c **** }
 799:Src/strategy.c **** 
 800:Src/strategy.c **** static float Eval_Return_Approach(Robot *robot){
 1256              		.loc 1 800 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              	.LVL185:
 1261 0000 D0B5     		push	{r4, r6, r7, lr}
 1262              	.LCFI14:
 1263              		.cfi_def_cfa_offset 16
 1264              		.cfi_offset 4, -16
 1265              		.cfi_offset 6, -12
 1266              		.cfi_offset 7, -8
 1267              		.cfi_offset 14, -4
 1268 0002 2DED028B 		vpush.64	{d8}
 1269              	.LCFI15:
 1270              		.cfi_def_cfa_offset 24
 1271              		.cfi_offset 80, -24
 1272              		.cfi_offset 81, -20
 1273 0006 0446     		mov	r4, r0
 801:Src/strategy.c ****     float cost = MOVE_COEFF*dist(robot->x, robot->y, robot->last_target.approach_x, robot->last_tar
 1274              		.loc 1 801 0
 1275 0008 808A     		ldrh	r0, [r0, #20]
 1276              	.LVL186:
 1277 000a 6388     		ldrh	r3, [r4, #2]
 1278 000c 9FED1C8B 		vldr.64	d8, .L112
 1279 0010 C01A     		subs	r0, r0, r3
 1280 0012 FFF7FEFF 		bl	__aeabi_i2d
 1281              	.LVL187:
 1282 0016 B0EE481A 		vmov.f32	s2, s16
 1283 001a F0EE681A 		vmov.f32	s3, s17
 1284 001e 41EC100B 		vmov	d0, r0, r1
 1285 0022 FFF7FEFF 		bl	pow
 1286              	.LVL188:
 1287 0026 57EC106B 		vmov	r6, r7, d0
 1288 002a 608A     		ldrh	r0, [r4, #18]
 1289 002c 2388     		ldrh	r3, [r4]
ARM GAS  /tmp/ccRda2as.s 			page 39


 1290 002e C01A     		subs	r0, r0, r3
 1291 0030 FFF7FEFF 		bl	__aeabi_i2d
 1292              	.LVL189:
 1293 0034 B0EE481A 		vmov.f32	s2, s16
 1294 0038 F0EE681A 		vmov.f32	s3, s17
 1295 003c 41EC100B 		vmov	d0, r0, r1
 1296 0040 FFF7FEFF 		bl	pow
 1297              	.LVL190:
 1298 0044 53EC102B 		vmov	r2, r3, d0
 1299 0048 3046     		mov	r0, r6
 1300 004a 3946     		mov	r1, r7
 1301 004c FFF7FEFF 		bl	__aeabi_dadd
 1302              	.LVL191:
 1303 0050 41EC100B 		vmov	d0, r0, r1
 1304 0054 FFF7FEFF 		bl	sqrt
 1305              	.LVL192:
 1306 0058 0BA3     		adr	r3, .L112+8
 1307 005a D3E90023 		ldrd	r2, [r3]
 1308 005e 51EC100B 		vmov	r0, r1, d0
 1309 0062 FFF7FEFF 		bl	__aeabi_dmul
 1310              	.LVL193:
 1311 0066 FFF7FEFF 		bl	__aeabi_d2f
 1312              	.LVL194:
 802:Src/strategy.c ****     robot->x = robot->last_target.approach_x;
 1313              		.loc 1 802 0
 1314 006a 638A     		ldrh	r3, [r4, #18]
 1315 006c 2380     		strh	r3, [r4]	@ movhi
 803:Src/strategy.c ****     robot->y = robot->last_target.approach_y;
 1316              		.loc 1 803 0
 1317 006e A38A     		ldrh	r3, [r4, #20]
 1318 0070 6380     		strh	r3, [r4, #2]	@ movhi
 804:Src/strategy.c ****     robot->on_target = 0;
 1319              		.loc 1 804 0
 1320 0072 0023     		movs	r3, #0
 1321 0074 2372     		strb	r3, [r4, #8]
 805:Src/strategy.c **** return cost;
 806:Src/strategy.c **** }
 1322              		.loc 1 806 0
 1323 0076 00EE100A 		vmov	s0, r0
 1324 007a BDEC028B 		vldm	sp!, {d8}
 1325              	.LCFI16:
 1326              		.cfi_restore 80
 1327              		.cfi_restore 81
 1328              		.cfi_def_cfa_offset 16
 1329 007e D0BD     		pop	{r4, r6, r7, pc}
 1330              	.LVL195:
 1331              	.L113:
 1332              		.align	3
 1333              	.L112:
 1334 0080 00000000 		.word	0
 1335 0084 00000040 		.word	1073741824
 1336 0088 4F1BE8B4 		.word	3035110223
 1337 008c 814E6B3F 		.word	1063997057
 1338              		.cfi_endproc
 1339              	.LFE24:
 1341              		.section	.text.Cube_Sort,"ax",%progbits
 1342              		.align	1
ARM GAS  /tmp/ccRda2as.s 			page 40


 1343              		.syntax unified
 1344              		.thumb
 1345              		.thumb_func
 1346              		.fpu fpv4-sp-d16
 1348              	Cube_Sort:
 1349              	.LFB5:
 108:Src/strategy.c ****   from_x = from_x_;
 1350              		.loc 1 108 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              	.LVL196:
 1355 0000 08B5     		push	{r3, lr}
 1356              	.LCFI17:
 1357              		.cfi_def_cfa_offset 8
 1358              		.cfi_offset 3, -8
 1359              		.cfi_offset 14, -4
 109:Src/strategy.c ****   from_y = from_y_;
 1360              		.loc 1 109 0
 1361 0002 054B     		ldr	r3, .L116
 1362 0004 1880     		strh	r0, [r3]	@ movhi
 110:Src/strategy.c ****   qsort(cube_sort, NB_CUBES, sizeof(Cube*), Compare_Cubes);
 1363              		.loc 1 110 0
 1364 0006 054B     		ldr	r3, .L116+4
 1365 0008 1980     		strh	r1, [r3]	@ movhi
 111:Src/strategy.c **** }
 1366              		.loc 1 111 0
 1367 000a 054B     		ldr	r3, .L116+8
 1368 000c 0422     		movs	r2, #4
 1369 000e 1E21     		movs	r1, #30
 1370              	.LVL197:
 1371 0010 0448     		ldr	r0, .L116+12
 1372              	.LVL198:
 1373 0012 FFF7FEFF 		bl	qsort
 1374              	.LVL199:
 112:Src/strategy.c **** 
 1375              		.loc 1 112 0
 1376 0016 08BD     		pop	{r3, pc}
 1377              	.L117:
 1378              		.align	2
 1379              	.L116:
 1380 0018 00000000 		.word	from_x
 1381 001c 00000000 		.word	from_y
 1382 0020 00000000 		.word	Compare_Cubes
 1383 0024 00000000 		.word	.LANCHOR1
 1384              		.cfi_endproc
 1385              	.LFE5:
 1387              		.global	__aeabi_dcmpgt
 1388              		.global	__aeabi_dsub
 1389              		.section	.text.Eval_Move,"ax",%progbits
 1390              		.align	1
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu fpv4-sp-d16
 1396              	Eval_Move:
 1397              	.LFB22:
ARM GAS  /tmp/ccRda2as.s 			page 41


 778:Src/strategy.c ****   float distance = dist(robot->x, robot->y, dest_x, dest_y);
 1398              		.loc 1 778 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 1402              	.LVL200:
 1403 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1404              	.LCFI18:
 1405              		.cfi_def_cfa_offset 32
 1406              		.cfi_offset 4, -32
 1407              		.cfi_offset 5, -28
 1408              		.cfi_offset 6, -24
 1409              		.cfi_offset 7, -20
 1410              		.cfi_offset 8, -16
 1411              		.cfi_offset 9, -12
 1412              		.cfi_offset 10, -8
 1413              		.cfi_offset 14, -4
 1414 0004 2DED028B 		vpush.64	{d8}
 1415              	.LCFI19:
 1416              		.cfi_def_cfa_offset 40
 1417              		.cfi_offset 80, -40
 1418              		.cfi_offset 81, -36
 1419 0008 0446     		mov	r4, r0
 1420 000a 0E46     		mov	r6, r1
 1421 000c 1546     		mov	r5, r2
 779:Src/strategy.c ****   float angle_path = angle(robot->x ,robot->y, dest_x, dest_y);
 1422              		.loc 1 779 0
 1423 000e 4088     		ldrh	r0, [r0, #2]
 1424              	.LVL201:
 1425 0010 9FED418B 		vldr.64	d8, .L123
 1426 0014 101A     		subs	r0, r2, r0
 1427 0016 FFF7FEFF 		bl	__aeabi_i2d
 1428              	.LVL202:
 1429 001a B0EE481A 		vmov.f32	s2, s16
 1430 001e F0EE681A 		vmov.f32	s3, s17
 1431 0022 41EC100B 		vmov	d0, r0, r1
 1432 0026 FFF7FEFF 		bl	pow
 1433              	.LVL203:
 1434 002a 59EC108B 		vmov	r8, r9, d0
 1435 002e 2088     		ldrh	r0, [r4]
 1436 0030 301A     		subs	r0, r6, r0
 1437 0032 FFF7FEFF 		bl	__aeabi_i2d
 1438              	.LVL204:
 1439 0036 B0EE481A 		vmov.f32	s2, s16
 1440 003a F0EE681A 		vmov.f32	s3, s17
 1441 003e 41EC100B 		vmov	d0, r0, r1
 1442 0042 FFF7FEFF 		bl	pow
 1443              	.LVL205:
 1444 0046 53EC102B 		vmov	r2, r3, d0
 1445 004a 4046     		mov	r0, r8
 1446 004c 4946     		mov	r1, r9
 1447 004e FFF7FEFF 		bl	__aeabi_dadd
 1448              	.LVL206:
 1449 0052 41EC100B 		vmov	d0, r0, r1
 1450 0056 FFF7FEFF 		bl	sqrt
 1451              	.LVL207:
 1452 005a 51EC100B 		vmov	r0, r1, d0
ARM GAS  /tmp/ccRda2as.s 			page 42


 1453 005e FFF7FEFF 		bl	__aeabi_d2f
 1454              	.LVL208:
 1455 0062 8246     		mov	r10, r0	@ float
 1456              	.LVL209:
 780:Src/strategy.c ****   float delta_angle = fabs(angle_path - robot->angle);
 1457              		.loc 1 780 0
 1458 0064 6788     		ldrh	r7, [r4, #2]
 1459 0066 EF1B     		subs	r7, r5, r7
 1460 0068 2088     		ldrh	r0, [r4]
 1461              	.LVL210:
 1462 006a 301A     		subs	r0, r6, r0
 1463 006c FFF7FEFF 		bl	__aeabi_i2d
 1464              	.LVL211:
 1465 0070 8046     		mov	r8, r0
 1466 0072 8946     		mov	r9, r1
 1467 0074 3846     		mov	r0, r7
 1468 0076 FFF7FEFF 		bl	__aeabi_i2d
 1469              	.LVL212:
 1470 007a 49EC118B 		vmov	d1, r8, r9
 1471 007e 41EC100B 		vmov	d0, r0, r1
 1472 0082 FFF7FEFF 		bl	atan2
 1473              	.LVL213:
 1474 0086 51EC100B 		vmov	r0, r1, d0
 1475 008a FFF7FEFF 		bl	__aeabi_d2f
 1476              	.LVL214:
 1477 008e 08EE900A 		vmov	s17, r0
 1478              	.LVL215:
 781:Src/strategy.c **** 
 1479              		.loc 1 781 0
 1480 0092 94ED018A 		vldr.32	s16, [r4, #4]
 1481 0096 38EEC88A 		vsub.f32	s16, s17, s16
 1482 009a B0EEC88A 		vabs.f32	s16, s16
 1483              	.LVL216:
 783:Src/strategy.c ****   delta_angle = 2*PI - delta_angle;
 1484              		.loc 1 783 0
 1485 009e 18EE100A 		vmov	r0, s16
 1486              	.LVL217:
 1487 00a2 FFF7FEFF 		bl	__aeabi_f2d
 1488              	.LVL218:
 1489 00a6 8046     		mov	r8, r0
 1490 00a8 8946     		mov	r9, r1
 1491 00aa 1DA3     		adr	r3, .L123+8
 1492 00ac D3E90023 		ldrd	r2, [r3]
 1493 00b0 FFF7FEFF 		bl	__aeabi_dcmpgt
 1494              	.LVL219:
 1495 00b4 50B1     		cbz	r0, .L119
 784:Src/strategy.c ****  }
 1496              		.loc 1 784 0
 1497 00b6 4246     		mov	r2, r8
 1498 00b8 4B46     		mov	r3, r9
 1499 00ba 1BA1     		adr	r1, .L123+16
 1500 00bc D1E90001 		ldrd	r0, [r1]
 1501 00c0 FFF7FEFF 		bl	__aeabi_dsub
 1502              	.LVL220:
 1503 00c4 FFF7FEFF 		bl	__aeabi_d2f
 1504              	.LVL221:
 1505 00c8 08EE100A 		vmov	s16, r0
ARM GAS  /tmp/ccRda2as.s 			page 43


 1506              	.LVL222:
 1507              	.L119:
 789:Src/strategy.c ****   robot->y = dest_y;
 1508              		.loc 1 789 0
 1509 00cc 2680     		strh	r6, [r4]	@ movhi
 790:Src/strategy.c ****   robot->angle = angle_path;
 1510              		.loc 1 790 0
 1511 00ce 6580     		strh	r5, [r4, #2]	@ movhi
 791:Src/strategy.c **** 	
 1512              		.loc 1 791 0
 1513 00d0 C4ED018A 		vstr.32	s17, [r4, #4]
 793:Src/strategy.c **** }
 1514              		.loc 1 793 0
 1515 00d4 5046     		mov	r0, r10	@ float
 1516 00d6 FFF7FEFF 		bl	__aeabi_f2d
 1517              	.LVL223:
 1518 00da 15A3     		adr	r3, .L123+24
 1519 00dc D3E90023 		ldrd	r2, [r3]
 1520 00e0 FFF7FEFF 		bl	__aeabi_dmul
 1521              	.LVL224:
 1522 00e4 0446     		mov	r4, r0
 1523              	.LVL225:
 1524 00e6 0D46     		mov	r5, r1
 1525 00e8 18EE100A 		vmov	r0, s16
 1526 00ec FFF7FEFF 		bl	__aeabi_f2d
 1527              	.LVL226:
 1528 00f0 11A3     		adr	r3, .L123+32
 1529 00f2 D3E90023 		ldrd	r2, [r3]
 1530 00f6 FFF7FEFF 		bl	__aeabi_dmul
 1531              	.LVL227:
 1532 00fa 0246     		mov	r2, r0
 1533 00fc 0B46     		mov	r3, r1
 1534 00fe 2046     		mov	r0, r4
 1535 0100 2946     		mov	r1, r5
 1536 0102 FFF7FEFF 		bl	__aeabi_dadd
 1537              	.LVL228:
 1538 0106 FFF7FEFF 		bl	__aeabi_d2f
 1539              	.LVL229:
 794:Src/strategy.c **** 
 1540              		.loc 1 794 0
 1541 010a 00EE100A 		vmov	s0, r0
 1542 010e BDEC028B 		vldm	sp!, {d8}
 1543              	.LCFI20:
 1544              		.cfi_restore 80
 1545              		.cfi_restore 81
 1546              		.cfi_def_cfa_offset 32
 1547              	.LVL230:
 1548 0112 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1549              	.LVL231:
 1550              	.L124:
 1551 0116 00BF     		.align	3
 1552              	.L123:
 1553 0118 00000000 		.word	0
 1554 011c 00000040 		.word	1073741824
 1555 0120 182D4454 		.word	1413754136
 1556 0124 FB210940 		.word	1074340347
 1557 0128 182D4454 		.word	1413754136
ARM GAS  /tmp/ccRda2as.s 			page 44


 1558 012c FB211940 		.word	1075388923
 1559 0130 4F1BE8B4 		.word	3035110223
 1560 0134 814E6B3F 		.word	1063997057
 1561 0138 0AE3E4B4 		.word	3034899210
 1562 013c 305FD43F 		.word	1070882608
 1563              		.cfi_endproc
 1564              	.LFE22:
 1566              		.section	.text.Eval_Target,"ax",%progbits
 1567              		.align	1
 1568              		.syntax unified
 1569              		.thumb
 1570              		.thumb_func
 1571              		.fpu fpv4-sp-d16
 1573              	Eval_Target:
 1574              	.LFB19:
 592:Src/strategy.c ****   //printf("Position : (%hu, %hu)\n", robot->x, robot->y);
 1575              		.loc 1 592 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 0
 1578              		@ frame_needed = 0, uses_anonymous_args = 0
 1579              	.LVL232:
 1580 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1581              	.LCFI21:
 1582              		.cfi_def_cfa_offset 24
 1583              		.cfi_offset 3, -24
 1584              		.cfi_offset 4, -20
 1585              		.cfi_offset 5, -16
 1586              		.cfi_offset 6, -12
 1587              		.cfi_offset 7, -8
 1588              		.cfi_offset 14, -4
 1589 0002 2DED028B 		vpush.64	{d8}
 1590              	.LCFI22:
 1591              		.cfi_def_cfa_offset 32
 1592              		.cfi_offset 80, -32
 1593              		.cfi_offset 81, -28
 1594 0006 0546     		mov	r5, r0
 1595 0008 0C46     		mov	r4, r1
 1596              	.LVL233:
 598:Src/strategy.c ****     if((cube-robot->last_target.c)/CUBES_PER_SET == (cube-t->c)/CUBES_PER_SET){
 1597              		.loc 1 598 0
 1598 000a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 1599 000c 002B     		cmp	r3, #0
 1600 000e 6DD0     		beq	.L136
 599:Src/strategy.c ****       if(robot->last_target.d == t->d){
 1601              		.loc 1 599 0
 1602 0010 3F49     		ldr	r1, .L138
 1603              	.LVL234:
 1604 0012 E368     		ldr	r3, [r4, #12]
 1605 0014 CB1A     		subs	r3, r1, r3
 1606 0016 5B10     		asrs	r3, r3, #1
 1607 0018 3E4A     		ldr	r2, .L138+4
 1608 001a 02FB03F3 		mul	r3, r2, r3
 1609 001e 3E48     		ldr	r0, .L138+8
 1610              	.LVL235:
 1611 0020 80FB0376 		smull	r7, r6, r0, r3
 1612 0024 DB17     		asrs	r3, r3, #31
 1613 0026 C3EB6603 		rsb	r3, r3, r6, asr #1
ARM GAS  /tmp/ccRda2as.s 			page 45


 1614 002a 2E68     		ldr	r6, [r5]
 1615 002c 891B     		subs	r1, r1, r6
 1616 002e 4910     		asrs	r1, r1, #1
 1617 0030 02FB01F2 		mul	r2, r2, r1
 1618 0034 80FB0210 		smull	r1, r0, r0, r2
 1619 0038 D217     		asrs	r2, r2, #31
 1620 003a C2EB6002 		rsb	r2, r2, r0, asr #1
 1621 003e 9342     		cmp	r3, r2
 1622 0040 4CD1     		bne	.L127
 1623              	.LBB8:
 600:Src/strategy.c **** 	uint8_t ok = 0;
 1624              		.loc 1 600 0
 1625 0042 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 1626 0044 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1627 0046 9A42     		cmp	r2, r3
 1628 0048 09D1     		bne	.L128
 1629              	.LVL236:
 1630              	.LBB9:
 602:Src/strategy.c **** 	case FROM_UP:
 1631              		.loc 1 602 0
 1632 004a 032B     		cmp	r3, #3
 1633 004c 07D8     		bhi	.L128
 1634 004e DFE803F0 		tbb	[pc, r3]
 1635              	.L130:
 1636 0052 02       		.byte	(.L129-.L130)/2
 1637 0053 35       		.byte	(.L131-.L130)/2
 1638 0054 02       		.byte	(.L129-.L130)/2
 1639 0055 35       		.byte	(.L131-.L130)/2
 1640              		.p2align 1
 1641              	.L129:
 605:Src/strategy.c **** 	    ok = 1;
 1642              		.loc 1 605 0
 1643 0056 2288     		ldrh	r2, [r4]
 1644 0058 7388     		ldrh	r3, [r6, #2]
 1645 005a 9A42     		cmp	r2, r3
 1646 005c 32D0     		beq	.L132
 1647              	.LVL237:
 1648              	.L128:
 1649              	.LBE9:
 623:Src/strategy.c **** 
 1650              		.loc 1 623 0
 1651 005e 2046     		mov	r0, r4
 1652 0060 FFF7FEFF 		bl	Eval_Return_Approach
 1653              	.LVL238:
 1654 0064 9FED2D8A 		vldr.32	s16, .L138+12
 1655 0068 30EE088A 		vadd.f32	s16, s0, s16
 1656              	.LVL239:
 625:Src/strategy.c ****       if((robot->last_target.d%2) == (t->d%2)){
 1657              		.loc 1 625 0
 1658 006c 2A89     		ldrh	r2, [r5, #8]
 1659 006e E988     		ldrh	r1, [r5, #6]
 1660 0070 2046     		mov	r0, r4
 1661 0072 FFF7FEFF 		bl	Eval_Move
 1662              	.LVL240:
 1663 0076 38EE008A 		vadd.f32	s16, s16, s0
 1664              	.LVL241:
 626:Src/strategy.c **** 	cost += 1.5*move;
ARM GAS  /tmp/ccRda2as.s 			page 46


 1665              		.loc 1 626 0
 1666 007a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1667 007c 2A79     		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 1668 007e 5340     		eors	r3, r3, r2
 1669 0080 13F0010F 		tst	r3, #1
 1670 0084 27D1     		bne	.L134
 627:Src/strategy.c ****       }else{
 1671              		.loc 1 627 0
 1672 0086 18EE100A 		vmov	r0, s16
 1673 008a FFF7FEFF 		bl	__aeabi_f2d
 1674              	.LVL242:
 1675 008e 0646     		mov	r6, r0
 1676 0090 0F46     		mov	r7, r1
 1677 0092 0022     		movs	r2, #0
 1678 0094 224B     		ldr	r3, .L138+16
 1679 0096 FFF7FEFF 		bl	__aeabi_dmul
 1680              	.LVL243:
 1681 009a 0246     		mov	r2, r0
 1682 009c 0B46     		mov	r3, r1
 1683 009e 3046     		mov	r0, r6
 1684 00a0 3946     		mov	r1, r7
 1685 00a2 FFF7FEFF 		bl	__aeabi_dadd
 1686              	.LVL244:
 1687 00a6 FFF7FEFF 		bl	__aeabi_d2f
 1688              	.LVL245:
 1689 00aa 08EE100A 		vmov	s16, r0
 1690              	.LVL246:
 1691              	.L135:
 632:Src/strategy.c ****       return cost;
 1692              		.loc 1 632 0
 1693 00ae 2146     		mov	r1, r4
 1694 00b0 2846     		mov	r0, r5
 1695 00b2 FFF7FEFF 		bl	Eval_Align_Stack
 1696              	.LVL247:
 1697 00b6 38EE000A 		vadd.f32	s0, s16, s0
 1698              	.LVL248:
 633:Src/strategy.c ****     }
 1699              		.loc 1 633 0
 1700 00ba 26E0     		b	.L125
 1701              	.LVL249:
 1702              	.L131:
 1703              	.LBB10:
 611:Src/strategy.c **** 	    ok = 1;
 1704              		.loc 1 611 0
 1705 00bc 6288     		ldrh	r2, [r4, #2]
 1706 00be B388     		ldrh	r3, [r6, #4]
 1707 00c0 9A42     		cmp	r2, r3
 1708 00c2 CCD1     		bne	.L128
 1709              	.L132:
 618:Src/strategy.c **** 	  return cost;
 1710              		.loc 1 618 0
 1711 00c4 2146     		mov	r1, r4
 1712 00c6 2846     		mov	r0, r5
 1713 00c8 FFF7FEFF 		bl	Eval_Align_Stack
 1714              	.LVL250:
 1715 00cc DFED137A 		vldr.32	s15, .L138+12
 1716 00d0 30EE270A 		vadd.f32	s0, s0, s15
ARM GAS  /tmp/ccRda2as.s 			page 47


 1717              	.LVL251:
 619:Src/strategy.c **** 	}
 1718              		.loc 1 619 0
 1719 00d4 19E0     		b	.L125
 1720              	.LVL252:
 1721              	.L134:
 1722              	.LBE10:
 629:Src/strategy.c ****       }
 1723              		.loc 1 629 0
 1724 00d6 38EE088A 		vadd.f32	s16, s16, s16
 1725              	.LVL253:
 1726 00da E8E7     		b	.L135
 1727              	.LVL254:
 1728              	.L127:
 1729              	.LBE8:
 636:Src/strategy.c ****   }
 1730              		.loc 1 636 0
 1731 00dc 2046     		mov	r0, r4
 1732 00de FFF7FEFF 		bl	Eval_Return_Approach
 1733              	.LVL255:
 1734 00e2 9FED0E8A 		vldr.32	s16, .L138+12
 1735 00e6 30EE088A 		vadd.f32	s16, s0, s16
 1736              	.LVL256:
 1737 00ea 01E0     		b	.L126
 1738              	.LVL257:
 1739              	.L136:
 596:Src/strategy.c ****   
 1740              		.loc 1 596 0
 1741 00ec 9FED0B8A 		vldr.32	s16, .L138+12
 1742              	.LVL258:
 1743              	.L126:
 638:Src/strategy.c ****   cost += Eval_Align_Stack(t, robot);
 1744              		.loc 1 638 0
 1745 00f0 2A89     		ldrh	r2, [r5, #8]
 1746 00f2 E988     		ldrh	r1, [r5, #6]
 1747 00f4 2046     		mov	r0, r4
 1748 00f6 FFF7FEFF 		bl	Eval_Move
 1749              	.LVL259:
 1750 00fa 38EE008A 		vadd.f32	s16, s16, s0
 1751              	.LVL260:
 639:Src/strategy.c ****   
 1752              		.loc 1 639 0
 1753 00fe 2146     		mov	r1, r4
 1754 0100 2846     		mov	r0, r5
 1755 0102 FFF7FEFF 		bl	Eval_Align_Stack
 1756              	.LVL261:
 1757 0106 38EE000A 		vadd.f32	s0, s16, s0
 1758              	.LVL262:
 1759              	.L125:
 642:Src/strategy.c **** 
 1760              		.loc 1 642 0
 1761 010a BDEC028B 		vldm	sp!, {d8}
 1762              	.LCFI23:
 1763              		.cfi_restore 80
 1764              		.cfi_restore 81
 1765              		.cfi_def_cfa_offset 24
 1766 010e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccRda2as.s 			page 48


 1767              	.LVL263:
 1768              	.L139:
 1769              		.align	2
 1770              	.L138:
 1771 0110 00000000 		.word	.LANCHOR0
 1772 0114 ABAAAAAA 		.word	-1431655765
 1773 0118 67666666 		.word	1717986919
 1774 011c 00000000 		.word	0
 1775 0120 0000F83F 		.word	1073217536
 1776              		.cfi_endproc
 1777              	.LFE19:
 1779              		.section	.text.Eval_Place,"ax",%progbits
 1780              		.align	1
 1781              		.syntax unified
 1782              		.thumb
 1783              		.thumb_func
 1784              		.fpu fpv4-sp-d16
 1786              	Eval_Place:
 1787              	.LFB23:
 796:Src/strategy.c ****   return STACK_COST + Eval_Move(robot, (team==GREEN_TEAM)?CZ_X:(AREA_WIDTH-CZ_X), 0);
 1788              		.loc 1 796 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 1792              	.LVL264:
 1793 0000 08B5     		push	{r3, lr}
 1794              	.LCFI24:
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 3, -8
 1797              		.cfi_offset 14, -4
 797:Src/strategy.c **** }
 1798              		.loc 1 797 0
 1799 0002 084B     		ldr	r3, .L145
 1800 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1801 0006 4BB1     		cbz	r3, .L144
 1802 0008 40F62821 		movw	r1, #2600
 1803              	.L141:
 797:Src/strategy.c **** }
 1804              		.loc 1 797 0 is_stmt 0 discriminator 4
 1805 000c 0022     		movs	r2, #0
 1806 000e FFF7FEFF 		bl	Eval_Move
 1807              	.LVL265:
 798:Src/strategy.c **** 
 1808              		.loc 1 798 0 is_stmt 1 discriminator 4
 1809 0012 F7EE007A 		vmov.f32	s15, #1.0e+0
 1810 0016 30EE270A 		vadd.f32	s0, s0, s15
 1811 001a 08BD     		pop	{r3, pc}
 1812              	.LVL266:
 1813              	.L144:
 797:Src/strategy.c **** }
 1814              		.loc 1 797 0
 1815 001c 4FF4C871 		mov	r1, #400
 1816 0020 F4E7     		b	.L141
 1817              	.L146:
 1818 0022 00BF     		.align	2
 1819              	.L145:
 1820 0024 00000000 		.word	team
ARM GAS  /tmp/ccRda2as.s 			page 49


 1821              		.cfi_endproc
 1822              	.LFE23:
 1824              		.section	.text.Set_Construction_Plan,"ax",%progbits
 1825              		.align	1
 1826              		.global	Set_Construction_Plan
 1827              		.syntax unified
 1828              		.thumb
 1829              		.thumb_func
 1830              		.fpu fpv4-sp-d16
 1832              	Set_Construction_Plan:
 1833              	.LFB7:
 145:Src/strategy.c ****   PLAN_TOP = top;
 1834              		.loc 1 145 0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		@ link register save eliminated.
 1839              	.LVL267:
 146:Src/strategy.c ****   PLAN_MIDDLE = middle;
 1840              		.loc 1 146 0
 1841 0000 034B     		ldr	r3, .L148
 1842 0002 1A70     		strb	r2, [r3]
 147:Src/strategy.c ****   PLAN_BOTTOM = bottom;
 1843              		.loc 1 147 0
 1844 0004 5970     		strb	r1, [r3, #1]
 148:Src/strategy.c ****   valid_plan = 1;
 1845              		.loc 1 148 0
 1846 0006 9870     		strb	r0, [r3, #2]
 149:Src/strategy.c **** }
 1847              		.loc 1 149 0
 1848 0008 024B     		ldr	r3, .L148+4
 1849 000a 0122     		movs	r2, #1
 1850              	.LVL268:
 1851 000c 1A70     		strb	r2, [r3]
 150:Src/strategy.c **** 
 1852              		.loc 1 150 0
 1853 000e 7047     		bx	lr
 1854              	.L149:
 1855              		.align	2
 1856              	.L148:
 1857 0010 00000000 		.word	.LANCHOR2
 1858 0014 00000000 		.word	.LANCHOR3
 1859              		.cfi_endproc
 1860              	.LFE7:
 1862              		.section	.text.Init_Construction,"ax",%progbits
 1863              		.align	1
 1864              		.global	Init_Construction
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1868              		.fpu fpv4-sp-d16
 1870              	Init_Construction:
 1871              	.LFB8:
 155:Src/strategy.c ****   construction->size = 0;
 1872              		.loc 1 155 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccRda2as.s 			page 50


 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              		@ link register save eliminated.
 1877              	.LVL269:
 156:Src/strategy.c ****   construction->plan_state = FSM_PLAN_NONE;
 1878              		.loc 1 156 0
 1879 0000 0023     		movs	r3, #0
 1880 0002 0375     		strb	r3, [r0, #20]
 157:Src/strategy.c **** }
 1881              		.loc 1 157 0
 1882 0004 4375     		strb	r3, [r0, #21]
 158:Src/strategy.c **** 
 1883              		.loc 1 158 0
 1884 0006 7047     		bx	lr
 1885              		.cfi_endproc
 1886              	.LFE8:
 1888              		.section	.text.Init_Strategy,"ax",%progbits
 1889              		.align	1
 1890              		.global	Init_Strategy
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1894              		.fpu fpv4-sp-d16
 1896              	Init_Strategy:
 1897              	.LFB6:
 118:Src/strategy.c ****   me.x = (team == GREEN_TEAM)?ROBOT_X0:(AREA_WIDTH-ROBOT_X0);
 1898              		.loc 1 118 0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902 0000 10B5     		push	{r4, lr}
 1903              	.LCFI25:
 1904              		.cfi_def_cfa_offset 8
 1905              		.cfi_offset 4, -8
 1906              		.cfi_offset 14, -4
 119:Src/strategy.c ****   me.y = ROBOT_Y0;
 1907              		.loc 1 119 0
 1908 0002 244B     		ldr	r3, .L164
 1909 0004 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1910 0006 74B9     		cbnz	r4, .L159
 1911 0008 F822     		movs	r2, #248
 1912              	.L152:
 119:Src/strategy.c ****   me.y = ROBOT_Y0;
 1913              		.loc 1 119 0 is_stmt 0 discriminator 4
 1914 000a 234B     		ldr	r3, .L164+4
 1915 000c 1A80     		strh	r2, [r3]	@ movhi
 120:Src/strategy.c ****   me.angle = (team == GREEN_TEAM)?ROBOT_A0:PI;
 1916              		.loc 1 120 0 is_stmt 1 discriminator 4
 1917 000e 40F21F22 		movw	r2, #543
 1918 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 121:Src/strategy.c ****   me.on_target = 0;
 1919              		.loc 1 121 0 discriminator 4
 1920 0014 54B9     		cbnz	r4, .L160
 121:Src/strategy.c ****   me.on_target = 0;
 1921              		.loc 1 121 0 is_stmt 0
 1922 0016 0023     		movs	r3, #0
 1923              	.L153:
 121:Src/strategy.c ****   me.on_target = 0;
ARM GAS  /tmp/ccRda2as.s 			page 51


 1924              		.loc 1 121 0 discriminator 4
 1925 0018 1F4A     		ldr	r2, .L164+4
 1926 001a 5360     		str	r3, [r2, #4]	@ float
 122:Src/strategy.c ****   score = 0;
 1927              		.loc 1 122 0 is_stmt 1 discriminator 4
 1928 001c 0023     		movs	r3, #0
 1929 001e 1372     		strb	r3, [r2, #8]
 123:Src/strategy.c **** 
 1930              		.loc 1 123 0 discriminator 4
 1931 0020 1E4A     		ldr	r2, .L164+8
 1932 0022 1380     		strh	r3, [r2]	@ movhi
 1933              	.LVL270:
 127:Src/strategy.c ****     cube[k].availability = ((team==GREEN_TEAM) != (k >= (NB_CUBES/2)))?LIKELY:UNCERTAIN;
 1934              		.loc 1 127 0 discriminator 4
 1935 0024 0CE0     		b	.L154
 1936              	.LVL271:
 1937              	.L159:
 119:Src/strategy.c ****   me.y = ROBOT_Y0;
 1938              		.loc 1 119 0
 1939 0026 4FF42C62 		mov	r2, #2752
 1940 002a EEE7     		b	.L152
 1941              	.L160:
 121:Src/strategy.c ****   me.on_target = 0;
 1942              		.loc 1 121 0
 1943 002c 1C4B     		ldr	r3, .L164+12
 1944 002e F3E7     		b	.L153
 1945              	.LVL272:
 1946              	.L161:
 128:Src/strategy.c ****   }
 1947              		.loc 1 128 0
 1948 0030 0220     		movs	r0, #2
 1949              	.L155:
 128:Src/strategy.c ****   }
 1950              		.loc 1 128 0 is_stmt 0 discriminator 4
 1951 0032 03EB4302 		add	r2, r3, r3, lsl #1
 1952 0036 5100     		lsls	r1, r2, #1
 1953 0038 1A4A     		ldr	r2, .L164+16
 1954 003a 0A44     		add	r2, r2, r1
 1955 003c 5070     		strb	r0, [r2, #1]
 127:Src/strategy.c ****     cube[k].availability = ((team==GREEN_TEAM) != (k >= (NB_CUBES/2)))?LIKELY:UNCERTAIN;
 1956              		.loc 1 127 0 is_stmt 1 discriminator 4
 1957 003e 0133     		adds	r3, r3, #1
 1958              	.LVL273:
 1959              	.L154:
 127:Src/strategy.c ****     cube[k].availability = ((team==GREEN_TEAM) != (k >= (NB_CUBES/2)))?LIKELY:UNCERTAIN;
 1960              		.loc 1 127 0 is_stmt 0 discriminator 2
 1961 0040 1D2B     		cmp	r3, #29
 1962 0042 0ADC     		bgt	.L163
 128:Src/strategy.c ****   }
 1963              		.loc 1 128 0 is_stmt 1
 1964 0044 B4FA84F2 		clz	r2, r4
 1965 0048 5209     		lsrs	r2, r2, #5
 1966 004a 0E2B     		cmp	r3, #14
 1967 004c D4BF     		ite	le
 1968 004e 0021     		movle	r1, #0
 1969 0050 0121     		movgt	r1, #1
 1970 0052 8A42     		cmp	r2, r1
ARM GAS  /tmp/ccRda2as.s 			page 52


 1971 0054 ECD0     		beq	.L161
 1972 0056 0320     		movs	r0, #3
 1973 0058 EBE7     		b	.L155
 1974              	.L163:
 130:Src/strategy.c ****     set[k].availability = CUBE_SET(k, 0).availability;
 1975              		.loc 1 130 0
 1976 005a 0023     		movs	r3, #0
 1977              	.LVL274:
 1978 005c 0EE0     		b	.L157
 1979              	.LVL275:
 1980              	.L158:
 131:Src/strategy.c ****   }
 1981              		.loc 1 131 0 discriminator 3
 1982 005e 03EB8302 		add	r2, r3, r3, lsl #2
 1983 0062 02EB4202 		add	r2, r2, r2, lsl #1
 1984 0066 5100     		lsls	r1, r2, #1
 1985 0068 0E4A     		ldr	r2, .L164+16
 1986 006a 0A44     		add	r2, r2, r1
 1987 006c 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 1988 006e 03EB4302 		add	r2, r3, r3, lsl #1
 1989 0072 5100     		lsls	r1, r2, #1
 1990 0074 0C4A     		ldr	r2, .L164+20
 1991 0076 0A44     		add	r2, r2, r1
 1992 0078 1071     		strb	r0, [r2, #4]
 130:Src/strategy.c ****     set[k].availability = CUBE_SET(k, 0).availability;
 1993              		.loc 1 130 0 discriminator 3
 1994 007a 0133     		adds	r3, r3, #1
 1995              	.LVL276:
 1996              	.L157:
 130:Src/strategy.c ****     set[k].availability = CUBE_SET(k, 0).availability;
 1997              		.loc 1 130 0 is_stmt 0 discriminator 1
 1998 007c 052B     		cmp	r3, #5
 1999 007e EEDD     		ble	.L158
 135:Src/strategy.c ****     
 2000              		.loc 1 135 0 is_stmt 1
 2001 0080 FFF7FEFF 		bl	Init_Map
 2002              	.LVL277:
 137:Src/strategy.c **** 
 2003              		.loc 1 137 0
 2004 0084 FFF7FEFF 		bl	Refresh_Map
 2005              	.LVL278:
 140:Src/strategy.c **** 
 2006              		.loc 1 140 0
 2007 0088 0848     		ldr	r0, .L164+24
 2008 008a FFF7FEFF 		bl	Init_Construction
 2009              	.LVL279:
 142:Src/strategy.c **** }
 2010              		.loc 1 142 0
 2011 008e FFF7FEFF 		bl	Init_Cube_Sort
 2012              	.LVL280:
 143:Src/strategy.c **** 
 2013              		.loc 1 143 0
 2014 0092 10BD     		pop	{r4, pc}
 2015              	.L165:
 2016              		.align	2
 2017              	.L164:
 2018 0094 00000000 		.word	team
ARM GAS  /tmp/ccRda2as.s 			page 53


 2019 0098 00000000 		.word	me
 2020 009c 00000000 		.word	.LANCHOR4
 2021 00a0 DB0F4940 		.word	1078530011
 2022 00a4 00000000 		.word	.LANCHOR0
 2023 00a8 00000000 		.word	.LANCHOR5
 2024 00ac 04000000 		.word	.LANCHOR6+4
 2025              		.cfi_endproc
 2026              	.LFE6:
 2028              		.section	.text.Update_Construction,"ax",%progbits
 2029              		.align	1
 2030              		.global	Update_Construction
 2031              		.syntax unified
 2032              		.thumb
 2033              		.thumb_func
 2034              		.fpu fpv4-sp-d16
 2036              	Update_Construction:
 2037              	.LFB9:
 160:Src/strategy.c ****   //Check size
 2038              		.loc 1 160 0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 0
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 2042              		@ link register save eliminated.
 2043              	.LVL281:
 162:Src/strategy.c ****     return -1;
 2044              		.loc 1 162 0
 2045 0000 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 2046 0002 052B     		cmp	r3, #5
 2047 0004 76D0     		beq	.L183
 167:Src/strategy.c **** 
 2048              		.loc 1 167 0
 2049 0006 5A1C     		adds	r2, r3, #1
 2050 0008 0A75     		strb	r2, [r1, #20]
 2051 000a 41F82300 		str	r0, [r1, r3, lsl #2]
 170:Src/strategy.c ****   case FSM_PLAN_NONE:
 2052              		.loc 1 170 0
 2053 000e 4B7D     		ldrb	r3, [r1, #21]	@ zero_extendqisi2
 2054 0010 042B     		cmp	r3, #4
 2055 0012 72D8     		bhi	.L184
 2056 0014 DFE803F0 		tbb	[pc, r3]
 2057              	.L169:
 2058 0018 03       		.byte	(.L168-.L169)/2
 2059 0019 16       		.byte	(.L170-.L169)/2
 2060 001a 46       		.byte	(.L171-.L169)/2
 2061 001b 2E       		.byte	(.L172-.L169)/2
 2062 001c 5A       		.byte	(.L173-.L169)/2
 2063 001d 00       		.p2align 1
 2064              	.L168:
 172:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_T;
 2065              		.loc 1 172 0
 2066 001e 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2067 0020 394A     		ldr	r2, .L198
 2068 0022 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2069 0024 9342     		cmp	r3, r2
 2070 0026 05D0     		beq	.L188
 174:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_B;
 2071              		.loc 1 174 0
ARM GAS  /tmp/ccRda2as.s 			page 54


 2072 0028 374A     		ldr	r2, .L198
 2073 002a 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 2074 002c 9342     		cmp	r3, r2
 2075 002e 05D0     		beq	.L189
 218:Src/strategy.c **** }
 2076              		.loc 1 218 0
 2077 0030 0020     		movs	r0, #0
 2078              	.LVL282:
 2079 0032 7047     		bx	lr
 2080              	.LVL283:
 2081              	.L188:
 173:Src/strategy.c ****       }else if(c->color == PLAN_BOTTOM){
 2082              		.loc 1 173 0
 2083 0034 0123     		movs	r3, #1
 2084 0036 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2085              		.loc 1 218 0
 2086 0038 0020     		movs	r0, #0
 2087              	.LVL284:
 2088 003a 7047     		bx	lr
 2089              	.LVL285:
 2090              	.L189:
 175:Src/strategy.c ****       }
 2091              		.loc 1 175 0
 2092 003c 0323     		movs	r3, #3
 2093 003e 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2094              		.loc 1 218 0
 2095 0040 0020     		movs	r0, #0
 2096              	.LVL286:
 2097 0042 7047     		bx	lr
 2098              	.LVL287:
 2099              	.L170:
 179:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_TM;
 2100              		.loc 1 179 0
 2101 0044 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2102 0046 304A     		ldr	r2, .L198
 2103 0048 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2104 004a 9342     		cmp	r3, r2
 2105 004c 0AD0     		beq	.L190
 181:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_B;
 2106              		.loc 1 181 0
 2107 004e 2E4A     		ldr	r2, .L198
 2108 0050 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 2109 0052 9342     		cmp	r3, r2
 2110 0054 0AD0     		beq	.L191
 183:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_NONE;
 2111              		.loc 1 183 0
 2112 0056 2C4A     		ldr	r2, .L198
 2113 0058 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2114 005a 9342     		cmp	r3, r2
 2115 005c 4FD0     		beq	.L186
 184:Src/strategy.c ****       }
 2116              		.loc 1 184 0
 2117 005e 0020     		movs	r0, #0
 2118              	.LVL288:
 2119 0060 4875     		strb	r0, [r1, #21]
ARM GAS  /tmp/ccRda2as.s 			page 55


 2120 0062 7047     		bx	lr
 2121              	.LVL289:
 2122              	.L190:
 180:Src/strategy.c ****       }else if(c->color == PLAN_BOTTOM){
 2123              		.loc 1 180 0
 2124 0064 0223     		movs	r3, #2
 2125 0066 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2126              		.loc 1 218 0
 2127 0068 0020     		movs	r0, #0
 2128              	.LVL290:
 2129 006a 7047     		bx	lr
 2130              	.LVL291:
 2131              	.L191:
 182:Src/strategy.c ****       }else if(c->color != PLAN_TOP){
 2132              		.loc 1 182 0
 2133 006c 0323     		movs	r3, #3
 2134 006e 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2135              		.loc 1 218 0
 2136 0070 0020     		movs	r0, #0
 2137              	.LVL292:
 2138 0072 7047     		bx	lr
 2139              	.LVL293:
 2140              	.L172:
 188:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_BM;
 2141              		.loc 1 188 0
 2142 0074 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2143 0076 244A     		ldr	r2, .L198
 2144 0078 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2145 007a 9342     		cmp	r3, r2
 2146 007c 0AD0     		beq	.L192
 190:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_T;
 2147              		.loc 1 190 0
 2148 007e 224A     		ldr	r2, .L198
 2149 0080 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2150 0082 9342     		cmp	r3, r2
 2151 0084 0AD0     		beq	.L193
 192:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_NONE;
 2152              		.loc 1 192 0
 2153 0086 204A     		ldr	r2, .L198
 2154 0088 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 2155 008a 9342     		cmp	r3, r2
 2156 008c 39D0     		beq	.L187
 193:Src/strategy.c ****       }
 2157              		.loc 1 193 0
 2158 008e 0020     		movs	r0, #0
 2159              	.LVL294:
 2160 0090 4875     		strb	r0, [r1, #21]
 2161 0092 7047     		bx	lr
 2162              	.LVL295:
 2163              	.L192:
 189:Src/strategy.c ****       }else if(c->color == PLAN_TOP){
 2164              		.loc 1 189 0
 2165 0094 0423     		movs	r3, #4
 2166 0096 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
ARM GAS  /tmp/ccRda2as.s 			page 56


 2167              		.loc 1 218 0
 2168 0098 0020     		movs	r0, #0
 2169              	.LVL296:
 2170 009a 7047     		bx	lr
 2171              	.LVL297:
 2172              	.L193:
 191:Src/strategy.c ****       }else if(c->color != PLAN_BOTTOM){
 2173              		.loc 1 191 0
 2174 009c 0123     		movs	r3, #1
 2175 009e 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2176              		.loc 1 218 0
 2177 00a0 0020     		movs	r0, #0
 2178              	.LVL298:
 2179 00a2 7047     		bx	lr
 2180              	.LVL299:
 2181              	.L171:
 197:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_COMPLETE;
 2182              		.loc 1 197 0
 2183 00a4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2184 00a6 184A     		ldr	r2, .L198
 2185 00a8 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 2186 00aa 9342     		cmp	r3, r2
 2187 00ac 06D0     		beq	.L194
 199:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_T;
 2188              		.loc 1 199 0
 2189 00ae 164A     		ldr	r2, .L198
 2190 00b0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2191 00b2 9342     		cmp	r3, r2
 2192 00b4 06D0     		beq	.L195
 202:Src/strategy.c ****       }
 2193              		.loc 1 202 0
 2194 00b6 0020     		movs	r0, #0
 2195              	.LVL300:
 2196 00b8 4875     		strb	r0, [r1, #21]
 2197 00ba 7047     		bx	lr
 2198              	.LVL301:
 2199              	.L194:
 198:Src/strategy.c ****       }else if(c->color == PLAN_TOP){
 2200              		.loc 1 198 0
 2201 00bc 0523     		movs	r3, #5
 2202 00be 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2203              		.loc 1 218 0
 2204 00c0 0020     		movs	r0, #0
 2205              	.LVL302:
 2206 00c2 7047     		bx	lr
 2207              	.LVL303:
 2208              	.L195:
 200:Src/strategy.c ****       }else{
 2209              		.loc 1 200 0
 2210 00c4 0123     		movs	r3, #1
 2211 00c6 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2212              		.loc 1 218 0
 2213 00c8 0020     		movs	r0, #0
 2214              	.LVL304:
ARM GAS  /tmp/ccRda2as.s 			page 57


 2215 00ca 7047     		bx	lr
 2216              	.LVL305:
 2217              	.L173:
 206:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_COMPLETE;
 2218              		.loc 1 206 0
 2219 00cc 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2220 00ce 0E4A     		ldr	r2, .L198
 2221 00d0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2222 00d2 9342     		cmp	r3, r2
 2223 00d4 06D0     		beq	.L196
 208:Src/strategy.c **** 	construction->plan_state = FSM_PLAN_B;
 2224              		.loc 1 208 0
 2225 00d6 0C4A     		ldr	r2, .L198
 2226 00d8 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 2227 00da 9342     		cmp	r3, r2
 2228 00dc 06D0     		beq	.L197
 211:Src/strategy.c ****       }
 2229              		.loc 1 211 0
 2230 00de 0020     		movs	r0, #0
 2231              	.LVL306:
 2232 00e0 4875     		strb	r0, [r1, #21]
 2233 00e2 7047     		bx	lr
 2234              	.LVL307:
 2235              	.L196:
 207:Src/strategy.c ****       }else if(c->color == PLAN_BOTTOM){
 2236              		.loc 1 207 0
 2237 00e4 0523     		movs	r3, #5
 2238 00e6 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2239              		.loc 1 218 0
 2240 00e8 0020     		movs	r0, #0
 2241              	.LVL308:
 2242 00ea 7047     		bx	lr
 2243              	.LVL309:
 2244              	.L197:
 209:Src/strategy.c ****       }else{
 2245              		.loc 1 209 0
 2246 00ec 0323     		movs	r3, #3
 2247 00ee 4B75     		strb	r3, [r1, #21]
 218:Src/strategy.c **** }
 2248              		.loc 1 218 0
 2249 00f0 0020     		movs	r0, #0
 2250              	.LVL310:
 2251 00f2 7047     		bx	lr
 2252              	.LVL311:
 2253              	.L183:
 163:Src/strategy.c ****   }
 2254              		.loc 1 163 0
 2255 00f4 4FF0FF30 		mov	r0, #-1
 2256              	.LVL312:
 2257 00f8 7047     		bx	lr
 2258              	.LVL313:
 2259              	.L184:
 218:Src/strategy.c **** }
 2260              		.loc 1 218 0
 2261 00fa 0020     		movs	r0, #0
 2262              	.LVL314:
ARM GAS  /tmp/ccRda2as.s 			page 58


 2263 00fc 7047     		bx	lr
 2264              	.LVL315:
 2265              	.L186:
 2266 00fe 0020     		movs	r0, #0
 2267              	.LVL316:
 2268 0100 7047     		bx	lr
 2269              	.LVL317:
 2270              	.L187:
 2271 0102 0020     		movs	r0, #0
 2272              	.LVL318:
 219:Src/strategy.c **** 
 2273              		.loc 1 219 0
 2274 0104 7047     		bx	lr
 2275              	.L199:
 2276 0106 00BF     		.align	2
 2277              	.L198:
 2278 0108 00000000 		.word	.LANCHOR2
 2279              		.cfi_endproc
 2280              	.LFE9:
 2282              		.section	.text.Get_Construction_Score,"ax",%progbits
 2283              		.align	1
 2284              		.global	Get_Construction_Score
 2285              		.syntax unified
 2286              		.thumb
 2287              		.thumb_func
 2288              		.fpu fpv4-sp-d16
 2290              	Get_Construction_Score:
 2291              	.LFB10:
 221:Src/strategy.c ****   return score_per_size[construction->size]
 2292              		.loc 1 221 0
 2293              		.cfi_startproc
 2294              		@ args = 0, pretend = 0, frame = 0
 2295              		@ frame_needed = 0, uses_anonymous_args = 0
 2296              		@ link register save eliminated.
 2297              	.LVL319:
 222:Src/strategy.c ****     + (construction->plan_state == FSM_PLAN_COMPLETE)?30:0;
 2298              		.loc 1 222 0
 2299 0000 027D     		ldrb	r2, [r0, #20]	@ zero_extendqisi2
 2300 0002 064B     		ldr	r3, .L204
 2301 0004 53F82230 		ldr	r3, [r3, r2, lsl #2]
 223:Src/strategy.c **** }
 2302              		.loc 1 223 0
 2303 0008 427D     		ldrb	r2, [r0, #21]	@ zero_extendqisi2
 2304 000a 052A     		cmp	r2, #5
 2305 000c 08BF     		it	eq
 2306 000e 0133     		addeq	r3, r3, #1
 2307 0010 0BB9     		cbnz	r3, .L203
 2308 0012 0020     		movs	r0, #0
 2309              	.LVL320:
 224:Src/strategy.c **** 
 2310              		.loc 1 224 0
 2311 0014 7047     		bx	lr
 2312              	.LVL321:
 2313              	.L203:
 223:Src/strategy.c **** }
 2314              		.loc 1 223 0
 2315 0016 1E20     		movs	r0, #30
ARM GAS  /tmp/ccRda2as.s 			page 59


 2316              	.LVL322:
 2317 0018 7047     		bx	lr
 2318              	.L205:
 2319 001a 00BF     		.align	2
 2320              	.L204:
 2321 001c 00000000 		.word	.LANCHOR7
 2322              		.cfi_endproc
 2323              	.LFE10:
 2325              		.section	.text.Eval_Permutation,"ax",%progbits
 2326              		.align	1
 2327              		.syntax unified
 2328              		.thumb
 2329              		.thumb_func
 2330              		.fpu fpv4-sp-d16
 2332              	Eval_Permutation:
 2333              	.LFB20:
 644:Src/strategy.c ****   //Temporary data
 2334              		.loc 1 644 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 184
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              	.LVL323:
 2339 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2340              	.LCFI26:
 2341              		.cfi_def_cfa_offset 32
 2342              		.cfi_offset 4, -32
 2343              		.cfi_offset 5, -28
 2344              		.cfi_offset 6, -24
 2345              		.cfi_offset 7, -20
 2346              		.cfi_offset 8, -16
 2347              		.cfi_offset 9, -12
 2348              		.cfi_offset 10, -8
 2349              		.cfi_offset 14, -4
 2350 0004 2DED028B 		vpush.64	{d8}
 2351              	.LCFI27:
 2352              		.cfi_def_cfa_offset 40
 2353              		.cfi_offset 80, -40
 2354              		.cfi_offset 81, -36
 2355 0008 AEB0     		sub	sp, sp, #184
 2356              	.LCFI28:
 2357              		.cfi_def_cfa_offset 224
 2358 000a 8146     		mov	r9, r0
 2359 000c 0F46     		mov	r7, r1
 2360 000e 9246     		mov	r10, r2
 646:Src/strategy.c ****   Robot f_robot = me;
 2361              		.loc 1 646 0
 2362 0010 28AC     		add	r4, sp, #160
 2363 0012 734D     		ldr	r5, .L237
 2364 0014 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2365              	.LVL324:
 2366 0016 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2367 0018 95E80300 		ldm	r5, {r0, r1}
 2368 001c 84E80300 		stm	r4, {r0, r1}
 647:Src/strategy.c ****   
 2369              		.loc 1 647 0
 2370 0020 22AC     		add	r4, sp, #136
 2371 0022 704D     		ldr	r5, .L237+4
ARM GAS  /tmp/ccRda2as.s 			page 60


 2372 0024 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2373 0026 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2374 0028 95E80300 		ldm	r5, {r0, r1}
 2375 002c 84E80300 		stm	r4, {r0, r1}
 2376              	.LVL325:
 659:Src/strategy.c ****     prob_backup[i] = comb[i]->availability;
 2377              		.loc 1 659 0
 2378 0030 0023     		movs	r3, #0
 2379              	.LVL326:
 2380              	.L207:
 659:Src/strategy.c ****     prob_backup[i] = comb[i]->availability;
 2381              		.loc 1 659 0 is_stmt 0 discriminator 1
 2382 0032 BB42     		cmp	r3, r7
 2383 0034 08DA     		bge	.L233
 660:Src/strategy.c ****   }
 2384              		.loc 1 660 0 is_stmt 1 discriminator 3
 2385 0036 59F82320 		ldr	r2, [r9, r3, lsl #2]
 2386 003a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 2387 003c 2EAA     		add	r2, sp, #184
 2388 003e 1A44     		add	r2, r2, r3
 2389 0040 02F8381C 		strb	r1, [r2, #-56]
 659:Src/strategy.c ****     prob_backup[i] = comb[i]->availability;
 2390              		.loc 1 659 0 discriminator 3
 2391 0044 0133     		adds	r3, r3, #1
 2392              	.LVL327:
 2393 0046 F4E7     		b	.L207
 2394              	.L233:
 663:Src/strategy.c ****     Cube*const c = comb[i];
 2395              		.loc 1 663 0
 2396 0048 0026     		movs	r6, #0
 655:Src/strategy.c **** 
 2397              		.loc 1 655 0
 2398 004a DFED678A 		vldr.32	s17, .L237+8
 650:Src/strategy.c ****   
 2399              		.loc 1 650 0
 2400 004e 4FF0FF38 		mov	r8, #-1
 2401 0052 7CE0     		b	.L209
 2402              	.LVL328:
 2403              	.L212:
 2404              	.LBB11:
 2405              	.LBB12:
 676:Src/strategy.c **** 	t.approach_y = t.c->y - APPROACH_DIST;
 2406              		.loc 1 676 0
 2407 0054 6B88     		ldrh	r3, [r5, #2]
 2408 0056 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 677:Src/strategy.c **** 	break;
 2409              		.loc 1 677 0
 2410 005a AB88     		ldrh	r3, [r5, #4]
 2411 005c 8B3B     		subs	r3, r3, #139
 2412 005e ADF81030 		strh	r3, [sp, #16]	@ movhi
 2413              	.L211:
 692:Src/strategy.c **** 	Robot robot_tmp = f_robot;
 2414              		.loc 1 692 0
 2415 0062 02A8     		add	r0, sp, #8
 2416 0064 FFF7FEFF 		bl	Check_Target
 2417              	.LVL329:
 2418 0068 70BB     		cbnz	r0, .L234
ARM GAS  /tmp/ccRda2as.s 			page 61


 2419              	.LVL330:
 2420              	.L217:
 2421              	.LBE12:
 672:Src/strategy.c ****       Target t = {.c = c, .d = d};
 2422              		.loc 1 672 0 discriminator 1
 2423 006a 0134     		adds	r4, r4, #1
 2424              	.LVL331:
 2425              	.L210:
 672:Src/strategy.c ****       Target t = {.c = c, .d = d};
 2426              		.loc 1 672 0 is_stmt 0 discriminator 2
 2427 006c 032C     		cmp	r4, #3
 2428 006e 5ADC     		bgt	.L235
 2429              	.LBB14:
 673:Src/strategy.c ****       switch(d){
 2430              		.loc 1 673 0 is_stmt 1
 2431 0070 0023     		movs	r3, #0
 2432 0072 0393     		str	r3, [sp, #12]
 2433 0074 0493     		str	r3, [sp, #16]
 2434 0076 0295     		str	r5, [sp, #8]
 2435 0078 8DF80C40 		strb	r4, [sp, #12]
 674:Src/strategy.c ****       case FROM_UP:
 2436              		.loc 1 674 0
 2437 007c 032C     		cmp	r4, #3
 2438 007e F0D8     		bhi	.L211
 2439 0080 01A3     		adr	r3, .L213
 2440 0082 53F824F0 		ldr	pc, [r3, r4, lsl #2]
 2441 0086 00BF     		.p2align 2
 2442              	.L213:
 2443 0088 55000000 		.word	.L212+1
 2444 008c 99000000 		.word	.L214+1
 2445 0090 A9000000 		.word	.L215+1
 2446 0094 B9000000 		.word	.L216+1
 2447              		.p2align 1
 2448              	.L214:
 680:Src/strategy.c **** 	t.approach_y = t.c->y;
 2449              		.loc 1 680 0
 2450 0098 6B88     		ldrh	r3, [r5, #2]
 2451 009a 8B33     		adds	r3, r3, #139
 2452 009c ADF80E30 		strh	r3, [sp, #14]	@ movhi
 681:Src/strategy.c **** 	break;
 2453              		.loc 1 681 0
 2454 00a0 AB88     		ldrh	r3, [r5, #4]
 2455 00a2 ADF81030 		strh	r3, [sp, #16]	@ movhi
 682:Src/strategy.c ****       case FROM_BOT:
 2456              		.loc 1 682 0
 2457 00a6 DCE7     		b	.L211
 2458              	.L215:
 684:Src/strategy.c **** 	t.approach_y = t.c->y + APPROACH_DIST;
 2459              		.loc 1 684 0
 2460 00a8 6B88     		ldrh	r3, [r5, #2]
 2461 00aa ADF80E30 		strh	r3, [sp, #14]	@ movhi
 685:Src/strategy.c **** 	break;
 2462              		.loc 1 685 0
 2463 00ae AB88     		ldrh	r3, [r5, #4]
 2464 00b0 8B33     		adds	r3, r3, #139
 2465 00b2 ADF81030 		strh	r3, [sp, #16]	@ movhi
 686:Src/strategy.c ****       case FROM_LEFT:
ARM GAS  /tmp/ccRda2as.s 			page 62


 2466              		.loc 1 686 0
 2467 00b6 D4E7     		b	.L211
 2468              	.L216:
 688:Src/strategy.c **** 	t.approach_y = t.c->y;
 2469              		.loc 1 688 0
 2470 00b8 6B88     		ldrh	r3, [r5, #2]
 2471 00ba 8B3B     		subs	r3, r3, #139
 2472 00bc ADF80E30 		strh	r3, [sp, #14]	@ movhi
 689:Src/strategy.c **** 	break;
 2473              		.loc 1 689 0
 2474 00c0 AB88     		ldrh	r3, [r5, #4]
 2475 00c2 ADF81030 		strh	r3, [sp, #16]	@ movhi
 690:Src/strategy.c ****       }
 2476              		.loc 1 690 0
 2477 00c6 CCE7     		b	.L211
 2478              	.L234:
 2479              	.LBB13:
 693:Src/strategy.c **** 	float cost = Eval_Target(&t, &robot_tmp);
 2480              		.loc 1 693 0
 2481 00c8 0DF12C0C 		add	ip, sp, #44
 2482 00cc 0DF1880E 		add	lr, sp, #136
 2483 00d0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2484 00d4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2485 00d8 9EE80300 		ldm	lr, {r0, r1}
 2486 00dc 8CE80300 		stm	ip, {r0, r1}
 694:Src/strategy.c **** 	if(cost < best_cost){
 2487              		.loc 1 694 0
 2488 00e0 0BA9     		add	r1, sp, #44
 2489 00e2 02A8     		add	r0, sp, #8
 2490 00e4 FFF7FEFF 		bl	Eval_Target
 2491              	.LVL332:
 695:Src/strategy.c **** 	  best_cost = cost;
 2492              		.loc 1 695 0
 2493 00e8 B4EEC08A 		vcmpe.f32	s16, s0
 2494 00ec F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2495 00f0 BBDD     		ble	.L217
 2496              	.LVL333:
 698:Src/strategy.c **** 	  target_list_tmp[i] = t;
 2497              		.loc 1 698 0
 2498 00f2 0DF1140C 		add	ip, sp, #20
 2499 00f6 0DF12C0E 		add	lr, sp, #44
 2500 00fa BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2501 00fe ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2502 0102 9EE80300 		ldm	lr, {r0, r1}
 2503 0106 8CE80300 		stm	ip, {r0, r1}
 699:Src/strategy.c **** 	}
 2504              		.loc 1 699 0
 2505 010a 06EB4602 		add	r2, r6, r6, lsl #1
 2506 010e 9300     		lsls	r3, r2, #2
 2507 0110 2EAA     		add	r2, sp, #184
 2508 0112 1344     		add	r3, r3, r2
 2509 0114 743B     		subs	r3, r3, #116
 2510 0116 02AA     		add	r2, sp, #8
 2511 0118 07CA     		ldm	r2, {r0, r1, r2}
 2512 011a 83E80700 		stm	r3, {r0, r1, r2}
 696:Src/strategy.c **** 	  best_d = d;
 2513              		.loc 1 696 0
ARM GAS  /tmp/ccRda2as.s 			page 63


 2514 011e B0EE408A 		vmov.f32	s16, s0
 697:Src/strategy.c **** 	  next_robot = robot_tmp;
 2515              		.loc 1 697 0
 2516 0122 A046     		mov	r8, r4
 2517 0124 A1E7     		b	.L217
 2518              	.LVL334:
 2519              	.L235:
 2520              	.LBE13:
 2521              	.LBE14:
 704:Src/strategy.c ****       break;
 2522              		.loc 1 704 0
 2523 0126 B8F1FF3F 		cmp	r8, #-1
 2524 012a 1AD0     		beq	.L222
 707:Src/strategy.c ****     c->availability = ZERO_PROBABILITY;
 2525              		.loc 1 707 0
 2526 012c 28A9     		add	r1, sp, #160
 2527 012e 2846     		mov	r0, r5
 2528 0130 FFF7FEFF 		bl	Update_Construction
 2529              	.LVL335:
 708:Src/strategy.c ****     f_robot = next_robot;
 2530              		.loc 1 708 0
 2531 0134 0023     		movs	r3, #0
 2532 0136 6B70     		strb	r3, [r5, #1]
 709:Src/strategy.c ****     cost_accum += best_cost;
 2533              		.loc 1 709 0
 2534 0138 22AC     		add	r4, sp, #136
 2535              	.LVL336:
 2536 013a 05AD     		add	r5, sp, #20
 2537              	.LVL337:
 2538 013c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2539 013e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2540 0140 95E80300 		ldm	r5, {r0, r1}
 2541 0144 84E80300 		stm	r4, {r0, r1}
 710:Src/strategy.c ****     //printf("%d", best_d);
 2542              		.loc 1 710 0
 2543 0148 78EE888A 		vadd.f32	s17, s17, s16
 2544              	.LVL338:
 2545              	.LBE11:
 663:Src/strategy.c ****     Cube*const c = comb[i];
 2546              		.loc 1 663 0
 2547 014c 0136     		adds	r6, r6, #1
 2548              	.LVL339:
 2549              	.L209:
 663:Src/strategy.c ****     Cube*const c = comb[i];
 2550              		.loc 1 663 0 is_stmt 0 discriminator 1
 2551 014e BE42     		cmp	r6, r7
 2552 0150 07DA     		bge	.L222
 2553              	.LBB15:
 664:Src/strategy.c ****     
 2554              		.loc 1 664 0 is_stmt 1
 2555 0152 59F82650 		ldr	r5, [r9, r6, lsl #2]
 2556              	.LVL340:
 667:Src/strategy.c ****     best_d = -1;
 2557              		.loc 1 667 0
 2558 0156 9FED258A 		vldr.32	s16, .L237+12
 672:Src/strategy.c ****       Target t = {.c = c, .d = d};
 2559              		.loc 1 672 0
ARM GAS  /tmp/ccRda2as.s 			page 64


 2560 015a 0024     		movs	r4, #0
 668:Src/strategy.c ****     Robot next_robot;
 2561              		.loc 1 668 0
 2562 015c 4FF0FF38 		mov	r8, #-1
 672:Src/strategy.c ****       Target t = {.c = c, .d = d};
 2563              		.loc 1 672 0
 2564 0160 84E7     		b	.L210
 2565              	.LVL341:
 2566              	.L222:
 2567              	.LBE15:
 715:Src/strategy.c **** 
 2568              		.loc 1 715 0
 2569 0162 22A8     		add	r0, sp, #136
 2570 0164 FFF7FEFF 		bl	Eval_Place
 2571              	.LVL342:
 2572 0168 78EE808A 		vadd.f32	s17, s17, s0
 2573              	.LVL343:
 718:Src/strategy.c ****     comb[i]->availability = prob_backup[i];
 2574              		.loc 1 718 0
 2575 016c 0023     		movs	r3, #0
 2576              	.LVL344:
 2577              	.L224:
 718:Src/strategy.c ****     comb[i]->availability = prob_backup[i];
 2578              		.loc 1 718 0 is_stmt 0 discriminator 1
 2579 016e BB42     		cmp	r3, r7
 2580 0170 08DA     		bge	.L236
 719:Src/strategy.c ****     if(best_d != -1){
 2581              		.loc 1 719 0 is_stmt 1
 2582 0172 59F82320 		ldr	r2, [r9, r3, lsl #2]
 2583 0176 2EA9     		add	r1, sp, #184
 2584 0178 1944     		add	r1, r1, r3
 2585 017a 11F8381C 		ldrb	r1, [r1, #-56]	@ zero_extendqisi2
 2586 017e 5170     		strb	r1, [r2, #1]
 718:Src/strategy.c ****     comb[i]->availability = prob_backup[i];
 2587              		.loc 1 718 0
 2588 0180 0133     		adds	r3, r3, #1
 2589              	.LVL345:
 2590 0182 F4E7     		b	.L224
 2591              	.L236:
 725:Src/strategy.c ****   
 2592              		.loc 1 725 0
 2593 0184 28A8     		add	r0, sp, #160
 2594 0186 FFF7FEFF 		bl	Get_Construction_Score
 2595              	.LVL346:
 2596 018a 0190     		str	r0, [sp, #4]
 2597              	.LVL347:
 727:Src/strategy.c ****     float rank = (float) score_ / cost_accum;
 2598              		.loc 1 727 0
 2599 018c B8F1FF3F 		cmp	r8, #-1
 2600 0190 21D0     		beq	.L206
 2601              	.LBB16:
 728:Src/strategy.c ****     if(rank > *best_rank){
 2602              		.loc 1 728 0
 2603 0192 07EE900A 		vmov	s15, r0	@ int
 2604 0196 F8EEE77A 		vcvt.f32.s32	s15, s15
 2605 019a 87EEA87A 		vdiv.f32	s14, s15, s17
 2606              	.LVL348:
ARM GAS  /tmp/ccRda2as.s 			page 65


 729:Src/strategy.c ****       *best_rank = rank;
 2607              		.loc 1 729 0
 2608 019e DAED007A 		vldr.32	s15, [r10]
 2609 01a2 F4EEC77A 		vcmpe.f32	s15, s14
 2610 01a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2611 01aa 14D5     		bpl	.L206
 730:Src/strategy.c ****       strat.nb_targets = size;
 2612              		.loc 1 730 0
 2613 01ac 8AED007A 		vstr.32	s14, [r10]
 731:Src/strategy.c ****       for(i = 0; i < strat.nb_targets; i++){
 2614              		.loc 1 731 0
 2615 01b0 0F4B     		ldr	r3, .L237+16
 2616 01b2 5F65     		str	r7, [r3, #84]
 2617              	.LVL349:
 732:Src/strategy.c ****         strat.steps_tab[i] = target_list_tmp[i];
 2618              		.loc 1 732 0
 2619 01b4 0024     		movs	r4, #0
 2620 01b6 0CE0     		b	.L228
 2621              	.LVL350:
 2622              	.L229:
 733:Src/strategy.c ****       }
 2623              		.loc 1 733 0 discriminator 3
 2624 01b8 6200     		lsls	r2, r4, #1
 2625 01ba 1119     		adds	r1, r2, r4
 2626 01bc 8B00     		lsls	r3, r1, #2
 2627 01be 0C4D     		ldr	r5, .L237+16
 2628 01c0 1D44     		add	r5, r5, r3
 2629 01c2 2EAA     		add	r2, sp, #184
 2630 01c4 1344     		add	r3, r3, r2
 2631 01c6 743B     		subs	r3, r3, #116
 2632 01c8 93E80700 		ldm	r3, {r0, r1, r2}
 2633 01cc 85E80700 		stm	r5, {r0, r1, r2}
 732:Src/strategy.c ****         strat.steps_tab[i] = target_list_tmp[i];
 2634              		.loc 1 732 0 discriminator 3
 2635 01d0 0134     		adds	r4, r4, #1
 2636              	.LVL351:
 2637              	.L228:
 732:Src/strategy.c ****         strat.steps_tab[i] = target_list_tmp[i];
 2638              		.loc 1 732 0 is_stmt 0 discriminator 1
 2639 01d2 BC42     		cmp	r4, r7
 2640 01d4 F0DB     		blt	.L229
 2641              	.LVL352:
 2642              	.L206:
 2643              	.LBE16:
 738:Src/strategy.c **** 
 2644              		.loc 1 738 0 is_stmt 1
 2645 01d6 2EB0     		add	sp, sp, #184
 2646              	.LCFI29:
 2647              		.cfi_def_cfa_offset 40
 2648              		@ sp needed
 2649 01d8 BDEC028B 		vldm	sp!, {d8}
 2650              	.LCFI30:
 2651              		.cfi_restore 80
 2652              		.cfi_restore 81
 2653              		.cfi_def_cfa_offset 32
 2654 01dc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2655              	.LVL353:
ARM GAS  /tmp/ccRda2as.s 			page 66


 2656              	.L238:
 2657              		.align	2
 2658              	.L237:
 2659 01e0 04000000 		.word	.LANCHOR6+4
 2660 01e4 00000000 		.word	me
 2661 01e8 00000000 		.word	0
 2662 01ec 0050C347 		.word	1203982336
 2663 01f0 00000000 		.word	strat
 2664              		.cfi_endproc
 2665              	.LFE20:
 2667              		.section	.text.Eval_Combination,"ax",%progbits
 2668              		.align	1
 2669              		.syntax unified
 2670              		.thumb
 2671              		.thumb_func
 2672              		.fpu fpv4-sp-d16
 2674              	Eval_Combination:
 2675              	.LFB17:
 495:Src/strategy.c ****   int i;
 2676              		.loc 1 495 0
 2677              		.cfi_startproc
 2678              		@ args = 0, pretend = 0, frame = 40
 2679              		@ frame_needed = 0, uses_anonymous_args = 0
 2680              	.LVL354:
 2681 0000 70B5     		push	{r4, r5, r6, lr}
 2682              	.LCFI31:
 2683              		.cfi_def_cfa_offset 16
 2684              		.cfi_offset 4, -16
 2685              		.cfi_offset 5, -12
 2686              		.cfi_offset 6, -8
 2687              		.cfi_offset 14, -4
 2688 0002 8AB0     		sub	sp, sp, #40
 2689              	.LCFI32:
 2690              		.cfi_def_cfa_offset 56
 2691 0004 1646     		mov	r6, r2
 2692              	.LVL355:
 500:Src/strategy.c ****   //Get size and init first permutation
 2693              		.loc 1 500 0
 2694 0006 0025     		movs	r5, #0
 502:Src/strategy.c ****     if(mask&(1<<i)){
 2695              		.loc 1 502 0
 2696 0008 2B46     		mov	r3, r5
 2697 000a 06E0     		b	.L240
 2698              	.LVL356:
 2699              	.L241:
 506:Src/strategy.c ****   }
 2700              		.loc 1 506 0 discriminator 2
 2701 000c 0AAA     		add	r2, sp, #40
 2702 000e 02EB8302 		add	r2, r2, r3, lsl #2
 2703 0012 0024     		movs	r4, #0
 2704 0014 42F8144C 		str	r4, [r2, #-20]
 502:Src/strategy.c ****     if(mask&(1<<i)){
 2705              		.loc 1 502 0 discriminator 2
 2706 0018 0133     		adds	r3, r3, #1
 2707              	.LVL357:
 2708              	.L240:
 502:Src/strategy.c ****     if(mask&(1<<i)){
ARM GAS  /tmp/ccRda2as.s 			page 67


 2709              		.loc 1 502 0 is_stmt 0 discriminator 1
 2710 001a 042B     		cmp	r3, #4
 2711 001c 0DDC     		bgt	.L250
 503:Src/strategy.c ****       comb[n++] = comb_ref[i];
 2712              		.loc 1 503 0 is_stmt 1
 2713 001e 41FA03F2 		asr	r2, r1, r3
 2714 0022 12F0010F 		tst	r2, #1
 2715 0026 F1D0     		beq	.L241
 2716              	.LVL358:
 504:Src/strategy.c ****     }
 2717              		.loc 1 504 0
 2718 0028 50F82340 		ldr	r4, [r0, r3, lsl #2]
 2719 002c 0AAA     		add	r2, sp, #40
 2720 002e 02EB8502 		add	r2, r2, r5, lsl #2
 2721 0032 42F8284C 		str	r4, [r2, #-40]
 2722 0036 0135     		adds	r5, r5, #1
 2723              	.LVL359:
 2724 0038 E8E7     		b	.L241
 2725              	.L250:
 509:Src/strategy.c ****     
 2726              		.loc 1 509 0
 2727 003a 3246     		mov	r2, r6
 2728 003c 2946     		mov	r1, r5
 2729              	.LVL360:
 2730 003e 6846     		mov	r0, sp
 2731              	.LVL361:
 2732 0040 FFF7FEFF 		bl	Eval_Permutation
 2733              	.LVL362:
 511:Src/strategy.c ****   while(i < n){
 2734              		.loc 1 511 0
 2735 0044 0024     		movs	r4, #0
 512:Src/strategy.c ****     if(c[i] < i){
 2736              		.loc 1 512 0
 2737 0046 1AE0     		b	.L243
 2738              	.LVL363:
 2739              	.L245:
 2740              	.LBB17:
 517:Src/strategy.c ****       }
 2741              		.loc 1 517 0
 2742 0048 0AAA     		add	r2, sp, #40
 2743 004a 02EB8303 		add	r3, r2, r3, lsl #2
 2744 004e 53F8281C 		ldr	r1, [r3, #-40]
 2745              	.LVL364:
 2746 0052 02EB8402 		add	r2, r2, r4, lsl #2
 2747 0056 52F8280C 		ldr	r0, [r2, #-40]
 2748 005a 43F8280C 		str	r0, [r3, #-40]
 2749 005e 42F8281C 		str	r1, [r2, #-40]
 2750              	.LVL365:
 2751              	.L246:
 2752              	.LBE17:
 520:Src/strategy.c **** 	
 2753              		.loc 1 520 0
 2754 0062 3246     		mov	r2, r6
 2755 0064 2946     		mov	r1, r5
 2756 0066 6846     		mov	r0, sp
 2757 0068 FFF7FEFF 		bl	Eval_Permutation
 2758              	.LVL366:
ARM GAS  /tmp/ccRda2as.s 			page 68


 522:Src/strategy.c ****       i = 0;
 2759              		.loc 1 522 0
 2760 006c 0AAB     		add	r3, sp, #40
 2761 006e 03EB8404 		add	r4, r3, r4, lsl #2
 2762              	.LVL367:
 2763 0072 54F8143C 		ldr	r3, [r4, #-20]
 2764 0076 0133     		adds	r3, r3, #1
 2765 0078 44F8143C 		str	r3, [r4, #-20]
 2766              	.LVL368:
 523:Src/strategy.c ****     }else{
 2767              		.loc 1 523 0
 2768 007c 0024     		movs	r4, #0
 2769              	.LVL369:
 2770              	.L243:
 512:Src/strategy.c ****     if(c[i] < i){
 2771              		.loc 1 512 0
 2772 007e AC42     		cmp	r4, r5
 2773 0080 1BDA     		bge	.L251
 513:Src/strategy.c ****       if(!(i%2)){
 2774              		.loc 1 513 0
 2775 0082 0AAB     		add	r3, sp, #40
 2776 0084 03EB8403 		add	r3, r3, r4, lsl #2
 2777 0088 53F8143C 		ldr	r3, [r3, #-20]
 2778 008c A342     		cmp	r3, r4
 2779 008e 0CDA     		bge	.L244
 514:Src/strategy.c **** 	swap(Cube*, comb[0], comb[i]);
 2780              		.loc 1 514 0
 2781 0090 14F0010F 		tst	r4, #1
 2782 0094 D8D1     		bne	.L245
 2783              	.LBB18:
 515:Src/strategy.c ****       }else{
 2784              		.loc 1 515 0
 2785 0096 009A     		ldr	r2, [sp]
 2786              	.LVL370:
 2787 0098 0AAB     		add	r3, sp, #40
 2788 009a 03EB8403 		add	r3, r3, r4, lsl #2
 2789 009e 53F8281C 		ldr	r1, [r3, #-40]
 2790 00a2 0091     		str	r1, [sp]
 2791 00a4 43F8282C 		str	r2, [r3, #-40]
 2792              	.LBE18:
 2793 00a8 DBE7     		b	.L246
 2794              	.LVL371:
 2795              	.L244:
 525:Src/strategy.c ****       i++;
 2796              		.loc 1 525 0
 2797 00aa 0AAB     		add	r3, sp, #40
 2798 00ac 03EB8403 		add	r3, r3, r4, lsl #2
 2799 00b0 0022     		movs	r2, #0
 2800 00b2 43F8142C 		str	r2, [r3, #-20]
 526:Src/strategy.c ****     }
 2801              		.loc 1 526 0
 2802 00b6 0134     		adds	r4, r4, #1
 2803              	.LVL372:
 2804 00b8 E1E7     		b	.L243
 2805              	.L251:
 529:Src/strategy.c **** 
 2806              		.loc 1 529 0
ARM GAS  /tmp/ccRda2as.s 			page 69


 2807 00ba 0AB0     		add	sp, sp, #40
 2808              	.LCFI33:
 2809              		.cfi_def_cfa_offset 16
 2810              		@ sp needed
 2811 00bc 70BD     		pop	{r4, r5, r6, pc}
 2812              		.cfi_endproc
 2813              	.LFE17:
 2815              		.section	.text.Select_Building_Materials,"ax",%progbits
 2816              		.align	1
 2817              		.global	Select_Building_Materials
 2818              		.syntax unified
 2819              		.thumb
 2820              		.thumb_func
 2821              		.fpu fpv4-sp-d16
 2823              	Select_Building_Materials:
 2824              	.LFB15:
 296:Src/strategy.c ****   //Checking current construction
 2825              		.loc 1 296 0
 2826              		.cfi_startproc
 2827              		@ args = 0, pretend = 0, frame = 48
 2828              		@ frame_needed = 0, uses_anonymous_args = 0
 2829              	.LVL373:
 2830 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2831              	.LCFI34:
 2832              		.cfi_def_cfa_offset 36
 2833              		.cfi_offset 4, -36
 2834              		.cfi_offset 5, -32
 2835              		.cfi_offset 6, -28
 2836              		.cfi_offset 7, -24
 2837              		.cfi_offset 8, -20
 2838              		.cfi_offset 9, -16
 2839              		.cfi_offset 10, -12
 2840              		.cfi_offset 11, -8
 2841              		.cfi_offset 14, -4
 2842 0004 2DED068B 		vpush.64	{d8, d9, d10}
 2843              	.LCFI35:
 2844              		.cfi_def_cfa_offset 60
 2845              		.cfi_offset 80, -60
 2846              		.cfi_offset 81, -56
 2847              		.cfi_offset 82, -52
 2848              		.cfi_offset 83, -48
 2849              		.cfi_offset 84, -44
 2850              		.cfi_offset 85, -40
 2851 0008 8FB0     		sub	sp, sp, #60
 2852              	.LCFI36:
 2853              		.cfi_def_cfa_offset 120
 2854 000a 8346     		mov	fp, r0
 2855              	.LVL374:
 307:Src/strategy.c ****   for(k = 0; k < NB_SETS; k++){
 2856              		.loc 1 307 0
 2857 000c 0023     		movs	r3, #0
 2858              	.LVL375:
 308:Src/strategy.c ****     Cube_Set *const current_set = &set[k];
 2859              		.loc 1 308 0
 2860 000e 1C46     		mov	r4, r3
 304:Src/strategy.c **** 
 2861              		.loc 1 304 0
ARM GAS  /tmp/ccRda2as.s 			page 70


 2862 0010 9946     		mov	r9, r3
 303:Src/strategy.c ****   int best_found = 0;
 2863              		.loc 1 303 0
 2864 0012 0793     		str	r3, [sp, #28]
 302:Src/strategy.c ****   int best_cubes_number = 0;
 2865              		.loc 1 302 0
 2866 0014 0593     		str	r3, [sp, #20]
 301:Src/strategy.c ****   uint8_t best_is_pattern_compatible = 0;
 2867              		.loc 1 301 0
 2868 0016 9FEDA89A 		vldr.32	s18, .L331
 300:Src/strategy.c ****   float best_distance = dist(0, 0, AREA_WIDTH, AREA_HEIGHT);
 2869              		.loc 1 300 0
 2870 001a A84B     		ldr	r3, .L331+4
 2871 001c 0693     		str	r3, [sp, #24]
 308:Src/strategy.c ****     Cube_Set *const current_set = &set[k];
 2872              		.loc 1 308 0
 2873 001e 49E2     		b	.L253
 2874              	.LVL376:
 2875              	.L300:
 2876              	.LBB19:
 2877              	.LBB20:
 328:Src/strategy.c ****       }else{
 2878              		.loc 1 328 0
 2879 0020 0026     		movs	r6, #0
 2880 0022 A4E2     		b	.L256
 2881              	.LVL377:
 2882              	.L257:
 337:Src/strategy.c ****         top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, mcbp + 2, stack_set);
 2883              		.loc 1 337 0
 2884 0024 A64B     		ldr	r3, .L331+8
 2885 0026 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 2886 0028 022B     		cmp	r3, #2
 2887 002a 00F29781 		bhi	.L302
 338:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, mcbp + 1, stack_set);
 2888              		.loc 1 338 0
 2889 002e 04EB8405 		add	r5, r4, r4, lsl #2
 2890              	.LVL378:
 2891 0032 A44B     		ldr	r3, .L331+12
 2892 0034 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2893              	.LVL379:
 2894 0036 2B18     		adds	r3, r5, r0
 2895 0038 03EB4302 		add	r2, r3, r3, lsl #1
 2896 003c 5100     		lsls	r1, r2, #1
 2897 003e A24A     		ldr	r2, .L331+16
 2898 0040 0A44     		add	r2, r2, r1
 2899 0042 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2900 0044 012A     		cmp	r2, #1
 2901 0046 51D9     		bls	.L263
 338:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, mcbp + 1, stack_set);
 2902              		.loc 1 338 0 is_stmt 0 discriminator 1
 2903 0048 0128     		cmp	r0, #1
 2904 004a 4AD0     		beq	.L321
 2905              	.L264:
 338:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, mcbp + 1, stack_set);
 2906              		.loc 1 338 0 discriminator 5
 2907 004c 03EB4303 		add	r3, r3, r3, lsl #1
 2908 0050 5A00     		lsls	r2, r3, #1
ARM GAS  /tmp/ccRda2as.s 			page 71


 2909 0052 9D4B     		ldr	r3, .L331+16
 2910 0054 1344     		add	r3, r3, r2
 2911 0056 0493     		str	r3, [sp, #16]
 2912              	.L265:
 2913              	.LVL380:
 339:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, mcbp + 2, stack_set);
 2914              		.loc 1 339 0 is_stmt 1 discriminator 8
 2915 0058 9A4B     		ldr	r3, .L331+12
 2916 005a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 2917 005c 2B18     		adds	r3, r5, r0
 2918 005e 03EB4302 		add	r2, r3, r3, lsl #1
 2919 0062 5100     		lsls	r1, r2, #1
 2920 0064 984A     		ldr	r2, .L331+16
 2921 0066 0A44     		add	r2, r2, r1
 2922 0068 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 2923 006a 012A     		cmp	r2, #1
 2924 006c 48D9     		bls	.L266
 339:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, mcbp + 2, stack_set);
 2925              		.loc 1 339 0 is_stmt 0 discriminator 1
 2926 006e 0128     		cmp	r0, #1
 2927 0070 41D0     		beq	.L322
 2928              	.L267:
 339:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, mcbp + 2, stack_set);
 2929              		.loc 1 339 0 discriminator 5
 2930 0072 03EB4303 		add	r3, r3, r3, lsl #1
 2931 0076 4FEA4308 		lsl	r8, r3, #1
 2932 007a 934B     		ldr	r3, .L331+16
 2933 007c 9844     		add	r8, r8, r3
 2934              	.L268:
 2935              	.LVL381:
 340:Src/strategy.c **** 	if(top != NULL && bottom != NULL && middle != NULL){
 2936              		.loc 1 340 0 is_stmt 1 discriminator 8
 2937 007e 914B     		ldr	r3, .L331+12
 2938 0080 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 2939 0082 0544     		add	r5, r5, r0
 2940 0084 05EB4503 		add	r3, r5, r5, lsl #1
 2941 0088 5A00     		lsls	r2, r3, #1
 2942 008a 8F4B     		ldr	r3, .L331+16
 2943 008c 1344     		add	r3, r3, r2
 2944 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2945 0090 012B     		cmp	r3, #1
 2946 0092 3FD9     		bls	.L269
 340:Src/strategy.c **** 	if(top != NULL && bottom != NULL && middle != NULL){
 2947              		.loc 1 340 0 is_stmt 0 discriminator 1
 2948 0094 0128     		cmp	r0, #1
 2949 0096 38D0     		beq	.L323
 2950              	.LVL382:
 2951              	.L270:
 340:Src/strategy.c **** 	if(top != NULL && bottom != NULL && middle != NULL){
 2952              		.loc 1 340 0 discriminator 5
 2953 0098 05EB4505 		add	r5, r5, r5, lsl #1
 2954 009c 6B00     		lsls	r3, r5, #1
 2955 009e 8A48     		ldr	r0, .L331+16
 2956 00a0 1844     		add	r0, r0, r3
 2957              	.L271:
 2958              	.LVL383:
 341:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
ARM GAS  /tmp/ccRda2as.s 			page 72


 2959              		.loc 1 341 0 is_stmt 1 discriminator 8
 2960 00a2 0499     		ldr	r1, [sp, #16]
 2961 00a4 0029     		cmp	r1, #0
 2962 00a6 00F05C81 		beq	.L303
 341:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 2963              		.loc 1 341 0 is_stmt 0 discriminator 1
 2964 00aa 0028     		cmp	r0, #0
 2965 00ac 00F05C81 		beq	.L304
 341:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 2966              		.loc 1 341 0 discriminator 2
 2967 00b0 B8F1000F 		cmp	r8, #0
 2968 00b4 00F05B81 		beq	.L305
 342:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 2969              		.loc 1 342 0 is_stmt 1
 2970 00b8 0D9B     		ldr	r3, [sp, #52]
 2971 00ba 5A1C     		adds	r2, r3, #1
 2972 00bc 0EAD     		add	r5, sp, #56
 2973 00be 05EB8303 		add	r3, r5, r3, lsl #2
 2974 00c2 43F8181C 		str	r1, [r3, #-24]
 343:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 2975              		.loc 1 343 0
 2976 00c6 531C     		adds	r3, r2, #1
 2977 00c8 05EB8202 		add	r2, r5, r2, lsl #2
 2978 00cc 42F8188C 		str	r8, [r2, #-24]
 344:Src/strategy.c **** 	  pattern_compatible = 1;
 2979              		.loc 1 344 0
 2980 00d0 5A1C     		adds	r2, r3, #1
 2981 00d2 0D92     		str	r2, [sp, #52]
 2982 00d4 05EB8303 		add	r3, r5, r3, lsl #2
 2983 00d8 43F8180C 		str	r0, [r3, #-24]
 2984              	.LVL384:
 345:Src/strategy.c **** 	}
 2985              		.loc 1 345 0
 2986 00dc 0123     		movs	r3, #1
 2987 00de 0493     		str	r3, [sp, #16]
 2988              	.LVL385:
 2989 00e0 21E1     		b	.L255
 2990              	.LVL386:
 2991              	.L321:
 338:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, mcbp + 1, stack_set);
 2992              		.loc 1 338 0 discriminator 4
 2993 00e2 B11C     		adds	r1, r6, #2
 2994 00e4 FAB2     		uxtb	r2, r7
 2995 00e6 521A     		subs	r2, r2, r1
 2996 00e8 022A     		cmp	r2, #2
 2997 00ea AFDD     		ble	.L264
 2998              	.L263:
 338:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, mcbp + 1, stack_set);
 2999              		.loc 1 338 0 is_stmt 0 discriminator 6
 3000 00ec 0021     		movs	r1, #0
 3001 00ee FFF7FEFF 		bl	Find_Cube
 3002              	.LVL387:
 3003 00f2 0490     		str	r0, [sp, #16]
 3004 00f4 B0E7     		b	.L265
 3005              	.LVL388:
 3006              	.L322:
 339:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, mcbp + 2, stack_set);
ARM GAS  /tmp/ccRda2as.s 			page 73


 3007              		.loc 1 339 0 is_stmt 1 discriminator 4
 3008 00f6 711C     		adds	r1, r6, #1
 3009 00f8 FAB2     		uxtb	r2, r7
 3010 00fa 521A     		subs	r2, r2, r1
 3011 00fc 022A     		cmp	r2, #2
 3012 00fe B8DD     		ble	.L267
 3013              	.L266:
 339:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, mcbp + 2, stack_set);
 3014              		.loc 1 339 0 is_stmt 0 discriminator 6
 3015 0100 0021     		movs	r1, #0
 3016 0102 FFF7FEFF 		bl	Find_Cube
 3017              	.LVL389:
 3018 0106 8046     		mov	r8, r0
 3019 0108 B9E7     		b	.L268
 3020              	.LVL390:
 3021              	.L323:
 340:Src/strategy.c **** 	if(top != NULL && bottom != NULL && middle != NULL){
 3022              		.loc 1 340 0 is_stmt 1 discriminator 4
 3023 010a 0236     		adds	r6, r6, #2
 3024              	.LVL391:
 3025 010c FFB2     		uxtb	r7, r7
 3026 010e BE1B     		subs	r6, r7, r6
 3027 0110 022E     		cmp	r6, #2
 3028 0112 C1DD     		ble	.L270
 3029              	.L269:
 340:Src/strategy.c **** 	if(top != NULL && bottom != NULL && middle != NULL){
 3030              		.loc 1 340 0 is_stmt 0 discriminator 6
 3031 0114 0021     		movs	r1, #0
 3032 0116 FFF7FEFF 		bl	Find_Cube
 3033              	.LVL392:
 3034 011a C2E7     		b	.L271
 3035              	.LVL393:
 3036              	.L259:
 349:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, 1, stack_set);
 3037              		.loc 1 349 0 is_stmt 1
 3038 011c 684B     		ldr	r3, .L331+8
 3039 011e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 3040 0120 032B     		cmp	r3, #3
 3041 0122 00F22781 		bhi	.L306
 350:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 3042              		.loc 1 350 0
 3043 0126 04EB8406 		add	r6, r4, r4, lsl #2
 3044              	.LVL394:
 3045 012a 664B     		ldr	r3, .L331+12
 3046 012c 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 3047 012e 3318     		adds	r3, r6, r0
 3048 0130 03EB4302 		add	r2, r3, r3, lsl #1
 3049 0134 5100     		lsls	r1, r2, #1
 3050 0136 644A     		ldr	r2, .L331+16
 3051 0138 0A44     		add	r2, r2, r1
 3052 013a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 3053 013c 012A     		cmp	r2, #1
 3054 013e 32D9     		bls	.L272
 350:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 3055              		.loc 1 350 0 is_stmt 0 discriminator 1
 3056 0140 0128     		cmp	r0, #1
 3057 0142 2CD0     		beq	.L324
ARM GAS  /tmp/ccRda2as.s 			page 74


 3058              	.L273:
 350:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 3059              		.loc 1 350 0 discriminator 5
 3060 0144 03EB4303 		add	r3, r3, r3, lsl #1
 3061 0148 5A00     		lsls	r2, r3, #1
 3062 014a 5F4F     		ldr	r7, .L331+16
 3063 014c 1744     		add	r7, r7, r2
 3064              	.L274:
 3065              	.LVL395:
 351:Src/strategy.c **** 	if(bottom != NULL && middle != NULL){
 3066              		.loc 1 351 0 is_stmt 1 discriminator 8
 3067 014e 5D4B     		ldr	r3, .L331+12
 3068 0150 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3069 0152 0644     		add	r6, r6, r0
 3070 0154 06EB4603 		add	r3, r6, r6, lsl #1
 3071 0158 5A00     		lsls	r2, r3, #1
 3072 015a 5B4B     		ldr	r3, .L331+16
 3073 015c 1344     		add	r3, r3, r2
 3074 015e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3075 0160 012B     		cmp	r3, #1
 3076 0162 27D9     		bls	.L275
 351:Src/strategy.c **** 	if(bottom != NULL && middle != NULL){
 3077              		.loc 1 351 0 is_stmt 0 discriminator 1
 3078 0164 0128     		cmp	r0, #1
 3079 0166 23D0     		beq	.L325
 3080              	.L276:
 351:Src/strategy.c **** 	if(bottom != NULL && middle != NULL){
 3081              		.loc 1 351 0 discriminator 5
 3082 0168 06EB4606 		add	r6, r6, r6, lsl #1
 3083 016c 7300     		lsls	r3, r6, #1
 3084 016e 5648     		ldr	r0, .L331+16
 3085 0170 1844     		add	r0, r0, r3
 3086              	.L277:
 3087              	.LVL396:
 352:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 3088              		.loc 1 352 0 is_stmt 1 discriminator 8
 3089 0172 002F     		cmp	r7, #0
 3090 0174 00F00181 		beq	.L307
 352:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 3091              		.loc 1 352 0 is_stmt 0 discriminator 1
 3092 0178 0028     		cmp	r0, #0
 3093 017a 00F00181 		beq	.L308
 353:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 3094              		.loc 1 353 0 is_stmt 1
 3095 017e 0D9A     		ldr	r2, [sp, #52]
 3096 0180 531C     		adds	r3, r2, #1
 3097 0182 0EA9     		add	r1, sp, #56
 3098 0184 01EB8202 		add	r2, r1, r2, lsl #2
 3099 0188 42F8187C 		str	r7, [r2, #-24]
 354:Src/strategy.c **** 	  pattern_compatible = 1;
 3100              		.loc 1 354 0
 3101 018c 5A1C     		adds	r2, r3, #1
 3102 018e 0D92     		str	r2, [sp, #52]
 3103 0190 01EB8303 		add	r3, r1, r3, lsl #2
 3104 0194 43F8180C 		str	r0, [r3, #-24]
 3105              	.LVL397:
 355:Src/strategy.c **** 	}
ARM GAS  /tmp/ccRda2as.s 			page 75


 3106              		.loc 1 355 0
 3107 0198 0123     		movs	r3, #1
 3108 019a 0493     		str	r3, [sp, #16]
 3109 019c C3E0     		b	.L255
 3110              	.LVL398:
 3111              	.L324:
 350:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 3112              		.loc 1 350 0 discriminator 4
 3113 019e FAB2     		uxtb	r2, r7
 3114 01a0 013A     		subs	r2, r2, #1
 3115 01a2 022A     		cmp	r2, #2
 3116 01a4 CEDD     		ble	.L273
 3117              	.L272:
 350:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 3118              		.loc 1 350 0 is_stmt 0 discriminator 6
 3119 01a6 0021     		movs	r1, #0
 3120 01a8 FFF7FEFF 		bl	Find_Cube
 3121              	.LVL399:
 3122 01ac 0746     		mov	r7, r0
 3123 01ae CEE7     		b	.L274
 3124              	.LVL400:
 3125              	.L325:
 351:Src/strategy.c **** 	if(bottom != NULL && middle != NULL){
 3126              		.loc 1 351 0 is_stmt 1 discriminator 4
 3127 01b0 022D     		cmp	r5, #2
 3128 01b2 D9D9     		bls	.L276
 3129              	.L275:
 351:Src/strategy.c **** 	if(bottom != NULL && middle != NULL){
 3130              		.loc 1 351 0 is_stmt 0 discriminator 6
 3131 01b4 0021     		movs	r1, #0
 3132 01b6 FFF7FEFF 		bl	Find_Cube
 3133              	.LVL401:
 3134 01ba DAE7     		b	.L277
 3135              	.LVL402:
 3136              	.L261:
 359:Src/strategy.c **** 	middle = CHECK_ACCESSIBILITY(k, PLAN_MIDDLE, nb_cubes_set, 0, stack_set);
 3137              		.loc 1 359 0 is_stmt 1
 3138 01bc 404B     		ldr	r3, .L331+8
 3139 01be 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 3140 01c0 032B     		cmp	r3, #3
 3141 01c2 00F2E080 		bhi	.L309
 360:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 1, stack_set);
 3142              		.loc 1 360 0
 3143 01c6 04EB8406 		add	r6, r4, r4, lsl #2
 3144              	.LVL403:
 3145 01ca 3E4B     		ldr	r3, .L331+12
 3146 01cc 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3147 01ce 3318     		adds	r3, r6, r0
 3148 01d0 03EB4302 		add	r2, r3, r3, lsl #1
 3149 01d4 5100     		lsls	r1, r2, #1
 3150 01d6 3C4A     		ldr	r2, .L331+16
 3151 01d8 0A44     		add	r2, r2, r1
 3152 01da 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 3153 01dc 012A     		cmp	r2, #1
 3154 01de 30D9     		bls	.L278
 360:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 1, stack_set);
 3155              		.loc 1 360 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccRda2as.s 			page 76


 3156 01e0 0128     		cmp	r0, #1
 3157 01e2 2CD0     		beq	.L326
 3158              	.L279:
 360:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 1, stack_set);
 3159              		.loc 1 360 0 discriminator 5
 3160 01e4 03EB4303 		add	r3, r3, r3, lsl #1
 3161 01e8 5A00     		lsls	r2, r3, #1
 3162 01ea 374D     		ldr	r5, .L331+16
 3163              	.LVL404:
 3164 01ec 1544     		add	r5, r5, r2
 3165              	.L280:
 3166              	.LVL405:
 361:Src/strategy.c **** 	if(middle != NULL && top != NULL){
 3167              		.loc 1 361 0 is_stmt 1 discriminator 8
 3168 01ee 354B     		ldr	r3, .L331+12
 3169 01f0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3170 01f2 0644     		add	r6, r6, r0
 3171 01f4 06EB4603 		add	r3, r6, r6, lsl #1
 3172 01f8 5A00     		lsls	r2, r3, #1
 3173 01fa 334B     		ldr	r3, .L331+16
 3174 01fc 1344     		add	r3, r3, r2
 3175 01fe 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3176 0200 012B     		cmp	r3, #1
 3177 0202 27D9     		bls	.L281
 361:Src/strategy.c **** 	if(middle != NULL && top != NULL){
 3178              		.loc 1 361 0 is_stmt 0 discriminator 1
 3179 0204 0128     		cmp	r0, #1
 3180 0206 21D0     		beq	.L327
 3181              	.L282:
 361:Src/strategy.c **** 	if(middle != NULL && top != NULL){
 3182              		.loc 1 361 0 discriminator 5
 3183 0208 06EB4606 		add	r6, r6, r6, lsl #1
 3184 020c 7300     		lsls	r3, r6, #1
 3185 020e 2E48     		ldr	r0, .L331+16
 3186 0210 1844     		add	r0, r0, r3
 3187              	.L283:
 3188              	.LVL406:
 362:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 3189              		.loc 1 362 0 is_stmt 1 discriminator 8
 3190 0212 002D     		cmp	r5, #0
 3191 0214 00F0BA80 		beq	.L310
 362:Src/strategy.c **** 	  found_cubes[nb_found++] = middle;
 3192              		.loc 1 362 0 is_stmt 0 discriminator 1
 3193 0218 0028     		cmp	r0, #0
 3194 021a 00F0BA80 		beq	.L311
 363:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 3195              		.loc 1 363 0 is_stmt 1
 3196 021e 0D9A     		ldr	r2, [sp, #52]
 3197 0220 531C     		adds	r3, r2, #1
 3198 0222 0EA9     		add	r1, sp, #56
 3199 0224 01EB8202 		add	r2, r1, r2, lsl #2
 3200 0228 42F8185C 		str	r5, [r2, #-24]
 364:Src/strategy.c **** 	  pattern_compatible = 1;
 3201              		.loc 1 364 0
 3202 022c 5A1C     		adds	r2, r3, #1
 3203 022e 0D92     		str	r2, [sp, #52]
 3204 0230 01EB8303 		add	r3, r1, r3, lsl #2
ARM GAS  /tmp/ccRda2as.s 			page 77


 3205 0234 43F8180C 		str	r0, [r3, #-24]
 3206              	.LVL407:
 365:Src/strategy.c **** 	}
 3207              		.loc 1 365 0
 3208 0238 0123     		movs	r3, #1
 3209 023a 0493     		str	r3, [sp, #16]
 3210 023c 73E0     		b	.L255
 3211              	.LVL408:
 3212              	.L326:
 360:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 1, stack_set);
 3213              		.loc 1 360 0 discriminator 4
 3214 023e 022D     		cmp	r5, #2
 3215 0240 D0D9     		bls	.L279
 3216              	.L278:
 360:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 1, stack_set);
 3217              		.loc 1 360 0 is_stmt 0 discriminator 6
 3218 0242 0021     		movs	r1, #0
 3219 0244 FFF7FEFF 		bl	Find_Cube
 3220              	.LVL409:
 3221 0248 0546     		mov	r5, r0
 3222              	.LVL410:
 3223 024a D0E7     		b	.L280
 3224              	.LVL411:
 3225              	.L327:
 361:Src/strategy.c **** 	if(middle != NULL && top != NULL){
 3226              		.loc 1 361 0 is_stmt 1 discriminator 4
 3227 024c FBB2     		uxtb	r3, r7
 3228 024e 013B     		subs	r3, r3, #1
 3229 0250 022B     		cmp	r3, #2
 3230 0252 D9DD     		ble	.L282
 3231              	.L281:
 361:Src/strategy.c **** 	if(middle != NULL && top != NULL){
 3232              		.loc 1 361 0 is_stmt 0 discriminator 6
 3233 0254 0021     		movs	r1, #0
 3234 0256 FFF7FEFF 		bl	Find_Cube
 3235              	.LVL412:
 3236 025a DAE7     		b	.L283
 3237              	.LVL413:
 3238              	.L262:
 369:Src/strategy.c **** 	top = CHECK_ACCESSIBILITY(k, PLAN_TOP, nb_cubes_set, 0, stack_set);
 3239              		.loc 1 369 0 is_stmt 1
 3240 025c 184B     		ldr	r3, .L331+8
 3241 025e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 3242 0260 042B     		cmp	r3, #4
 3243 0262 00F29980 		bhi	.L312
 370:Src/strategy.c **** 	if(top != NULL){
 3244              		.loc 1 370 0
 3245 0266 04EB8403 		add	r3, r4, r4, lsl #2
 3246 026a 164A     		ldr	r2, .L331+12
 3247 026c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 3248 026e 0344     		add	r3, r3, r0
 3249 0270 03EB4302 		add	r2, r3, r3, lsl #1
 3250 0274 5100     		lsls	r1, r2, #1
 3251 0276 144A     		ldr	r2, .L331+16
 3252 0278 0A44     		add	r2, r2, r1
 3253 027a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 3254 027c 012A     		cmp	r2, #1
ARM GAS  /tmp/ccRda2as.s 			page 78


 3255 027e 16D9     		bls	.L284
 370:Src/strategy.c **** 	if(top != NULL){
 3256              		.loc 1 370 0 is_stmt 0 discriminator 1
 3257 0280 0128     		cmp	r0, #1
 3258 0282 12D0     		beq	.L328
 3259              	.L285:
 370:Src/strategy.c **** 	if(top != NULL){
 3260              		.loc 1 370 0 discriminator 5
 3261 0284 03EB4303 		add	r3, r3, r3, lsl #1
 3262 0288 5A00     		lsls	r2, r3, #1
 3263 028a 0F48     		ldr	r0, .L331+16
 3264 028c 1044     		add	r0, r0, r2
 3265              	.L286:
 3266              	.LVL414:
 371:Src/strategy.c **** 	  found_cubes[nb_found++] = top;
 3267              		.loc 1 371 0 is_stmt 1 discriminator 8
 3268 028e 0028     		cmp	r0, #0
 3269 0290 00F08580 		beq	.L313
 372:Src/strategy.c **** 	  pattern_compatible = 1;
 3270              		.loc 1 372 0
 3271 0294 0D9B     		ldr	r3, [sp, #52]
 3272 0296 5A1C     		adds	r2, r3, #1
 3273 0298 0D92     		str	r2, [sp, #52]
 3274 029a 0EAA     		add	r2, sp, #56
 3275 029c 02EB8303 		add	r3, r2, r3, lsl #2
 3276 02a0 43F8180C 		str	r0, [r3, #-24]
 3277              	.LVL415:
 373:Src/strategy.c **** 	}
 3278              		.loc 1 373 0
 3279 02a4 0123     		movs	r3, #1
 3280 02a6 0493     		str	r3, [sp, #16]
 3281 02a8 3DE0     		b	.L255
 3282              	.LVL416:
 3283              	.L328:
 370:Src/strategy.c **** 	if(top != NULL){
 3284              		.loc 1 370 0 discriminator 4
 3285 02aa 022D     		cmp	r5, #2
 3286 02ac EAD9     		bls	.L285
 3287              	.L284:
 370:Src/strategy.c **** 	if(top != NULL){
 3288              		.loc 1 370 0 is_stmt 0 discriminator 6
 3289 02ae 0021     		movs	r1, #0
 3290 02b0 FFF7FEFF 		bl	Find_Cube
 3291              	.LVL417:
 3292 02b4 EBE7     		b	.L286
 3293              	.L332:
 3294 02b6 00BF     		.align	2
 3295              	.L331:
 3296 02b8 D2586145 		.word	1164007634
 3297 02bc 00000000 		.word	.LANCHOR5
 3298 02c0 00000000 		.word	.LANCHOR6
 3299 02c4 00000000 		.word	.LANCHOR2
 3300 02c8 00000000 		.word	.LANCHOR0
 3301              	.L260:
 377:Src/strategy.c **** 	bottom = CHECK_ACCESSIBILITY(k, PLAN_BOTTOM, nb_cubes_set, 0, stack_set);
 3302              		.loc 1 377 0 is_stmt 1
 3303 02cc BA4B     		ldr	r3, .L333+8
ARM GAS  /tmp/ccRda2as.s 			page 79


 3304 02ce 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 3305 02d0 042B     		cmp	r3, #4
 3306 02d2 67D8     		bhi	.L314
 378:Src/strategy.c **** 	if(bottom != NULL){
 3307              		.loc 1 378 0
 3308 02d4 04EB8403 		add	r3, r4, r4, lsl #2
 3309 02d8 B84A     		ldr	r2, .L333+12
 3310 02da 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 3311 02dc 0344     		add	r3, r3, r0
 3312 02de 03EB4302 		add	r2, r3, r3, lsl #1
 3313 02e2 5100     		lsls	r1, r2, #1
 3314 02e4 B64A     		ldr	r2, .L333+16
 3315 02e6 0A44     		add	r2, r2, r1
 3316 02e8 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 3317 02ea 012A     		cmp	r2, #1
 3318 02ec 15D9     		bls	.L287
 378:Src/strategy.c **** 	if(bottom != NULL){
 3319              		.loc 1 378 0 is_stmt 0 discriminator 1
 3320 02ee 0128     		cmp	r0, #1
 3321 02f0 11D0     		beq	.L329
 3322              	.L288:
 378:Src/strategy.c **** 	if(bottom != NULL){
 3323              		.loc 1 378 0 discriminator 5
 3324 02f2 03EB4303 		add	r3, r3, r3, lsl #1
 3325 02f6 5A00     		lsls	r2, r3, #1
 3326 02f8 B148     		ldr	r0, .L333+16
 3327 02fa 1044     		add	r0, r0, r2
 3328              	.L289:
 3329              	.LVL418:
 379:Src/strategy.c **** 	  found_cubes[nb_found++] = bottom;
 3330              		.loc 1 379 0 is_stmt 1 discriminator 8
 3331 02fc 0028     		cmp	r0, #0
 3332 02fe 54D0     		beq	.L315
 380:Src/strategy.c **** 	  pattern_compatible = 1;
 3333              		.loc 1 380 0
 3334 0300 0D9B     		ldr	r3, [sp, #52]
 3335 0302 5A1C     		adds	r2, r3, #1
 3336 0304 0D92     		str	r2, [sp, #52]
 3337 0306 0EAA     		add	r2, sp, #56
 3338 0308 02EB8303 		add	r3, r2, r3, lsl #2
 3339 030c 43F8180C 		str	r0, [r3, #-24]
 3340              	.LVL419:
 381:Src/strategy.c **** 	}
 3341              		.loc 1 381 0
 3342 0310 0123     		movs	r3, #1
 3343 0312 0493     		str	r3, [sp, #16]
 3344 0314 07E0     		b	.L255
 3345              	.LVL420:
 3346              	.L329:
 378:Src/strategy.c **** 	if(bottom != NULL){
 3347              		.loc 1 378 0 discriminator 4
 3348 0316 022D     		cmp	r5, #2
 3349 0318 EBD9     		bls	.L288
 3350              	.L287:
 378:Src/strategy.c **** 	if(bottom != NULL){
 3351              		.loc 1 378 0 is_stmt 0 discriminator 6
 3352 031a 0021     		movs	r1, #0
ARM GAS  /tmp/ccRda2as.s 			page 80


 3353 031c FFF7FEFF 		bl	Find_Cube
 3354              	.LVL421:
 3355 0320 ECE7     		b	.L289
 3356              	.LVL422:
 3357              	.L298:
 3358              	.LBE20:
 388:Src/strategy.c ****     }
 3359              		.loc 1 388 0 is_stmt 1
 3360 0322 0123     		movs	r3, #1
 3361 0324 0493     		str	r3, [sp, #16]
 3362              	.LVL423:
 3363              	.L255:
 392:Src/strategy.c ****       //printf("Ignoring uncompatible set\n");
 3364              		.loc 1 392 0
 3365 0326 059B     		ldr	r3, [sp, #20]
 3366 0328 1BB1     		cbz	r3, .L290
 392:Src/strategy.c ****       //printf("Ignoring uncompatible set\n");
 3367              		.loc 1 392 0 is_stmt 0 discriminator 1
 3368 032a 049B     		ldr	r3, [sp, #16]
 3369 032c 002B     		cmp	r3, #0
 3370 032e 00F0C080 		beq	.L296
 3371              	.L290:
 398:Src/strategy.c **** 
 3372              		.loc 1 398 0 is_stmt 1
 3373 0332 A14B     		ldr	r3, .L333+8
 3374 0334 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 3375 0336 C3F10503 		rsb	r3, r3, #5
 3376 033a 0D9A     		ldr	r2, [sp, #52]
 3377 033c 9B1A     		subs	r3, r3, r2
 3378 033e 0093     		str	r3, [sp]
 3379 0340 0DAB     		add	r3, sp, #52
 3380 0342 08AA     		add	r2, sp, #32
 3381 0344 0121     		movs	r1, #1
 3382 0346 0020     		movs	r0, #0
 3383 0348 FFF7FEFF 		bl	Find_Cubes
 3384              	.LVL424:
 403:Src/strategy.c ****       distance += dist(current_set->x, current_set->y, found_cubes[i]->x, found_cubes[i]->y);
 3385              		.loc 1 403 0
 3386 034c 0025     		movs	r5, #0
 3387 034e 72E0     		b	.L291
 3388              	.LVL425:
 3389              	.L299:
 388:Src/strategy.c ****     }
 3390              		.loc 1 388 0
 3391 0350 0123     		movs	r3, #1
 3392 0352 0493     		str	r3, [sp, #16]
 3393 0354 E7E7     		b	.L255
 3394              	.LVL426:
 3395              	.L301:
 324:Src/strategy.c ****     if(valid_plan && build_ctx.construction.plan_state != FSM_PLAN_COMPLETE){
 3396              		.loc 1 324 0
 3397 0356 0023     		movs	r3, #0
 3398 0358 0493     		str	r3, [sp, #16]
 3399 035a E4E7     		b	.L255
 3400              	.L302:
 3401 035c 0023     		movs	r3, #0
 3402 035e 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccRda2as.s 			page 81


 3403 0360 E1E7     		b	.L255
 3404              	.LVL427:
 3405              	.L303:
 3406 0362 0023     		movs	r3, #0
 3407 0364 0493     		str	r3, [sp, #16]
 3408              	.LVL428:
 3409 0366 DEE7     		b	.L255
 3410              	.LVL429:
 3411              	.L304:
 3412 0368 0023     		movs	r3, #0
 3413 036a 0493     		str	r3, [sp, #16]
 3414              	.LVL430:
 3415 036c DBE7     		b	.L255
 3416              	.LVL431:
 3417              	.L305:
 3418 036e 0023     		movs	r3, #0
 3419 0370 0493     		str	r3, [sp, #16]
 3420              	.LVL432:
 3421 0372 D8E7     		b	.L255
 3422              	.LVL433:
 3423              	.L306:
 3424 0374 0023     		movs	r3, #0
 3425 0376 0493     		str	r3, [sp, #16]
 3426 0378 D5E7     		b	.L255
 3427              	.LVL434:
 3428              	.L307:
 3429 037a 0023     		movs	r3, #0
 3430 037c 0493     		str	r3, [sp, #16]
 3431 037e D2E7     		b	.L255
 3432              	.L308:
 3433 0380 0023     		movs	r3, #0
 3434 0382 0493     		str	r3, [sp, #16]
 3435 0384 CFE7     		b	.L255
 3436              	.LVL435:
 3437              	.L309:
 3438 0386 0023     		movs	r3, #0
 3439 0388 0493     		str	r3, [sp, #16]
 3440 038a CCE7     		b	.L255
 3441              	.LVL436:
 3442              	.L310:
 3443 038c 0023     		movs	r3, #0
 3444 038e 0493     		str	r3, [sp, #16]
 3445 0390 C9E7     		b	.L255
 3446              	.L311:
 3447 0392 0023     		movs	r3, #0
 3448 0394 0493     		str	r3, [sp, #16]
 3449 0396 C6E7     		b	.L255
 3450              	.LVL437:
 3451              	.L312:
 3452 0398 0023     		movs	r3, #0
 3453 039a 0493     		str	r3, [sp, #16]
 3454 039c C3E7     		b	.L255
 3455              	.LVL438:
 3456              	.L313:
 3457 039e 0023     		movs	r3, #0
 3458 03a0 0493     		str	r3, [sp, #16]
 3459 03a2 C0E7     		b	.L255
ARM GAS  /tmp/ccRda2as.s 			page 82


 3460              	.LVL439:
 3461              	.L314:
 3462 03a4 0023     		movs	r3, #0
 3463 03a6 0493     		str	r3, [sp, #16]
 3464 03a8 BDE7     		b	.L255
 3465              	.LVL440:
 3466              	.L315:
 3467 03aa 0023     		movs	r3, #0
 3468 03ac 0493     		str	r3, [sp, #16]
 3469 03ae BAE7     		b	.L255
 3470              	.LVL441:
 3471              	.L292:
 404:Src/strategy.c ****     }
 3472              		.loc 1 404 0 discriminator 3
 3473 03b0 0EAB     		add	r3, sp, #56
 3474 03b2 03EB8508 		add	r8, r3, r5, lsl #2
 3475 03b6 58F8183C 		ldr	r3, [r8, #-24]
 3476 03ba 9888     		ldrh	r0, [r3, #4]
 3477 03bc 814F     		ldr	r7, .L333+20
 3478 03be 6300     		lsls	r3, r4, #1
 3479 03c0 2344     		add	r3, r3, r4
 3480 03c2 5E00     		lsls	r6, r3, #1
 3481 03c4 BB19     		adds	r3, r7, r6
 3482 03c6 5B88     		ldrh	r3, [r3, #2]
 3483 03c8 9FED798B 		vldr.64	d8, .L333
 3484 03cc C01A     		subs	r0, r0, r3
 3485 03ce FFF7FEFF 		bl	__aeabi_i2d
 3486              	.LVL442:
 3487 03d2 B0EE481A 		vmov.f32	s2, s16
 3488 03d6 F0EE681A 		vmov.f32	s3, s17
 3489 03da 41EC100B 		vmov	d0, r0, r1
 3490 03de FFF7FEFF 		bl	pow
 3491              	.LVL443:
 3492 03e2 B0EE40AA 		vmov.f32	s20, s0
 3493 03e6 F0EE60AA 		vmov.f32	s21, s1
 3494 03ea 58F8183C 		ldr	r3, [r8, #-24]
 3495 03ee 5888     		ldrh	r0, [r3, #2]
 3496 03f0 BB5B     		ldrh	r3, [r7, r6]
 3497 03f2 C01A     		subs	r0, r0, r3
 3498 03f4 FFF7FEFF 		bl	__aeabi_i2d
 3499              	.LVL444:
 3500 03f8 B0EE481A 		vmov.f32	s2, s16
 3501 03fc F0EE681A 		vmov.f32	s3, s17
 3502 0400 41EC100B 		vmov	d0, r0, r1
 3503 0404 FFF7FEFF 		bl	pow
 3504              	.LVL445:
 3505 0408 53EC102B 		vmov	r2, r3, d0
 3506 040c 51EC1A0B 		vmov	r0, r1, d10
 3507 0410 FFF7FEFF 		bl	__aeabi_dadd
 3508              	.LVL446:
 3509 0414 41EC100B 		vmov	d0, r0, r1
 3510 0418 FFF7FEFF 		bl	sqrt
 3511              	.LVL447:
 3512 041c 57EC106B 		vmov	r6, r7, d0
 3513 0420 0398     		ldr	r0, [sp, #12]	@ float
 3514 0422 FFF7FEFF 		bl	__aeabi_f2d
 3515              	.LVL448:
ARM GAS  /tmp/ccRda2as.s 			page 83


 3516 0426 3246     		mov	r2, r6
 3517 0428 3B46     		mov	r3, r7
 3518 042a FFF7FEFF 		bl	__aeabi_dadd
 3519              	.LVL449:
 3520 042e FFF7FEFF 		bl	__aeabi_d2f
 3521              	.LVL450:
 3522 0432 0390     		str	r0, [sp, #12]	@ float
 3523              	.LVL451:
 403:Src/strategy.c ****       distance += dist(current_set->x, current_set->y, found_cubes[i]->x, found_cubes[i]->y);
 3524              		.loc 1 403 0 discriminator 3
 3525 0434 0135     		adds	r5, r5, #1
 3526              	.LVL452:
 3527              	.L291:
 403:Src/strategy.c ****       distance += dist(current_set->x, current_set->y, found_cubes[i]->x, found_cubes[i]->y);
 3528              		.loc 1 403 0 is_stmt 0 discriminator 1
 3529 0436 0D9A     		ldr	r2, [sp, #52]
 3530 0438 AA42     		cmp	r2, r5
 3531 043a B9DC     		bgt	.L292
 3532              	.LVL453:
 410:Src/strategy.c ****       if(current_set->availability < best_set->availability){
 3533              		.loc 1 410 0 is_stmt 1
 3534 043c 059B     		ldr	r3, [sp, #20]
 3535 043e 002B     		cmp	r3, #0
 3536 0440 00F0A680 		beq	.L316
 410:Src/strategy.c ****       if(current_set->availability < best_set->availability){
 3537              		.loc 1 410 0 is_stmt 0 discriminator 1
 3538 0444 049B     		ldr	r3, [sp, #16]
 3539 0446 002B     		cmp	r3, #0
 3540 0448 00F0A480 		beq	.L317
 411:Src/strategy.c **** 	continue;
 3541              		.loc 1 411 0 is_stmt 1
 3542 044c 04EB4403 		add	r3, r4, r4, lsl #1
 3543 0450 5900     		lsls	r1, r3, #1
 3544 0452 5C4B     		ldr	r3, .L333+20
 3545 0454 0B44     		add	r3, r3, r1
 3546 0456 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 3547 0458 069B     		ldr	r3, [sp, #24]
 3548 045a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3549 045c 9942     		cmp	r1, r3
 3550 045e 28D3     		bcc	.L296
 414:Src/strategy.c **** 	if(distance > best_distance){
 3551              		.loc 1 414 0
 3552 0460 40F09A80 		bne	.L318
 415:Src/strategy.c **** 	  continue;
 3553              		.loc 1 415 0
 3554 0464 DDED037A 		vldr.32	s15, [sp, #12]
 3555 0468 B4EEE79A 		vcmpe.f32	s18, s15
 3556 046c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3557 0470 1FD4     		bmi	.L296
 417:Src/strategy.c **** 	  if(nb_cubes_set <= best_cubes_number){
 3558              		.loc 1 417 0
 3559 0472 B4EE679A 		vcmp.f32	s18, s15
 3560 0476 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3561 047a 40F08F80 		bne	.L319
 418:Src/strategy.c **** 	    continue;
 3562              		.loc 1 418 0
 3563 047e D3B2     		uxtb	r3, r2
ARM GAS  /tmp/ccRda2as.s 			page 84


 3564 0480 0799     		ldr	r1, [sp, #28]
 3565 0482 9942     		cmp	r1, r3
 3566 0484 15DA     		bge	.L296
 3567 0486 0023     		movs	r3, #0
 3568 0488 07E0     		b	.L294
 3569              	.LVL454:
 3570              	.L295:
 433:Src/strategy.c ****     }
 3571              		.loc 1 433 0 discriminator 3
 3572 048a 0EA9     		add	r1, sp, #56
 3573 048c 01EB8301 		add	r1, r1, r3, lsl #2
 3574 0490 51F8181C 		ldr	r1, [r1, #-24]
 3575 0494 4BF82310 		str	r1, [fp, r3, lsl #2]
 432:Src/strategy.c ****       materials[i] = found_cubes[i];
 3576              		.loc 1 432 0 discriminator 3
 3577 0498 0133     		adds	r3, r3, #1
 3578              	.LVL455:
 3579              	.L294:
 432:Src/strategy.c ****       materials[i] = found_cubes[i];
 3580              		.loc 1 432 0 is_stmt 0 discriminator 1
 3581 049a 0D99     		ldr	r1, [sp, #52]
 3582 049c 9942     		cmp	r1, r3
 3583 049e F4DC     		bgt	.L295
 3584 04a0 8946     		mov	r9, r1
 3585              	.LVL456:
 3586 04a2 D3B2     		uxtb	r3, r2
 3587              	.LVL457:
 3588 04a4 0793     		str	r3, [sp, #28]
 3589              	.LVL458:
 437:Src/strategy.c ****     best_cubes_number = nb_cubes_set;
 3590              		.loc 1 437 0 is_stmt 1
 3591 04a6 049B     		ldr	r3, [sp, #16]
 3592              	.LVL459:
 3593 04a8 0593     		str	r3, [sp, #20]
 436:Src/strategy.c ****     best_is_pattern_compatible = pattern_compatible;
 3594              		.loc 1 436 0
 3595 04aa 9DED039A 		vldr.32	s18, [sp, #12]
 431:Src/strategy.c ****     for(i = 0; i < nb_found; i++){
 3596              		.loc 1 431 0
 3597 04ae CDF818A0 		str	r10, [sp, #24]
 3598              	.LVL460:
 3599              	.L296:
 3600              	.LBE19:
 308:Src/strategy.c ****     Cube_Set *const current_set = &set[k];
 3601              		.loc 1 308 0 discriminator 2
 3602 04b2 0134     		adds	r4, r4, #1
 3603              	.LVL461:
 3604              	.L253:
 308:Src/strategy.c ****     Cube_Set *const current_set = &set[k];
 3605              		.loc 1 308 0 is_stmt 0 discriminator 1
 3606 04b4 052C     		cmp	r4, #5
 3607 04b6 73DC     		bgt	.L330
 3608              	.LBB22:
 309:Src/strategy.c ****     Cube *found_cubes[CUBES_PER_SET]; nb_found = 0;
 3609              		.loc 1 309 0 is_stmt 1
 3610 04b8 424E     		ldr	r6, .L333+20
 3611 04ba 6300     		lsls	r3, r4, #1
ARM GAS  /tmp/ccRda2as.s 			page 85


 3612 04bc 2344     		add	r3, r3, r4
 3613 04be 5D00     		lsls	r5, r3, #1
 3614 04c0 06EB050A 		add	r10, r6, r5
 3615              	.LVL462:
 310:Src/strategy.c ****     float distance = dist(me.x, me.y, current_set->x, current_set->y);
 3616              		.loc 1 310 0
 3617 04c4 0023     		movs	r3, #0
 3618 04c6 0D93     		str	r3, [sp, #52]
 311:Src/strategy.c ****     
 3619              		.loc 1 311 0
 3620 04c8 BAF80200 		ldrh	r0, [r10, #2]
 3621 04cc 3E4F     		ldr	r7, .L333+24
 3622 04ce 7B88     		ldrh	r3, [r7, #2]
 3623 04d0 9FED378B 		vldr.64	d8, .L333
 3624 04d4 C01A     		subs	r0, r0, r3
 3625 04d6 FFF7FEFF 		bl	__aeabi_i2d
 3626              	.LVL463:
 3627 04da B0EE481A 		vmov.f32	s2, s16
 3628 04de F0EE681A 		vmov.f32	s3, s17
 3629 04e2 41EC100B 		vmov	d0, r0, r1
 3630 04e6 FFF7FEFF 		bl	pow
 3631              	.LVL464:
 3632 04ea B0EE40AA 		vmov.f32	s20, s0
 3633 04ee F0EE60AA 		vmov.f32	s21, s1
 3634 04f2 705B     		ldrh	r0, [r6, r5]
 3635 04f4 3B88     		ldrh	r3, [r7]
 3636 04f6 C01A     		subs	r0, r0, r3
 3637 04f8 FFF7FEFF 		bl	__aeabi_i2d
 3638              	.LVL465:
 3639 04fc B0EE481A 		vmov.f32	s2, s16
 3640 0500 F0EE681A 		vmov.f32	s3, s17
 3641 0504 41EC100B 		vmov	d0, r0, r1
 3642 0508 FFF7FEFF 		bl	pow
 3643              	.LVL466:
 3644 050c 53EC102B 		vmov	r2, r3, d0
 3645 0510 51EC1A0B 		vmov	r0, r1, d10
 3646 0514 FFF7FEFF 		bl	__aeabi_dadd
 3647              	.LVL467:
 3648 0518 41EC100B 		vmov	d0, r0, r1
 3649 051c FFF7FEFF 		bl	sqrt
 3650              	.LVL468:
 3651 0520 51EC100B 		vmov	r0, r1, d0
 3652 0524 FFF7FEFF 		bl	__aeabi_d2f
 3653              	.LVL469:
 3654 0528 0390     		str	r0, [sp, #12]	@ float
 3655              	.LVL470:
 315:Src/strategy.c ****     
 3656              		.loc 1 315 0
 3657 052a BAF80210 		ldrh	r1, [r10, #2]
 3658 052e 705B     		ldrh	r0, [r6, r5]
 3659              	.LVL471:
 3660 0530 FFF7FEFF 		bl	Cube_Sort
 3661              	.LVL472:
 319:Src/strategy.c ****     
 3662              		.loc 1 319 0
 3663 0534 9AF80430 		ldrb	r3, [r10, #4]	@ zero_extendqisi2
 3664 0538 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRda2as.s 			page 86


 3665 053a BAD0     		beq	.L296
 322:Src/strategy.c **** 
 3666              		.loc 1 322 0
 3667 053c 2046     		mov	r0, r4
 3668 053e FFF7FEFF 		bl	Get_Nb_Cubes_Set
 3669              	.LVL473:
 3670 0542 0746     		mov	r7, r0
 3671 0544 C5B2     		uxtb	r5, r0
 3672              	.LVL474:
 325:Src/strategy.c ****       uint8_t mcbp;//max cube before pattern
 3673              		.loc 1 325 0
 3674 0546 214B     		ldr	r3, .L333+28
 3675 0548 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3676 054a 002B     		cmp	r3, #0
 3677 054c 3FF4E9AE 		beq	.L298
 325:Src/strategy.c ****       uint8_t mcbp;//max cube before pattern
 3678              		.loc 1 325 0 is_stmt 0 discriminator 1
 3679 0550 194B     		ldr	r3, .L333+8
 3680 0552 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 3681 0554 052B     		cmp	r3, #5
 3682 0556 3FF4FBAE 		beq	.L299
 3683              	.LBB21:
 327:Src/strategy.c **** 	mcbp = 0;
 3684              		.loc 1 327 0 is_stmt 1
 3685 055a 002B     		cmp	r3, #0
 3686 055c 7FF460AD 		bne	.L300
 330:Src/strategy.c ****       }
 3687              		.loc 1 330 0
 3688 0560 154A     		ldr	r2, .L333+8
 3689 0562 167E     		ldrb	r6, [r2, #24]	@ zero_extendqisi2
 3690 0564 C6F10206 		rsb	r6, r6, #2
 3691 0568 26EAE676 		bic	r6, r6, r6, asr #31
 3692 056c F6B2     		uxtb	r6, r6
 3693              	.LVL475:
 3694              	.L256:
 335:Src/strategy.c ****       case FSM_PLAN_NONE:
 3695              		.loc 1 335 0
 3696 056e 042B     		cmp	r3, #4
 3697 0570 3FF6F1AE 		bhi	.L301
 3698 0574 01A2     		adr	r2, .L258
 3699 0576 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3700 057a 00BF     		.p2align 2
 3701              	.L258:
 3702 057c 25000000 		.word	.L257+1
 3703 0580 1D010000 		.word	.L259+1
 3704 0584 CD020000 		.word	.L260+1
 3705 0588 BD010000 		.word	.L261+1
 3706 058c 5D020000 		.word	.L262+1
 3707              	.LVL476:
 3708              		.p2align 1
 3709              	.L316:
 3710              	.LBE21:
 3711 0590 0023     		movs	r3, #0
 3712 0592 82E7     		b	.L294
 3713              	.L317:
 3714 0594 0023     		movs	r3, #0
 3715 0596 80E7     		b	.L294
ARM GAS  /tmp/ccRda2as.s 			page 87


 3716              	.L318:
 3717 0598 0023     		movs	r3, #0
 3718 059a 7EE7     		b	.L294
 3719              	.LVL477:
 3720              	.L319:
 3721 059c 0023     		movs	r3, #0
 3722 059e 7CE7     		b	.L294
 3723              	.LVL478:
 3724              	.L330:
 3725              	.LBE22:
 444:Src/strategy.c **** 
 3726              		.loc 1 444 0
 3727 05a0 4846     		mov	r0, r9
 3728 05a2 0FB0     		add	sp, sp, #60
 3729              	.LCFI37:
 3730              		.cfi_def_cfa_offset 60
 3731              		@ sp needed
 3732 05a4 BDEC068B 		vldm	sp!, {d8-d10}
 3733              	.LCFI38:
 3734              		.cfi_restore 84
 3735              		.cfi_restore 85
 3736              		.cfi_restore 82
 3737              		.cfi_restore 83
 3738              		.cfi_restore 80
 3739              		.cfi_restore 81
 3740              		.cfi_def_cfa_offset 36
 3741              	.LVL479:
 3742 05a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3743              	.LVL480:
 3744              	.L334:
 3745 05ac AFF30080 		.align	3
 3746              	.L333:
 3747 05b0 00000000 		.word	0
 3748 05b4 00000040 		.word	1073741824
 3749 05b8 00000000 		.word	.LANCHOR6
 3750 05bc 00000000 		.word	.LANCHOR2
 3751 05c0 00000000 		.word	.LANCHOR0
 3752 05c4 00000000 		.word	.LANCHOR5
 3753 05c8 00000000 		.word	me
 3754 05cc 00000000 		.word	.LANCHOR3
 3755              		.cfi_endproc
 3756              	.LFE15:
 3758              		.section	.text.John_The_Builder,"ax",%progbits
 3759              		.align	1
 3760              		.global	John_The_Builder
 3761              		.syntax unified
 3762              		.thumb
 3763              		.thumb_func
 3764              		.fpu fpv4-sp-d16
 3766              	John_The_Builder:
 3767              	.LFB16:
 447:Src/strategy.c ****   Cube *comb_ref[5];
 3768              		.loc 1 447 0
 3769              		.cfi_startproc
 3770              		@ args = 0, pretend = 0, frame = 24
 3771              		@ frame_needed = 0, uses_anonymous_args = 0
 3772 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccRda2as.s 			page 88


 3773              	.LCFI39:
 3774              		.cfi_def_cfa_offset 20
 3775              		.cfi_offset 4, -20
 3776              		.cfi_offset 5, -16
 3777              		.cfi_offset 6, -12
 3778              		.cfi_offset 7, -8
 3779              		.cfi_offset 14, -4
 3780 0002 87B0     		sub	sp, sp, #28
 3781              	.LCFI40:
 3782              		.cfi_def_cfa_offset 48
 450:Src/strategy.c ****   
 3783              		.loc 1 450 0
 3784 0004 0023     		movs	r3, #0
 3785 0006 0093     		str	r3, [sp]	@ float
 3786              	.LVL481:
 454:Src/strategy.c ****     comb_ref[i] = strat.materials[i];
 3787              		.loc 1 454 0
 3788 0008 0023     		movs	r3, #0
 3789 000a 0BE0     		b	.L336
 3790              	.LVL482:
 3791              	.L337:
 455:Src/strategy.c ****   }
 3792              		.loc 1 455 0 discriminator 3
 3793 000c 03F10E01 		add	r1, r3, #14
 3794 0010 2C4A     		ldr	r2, .L349
 3795 0012 02EB8102 		add	r2, r2, r1, lsl #2
 3796 0016 5168     		ldr	r1, [r2, #4]
 3797 0018 06AA     		add	r2, sp, #24
 3798 001a 02EB8302 		add	r2, r2, r3, lsl #2
 3799 001e 42F8141C 		str	r1, [r2, #-20]
 454:Src/strategy.c ****     comb_ref[i] = strat.materials[i];
 3800              		.loc 1 454 0 discriminator 3
 3801 0022 0133     		adds	r3, r3, #1
 3802              	.LVL483:
 3803              	.L336:
 454:Src/strategy.c ****     comb_ref[i] = strat.materials[i];
 3804              		.loc 1 454 0 is_stmt 0 discriminator 1
 3805 0024 274A     		ldr	r2, .L349
 3806 0026 156D     		ldr	r5, [r2, #80]
 3807 0028 9D42     		cmp	r5, r3
 3808 002a EFDC     		bgt	.L337
 461:Src/strategy.c ****     uint8_t mask = (1 << n) - 1;//As most binary '1' as n.
 3809              		.loc 1 461 0 is_stmt 1
 3810 002c 0126     		movs	r6, #1
 3811 002e 38E0     		b	.L338
 3812              	.LVL484:
 3813              	.L342:
 3814              	.LBB23:
 479:Src/strategy.c **** 	current--;
 3815              		.loc 1 479 0
 3816 0030 0132     		adds	r2, r2, #1
 3817              	.LVL485:
 3818 0032 D2B2     		uxtb	r2, r2
 3819              	.LVL486:
 480:Src/strategy.c ****       }
 3820              		.loc 1 480 0
 3821 0034 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccRda2as.s 			page 89


 3822              	.LVL487:
 3823 0036 DBB2     		uxtb	r3, r3
 3824              	.LVL488:
 3825              	.L341:
 478:Src/strategy.c **** 	nb_left++;
 3826              		.loc 1 478 0
 3827 0038 2146     		mov	r1, r4
 3828 003a 44FA03F0 		asr	r0, r4, r3
 3829 003e 10F0010F 		tst	r0, #1
 3830 0042 F5D1     		bne	.L342
 3831 0044 01E0     		b	.L343
 3832              	.L344:
 485:Src/strategy.c ****       }
 3833              		.loc 1 485 0
 3834 0046 013B     		subs	r3, r3, #1
 3835              	.LVL489:
 3836 0048 DBB2     		uxtb	r3, r3
 3837              	.LVL490:
 3838              	.L343:
 484:Src/strategy.c **** 	current--;
 3839              		.loc 1 484 0
 3840 004a 9C46     		mov	ip, r3
 3841 004c 41FA03F0 		asr	r0, r1, r3
 3842 0050 10F0010F 		tst	r0, #1
 3843 0054 F7D0     		beq	.L344
 487:Src/strategy.c ****       mask |= ((1<<(nb_left+1))-1)<<(current+1);
 3844              		.loc 1 487 0
 3845 0056 0121     		movs	r1, #1
 3846 0058 01FA03F3 		lsl	r3, r1, r3
 3847              	.LVL491:
 3848 005c 013B     		subs	r3, r3, #1
 3849 005e 5BB2     		sxtb	r3, r3
 3850 0060 1C40     		ands	r4, r4, r3
 3851              	.LVL492:
 3852 0062 64B2     		sxtb	r4, r4
 3853              	.LVL493:
 488:Src/strategy.c **** 
 3854              		.loc 1 488 0
 3855 0064 0A44     		add	r2, r2, r1
 3856              	.LVL494:
 3857 0066 01FA02F2 		lsl	r2, r1, r2
 3858 006a 013A     		subs	r2, r2, #1
 3859 006c 8C44     		add	ip, ip, r1
 3860 006e 02FA0CFC 		lsl	ip, r2, ip
 3861 0072 44EA0C04 		orr	r4, r4, ip
 3862              	.LVL495:
 3863 0076 E4B2     		uxtb	r4, r4
 3864              	.LVL496:
 490:Src/strategy.c ****     Eval_Combination(comb_ref, mask, &best_rank);
 3865              		.loc 1 490 0
 3866 0078 7B1E     		subs	r3, r7, #1
 3867 007a AA1B     		subs	r2, r5, r6
 3868 007c 9340     		lsls	r3, r3, r2
 3869 007e 9C42     		cmp	r4, r3
 3870 0080 09D0     		beq	.L347
 3871              	.L339:
 473:Src/strategy.c ****       
ARM GAS  /tmp/ccRda2as.s 			page 90


 3872              		.loc 1 473 0
 3873 0082 6A46     		mov	r2, sp
 3874 0084 2146     		mov	r1, r4
 3875 0086 01A8     		add	r0, sp, #4
 3876 0088 FFF7FEFF 		bl	Eval_Combination
 3877              	.LVL497:
 476:Src/strategy.c ****       nb_left = 0;
 3878              		.loc 1 476 0
 3879 008c EBB2     		uxtb	r3, r5
 3880 008e 013B     		subs	r3, r3, #1
 3881 0090 DBB2     		uxtb	r3, r3
 3882              	.LVL498:
 477:Src/strategy.c ****       while(mask&(1<<current)){
 3883              		.loc 1 477 0
 3884 0092 0022     		movs	r2, #0
 478:Src/strategy.c **** 	nb_left++;
 3885              		.loc 1 478 0
 3886 0094 D0E7     		b	.L341
 3887              	.LVL499:
 3888              	.L347:
 491:Src/strategy.c ****   }
 3889              		.loc 1 491 0
 3890 0096 6A46     		mov	r2, sp
 3891 0098 2146     		mov	r1, r4
 3892 009a 01A8     		add	r0, sp, #4
 3893 009c FFF7FEFF 		bl	Eval_Combination
 3894              	.LVL500:
 3895              	.L340:
 3896              	.LBE23:
 461:Src/strategy.c ****     uint8_t mask = (1 << n) - 1;//As most binary '1' as n.
 3897              		.loc 1 461 0 discriminator 2
 3898 00a0 0136     		adds	r6, r6, #1
 3899              	.LVL501:
 3900              	.L338:
 461:Src/strategy.c ****     uint8_t mask = (1 << n) - 1;//As most binary '1' as n.
 3901              		.loc 1 461 0 is_stmt 0 discriminator 1
 3902 00a2 B542     		cmp	r5, r6
 3903 00a4 0CDB     		blt	.L348
 3904              	.LBB24:
 462:Src/strategy.c ****     uint8_t nb_left;
 3905              		.loc 1 462 0 is_stmt 1
 3906 00a6 0127     		movs	r7, #1
 3907 00a8 B740     		lsls	r7, r7, r6
 3908 00aa FCB2     		uxtb	r4, r7
 3909 00ac 013C     		subs	r4, r4, #1
 3910 00ae E4B2     		uxtb	r4, r4
 3911              	.LVL502:
 466:Src/strategy.c ****       Eval_Combination(comb_ref, mask, &best_rank);
 3912              		.loc 1 466 0
 3913 00b0 B542     		cmp	r5, r6
 3914 00b2 E6D1     		bne	.L339
 467:Src/strategy.c ****       continue;
 3915              		.loc 1 467 0
 3916 00b4 6A46     		mov	r2, sp
 3917 00b6 2146     		mov	r1, r4
 3918 00b8 01A8     		add	r0, sp, #4
 3919 00ba FFF7FEFF 		bl	Eval_Combination
ARM GAS  /tmp/ccRda2as.s 			page 91


 3920              	.LVL503:
 468:Src/strategy.c ****     }
 3921              		.loc 1 468 0
 3922 00be EFE7     		b	.L340
 3923              	.LVL504:
 3924              	.L348:
 3925              	.LBE24:
 493:Src/strategy.c **** 
 3926              		.loc 1 493 0
 3927 00c0 07B0     		add	sp, sp, #28
 3928              	.LCFI41:
 3929              		.cfi_def_cfa_offset 20
 3930              		@ sp needed
 3931 00c2 F0BD     		pop	{r4, r5, r6, r7, pc}
 3932              	.LVL505:
 3933              	.L350:
 3934              		.align	2
 3935              	.L349:
 3936 00c4 00000000 		.word	strat
 3937              		.cfi_endproc
 3938              	.LFE16:
 3940              		.section	.text.Compute_Building_Strategy,"ax",%progbits
 3941              		.align	1
 3942              		.global	Compute_Building_Strategy
 3943              		.syntax unified
 3944              		.thumb
 3945              		.thumb_func
 3946              		.fpu fpv4-sp-d16
 3948              	Compute_Building_Strategy:
 3949              	.LFB11:
 231:Src/strategy.c ****   strat.nb_targets = 0;
 3950              		.loc 1 231 0
 3951              		.cfi_startproc
 3952              		@ args = 0, pretend = 0, frame = 0
 3953              		@ frame_needed = 0, uses_anonymous_args = 0
 3954 0000 10B5     		push	{r4, lr}
 3955              	.LCFI42:
 3956              		.cfi_def_cfa_offset 8
 3957              		.cfi_offset 4, -8
 3958              		.cfi_offset 14, -4
 232:Src/strategy.c ****   strat.nb_materials = Select_Building_Materials(strat.materials);
 3959              		.loc 1 232 0
 3960 0002 054C     		ldr	r4, .L353
 3961 0004 0023     		movs	r3, #0
 3962 0006 6365     		str	r3, [r4, #84]
 233:Src/strategy.c ****   //printf("Nb materials : %d\n", strat.nb_materials);
 3963              		.loc 1 233 0
 3964 0008 04F13C00 		add	r0, r4, #60
 3965 000c FFF7FEFF 		bl	Select_Building_Materials
 3966              	.LVL506:
 3967 0010 2065     		str	r0, [r4, #80]
 235:Src/strategy.c ****   //Eval_Move(&me, 205, 450);
 3968              		.loc 1 235 0
 3969 0012 FFF7FEFF 		bl	John_The_Builder
 3970              	.LVL507:
 238:Src/strategy.c **** 
 3971              		.loc 1 238 0
ARM GAS  /tmp/ccRda2as.s 			page 92


 3972 0016 10BD     		pop	{r4, pc}
 3973              	.L354:
 3974              		.align	2
 3975              	.L353:
 3976 0018 00000000 		.word	strat
 3977              		.cfi_endproc
 3978              	.LFE11:
 3980              		.comm	strat,100,4
 3981              		.comm	from_y,2,2
 3982              		.comm	from_x,2,2
 3983              		.global	set
 3984              		.global	cube
 3985              		.global	color_str
 3986              		.global	build_ctx
 3987              		.global	score
 3988              		.comm	me,24,4
 3989              		.comm	team,1,1
 3990              		.section	.bss.build_ctx,"aw",%nobits
 3991              		.align	2
 3992              		.set	.LANCHOR6,. + 0
 3995              	build_ctx:
 3996 0000 00000000 		.space	32
 3996      00000000 
 3996      00000000 
 3996      00000000 
 3996      00000000 
 3997              		.section	.bss.construction_plan,"aw",%nobits
 3998              		.align	2
 3999              		.set	.LANCHOR2,. + 0
 4002              	construction_plan:
 4003 0000 000000   		.space	3
 4004              		.section	.bss.cube_sort,"aw",%nobits
 4005              		.align	2
 4006              		.set	.LANCHOR1,. + 0
 4009              	cube_sort:
 4010 0000 00000000 		.space	120
 4010      00000000 
 4010      00000000 
 4010      00000000 
 4010      00000000 
 4011              		.section	.bss.score,"aw",%nobits
 4012              		.align	1
 4013              		.set	.LANCHOR4,. + 0
 4016              	score:
 4017 0000 0000     		.space	2
 4018              		.section	.bss.valid_plan,"aw",%nobits
 4019              		.set	.LANCHOR3,. + 0
 4022              	valid_plan:
 4023 0000 00       		.space	1
 4024              		.section	.data.color_str,"aw",%progbits
 4025              		.align	2
 4028              	color_str:
 4029 0000 47524545 		.ascii	"GREEN\000"
 4029      4E00
 4030 0006 00000000 		.space	10
 4030      00000000 
 4030      0000
ARM GAS  /tmp/ccRda2as.s 			page 93


 4031 0010 59454C4C 		.ascii	"YELLOW\000"
 4031      4F5700
 4032 0017 00000000 		.space	9
 4032      00000000 
 4032      00
 4033 0020 4F52414E 		.ascii	"ORANGE\000"
 4033      474500
 4034 0027 00000000 		.space	9
 4034      00000000 
 4034      00
 4035 0030 424C4143 		.ascii	"BLACK\000"
 4035      4B00
 4036 0036 00000000 		.space	10
 4036      00000000 
 4036      0000
 4037 0040 424C5545 		.ascii	"BLUE\000"
 4037      00
 4038 0045 00000000 		.space	11
 4038      00000000 
 4038      000000
 4039              		.section	.data.cube,"aw",%progbits
 4040              		.align	2
 4041              		.set	.LANCHOR0,. + 0
 4044              	cube:
 4045 0000 00       		.byte	0
 4046 0001 00       		.space	1
 4047 0002 F200     		.short	242
 4048 0004 A604     		.short	1190
 4049 0006 01       		.byte	1
 4050 0007 00       		.space	1
 4051 0008 2C01     		.short	300
 4052 000a A604     		.short	1190
 4053 000c 02       		.byte	2
 4054 000d 00       		.space	1
 4055 000e 6601     		.short	358
 4056 0010 A604     		.short	1190
 4057 0012 03       		.byte	3
 4058 0013 00       		.space	1
 4059 0014 2C01     		.short	300
 4060 0016 6C04     		.short	1132
 4061 0018 04       		.byte	4
 4062 0019 00       		.space	1
 4063 001a 2C01     		.short	300
 4064 001c E004     		.short	1248
 4065 001e 00       		.byte	0
 4066 001f 00       		.space	1
 4067 0020 1803     		.short	792
 4068 0022 1C02     		.short	540
 4069 0024 01       		.byte	1
 4070 0025 00       		.space	1
 4071 0026 5203     		.short	850
 4072 0028 1C02     		.short	540
 4073 002a 02       		.byte	2
 4074 002b 00       		.space	1
 4075 002c 8C03     		.short	908
 4076 002e 1C02     		.short	540
 4077 0030 03       		.byte	3
ARM GAS  /tmp/ccRda2as.s 			page 94


 4078 0031 00       		.space	1
 4079 0032 5203     		.short	850
 4080 0034 E201     		.short	482
 4081 0036 04       		.byte	4
 4082 0037 00       		.space	1
 4083 0038 5203     		.short	850
 4084 003a 5602     		.short	598
 4085 003c 00       		.byte	0
 4086 003d 00       		.space	1
 4087 003e 1204     		.short	1042
 4088 0040 DC05     		.short	1500
 4089 0042 01       		.byte	1
 4090 0043 00       		.space	1
 4091 0044 4C04     		.short	1100
 4092 0046 DC05     		.short	1500
 4093 0048 02       		.byte	2
 4094 0049 00       		.space	1
 4095 004a 8604     		.short	1158
 4096 004c DC05     		.short	1500
 4097 004e 03       		.byte	3
 4098 004f 00       		.space	1
 4099 0050 4C04     		.short	1100
 4100 0052 A205     		.short	1442
 4101 0054 04       		.byte	4
 4102 0055 00       		.space	1
 4103 0056 4C04     		.short	1100
 4104 0058 1606     		.short	1558
 4105 005a 02       		.byte	2
 4106 005b 00       		.space	1
 4107 005c 3207     		.short	1842
 4108 005e DC05     		.short	1500
 4109 0060 01       		.byte	1
 4110 0061 00       		.space	1
 4111 0062 6C07     		.short	1900
 4112 0064 DC05     		.short	1500
 4113 0066 00       		.byte	0
 4114 0067 00       		.space	1
 4115 0068 A607     		.short	1958
 4116 006a DC05     		.short	1500
 4117 006c 03       		.byte	3
 4118 006d 00       		.space	1
 4119 006e 6C07     		.short	1900
 4120 0070 A205     		.short	1442
 4121 0072 04       		.byte	4
 4122 0073 00       		.space	1
 4123 0074 6C07     		.short	1900
 4124 0076 1606     		.short	1558
 4125 0078 02       		.byte	2
 4126 0079 00       		.space	1
 4127 007a 2C08     		.short	2092
 4128 007c 1C02     		.short	540
 4129 007e 01       		.byte	1
 4130 007f 00       		.space	1
 4131 0080 6608     		.short	2150
 4132 0082 1C02     		.short	540
 4133 0084 00       		.byte	0
 4134 0085 00       		.space	1
ARM GAS  /tmp/ccRda2as.s 			page 95


 4135 0086 A008     		.short	2208
 4136 0088 1C02     		.short	540
 4137 008a 03       		.byte	3
 4138 008b 00       		.space	1
 4139 008c 6608     		.short	2150
 4140 008e E201     		.short	482
 4141 0090 04       		.byte	4
 4142 0091 00       		.space	1
 4143 0092 6608     		.short	2150
 4144 0094 5602     		.short	598
 4145 0096 02       		.byte	2
 4146 0097 00       		.space	1
 4147 0098 520A     		.short	2642
 4148 009a A604     		.short	1190
 4149 009c 01       		.byte	1
 4150 009d 00       		.space	1
 4151 009e 8C0A     		.short	2700
 4152 00a0 A604     		.short	1190
 4153 00a2 00       		.byte	0
 4154 00a3 00       		.space	1
 4155 00a4 C60A     		.short	2758
 4156 00a6 A604     		.short	1190
 4157 00a8 03       		.byte	3
 4158 00a9 00       		.space	1
 4159 00aa 8C0A     		.short	2700
 4160 00ac 6C04     		.short	1132
 4161 00ae 04       		.byte	4
 4162 00af 00       		.space	1
 4163 00b0 8C0A     		.short	2700
 4164 00b2 E004     		.short	1248
 4165              		.section	.data.set,"aw",%progbits
 4166              		.align	2
 4167              		.set	.LANCHOR5,. + 0
 4170              	set:
 4171 0000 2C01     		.short	300
 4172 0002 A604     		.short	1190
 4173 0004 0000     		.space	2
 4174 0006 5203     		.short	850
 4175 0008 1C02     		.short	540
 4176 000a 0000     		.space	2
 4177 000c 4C04     		.short	1100
 4178 000e DC05     		.short	1500
 4179 0010 0000     		.space	2
 4180 0012 6C07     		.short	1900
 4181 0014 DC05     		.short	1500
 4182 0016 0000     		.space	2
 4183 0018 6608     		.short	2150
 4184 001a 1C02     		.short	540
 4185 001c 0000     		.space	2
 4186 001e 8C0A     		.short	2700
 4187 0020 A604     		.short	1190
 4188 0022 0000     		.space	2
 4189              		.section	.rodata.score_per_size,"a",%progbits
 4190              		.align	2
 4191              		.set	.LANCHOR7,. + 0
 4194              	score_per_size:
 4195 0000 00000000 		.word	0
ARM GAS  /tmp/ccRda2as.s 			page 96


 4196 0004 01000000 		.word	1
 4197 0008 03000000 		.word	3
 4198 000c 06000000 		.word	6
 4199 0010 0A000000 		.word	10
 4200 0014 0F000000 		.word	15
 4201              		.text
 4202              	.Letext0:
 4203              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 4204              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 4205              		.file 4 "Inc/game_defs.h"
 4206              		.file 5 "Inc/strategy.h"
 4207              		.file 6 "/usr/arm-none-eabi/include/sys/lock.h"
 4208              		.file 7 "/usr/arm-none-eabi/include/sys/_types.h"
 4209              		.file 8 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 4210              		.file 9 "/usr/arm-none-eabi/include/sys/reent.h"
 4211              		.file 10 "/usr/arm-none-eabi/include/stdlib.h"
 4212              		.file 11 "/usr/arm-none-eabi/include/math.h"
 4213              		.file 12 "Inc/map.h"
ARM GAS  /tmp/ccRda2as.s 			page 97


DEFINED SYMBOLS
                            *ABS*:0000000000000000 strategy.c
     /tmp/ccRda2as.s:18     .text.Init_Cube_Sort:0000000000000000 $t
     /tmp/ccRda2as.s:24     .text.Init_Cube_Sort:0000000000000000 Init_Cube_Sort
     /tmp/ccRda2as.s:57     .text.Init_Cube_Sort:000000000000001c $d
     /tmp/ccRda2as.s:63     .text.Get_Nb_Cubes_Set:0000000000000000 $t
     /tmp/ccRda2as.s:69     .text.Get_Nb_Cubes_Set:0000000000000000 Get_Nb_Cubes_Set
     /tmp/ccRda2as.s:124    .text.Get_Nb_Cubes_Set:0000000000000030 $d
     /tmp/ccRda2as.s:129    .text.Find_Cubes:0000000000000000 $t
     /tmp/ccRda2as.s:135    .text.Find_Cubes:0000000000000000 Find_Cubes
     /tmp/ccRda2as.s:268    .text.Find_Cubes:00000000000000a8 $d
     /tmp/ccRda2as.s:277    .text.Find_Cube:0000000000000000 $t
     /tmp/ccRda2as.s:283    .text.Find_Cube:0000000000000000 Find_Cube
     /tmp/ccRda2as.s:384    .text.Find_Cube:000000000000006c $d
     /tmp/ccRda2as.s:393    .text.Check_Target:0000000000000000 $t
     /tmp/ccRda2as.s:399    .text.Check_Target:0000000000000000 Check_Target
     /tmp/ccRda2as.s:425    .text.Check_Target:0000000000000026 $d
     /tmp/ccRda2as.s:430    .text.Check_Target:0000000000000030 $t
     /tmp/ccRda2as.s:487    .text.Check_Target:000000000000007c $d
     /tmp/ccRda2as.s:491    .text.Check_Target:0000000000000080 $t
     /tmp/ccRda2as.s:892    .text.Check_Target:000000000000026c $d
                            *COM*:0000000000000001 team
     /tmp/ccRda2as.s:904    .text.Eval_Align_Stack:0000000000000000 $t
     /tmp/ccRda2as.s:910    .text.Eval_Align_Stack:0000000000000000 Eval_Align_Stack
     /tmp/ccRda2as.s:934    .text.Eval_Align_Stack:0000000000000012 $d
     /tmp/ccRda2as.s:938    .text.Eval_Align_Stack:0000000000000016 $t
     /tmp/ccRda2as.s:1053   .text.Eval_Align_Stack:00000000000000b8 $d
     /tmp/ccRda2as.s:1065   .text.Compare_Cubes:0000000000000000 $t
     /tmp/ccRda2as.s:1071   .text.Compare_Cubes:0000000000000000 Compare_Cubes
     /tmp/ccRda2as.s:1240   .text.Compare_Cubes:0000000000000100 $d
                            *COM*:0000000000000002 from_y
                            *COM*:0000000000000002 from_x
     /tmp/ccRda2as.s:1248   .text.Eval_Return_Approach:0000000000000000 $t
     /tmp/ccRda2as.s:1254   .text.Eval_Return_Approach:0000000000000000 Eval_Return_Approach
     /tmp/ccRda2as.s:1334   .text.Eval_Return_Approach:0000000000000080 $d
     /tmp/ccRda2as.s:1342   .text.Cube_Sort:0000000000000000 $t
     /tmp/ccRda2as.s:1348   .text.Cube_Sort:0000000000000000 Cube_Sort
     /tmp/ccRda2as.s:1380   .text.Cube_Sort:0000000000000018 $d
     /tmp/ccRda2as.s:1390   .text.Eval_Move:0000000000000000 $t
     /tmp/ccRda2as.s:1396   .text.Eval_Move:0000000000000000 Eval_Move
     /tmp/ccRda2as.s:1553   .text.Eval_Move:0000000000000118 $d
     /tmp/ccRda2as.s:1567   .text.Eval_Target:0000000000000000 $t
     /tmp/ccRda2as.s:1573   .text.Eval_Target:0000000000000000 Eval_Target
     /tmp/ccRda2as.s:1636   .text.Eval_Target:0000000000000052 $d
     /tmp/ccRda2as.s:1640   .text.Eval_Target:0000000000000056 $t
     /tmp/ccRda2as.s:1771   .text.Eval_Target:0000000000000110 $d
     /tmp/ccRda2as.s:1780   .text.Eval_Place:0000000000000000 $t
     /tmp/ccRda2as.s:1786   .text.Eval_Place:0000000000000000 Eval_Place
     /tmp/ccRda2as.s:1820   .text.Eval_Place:0000000000000024 $d
     /tmp/ccRda2as.s:1825   .text.Set_Construction_Plan:0000000000000000 $t
     /tmp/ccRda2as.s:1832   .text.Set_Construction_Plan:0000000000000000 Set_Construction_Plan
     /tmp/ccRda2as.s:1857   .text.Set_Construction_Plan:0000000000000010 $d
     /tmp/ccRda2as.s:1863   .text.Init_Construction:0000000000000000 $t
     /tmp/ccRda2as.s:1870   .text.Init_Construction:0000000000000000 Init_Construction
     /tmp/ccRda2as.s:1889   .text.Init_Strategy:0000000000000000 $t
     /tmp/ccRda2as.s:1896   .text.Init_Strategy:0000000000000000 Init_Strategy
     /tmp/ccRda2as.s:2018   .text.Init_Strategy:0000000000000094 $d
ARM GAS  /tmp/ccRda2as.s 			page 98


                            *COM*:0000000000000018 me
     /tmp/ccRda2as.s:2029   .text.Update_Construction:0000000000000000 $t
     /tmp/ccRda2as.s:2036   .text.Update_Construction:0000000000000000 Update_Construction
     /tmp/ccRda2as.s:2058   .text.Update_Construction:0000000000000018 $d
     /tmp/ccRda2as.s:2278   .text.Update_Construction:0000000000000108 $d
     /tmp/ccRda2as.s:2283   .text.Get_Construction_Score:0000000000000000 $t
     /tmp/ccRda2as.s:2290   .text.Get_Construction_Score:0000000000000000 Get_Construction_Score
     /tmp/ccRda2as.s:2321   .text.Get_Construction_Score:000000000000001c $d
     /tmp/ccRda2as.s:2326   .text.Eval_Permutation:0000000000000000 $t
     /tmp/ccRda2as.s:2332   .text.Eval_Permutation:0000000000000000 Eval_Permutation
     /tmp/ccRda2as.s:2443   .text.Eval_Permutation:0000000000000088 $d
     /tmp/ccRda2as.s:2447   .text.Eval_Permutation:0000000000000098 $t
     /tmp/ccRda2as.s:2659   .text.Eval_Permutation:00000000000001e0 $d
                            *COM*:0000000000000064 strat
     /tmp/ccRda2as.s:2668   .text.Eval_Combination:0000000000000000 $t
     /tmp/ccRda2as.s:2674   .text.Eval_Combination:0000000000000000 Eval_Combination
     /tmp/ccRda2as.s:2816   .text.Select_Building_Materials:0000000000000000 $t
     /tmp/ccRda2as.s:2823   .text.Select_Building_Materials:0000000000000000 Select_Building_Materials
     /tmp/ccRda2as.s:3296   .text.Select_Building_Materials:00000000000002b8 $d
     /tmp/ccRda2as.s:3303   .text.Select_Building_Materials:00000000000002cc $t
     /tmp/ccRda2as.s:3702   .text.Select_Building_Materials:000000000000057c $d
     /tmp/ccRda2as.s:3708   .text.Select_Building_Materials:0000000000000590 $t
     /tmp/ccRda2as.s:3747   .text.Select_Building_Materials:00000000000005b0 $d
     /tmp/ccRda2as.s:3759   .text.John_The_Builder:0000000000000000 $t
     /tmp/ccRda2as.s:3766   .text.John_The_Builder:0000000000000000 John_The_Builder
     /tmp/ccRda2as.s:3936   .text.John_The_Builder:00000000000000c4 $d
     /tmp/ccRda2as.s:3941   .text.Compute_Building_Strategy:0000000000000000 $t
     /tmp/ccRda2as.s:3948   .text.Compute_Building_Strategy:0000000000000000 Compute_Building_Strategy
     /tmp/ccRda2as.s:3976   .text.Compute_Building_Strategy:0000000000000018 $d
     /tmp/ccRda2as.s:4170   .data.set:0000000000000000 set
     /tmp/ccRda2as.s:4044   .data.cube:0000000000000000 cube
     /tmp/ccRda2as.s:4028   .data.color_str:0000000000000000 color_str
     /tmp/ccRda2as.s:3995   .bss.build_ctx:0000000000000000 build_ctx
     /tmp/ccRda2as.s:4016   .bss.score:0000000000000000 score
     /tmp/ccRda2as.s:3991   .bss.build_ctx:0000000000000000 $d
     /tmp/ccRda2as.s:3998   .bss.construction_plan:0000000000000000 $d
     /tmp/ccRda2as.s:4002   .bss.construction_plan:0000000000000000 construction_plan
     /tmp/ccRda2as.s:4005   .bss.cube_sort:0000000000000000 $d
     /tmp/ccRda2as.s:4009   .bss.cube_sort:0000000000000000 cube_sort
     /tmp/ccRda2as.s:4012   .bss.score:0000000000000000 $d
     /tmp/ccRda2as.s:4022   .bss.valid_plan:0000000000000000 valid_plan
     /tmp/ccRda2as.s:4023   .bss.valid_plan:0000000000000000 $d
     /tmp/ccRda2as.s:4025   .data.color_str:0000000000000000 $d
     /tmp/ccRda2as.s:4040   .data.cube:0000000000000000 $d
     /tmp/ccRda2as.s:4166   .data.set:0000000000000000 $d
     /tmp/ccRda2as.s:4190   .rodata.score_per_size:0000000000000000 $d
     /tmp/ccRda2as.s:4194   .rodata.score_per_size:0000000000000000 score_per_size
     /tmp/ccRda2as.s:2063   .text.Update_Construction:000000000000001d $d
     /tmp/ccRda2as.s:2063   .text.Update_Construction:000000000000001e $t

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
__aeabi_i2d
pow
ARM GAS  /tmp/ccRda2as.s 			page 99


sqrt
qsort
__aeabi_dcmpgt
__aeabi_dsub
atan2
Init_Map
Refresh_Map
