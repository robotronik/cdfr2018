ARM GAS  /tmp/cceDm8rr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"gas.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FSM_ROTATION_END,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	FSM_ROTATION_END:
  25              	.LFB685:
  26              		.file 1 "Src/gas.c"
   1:Src/gas.c     **** #include "gas.h"
   2:Src/gas.c     **** #include "map.h"
   3:Src/gas.c     **** #include "strategy.h"
   4:Src/gas.c     **** #include "obstacle.h"
   5:Src/gas.c     **** #include "interface.h"
   6:Src/gas.c     **** #include "position_client.h"
   7:Src/gas.c     **** 
   8:Src/gas.c     **** #include <stddef.h>
   9:Src/gas.c     **** #include <math.h>
  10:Src/gas.c     **** 
  11:Src/gas.c     **** //==================================================
  12:Src/gas.c     **** //               Brake
  13:Src/gas.c     **** //==================================================
  14:Src/gas.c     **** void Brake(){
  15:Src/gas.c     ****   while(Pos_Brake() != 0){
  16:Src/gas.c     ****     PI_Log("Pos_Brake : pas de réponse.\n");
  17:Src/gas.c     ****     HAL_Delay(10);
  18:Src/gas.c     ****   }
  19:Src/gas.c     **** }
  20:Src/gas.c     **** 
  21:Src/gas.c     **** //==================================================
  22:Src/gas.c     **** //               Rotation
  23:Src/gas.c     **** //==================================================
  24:Src/gas.c     **** 
  25:Src/gas.c     **** typedef enum FSM_State_E{
  26:Src/gas.c     ****   FSM_RUNNING, FSM_SUCCESS, FSM_ERROR
  27:Src/gas.c     **** }FSM_State;
  28:Src/gas.c     **** 
  29:Src/gas.c     **** typedef struct FSM_Rotation_S{
  30:Src/gas.c     ****   void (*run)(struct FSM_Rotation_S* fsm);
  31:Src/gas.c     ****   FSM_State state;
  32:Src/gas.c     ****   int retry_count;
ARM GAS  /tmp/cceDm8rr.s 			page 2


  33:Src/gas.c     ****   float goal;
  34:Src/gas.c     **** }FSM_Rotation;
  35:Src/gas.c     **** 
  36:Src/gas.c     **** static void FSM_ROTATION_INIT(FSM_Rotation *fsm);
  37:Src/gas.c     **** static void FSM_ROTATION_CMD(FSM_Rotation *fsm);
  38:Src/gas.c     **** static void FSM_ROTATION_WAIT(FSM_Rotation *fsm);
  39:Src/gas.c     **** static void FSM_ROTATION_STOP(FSM_Rotation *fsm);
  40:Src/gas.c     **** static void FSM_ROTATION_END(FSM_Rotation *fsm);
  41:Src/gas.c     **** 
  42:Src/gas.c     **** int Rotate(float angle){
  43:Src/gas.c     ****   FSM_Rotation fsm;
  44:Src/gas.c     ****   fsm.goal = angle;
  45:Src/gas.c     ****   fsm.retry_count = ROTATE_RETRY_COUNT;
  46:Src/gas.c     ****   fsm.state = FSM_RUNNING;
  47:Src/gas.c     ****   fsm.run = FSM_ROTATION_INIT;
  48:Src/gas.c     ****   do{
  49:Src/gas.c     ****     fsm.run(&fsm);
  50:Src/gas.c     ****   }while(fsm.state == FSM_RUNNING);
  51:Src/gas.c     ****   return (fsm.state == FSM_SUCCESS)?(0):(-1);
  52:Src/gas.c     **** }
  53:Src/gas.c     **** 
  54:Src/gas.c     **** static void FSM_ROTATION_INIT(FSM_Rotation *fsm){
  55:Src/gas.c     ****   if(fsm->retry_count <= 0){
  56:Src/gas.c     ****     fsm->state = FSM_ERROR;
  57:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
  58:Src/gas.c     ****     return;
  59:Src/gas.c     ****   }
  60:Src/gas.c     ****   
  61:Src/gas.c     ****   if(Can_Rotate()){
  62:Src/gas.c     ****     fsm->run = FSM_ROTATION_CMD;
  63:Src/gas.c     ****   }else{
  64:Src/gas.c     ****     fsm->retry_count--;
  65:Src/gas.c     ****     HAL_Delay(WAIT_TIME);
  66:Src/gas.c     ****     //Same state
  67:Src/gas.c     ****   }
  68:Src/gas.c     **** }
  69:Src/gas.c     **** 
  70:Src/gas.c     **** static void FSM_ROTATION_CMD(FSM_Rotation *fsm){
  71:Src/gas.c     ****   if(Pos_Set_Angle(ROTATION_SPEED, me.angle - fsm->goal) != 0){
  72:Src/gas.c     ****     PI_Log("Pos_Set_Angle : pas de réponse.\n");
  73:Src/gas.c     ****     fsm->state = FSM_ERROR;
  74:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
  75:Src/gas.c     ****     return;
  76:Src/gas.c     ****   }
  77:Src/gas.c     ****   
  78:Src/gas.c     ****   fsm->run = FSM_ROTATION_WAIT;
  79:Src/gas.c     **** }
  80:Src/gas.c     **** 
  81:Src/gas.c     **** static void FSM_ROTATION_WAIT(FSM_Rotation *fsm){
  82:Src/gas.c     ****   Position_State pos_state;
  83:Src/gas.c     ****   if(Pos_Get_State(&pos_state) != 0){
  84:Src/gas.c     ****     PI_Log("Pos_Get_State : pas de réponse.\n");
  85:Src/gas.c     ****     fsm->state = FSM_ERROR;
  86:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
  87:Src/gas.c     ****     return;
  88:Src/gas.c     ****   }
  89:Src/gas.c     **** 
ARM GAS  /tmp/cceDm8rr.s 			page 3


  90:Src/gas.c     ****   if(pos_state == POS_SUCCESS){
  91:Src/gas.c     ****     fsm->state = FSM_SUCCESS;
  92:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
  93:Src/gas.c     ****     return;
  94:Src/gas.c     ****   }
  95:Src/gas.c     **** 
  96:Src/gas.c     ****   if(!Can_Rotate() || pos_state == POS_ERROR){
  97:Src/gas.c     ****     fsm->retry_count--;
  98:Src/gas.c     ****     fsm->run = FSM_ROTATION_STOP;
  99:Src/gas.c     ****     return;
 100:Src/gas.c     ****   }
 101:Src/gas.c     **** 
 102:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 103:Src/gas.c     **** }
 104:Src/gas.c     **** 
 105:Src/gas.c     **** static void FSM_ROTATION_STOP(FSM_Rotation *fsm){
 106:Src/gas.c     ****   Brake();
 107:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 108:Src/gas.c     ****   fsm->run = FSM_ROTATION_INIT;
 109:Src/gas.c     **** }
 110:Src/gas.c     **** 
 111:Src/gas.c     **** static void FSM_ROTATION_END(FSM_Rotation *fsm){
  27              		.loc 1 111 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 112:Src/gas.c     ****   //NOP NOP NOP
 113:Src/gas.c     **** }
  33              		.loc 1 113 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE685:
  38              		.section	.text.Go_Straight_Direct,"ax",%progbits
  39              		.align	1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	Go_Straight_Direct:
  46              	.LFB687:
 114:Src/gas.c     **** 
 115:Src/gas.c     **** //==================================================
 116:Src/gas.c     **** //               Straight move
 117:Src/gas.c     **** //==================================================
 118:Src/gas.c     **** typedef struct FSM_Move_S{
 119:Src/gas.c     ****   void (*run)(struct FSM_Move_S* fsm);
 120:Src/gas.c     ****   FSM_State state;
 121:Src/gas.c     ****   int retry_count;
 122:Src/gas.c     ****   uint16_t x;
 123:Src/gas.c     ****   uint16_t y;
 124:Src/gas.c     ****   bool forward;
 125:Src/gas.c     ****   float speed_ratio;
 126:Src/gas.c     ****   float max_speed_ratio;
 127:Src/gas.c     ****   float g_dist;
 128:Src/gas.c     **** }FSM_Move;
ARM GAS  /tmp/cceDm8rr.s 			page 4


 129:Src/gas.c     **** 
 130:Src/gas.c     **** static void FSM_MOVE_INIT(FSM_Move *fsm);
 131:Src/gas.c     **** static void FSM_MOVE_CMD(FSM_Move *fsm);
 132:Src/gas.c     **** static void FSM_MOVE_WAIT(FSM_Move *fsm);
 133:Src/gas.c     **** static void FSM_MOVE_STOP(FSM_Move *fsm);
 134:Src/gas.c     **** static void FSM_MOVE_END(FSM_Move *fsm);
 135:Src/gas.c     **** 
 136:Src/gas.c     **** static int Go_Straight_Direct(uint16_t x, uint16_t y, bool forward, float speed_ratio);
 137:Src/gas.c     **** /**
 138:Src/gas.c     ****  * WARNING : this function assumes the robot already performed a
 139:Src/gas.c     ****  * rotation to get in the right angle. If not, this will lead to
 140:Src/gas.c     ****  * undefined behavior. The reason it takes (x, y) and not just a
 141:Src/gas.c     ****  * distance is that it uses the effective position of the robot and
 142:Src/gas.c     ****  * the goal to determine whether or not the move is safe.
 143:Src/gas.c     ****  */
 144:Src/gas.c     **** 
 145:Src/gas.c     **** int Go_Straight(uint16_t x, uint16_t y, bool forward, float speed_ratio){
 146:Src/gas.c     ****   //Compute angle and distance
 147:Src/gas.c     ****   float g_angle = angle(me.x, me.y, x, y);
 148:Src/gas.c     ****   if(!forward){
 149:Src/gas.c     ****     g_angle += M_PI;
 150:Src/gas.c     ****   }
 151:Src/gas.c     ****   if(g_angle > M_PI){
 152:Src/gas.c     ****     g_angle -= 2*M_PI;
 153:Src/gas.c     ****   }
 154:Src/gas.c     **** 
 155:Src/gas.c     ****   //Rotate and cancel if it fails
 156:Src/gas.c     ****   if(Rotate(g_angle) != 0){
 157:Src/gas.c     ****     return -1;
 158:Src/gas.c     ****   }
 159:Src/gas.c     **** 
 160:Src/gas.c     ****   return Go_Straight_Direct(x, y, forward, speed_ratio);
 161:Src/gas.c     **** }
 162:Src/gas.c     **** 
 163:Src/gas.c     **** static int Go_Straight_Direct(uint16_t x, uint16_t y, bool forward, float speed_ratio){
  47              		.loc 1 163 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 32
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
  52 0000 00B5     		push	{lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 4
  55              		.cfi_offset 14, -4
  56 0002 89B0     		sub	sp, sp, #36
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 40
 164:Src/gas.c     ****     FSM_Move fsm = {
  59              		.loc 1 164 0
  60 0004 0023     		movs	r3, #0
  61 0006 0193     		str	r3, [sp, #4]
  62 0008 0493     		str	r3, [sp, #16]
  63 000a 0693     		str	r3, [sp, #24]
  64 000c 0793     		str	r3, [sp, #28]
  65 000e 174B     		ldr	r3, .L12
  66 0010 0093     		str	r3, [sp]
  67 0012 3223     		movs	r3, #50
ARM GAS  /tmp/cceDm8rr.s 			page 5


  68 0014 0293     		str	r3, [sp, #8]
  69 0016 ADF80C00 		strh	r0, [sp, #12]	@ movhi
  70 001a ADF80E10 		strh	r1, [sp, #14]	@ movhi
  71 001e 8DF81020 		strb	r2, [sp, #16]
 165:Src/gas.c     ****     .run = FSM_MOVE_INIT,
 166:Src/gas.c     ****     .state = FSM_RUNNING,
 167:Src/gas.c     ****     .retry_count = MOVE_RETRY_COUNT,
 168:Src/gas.c     ****     .x = x,
 169:Src/gas.c     ****     .y = y,
 170:Src/gas.c     ****     .forward = forward,
 171:Src/gas.c     ****     .speed_ratio = min(0., max(speed_ratio, 1.))
  72              		.loc 1 171 0
  73 0022 F7EE007A 		vmov.f32	s15, #1.0e+0
  74 0026 B4EEE70A 		vcmpe.f32	s0, s15
  75 002a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  76 002e 07DB     		blt	.L10
  77              		.loc 1 171 0 is_stmt 0 discriminator 1
  78 0030 B5EE400A 		vcmp.f32	s0, #0
  79 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  80 0038 04DD     		ble	.L3
  81              		.loc 1 171 0
  82 003a 9FED0D0A 		vldr.32	s0, .L12+4
  83              	.LVL2:
  84 003e 01E0     		b	.L3
  85              	.LVL3:
  86              	.L10:
  87 0040 9FED0B0A 		vldr.32	s0, .L12+4
  88              	.LVL4:
  89              	.L3:
 164:Src/gas.c     ****     FSM_Move fsm = {
  90              		.loc 1 164 0 is_stmt 1
  91 0044 8DED050A 		vstr.32	s0, [sp, #20]
  92              	.LVL5:
  93              	.L5:
 172:Src/gas.c     ****   };
 173:Src/gas.c     ****   
 174:Src/gas.c     **** 
 175:Src/gas.c     ****   do{
 176:Src/gas.c     ****     fsm.run(&fsm);
  94              		.loc 1 176 0 discriminator 1
  95 0048 08A8     		add	r0, sp, #32
  96 004a 50F8203D 		ldr	r3, [r0, #-32]!
  97 004e 9847     		blx	r3
  98              	.LVL6:
 177:Src/gas.c     ****   }while(fsm.state == FSM_RUNNING);
  99              		.loc 1 177 0 discriminator 1
 100 0050 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 101 0054 002B     		cmp	r3, #0
 102 0056 F7D0     		beq	.L5
 178:Src/gas.c     ****   return (fsm.state == FSM_SUCCESS)?(0):(-1);
 103              		.loc 1 178 0
 104 0058 012B     		cmp	r3, #1
 105 005a 03D1     		bne	.L8
 106 005c 0020     		movs	r0, #0
 107              	.L2:
 179:Src/gas.c     **** }
 108              		.loc 1 179 0
ARM GAS  /tmp/cceDm8rr.s 			page 6


 109 005e 09B0     		add	sp, sp, #36
 110              	.LCFI2:
 111              		.cfi_remember_state
 112              		.cfi_def_cfa_offset 4
 113              		@ sp needed
 114 0060 5DF804FB 		ldr	pc, [sp], #4
 115              	.L8:
 116              	.LCFI3:
 117              		.cfi_restore_state
 178:Src/gas.c     ****   return (fsm.state == FSM_SUCCESS)?(0):(-1);
 118              		.loc 1 178 0
 119 0064 4FF0FF30 		mov	r0, #-1
 120 0068 F9E7     		b	.L2
 121              	.L13:
 122 006a 00BF     		.align	2
 123              	.L12:
 124 006c 00000000 		.word	FSM_MOVE_INIT
 125 0070 00000000 		.word	0
 126              		.cfi_endproc
 127              	.LFE687:
 129              		.section	.text.FSM_MOVE_END,"ax",%progbits
 130              		.align	1
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	FSM_MOVE_END:
 137              	.LFB692:
 180:Src/gas.c     **** 
 181:Src/gas.c     **** static void FSM_MOVE_INIT(FSM_Move *fsm){
 182:Src/gas.c     ****   if(fsm->retry_count <= 0){
 183:Src/gas.c     ****     fsm->state = FSM_ERROR;
 184:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 185:Src/gas.c     ****     return;
 186:Src/gas.c     ****   }
 187:Src/gas.c     **** 
 188:Src/gas.c     ****   fsm->g_dist = dist(me.x, me.y, fsm->x, fsm->y);
 189:Src/gas.c     **** 
 190:Src/gas.c     ****   if(Can_Move(fsm->g_dist, fsm->forward, &fsm->max_speed_ratio)){
 191:Src/gas.c     ****     fsm->run = FSM_MOVE_CMD;
 192:Src/gas.c     ****   }else{
 193:Src/gas.c     ****     fsm->retry_count--;
 194:Src/gas.c     ****     HAL_Delay(WAIT_TIME);
 195:Src/gas.c     ****     //Same state
 196:Src/gas.c     ****   }
 197:Src/gas.c     **** }
 198:Src/gas.c     **** 
 199:Src/gas.c     **** static void FSM_MOVE_CMD(FSM_Move *fsm){
 200:Src/gas.c     ****   float speed = min(MAX_SPEED * fsm->speed_ratio,
 201:Src/gas.c     **** 		    MIN_SPEED + (MAX_SPEED-MIN_SPEED)*fsm->max_speed_ratio);
 202:Src/gas.c     ****   float distance = ((fsm->forward)?(1):(-1)) * fsm->g_dist;
 203:Src/gas.c     ****   if(Pos_Go_Forward(speed, distance) != 0){
 204:Src/gas.c     ****     PI_Log("Pos_Go_Forward : pas de réponse.\n");
 205:Src/gas.c     ****     fsm->state = FSM_ERROR;
 206:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 207:Src/gas.c     ****     return;
 208:Src/gas.c     ****   }
ARM GAS  /tmp/cceDm8rr.s 			page 7


 209:Src/gas.c     **** 
 210:Src/gas.c     ****   fsm->run = FSM_MOVE_WAIT;
 211:Src/gas.c     **** }
 212:Src/gas.c     **** 
 213:Src/gas.c     **** static void FSM_MOVE_WAIT(FSM_Move *fsm){
 214:Src/gas.c     ****   Position_State state;
 215:Src/gas.c     ****   if(Pos_Get_State(&state) != 0){
 216:Src/gas.c     ****     PI_Log("Pos_Get_State : pas de réponse.\n");
 217:Src/gas.c     ****     fsm->state = FSM_ERROR;
 218:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 219:Src/gas.c     ****     return;
 220:Src/gas.c     ****   }
 221:Src/gas.c     **** 
 222:Src/gas.c     ****   //If the goal is reached
 223:Src/gas.c     ****   if(state == POS_SUCCESS){
 224:Src/gas.c     ****     fsm->state = FSM_SUCCESS;
 225:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 226:Src/gas.c     ****     return;
 227:Src/gas.c     ****   }
 228:Src/gas.c     **** 
 229:Src/gas.c     ****   //If there is an obstacle
 230:Src/gas.c     ****   fsm->g_dist = dist(me.x, me.y, fsm->x, fsm->y);
 231:Src/gas.c     ****   if(!Can_Move(fsm->g_dist, fsm->forward, &fsm->max_speed_ratio) || state == POS_ERROR){
 232:Src/gas.c     ****     fsm->retry_count--;
 233:Src/gas.c     ****     fsm->run = FSM_MOVE_STOP;
 234:Src/gas.c     ****     return;
 235:Src/gas.c     ****   }
 236:Src/gas.c     **** 
 237:Src/gas.c     ****   fsm->run = FSM_MOVE_CMD;
 238:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 239:Src/gas.c     **** }
 240:Src/gas.c     **** 
 241:Src/gas.c     **** static void FSM_MOVE_STOP(FSM_Move *fsm){
 242:Src/gas.c     ****   Brake();
 243:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 244:Src/gas.c     ****   fsm->run = FSM_MOVE_INIT;
 245:Src/gas.c     **** }
 246:Src/gas.c     **** 
 247:Src/gas.c     **** static void FSM_MOVE_END(FSM_Move *fsm){
 138              		.loc 1 247 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143              	.LVL7:
 248:Src/gas.c     ****   //NOP NOP NOP
 249:Src/gas.c     **** }
 144              		.loc 1 249 0
 145 0000 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE692:
 149              		.section	.text.Check_Path,"ax",%progbits
 150              		.align	1
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cceDm8rr.s 			page 8


 156              	Check_Path:
 157              	.LFB696:
 250:Src/gas.c     **** 
 251:Src/gas.c     **** //==================================================
 252:Src/gas.c     **** //               Escape strategy
 253:Src/gas.c     **** //==================================================
 254:Src/gas.c     **** 
 255:Src/gas.c     **** void Break_Free(){
 256:Src/gas.c     ****   float fwd_dist, bwd_dist;
 257:Src/gas.c     ****   do{
 258:Src/gas.c     ****     Get_Avoidance_Flexibility(&fwd_dist, &bwd_dist);
 259:Src/gas.c     ****     float fwd_goal = min(fwd_dist, max(0, MARGIN_MAX-bwd_dist));
 260:Src/gas.c     ****     float bwd_goal = min(bwd_dist, max(0, MARGIN_MAX-fwd_dist));
 261:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
 262:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 263:Src/gas.c     ****       continue;
 264:Src/gas.c     ****     }
 265:Src/gas.c     **** 
 266:Src/gas.c     ****     uint16_t x, y;
 267:Src/gas.c     ****     uint8_t fwd;
 268:Src/gas.c     ****     if(fwd_goal < 1){
 269:Src/gas.c     ****       x = me.x - bwd_goal*cos(me.angle);
 270:Src/gas.c     ****       y = me.y - bwd_goal*sin(me.angle);
 271:Src/gas.c     ****       fwd = 0;
 272:Src/gas.c     ****     }
 273:Src/gas.c     ****     else if(bwd_goal < 1){
 274:Src/gas.c     ****       x = me.x + bwd_goal*cos(me.angle);
 275:Src/gas.c     ****       y = me.y + bwd_goal*sin(me.angle);
 276:Src/gas.c     ****       fwd = 1;
 277:Src/gas.c     ****     }else{
 278:Src/gas.c     ****       float goal = (fwd_goal - bwd_goal)/2.;
 279:Src/gas.c     ****       x = me.x + goal*cos(me.angle);
 280:Src/gas.c     ****       y = me.y + goal*sin(me.angle);
 281:Src/gas.c     ****       fwd = (goal > 0)?1:0;
 282:Src/gas.c     ****     }
 283:Src/gas.c     **** 
 284:Src/gas.c     ****     Go_Straight_Direct(x, y, fwd, AVOIDANCE_SPEED_RATIO);
 285:Src/gas.c     ****   }while(!Can_Rotate());
 286:Src/gas.c     **** }
 287:Src/gas.c     **** 
 288:Src/gas.c     **** //==================================================
 289:Src/gas.c     **** //               Curved Path move
 290:Src/gas.c     **** //==================================================
 291:Src/gas.c     **** 
 292:Src/gas.c     **** static int Update_Path(uint16_t x_goal, uint16_t y_goal, Cell **current_path);
 293:Src/gas.c     **** static int Check_Path(Cell* current_path);
 294:Src/gas.c     **** static Cell* Make_Path(uint16_t x_goal, uint16_t y_goal);
 295:Src/gas.c     **** 
 296:Src/gas.c     **** 
 297:Src/gas.c     **** int GOGOGO(uint16_t x, uint16_t y){
 298:Src/gas.c     ****   Cell *path_end = NULL;
 299:Src/gas.c     ****   int retry_count = GO_RETRY_COUNT;
 300:Src/gas.c     ****   
 301:Src/gas.c     ****   do{
 302:Src/gas.c     ****     //Avoid robots if needed
 303:Src/gas.c     ****     if(!Can_Rotate()){
 304:Src/gas.c     ****       Brake();
ARM GAS  /tmp/cceDm8rr.s 			page 9


 305:Src/gas.c     ****       HAL_Delay(1000);
 306:Src/gas.c     ****       Break_Free();
 307:Src/gas.c     ****       path_end = NULL;//Reinit the process
 308:Src/gas.c     ****     }
 309:Src/gas.c     **** 
 310:Src/gas.c     ****     if(retry_count == 0){
 311:Src/gas.c     ****       return -1;
 312:Src/gas.c     ****     }
 313:Src/gas.c     ****     
 314:Src/gas.c     ****     //Compute path
 315:Src/gas.c     ****     int new_path = Update_Path(x, y, &path_end);
 316:Src/gas.c     ****     if(path_end == NULL){
 317:Src/gas.c     ****       Brake();
 318:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 319:Src/gas.c     ****       retry_count--;
 320:Src/gas.c     ****       continue;
 321:Src/gas.c     ****     }
 322:Src/gas.c     **** 
 323:Src/gas.c     ****     //Config curve
 324:Src/gas.c     ****     float fwd_dist, bwd_dist;
 325:Src/gas.c     ****     Get_In_Range_Obstacle_Dist(&fwd_dist, &bwd_dist);
 326:Src/gas.c     ****     float speed = MIN_SPEED + (MAX_SPEED - MIN_SPEED) * min(1., max(0., (fwd_dist - (ROBOT_RADIUS +
 327:Src/gas.c     ****     if(Pos_Config_Curve(POS_Z, POS_W, speed, ROTATION_SPEED, POS_P, POS_I, POS_D, POS_SPEED_PERCENT
 328:Src/gas.c     ****       PI_Log("Pos_Config_Curve : pas de réponse\n");
 329:Src/gas.c     ****     }
 330:Src/gas.c     ****     
 331:Src/gas.c     ****     //If the path changed, send it
 332:Src/gas.c     ****     if(new_path && Pos_Send_Path(path_end, x, y) == -1){
 333:Src/gas.c     ****       //Check that this does not mess with UART
 334:Src/gas.c     ****       PI_Log("Pos_Send_Path : pas de réponse\n");
 335:Src/gas.c     ****       Brake();
 336:Src/gas.c     ****       retry_count--;
 337:Src/gas.c     ****       path_end = NULL;
 338:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 339:Src/gas.c     ****       continue;
 340:Src/gas.c     ****     }
 341:Src/gas.c     **** 
 342:Src/gas.c     ****     //Check goal
 343:Src/gas.c     ****     Position_State state;
 344:Src/gas.c     ****     if(Pos_Get_State(&state) == -1){
 345:Src/gas.c     ****       PI_Log("Pos_Get_State : pas de réponse\n");
 346:Src/gas.c     ****     }else if(state == POS_SUCCESS){
 347:Src/gas.c     ****       return 0;
 348:Src/gas.c     ****     }else if(state == POS_ERROR){
 349:Src/gas.c     ****       PI_Log("Position path error\n");
 350:Src/gas.c     ****       Brake();
 351:Src/gas.c     ****       retry_count--;
 352:Src/gas.c     ****       path_end = NULL;
 353:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 354:Src/gas.c     ****       continue;
 355:Src/gas.c     ****     }
 356:Src/gas.c     **** 
 357:Src/gas.c     ****     HAL_Delay(WAIT_TIME);
 358:Src/gas.c     ****   }while(1);
 359:Src/gas.c     **** }
 360:Src/gas.c     **** 
 361:Src/gas.c     **** static int Update_Path(uint16_t x_goal, uint16_t y_goal, Cell **current_path){
ARM GAS  /tmp/cceDm8rr.s 			page 10


 362:Src/gas.c     ****   Refresh_Map();
 363:Src/gas.c     ****   Materialize_Obstacles(MARGIN_MAX);
 364:Src/gas.c     ****   if(Check_Path(*current_path) == 0){
 365:Src/gas.c     ****     return 0;
 366:Src/gas.c     ****   }
 367:Src/gas.c     ****   
 368:Src/gas.c     ****   *current_path = Make_Path(x_goal, y_goal);
 369:Src/gas.c     ****   return 1;
 370:Src/gas.c     **** }
 371:Src/gas.c     **** 
 372:Src/gas.c     **** static int Check_Path(Cell* current_path){
 158              		.loc 1 372 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL8:
 373:Src/gas.c     ****   if(current_path == NULL){
 164              		.loc 1 373 0
 165 0000 0346     		mov	r3, r0
 166 0002 30B1     		cbz	r0, .L21
 167              	.LVL9:
 168              	.L17:
 374:Src/gas.c     ****     return -1;
 375:Src/gas.c     ****   }
 376:Src/gas.c     ****   
 377:Src/gas.c     ****   for(; current_path != NULL; current_path = current_path->pred){
 169              		.loc 1 377 0 discriminator 1
 170 0004 1BB1     		cbz	r3, .L22
 378:Src/gas.c     ****     if(current_path->obstacle){
 171              		.loc 1 378 0
 172 0006 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 173 0008 32B9     		cbnz	r2, .L20
 377:Src/gas.c     ****     if(current_path->obstacle){
 174              		.loc 1 377 0
 175 000a 1B68     		ldr	r3, [r3]
 176              	.LVL10:
 177 000c FAE7     		b	.L17
 178              	.L22:
 379:Src/gas.c     ****       return -1;
 380:Src/gas.c     ****     }
 381:Src/gas.c     ****   }
 382:Src/gas.c     **** 
 383:Src/gas.c     ****   return 0;
 179              		.loc 1 383 0
 180 000e 0020     		movs	r0, #0
 181 0010 7047     		bx	lr
 182              	.LVL11:
 183              	.L21:
 374:Src/gas.c     ****   }
 184              		.loc 1 374 0
 185 0012 4FF0FF30 		mov	r0, #-1
 186              	.LVL12:
 187 0016 7047     		bx	lr
 188              	.L20:
 379:Src/gas.c     ****       return -1;
 189              		.loc 1 379 0
ARM GAS  /tmp/cceDm8rr.s 			page 11


 190 0018 4FF0FF30 		mov	r0, #-1
 384:Src/gas.c     **** }
 191              		.loc 1 384 0
 192 001c 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE696:
 196              		.section	.text.FSM_ROTATION_INIT,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	FSM_ROTATION_INIT:
 204              	.LFB681:
  54:Src/gas.c     ****   if(fsm->retry_count <= 0){
 205              		.loc 1 54 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL13:
  55:Src/gas.c     ****     fsm->state = FSM_ERROR;
 210              		.loc 1 55 0
 211 0000 8368     		ldr	r3, [r0, #8]
 212 0002 002B     		cmp	r3, #0
 213 0004 07DD     		ble	.L30
  54:Src/gas.c     ****   if(fsm->retry_count <= 0){
 214              		.loc 1 54 0
 215 0006 10B5     		push	{r4, lr}
 216              	.LCFI4:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 220 0008 0446     		mov	r4, r0
  61:Src/gas.c     ****     fsm->run = FSM_ROTATION_CMD;
 221              		.loc 1 61 0
 222 000a FFF7FEFF 		bl	Can_Rotate
 223              	.LVL14:
 224 000e 38B1     		cbz	r0, .L26
  62:Src/gas.c     ****   }else{
 225              		.loc 1 62 0
 226 0010 074B     		ldr	r3, .L31
 227 0012 2360     		str	r3, [r4]
 228              	.L23:
  68:Src/gas.c     **** 
 229              		.loc 1 68 0
 230 0014 10BD     		pop	{r4, pc}
 231              	.LVL15:
 232              	.L30:
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 0
 235              		.cfi_restore 4
 236              		.cfi_restore 14
  56:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
 237              		.loc 1 56 0
 238 0016 0223     		movs	r3, #2
 239 0018 0371     		strb	r3, [r0, #4]
  57:Src/gas.c     ****     return;
ARM GAS  /tmp/cceDm8rr.s 			page 12


 240              		.loc 1 57 0
 241 001a 064B     		ldr	r3, .L31+4
 242 001c 0360     		str	r3, [r0]
 243 001e 7047     		bx	lr
 244              	.LVL16:
 245              	.L26:
 246              	.LCFI6:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 4, -8
 249              		.cfi_offset 14, -4
  64:Src/gas.c     ****     HAL_Delay(WAIT_TIME);
 250              		.loc 1 64 0
 251 0020 A368     		ldr	r3, [r4, #8]
 252 0022 013B     		subs	r3, r3, #1
 253 0024 A360     		str	r3, [r4, #8]
  65:Src/gas.c     ****     //Same state
 254              		.loc 1 65 0
 255 0026 3220     		movs	r0, #50
 256 0028 FFF7FEFF 		bl	HAL_Delay
 257              	.LVL17:
 258 002c F2E7     		b	.L23
 259              	.L32:
 260 002e 00BF     		.align	2
 261              	.L31:
 262 0030 00000000 		.word	FSM_ROTATION_CMD
 263 0034 00000000 		.word	FSM_ROTATION_END
 264              		.cfi_endproc
 265              	.LFE681:
 267              		.section	.text.FSM_ROTATION_CMD,"ax",%progbits
 268              		.align	1
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	FSM_ROTATION_CMD:
 275              	.LFB682:
  70:Src/gas.c     ****   if(Pos_Set_Angle(ROTATION_SPEED, me.angle - fsm->goal) != 0){
 276              		.loc 1 70 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              	.LVL18:
 281 0000 10B5     		push	{r4, lr}
 282              	.LCFI7:
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 4, -8
 285              		.cfi_offset 14, -4
 286 0002 0446     		mov	r4, r0
  71:Src/gas.c     ****     PI_Log("Pos_Set_Angle : pas de réponse.\n");
 287              		.loc 1 71 0
 288 0004 0B4B     		ldr	r3, .L38
 289 0006 D3ED010A 		vldr.32	s1, [r3, #4]
 290 000a D0ED037A 		vldr.32	s15, [r0, #12]
 291 000e 70EEE70A 		vsub.f32	s1, s1, s15
 292 0012 9FED090A 		vldr.32	s0, .L38+4
 293 0016 FFF7FEFF 		bl	Pos_Set_Angle
 294              	.LVL19:
ARM GAS  /tmp/cceDm8rr.s 			page 13


 295 001a 10B9     		cbnz	r0, .L37
  78:Src/gas.c     **** }
 296              		.loc 1 78 0
 297 001c 074B     		ldr	r3, .L38+8
 298 001e 2360     		str	r3, [r4]
 299              	.L33:
  79:Src/gas.c     **** 
 300              		.loc 1 79 0
 301 0020 10BD     		pop	{r4, pc}
 302              	.LVL20:
 303              	.L37:
  72:Src/gas.c     ****     fsm->state = FSM_ERROR;
 304              		.loc 1 72 0
 305 0022 0748     		ldr	r0, .L38+12
 306 0024 FFF7FEFF 		bl	PI_Log
 307              	.LVL21:
  73:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
 308              		.loc 1 73 0
 309 0028 0223     		movs	r3, #2
 310 002a 2371     		strb	r3, [r4, #4]
  74:Src/gas.c     ****     return;
 311              		.loc 1 74 0
 312 002c 054B     		ldr	r3, .L38+16
 313 002e 2360     		str	r3, [r4]
  75:Src/gas.c     ****   }
 314              		.loc 1 75 0
 315 0030 F6E7     		b	.L33
 316              	.L39:
 317 0032 00BF     		.align	2
 318              	.L38:
 319 0034 00000000 		.word	me
 320 0038 C3F54840 		.word	1078523331
 321 003c 00000000 		.word	FSM_ROTATION_WAIT
 322 0040 00000000 		.word	.LC0
 323 0044 00000000 		.word	FSM_ROTATION_END
 324              		.cfi_endproc
 325              	.LFE682:
 327              		.section	.text.FSM_ROTATION_WAIT,"ax",%progbits
 328              		.align	1
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	FSM_ROTATION_WAIT:
 335              	.LFB683:
  81:Src/gas.c     ****   Position_State pos_state;
 336              		.loc 1 81 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              	.LVL22:
 341 0000 10B5     		push	{r4, lr}
 342              	.LCFI8:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 4, -8
 345              		.cfi_offset 14, -4
 346 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cceDm8rr.s 			page 14


 347              	.LCFI9:
 348              		.cfi_def_cfa_offset 16
 349 0004 0446     		mov	r4, r0
  83:Src/gas.c     ****     PI_Log("Pos_Get_State : pas de réponse.\n");
 350              		.loc 1 83 0
 351 0006 0DF10700 		add	r0, sp, #7
 352              	.LVL23:
 353 000a FFF7FEFF 		bl	Pos_Get_State
 354              	.LVL24:
 355 000e 40B9     		cbnz	r0, .L48
  90:Src/gas.c     ****     fsm->state = FSM_SUCCESS;
 356              		.loc 1 90 0
 357 0010 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 358 0014 012B     		cmp	r3, #1
 359 0016 0CD1     		bne	.L43
  91:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
 360              		.loc 1 91 0
 361 0018 2371     		strb	r3, [r4, #4]
  92:Src/gas.c     ****     return;
 362              		.loc 1 92 0
 363 001a 0E4B     		ldr	r3, .L49
 364 001c 2360     		str	r3, [r4]
 365              	.L40:
 103:Src/gas.c     **** 
 366              		.loc 1 103 0
 367 001e 02B0     		add	sp, sp, #8
 368              	.LCFI10:
 369              		.cfi_remember_state
 370              		.cfi_def_cfa_offset 8
 371              		@ sp needed
 372 0020 10BD     		pop	{r4, pc}
 373              	.LVL25:
 374              	.L48:
 375              	.LCFI11:
 376              		.cfi_restore_state
  84:Src/gas.c     ****     fsm->state = FSM_ERROR;
 377              		.loc 1 84 0
 378 0022 0D48     		ldr	r0, .L49+4
 379 0024 FFF7FEFF 		bl	PI_Log
 380              	.LVL26:
  85:Src/gas.c     ****     fsm->run = FSM_ROTATION_END;
 381              		.loc 1 85 0
 382 0028 0223     		movs	r3, #2
 383 002a 2371     		strb	r3, [r4, #4]
  86:Src/gas.c     ****     return;
 384              		.loc 1 86 0
 385 002c 094B     		ldr	r3, .L49
 386 002e 2360     		str	r3, [r4]
  87:Src/gas.c     ****   }
 387              		.loc 1 87 0
 388 0030 F5E7     		b	.L40
 389              	.L43:
  96:Src/gas.c     ****     fsm->retry_count--;
 390              		.loc 1 96 0
 391 0032 FFF7FEFF 		bl	Can_Rotate
 392              	.LVL27:
 393 0036 18B1     		cbz	r0, .L44
ARM GAS  /tmp/cceDm8rr.s 			page 15


  96:Src/gas.c     ****     fsm->retry_count--;
 394              		.loc 1 96 0 is_stmt 0 discriminator 1
 395 0038 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 396 003c 022B     		cmp	r3, #2
 397 003e 05D1     		bne	.L45
 398              	.L44:
  97:Src/gas.c     ****     fsm->run = FSM_ROTATION_STOP;
 399              		.loc 1 97 0 is_stmt 1
 400 0040 A368     		ldr	r3, [r4, #8]
 401 0042 013B     		subs	r3, r3, #1
 402 0044 A360     		str	r3, [r4, #8]
  98:Src/gas.c     ****     return;
 403              		.loc 1 98 0
 404 0046 054B     		ldr	r3, .L49+8
 405 0048 2360     		str	r3, [r4]
  99:Src/gas.c     ****   }
 406              		.loc 1 99 0
 407 004a E8E7     		b	.L40
 408              	.L45:
 102:Src/gas.c     **** }
 409              		.loc 1 102 0
 410 004c 3220     		movs	r0, #50
 411 004e FFF7FEFF 		bl	HAL_Delay
 412              	.LVL28:
 413 0052 E4E7     		b	.L40
 414              	.L50:
 415              		.align	2
 416              	.L49:
 417 0054 00000000 		.word	FSM_ROTATION_END
 418 0058 00000000 		.word	.LC1
 419 005c 00000000 		.word	FSM_ROTATION_STOP
 420              		.cfi_endproc
 421              	.LFE683:
 423              		.global	__aeabi_i2d
 424              		.global	__aeabi_dadd
 425              		.global	__aeabi_d2f
 426              		.section	.text.FSM_MOVE_INIT,"ax",%progbits
 427              		.align	1
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	FSM_MOVE_INIT:
 434              	.LFB688:
 181:Src/gas.c     ****   if(fsm->retry_count <= 0){
 435              		.loc 1 181 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              	.LVL29:
 440 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 441              	.LCFI12:
 442              		.cfi_def_cfa_offset 24
 443              		.cfi_offset 3, -24
 444              		.cfi_offset 4, -20
 445              		.cfi_offset 5, -16
 446              		.cfi_offset 6, -12
ARM GAS  /tmp/cceDm8rr.s 			page 16


 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 2DED028B 		vpush.64	{d8}
 450              	.LCFI13:
 451              		.cfi_def_cfa_offset 32
 452              		.cfi_offset 80, -32
 453              		.cfi_offset 81, -28
 182:Src/gas.c     ****     fsm->state = FSM_ERROR;
 454              		.loc 1 182 0
 455 0006 8368     		ldr	r3, [r0, #8]
 456 0008 002B     		cmp	r3, #0
 457 000a 39DD     		ble	.L56
 458 000c 0446     		mov	r4, r0
 188:Src/gas.c     **** 
 459              		.loc 1 188 0
 460 000e C089     		ldrh	r0, [r0, #14]
 461              	.LVL30:
 462 0010 254D     		ldr	r5, .L57+8
 463 0012 6B88     		ldrh	r3, [r5, #2]
 464 0014 9FED228B 		vldr.64	d8, .L57
 465 0018 C01A     		subs	r0, r0, r3
 466 001a FFF7FEFF 		bl	__aeabi_i2d
 467              	.LVL31:
 468 001e B0EE481A 		vmov.f32	s2, s16
 469 0022 F0EE681A 		vmov.f32	s3, s17
 470 0026 41EC100B 		vmov	d0, r0, r1
 471 002a FFF7FEFF 		bl	pow
 472              	.LVL32:
 473 002e 57EC106B 		vmov	r6, r7, d0
 474 0032 A089     		ldrh	r0, [r4, #12]
 475 0034 2B88     		ldrh	r3, [r5]
 476 0036 C01A     		subs	r0, r0, r3
 477 0038 FFF7FEFF 		bl	__aeabi_i2d
 478              	.LVL33:
 479 003c B0EE481A 		vmov.f32	s2, s16
 480 0040 F0EE681A 		vmov.f32	s3, s17
 481 0044 41EC100B 		vmov	d0, r0, r1
 482 0048 FFF7FEFF 		bl	pow
 483              	.LVL34:
 484 004c 53EC102B 		vmov	r2, r3, d0
 485 0050 3046     		mov	r0, r6
 486 0052 3946     		mov	r1, r7
 487 0054 FFF7FEFF 		bl	__aeabi_dadd
 488              	.LVL35:
 489 0058 41EC100B 		vmov	d0, r0, r1
 490 005c FFF7FEFF 		bl	sqrt
 491              	.LVL36:
 492 0060 51EC100B 		vmov	r0, r1, d0
 493 0064 FFF7FEFF 		bl	__aeabi_d2f
 494              	.LVL37:
 495 0068 00EE100A 		vmov	s0, r0
 496 006c E061     		str	r0, [r4, #28]	@ float
 190:Src/gas.c     ****     fsm->run = FSM_MOVE_CMD;
 497              		.loc 1 190 0
 498 006e 04F11801 		add	r1, r4, #24
 499 0072 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 500 0074 FFF7FEFF 		bl	Can_Move
ARM GAS  /tmp/cceDm8rr.s 			page 17


 501              	.LVL38:
 502 0078 48B1     		cbz	r0, .L54
 191:Src/gas.c     ****   }else{
 503              		.loc 1 191 0
 504 007a 0C4B     		ldr	r3, .L57+12
 505 007c 2360     		str	r3, [r4]
 506 007e 03E0     		b	.L51
 507              	.LVL39:
 508              	.L56:
 183:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 509              		.loc 1 183 0
 510 0080 0223     		movs	r3, #2
 511 0082 0371     		strb	r3, [r0, #4]
 184:Src/gas.c     ****     return;
 512              		.loc 1 184 0
 513 0084 0A4B     		ldr	r3, .L57+16
 514 0086 0360     		str	r3, [r0]
 515              	.LVL40:
 516              	.L51:
 197:Src/gas.c     **** 
 517              		.loc 1 197 0
 518 0088 BDEC028B 		vldm	sp!, {d8}
 519              	.LCFI14:
 520              		.cfi_remember_state
 521              		.cfi_restore 80
 522              		.cfi_restore 81
 523              		.cfi_def_cfa_offset 24
 524 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 525              	.LVL41:
 526              	.L54:
 527              	.LCFI15:
 528              		.cfi_restore_state
 193:Src/gas.c     ****     HAL_Delay(WAIT_TIME);
 529              		.loc 1 193 0
 530 008e A368     		ldr	r3, [r4, #8]
 531 0090 013B     		subs	r3, r3, #1
 532 0092 A360     		str	r3, [r4, #8]
 194:Src/gas.c     ****     //Same state
 533              		.loc 1 194 0
 534 0094 3220     		movs	r0, #50
 535 0096 FFF7FEFF 		bl	HAL_Delay
 536              	.LVL42:
 537 009a F5E7     		b	.L51
 538              	.L58:
 539 009c AFF30080 		.align	3
 540              	.L57:
 541 00a0 00000000 		.word	0
 542 00a4 00000040 		.word	1073741824
 543 00a8 00000000 		.word	me
 544 00ac 00000000 		.word	FSM_MOVE_CMD
 545 00b0 00000000 		.word	FSM_MOVE_END
 546              		.cfi_endproc
 547              	.LFE688:
 549              		.section	.text.FSM_MOVE_WAIT,"ax",%progbits
 550              		.align	1
 551              		.syntax unified
 552              		.thumb
ARM GAS  /tmp/cceDm8rr.s 			page 18


 553              		.thumb_func
 554              		.fpu fpv4-sp-d16
 556              	FSM_MOVE_WAIT:
 557              	.LFB690:
 213:Src/gas.c     ****   Position_State state;
 558              		.loc 1 213 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              	.LVL43:
 563 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 564              	.LCFI16:
 565              		.cfi_def_cfa_offset 20
 566              		.cfi_offset 4, -20
 567              		.cfi_offset 5, -16
 568              		.cfi_offset 6, -12
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 2DED028B 		vpush.64	{d8}
 572              	.LCFI17:
 573              		.cfi_def_cfa_offset 28
 574              		.cfi_offset 80, -28
 575              		.cfi_offset 81, -24
 576 0006 83B0     		sub	sp, sp, #12
 577              	.LCFI18:
 578              		.cfi_def_cfa_offset 40
 579 0008 0446     		mov	r4, r0
 215:Src/gas.c     ****     PI_Log("Pos_Get_State : pas de réponse.\n");
 580              		.loc 1 215 0
 581 000a 0DF10700 		add	r0, sp, #7
 582              	.LVL44:
 583 000e FFF7FEFF 		bl	Pos_Get_State
 584              	.LVL45:
 585 0012 50B9     		cbnz	r0, .L67
 223:Src/gas.c     ****     fsm->state = FSM_SUCCESS;
 586              		.loc 1 223 0
 587 0014 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 588 0018 012B     		cmp	r3, #1
 589 001a 0ED1     		bne	.L62
 224:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 590              		.loc 1 224 0
 591 001c 2371     		strb	r3, [r4, #4]
 225:Src/gas.c     ****     return;
 592              		.loc 1 225 0
 593 001e 2C4B     		ldr	r3, .L68+8
 594 0020 2360     		str	r3, [r4]
 595              	.L59:
 239:Src/gas.c     **** 
 596              		.loc 1 239 0
 597 0022 03B0     		add	sp, sp, #12
 598              	.LCFI19:
 599              		.cfi_remember_state
 600              		.cfi_def_cfa_offset 28
 601              		@ sp needed
 602 0024 BDEC028B 		vldm	sp!, {d8}
 603              	.LCFI20:
 604              		.cfi_restore 80
ARM GAS  /tmp/cceDm8rr.s 			page 19


 605              		.cfi_restore 81
 606              		.cfi_def_cfa_offset 20
 607 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 608              	.LVL46:
 609              	.L67:
 610              	.LCFI21:
 611              		.cfi_restore_state
 216:Src/gas.c     ****     fsm->state = FSM_ERROR;
 612              		.loc 1 216 0
 613 002a 2A48     		ldr	r0, .L68+12
 614 002c FFF7FEFF 		bl	PI_Log
 615              	.LVL47:
 217:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 616              		.loc 1 217 0
 617 0030 0223     		movs	r3, #2
 618 0032 2371     		strb	r3, [r4, #4]
 218:Src/gas.c     ****     return;
 619              		.loc 1 218 0
 620 0034 264B     		ldr	r3, .L68+8
 621 0036 2360     		str	r3, [r4]
 219:Src/gas.c     ****   }
 622              		.loc 1 219 0
 623 0038 F3E7     		b	.L59
 624              	.L62:
 230:Src/gas.c     ****   if(!Can_Move(fsm->g_dist, fsm->forward, &fsm->max_speed_ratio) || state == POS_ERROR){
 625              		.loc 1 230 0
 626 003a E089     		ldrh	r0, [r4, #14]
 627 003c 264D     		ldr	r5, .L68+16
 628 003e 6B88     		ldrh	r3, [r5, #2]
 629 0040 9FED218B 		vldr.64	d8, .L68
 630 0044 C01A     		subs	r0, r0, r3
 631 0046 FFF7FEFF 		bl	__aeabi_i2d
 632              	.LVL48:
 633 004a B0EE481A 		vmov.f32	s2, s16
 634 004e F0EE681A 		vmov.f32	s3, s17
 635 0052 41EC100B 		vmov	d0, r0, r1
 636 0056 FFF7FEFF 		bl	pow
 637              	.LVL49:
 638 005a 57EC106B 		vmov	r6, r7, d0
 639 005e A089     		ldrh	r0, [r4, #12]
 640 0060 2B88     		ldrh	r3, [r5]
 641 0062 C01A     		subs	r0, r0, r3
 642 0064 FFF7FEFF 		bl	__aeabi_i2d
 643              	.LVL50:
 644 0068 B0EE481A 		vmov.f32	s2, s16
 645 006c F0EE681A 		vmov.f32	s3, s17
 646 0070 41EC100B 		vmov	d0, r0, r1
 647 0074 FFF7FEFF 		bl	pow
 648              	.LVL51:
 649 0078 53EC102B 		vmov	r2, r3, d0
 650 007c 3046     		mov	r0, r6
 651 007e 3946     		mov	r1, r7
 652 0080 FFF7FEFF 		bl	__aeabi_dadd
 653              	.LVL52:
 654 0084 41EC100B 		vmov	d0, r0, r1
 655 0088 FFF7FEFF 		bl	sqrt
 656              	.LVL53:
ARM GAS  /tmp/cceDm8rr.s 			page 20


 657 008c 51EC100B 		vmov	r0, r1, d0
 658 0090 FFF7FEFF 		bl	__aeabi_d2f
 659              	.LVL54:
 660 0094 00EE100A 		vmov	s0, r0
 661 0098 E061     		str	r0, [r4, #28]	@ float
 231:Src/gas.c     ****     fsm->retry_count--;
 662              		.loc 1 231 0
 663 009a 04F11801 		add	r1, r4, #24
 664 009e 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 665 00a0 FFF7FEFF 		bl	Can_Move
 666              	.LVL55:
 667 00a4 18B1     		cbz	r0, .L63
 231:Src/gas.c     ****     fsm->retry_count--;
 668              		.loc 1 231 0 is_stmt 0 discriminator 1
 669 00a6 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 670 00aa 022B     		cmp	r3, #2
 671 00ac 05D1     		bne	.L64
 672              	.L63:
 232:Src/gas.c     ****     fsm->run = FSM_MOVE_STOP;
 673              		.loc 1 232 0 is_stmt 1
 674 00ae A368     		ldr	r3, [r4, #8]
 675 00b0 013B     		subs	r3, r3, #1
 676 00b2 A360     		str	r3, [r4, #8]
 233:Src/gas.c     ****     return;
 677              		.loc 1 233 0
 678 00b4 094B     		ldr	r3, .L68+20
 679 00b6 2360     		str	r3, [r4]
 234:Src/gas.c     ****   }
 680              		.loc 1 234 0
 681 00b8 B3E7     		b	.L59
 682              	.L64:
 237:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 683              		.loc 1 237 0
 684 00ba 094B     		ldr	r3, .L68+24
 685 00bc 2360     		str	r3, [r4]
 238:Src/gas.c     **** }
 686              		.loc 1 238 0
 687 00be 3220     		movs	r0, #50
 688 00c0 FFF7FEFF 		bl	HAL_Delay
 689              	.LVL56:
 690 00c4 ADE7     		b	.L59
 691              	.L69:
 692 00c6 00BF     		.align	3
 693              	.L68:
 694 00c8 00000000 		.word	0
 695 00cc 00000040 		.word	1073741824
 696 00d0 00000000 		.word	FSM_MOVE_END
 697 00d4 00000000 		.word	.LC1
 698 00d8 00000000 		.word	me
 699 00dc 00000000 		.word	FSM_MOVE_STOP
 700 00e0 00000000 		.word	FSM_MOVE_CMD
 701              		.cfi_endproc
 702              	.LFE690:
 704              		.global	__aeabi_f2d
 705              		.global	__aeabi_dmul
 706              		.global	__aeabi_dcmplt
 707              		.section	.text.FSM_MOVE_CMD,"ax",%progbits
ARM GAS  /tmp/cceDm8rr.s 			page 21


 708              		.align	1
 709              		.syntax unified
 710              		.thumb
 711              		.thumb_func
 712              		.fpu fpv4-sp-d16
 714              	FSM_MOVE_CMD:
 715              	.LFB689:
 199:Src/gas.c     ****   float speed = min(MAX_SPEED * fsm->speed_ratio,
 716              		.loc 1 199 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              	.LVL57:
 721 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 722              	.LCFI22:
 723              		.cfi_def_cfa_offset 24
 724              		.cfi_offset 4, -24
 725              		.cfi_offset 6, -20
 726              		.cfi_offset 7, -16
 727              		.cfi_offset 8, -12
 728              		.cfi_offset 9, -8
 729              		.cfi_offset 14, -4
 730 0004 0446     		mov	r4, r0
 200:Src/gas.c     **** 		    MIN_SPEED + (MAX_SPEED-MIN_SPEED)*fsm->max_speed_ratio);
 731              		.loc 1 200 0
 732 0006 4069     		ldr	r0, [r0, #20]	@ float
 733              	.LVL58:
 734 0008 FFF7FEFF 		bl	__aeabi_f2d
 735              	.LVL59:
 736 000c 0022     		movs	r2, #0
 737 000e 204B     		ldr	r3, .L80+8
 738 0010 FFF7FEFF 		bl	__aeabi_dmul
 739              	.LVL60:
 740 0014 8046     		mov	r8, r0
 741 0016 8946     		mov	r9, r1
 742 0018 A069     		ldr	r0, [r4, #24]	@ float
 743 001a FFF7FEFF 		bl	__aeabi_f2d
 744              	.LVL61:
 745 001e 1AA3     		adr	r3, .L80
 746 0020 D3E90023 		ldrd	r2, [r3]
 747 0024 FFF7FEFF 		bl	__aeabi_dmul
 748              	.LVL62:
 749 0028 0022     		movs	r2, #0
 750 002a 1A4B     		ldr	r3, .L80+12
 751 002c FFF7FEFF 		bl	__aeabi_dadd
 752              	.LVL63:
 753 0030 0646     		mov	r6, r0
 754 0032 0F46     		mov	r7, r1
 755 0034 0246     		mov	r2, r0
 756 0036 0B46     		mov	r3, r1
 757 0038 4046     		mov	r0, r8
 758 003a 4946     		mov	r1, r9
 759 003c FFF7FEFF 		bl	__aeabi_dcmplt
 760              	.LVL64:
 761 0040 08B1     		cbz	r0, .L71
 762 0042 4646     		mov	r6, r8
 763 0044 4F46     		mov	r7, r9
ARM GAS  /tmp/cceDm8rr.s 			page 22


 764              	.L71:
 200:Src/gas.c     **** 		    MIN_SPEED + (MAX_SPEED-MIN_SPEED)*fsm->max_speed_ratio);
 765              		.loc 1 200 0 is_stmt 0 discriminator 4
 766 0046 3046     		mov	r0, r6
 767 0048 3946     		mov	r1, r7
 768 004a FFF7FEFF 		bl	__aeabi_d2f
 769              	.LVL65:
 202:Src/gas.c     ****   if(Pos_Go_Forward(speed, distance) != 0){
 770              		.loc 1 202 0 is_stmt 1 discriminator 4
 771 004e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 772 0050 73B1     		cbz	r3, .L76
 202:Src/gas.c     ****   if(Pos_Go_Forward(speed, distance) != 0){
 773              		.loc 1 202 0 is_stmt 0
 774 0052 F7EE007A 		vmov.f32	s15, #1.0e+0
 775              	.L73:
 202:Src/gas.c     ****   if(Pos_Go_Forward(speed, distance) != 0){
 776              		.loc 1 202 0 discriminator 4
 777 0056 D4ED070A 		vldr.32	s1, [r4, #28]
 778              	.LVL66:
 203:Src/gas.c     ****     PI_Log("Pos_Go_Forward : pas de réponse.\n");
 779              		.loc 1 203 0 is_stmt 1 discriminator 4
 780 005a 60EEA70A 		vmul.f32	s1, s1, s15
 781              	.LVL67:
 782 005e 00EE100A 		vmov	s0, r0
 783 0062 FFF7FEFF 		bl	Pos_Go_Forward
 784              	.LVL68:
 785 0066 30B9     		cbnz	r0, .L79
 210:Src/gas.c     **** }
 786              		.loc 1 210 0
 787 0068 0B4B     		ldr	r3, .L80+16
 788 006a 2360     		str	r3, [r4]
 789              	.L70:
 211:Src/gas.c     **** 
 790              		.loc 1 211 0
 791 006c BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 792              	.LVL69:
 793              	.L76:
 202:Src/gas.c     ****   if(Pos_Go_Forward(speed, distance) != 0){
 794              		.loc 1 202 0
 795 0070 FFEE007A 		vmov.f32	s15, #-1.0e+0
 796 0074 EFE7     		b	.L73
 797              	.LVL70:
 798              	.L79:
 204:Src/gas.c     ****     fsm->state = FSM_ERROR;
 799              		.loc 1 204 0
 800 0076 0948     		ldr	r0, .L80+20
 801 0078 FFF7FEFF 		bl	PI_Log
 802              	.LVL71:
 205:Src/gas.c     ****     fsm->run = FSM_MOVE_END;
 803              		.loc 1 205 0
 804 007c 0223     		movs	r3, #2
 805 007e 2371     		strb	r3, [r4, #4]
 206:Src/gas.c     ****     return;
 806              		.loc 1 206 0
 807 0080 074B     		ldr	r3, .L80+24
 808 0082 2360     		str	r3, [r4]
 207:Src/gas.c     ****   }
ARM GAS  /tmp/cceDm8rr.s 			page 23


 809              		.loc 1 207 0
 810 0084 F2E7     		b	.L70
 811              	.L81:
 812 0086 00BF     		.align	3
 813              	.L80:
 814 0088 00000000 		.word	0
 815 008c 00C06740 		.word	1080541184
 816 0090 00006940 		.word	1080623104
 817 0094 00002440 		.word	1076101120
 818 0098 00000000 		.word	FSM_MOVE_WAIT
 819 009c 00000000 		.word	.LC2
 820 00a0 00000000 		.word	FSM_MOVE_END
 821              		.cfi_endproc
 822              	.LFE689:
 824              		.section	.text.Make_Path,"ax",%progbits
 825              		.align	1
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu fpv4-sp-d16
 831              	Make_Path:
 832              	.LFB697:
 385:Src/gas.c     **** 
 386:Src/gas.c     **** static Cell* Make_Path(uint16_t x_goal, uint16_t y_goal){
 833              		.loc 1 386 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              	.LVL72:
 838 0000 70B5     		push	{r4, r5, r6, lr}
 839              	.LCFI23:
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 4, -16
 842              		.cfi_offset 5, -12
 843              		.cfi_offset 6, -8
 844              		.cfi_offset 14, -4
 845 0002 0446     		mov	r4, r0
 846 0004 0D46     		mov	r5, r1
 387:Src/gas.c     ****   Cell *const start = Cell_From_Pos(me.x, me.y);
 847              		.loc 1 387 0
 848 0006 0D4B     		ldr	r3, .L87
 849 0008 5988     		ldrh	r1, [r3, #2]
 850              	.LVL73:
 851 000a 1888     		ldrh	r0, [r3]
 852              	.LVL74:
 853 000c FFF7FEFF 		bl	Cell_From_Pos
 854              	.LVL75:
 855 0010 0646     		mov	r6, r0
 856              	.LVL76:
 388:Src/gas.c     ****   Cell *const goal = Cell_From_Pos(x_goal, y_goal);
 857              		.loc 1 388 0
 858 0012 2946     		mov	r1, r5
 859 0014 2046     		mov	r0, r4
 860              	.LVL77:
 861 0016 FFF7FEFF 		bl	Cell_From_Pos
 862              	.LVL78:
 863 001a 0446     		mov	r4, r0
ARM GAS  /tmp/cceDm8rr.s 			page 24


 864              	.LVL79:
 389:Src/gas.c     **** 
 390:Src/gas.c     ****   //If obstacles can't be drawn
 391:Src/gas.c     ****   if((Materialize_Obstacles(MARGIN_MAX) != 0)
 865              		.loc 1 391 0
 866 001c 9620     		movs	r0, #150
 867              	.LVL80:
 868 001e FFF7FEFF 		bl	Materialize_Obstacles
 869              	.LVL81:
 870 0022 18B1     		cbz	r0, .L83
 392:Src/gas.c     ****      && (Materialize_Obstacles(MARGIN_MIN) != 0)){
 871              		.loc 1 392 0
 872 0024 3820     		movs	r0, #56
 873 0026 FFF7FEFF 		bl	Materialize_Obstacles
 874              	.LVL82:
 875 002a 20B9     		cbnz	r0, .L85
 876              	.L83:
 393:Src/gas.c     ****     return NULL;
 394:Src/gas.c     ****   }
 395:Src/gas.c     **** 
 396:Src/gas.c     ****   return Compute_Path(start, goal);
 877              		.loc 1 396 0
 878 002c 2146     		mov	r1, r4
 879 002e 3046     		mov	r0, r6
 880 0030 FFF7FEFF 		bl	A_Star
 881              	.LVL83:
 882              	.L82:
 397:Src/gas.c     **** }
 883              		.loc 1 397 0
 884 0034 70BD     		pop	{r4, r5, r6, pc}
 885              	.LVL84:
 886              	.L85:
 393:Src/gas.c     ****     return NULL;
 887              		.loc 1 393 0
 888 0036 0020     		movs	r0, #0
 889 0038 FCE7     		b	.L82
 890              	.L88:
 891 003a 00BF     		.align	2
 892              	.L87:
 893 003c 00000000 		.word	me
 894              		.cfi_endproc
 895              	.LFE697:
 897              		.section	.text.Update_Path,"ax",%progbits
 898              		.align	1
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu fpv4-sp-d16
 904              	Update_Path:
 905              	.LFB695:
 361:Src/gas.c     ****   Refresh_Map();
 906              		.loc 1 361 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              	.LVL85:
 911 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/cceDm8rr.s 			page 25


 912              	.LCFI24:
 913              		.cfi_def_cfa_offset 16
 914              		.cfi_offset 4, -16
 915              		.cfi_offset 5, -12
 916              		.cfi_offset 6, -8
 917              		.cfi_offset 14, -4
 918 0002 0546     		mov	r5, r0
 919 0004 0E46     		mov	r6, r1
 920 0006 1446     		mov	r4, r2
 362:Src/gas.c     ****   Materialize_Obstacles(MARGIN_MAX);
 921              		.loc 1 362 0
 922 0008 FFF7FEFF 		bl	Refresh_Map
 923              	.LVL86:
 363:Src/gas.c     ****   if(Check_Path(*current_path) == 0){
 924              		.loc 1 363 0
 925 000c 9620     		movs	r0, #150
 926 000e FFF7FEFF 		bl	Materialize_Obstacles
 927              	.LVL87:
 364:Src/gas.c     ****     return 0;
 928              		.loc 1 364 0
 929 0012 2068     		ldr	r0, [r4]
 930 0014 FFF7FEFF 		bl	Check_Path
 931              	.LVL88:
 932 0018 0346     		mov	r3, r0
 933 001a 08B9     		cbnz	r0, .L92
 934              	.L89:
 370:Src/gas.c     **** 
 935              		.loc 1 370 0
 936 001c 1846     		mov	r0, r3
 937 001e 70BD     		pop	{r4, r5, r6, pc}
 938              	.LVL89:
 939              	.L92:
 368:Src/gas.c     ****   return 1;
 940              		.loc 1 368 0
 941 0020 3146     		mov	r1, r6
 942 0022 2846     		mov	r0, r5
 943 0024 FFF7FEFF 		bl	Make_Path
 944              	.LVL90:
 945 0028 2060     		str	r0, [r4]
 369:Src/gas.c     **** }
 946              		.loc 1 369 0
 947 002a 0123     		movs	r3, #1
 948 002c F6E7     		b	.L89
 949              		.cfi_endproc
 950              	.LFE695:
 952              		.section	.text.Brake,"ax",%progbits
 953              		.align	1
 954              		.global	Brake
 955              		.syntax unified
 956              		.thumb
 957              		.thumb_func
 958              		.fpu fpv4-sp-d16
 960              	Brake:
 961              	.LFB679:
  14:Src/gas.c     ****   while(Pos_Brake() != 0){
 962              		.loc 1 14 0
 963              		.cfi_startproc
ARM GAS  /tmp/cceDm8rr.s 			page 26


 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966 0000 08B5     		push	{r3, lr}
 967              	.LCFI25:
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 3, -8
 970              		.cfi_offset 14, -4
  15:Src/gas.c     ****     PI_Log("Pos_Brake : pas de réponse.\n");
 971              		.loc 1 15 0
 972 0002 05E0     		b	.L94
 973              	.L95:
  16:Src/gas.c     ****     HAL_Delay(10);
 974              		.loc 1 16 0
 975 0004 0548     		ldr	r0, .L97
 976 0006 FFF7FEFF 		bl	PI_Log
 977              	.LVL91:
  17:Src/gas.c     ****   }
 978              		.loc 1 17 0
 979 000a 0A20     		movs	r0, #10
 980 000c FFF7FEFF 		bl	HAL_Delay
 981              	.LVL92:
 982              	.L94:
  15:Src/gas.c     ****     PI_Log("Pos_Brake : pas de réponse.\n");
 983              		.loc 1 15 0
 984 0010 FFF7FEFF 		bl	Pos_Brake
 985              	.LVL93:
 986 0014 0028     		cmp	r0, #0
 987 0016 F5D1     		bne	.L95
  19:Src/gas.c     **** 
 988              		.loc 1 19 0
 989 0018 08BD     		pop	{r3, pc}
 990              	.L98:
 991 001a 00BF     		.align	2
 992              	.L97:
 993 001c 00000000 		.word	.LC3
 994              		.cfi_endproc
 995              	.LFE679:
 997              		.section	.text.FSM_ROTATION_STOP,"ax",%progbits
 998              		.align	1
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1002              		.fpu fpv4-sp-d16
 1004              	FSM_ROTATION_STOP:
 1005              	.LFB684:
 105:Src/gas.c     ****   Brake();
 1006              		.loc 1 105 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 0
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010              	.LVL94:
 1011 0000 10B5     		push	{r4, lr}
 1012              	.LCFI26:
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 4, -8
 1015              		.cfi_offset 14, -4
 1016 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cceDm8rr.s 			page 27


 106:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 1017              		.loc 1 106 0
 1018 0004 FFF7FEFF 		bl	Brake
 1019              	.LVL95:
 107:Src/gas.c     ****   fsm->run = FSM_ROTATION_INIT;
 1020              		.loc 1 107 0
 1021 0008 3220     		movs	r0, #50
 1022 000a FFF7FEFF 		bl	HAL_Delay
 1023              	.LVL96:
 108:Src/gas.c     **** }
 1024              		.loc 1 108 0
 1025 000e 014B     		ldr	r3, .L101
 1026 0010 2360     		str	r3, [r4]
 109:Src/gas.c     **** 
 1027              		.loc 1 109 0
 1028 0012 10BD     		pop	{r4, pc}
 1029              	.LVL97:
 1030              	.L102:
 1031              		.align	2
 1032              	.L101:
 1033 0014 00000000 		.word	FSM_ROTATION_INIT
 1034              		.cfi_endproc
 1035              	.LFE684:
 1037              		.section	.text.FSM_MOVE_STOP,"ax",%progbits
 1038              		.align	1
 1039              		.syntax unified
 1040              		.thumb
 1041              		.thumb_func
 1042              		.fpu fpv4-sp-d16
 1044              	FSM_MOVE_STOP:
 1045              	.LFB691:
 241:Src/gas.c     ****   Brake();
 1046              		.loc 1 241 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              	.LVL98:
 1051 0000 10B5     		push	{r4, lr}
 1052              	.LCFI27:
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 4, -8
 1055              		.cfi_offset 14, -4
 1056 0002 0446     		mov	r4, r0
 242:Src/gas.c     ****   HAL_Delay(WAIT_TIME);
 1057              		.loc 1 242 0
 1058 0004 FFF7FEFF 		bl	Brake
 1059              	.LVL99:
 243:Src/gas.c     ****   fsm->run = FSM_MOVE_INIT;
 1060              		.loc 1 243 0
 1061 0008 3220     		movs	r0, #50
 1062 000a FFF7FEFF 		bl	HAL_Delay
 1063              	.LVL100:
 244:Src/gas.c     **** }
 1064              		.loc 1 244 0
 1065 000e 014B     		ldr	r3, .L105
 1066 0010 2360     		str	r3, [r4]
 245:Src/gas.c     **** 
ARM GAS  /tmp/cceDm8rr.s 			page 28


 1067              		.loc 1 245 0
 1068 0012 10BD     		pop	{r4, pc}
 1069              	.LVL101:
 1070              	.L106:
 1071              		.align	2
 1072              	.L105:
 1073 0014 00000000 		.word	FSM_MOVE_INIT
 1074              		.cfi_endproc
 1075              	.LFE691:
 1077              		.section	.text.Rotate,"ax",%progbits
 1078              		.align	1
 1079              		.global	Rotate
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	Rotate:
 1086              	.LFB680:
  42:Src/gas.c     ****   FSM_Rotation fsm;
 1087              		.loc 1 42 0
 1088              		.cfi_startproc
 1089              		@ args = 0, pretend = 0, frame = 16
 1090              		@ frame_needed = 0, uses_anonymous_args = 0
 1091              	.LVL102:
 1092 0000 00B5     		push	{lr}
 1093              	.LCFI28:
 1094              		.cfi_def_cfa_offset 4
 1095              		.cfi_offset 14, -4
 1096 0002 85B0     		sub	sp, sp, #20
 1097              	.LCFI29:
 1098              		.cfi_def_cfa_offset 24
  44:Src/gas.c     ****   fsm.retry_count = ROTATE_RETRY_COUNT;
 1099              		.loc 1 44 0
 1100 0004 8DED030A 		vstr.32	s0, [sp, #12]
  45:Src/gas.c     ****   fsm.state = FSM_RUNNING;
 1101              		.loc 1 45 0
 1102 0008 1423     		movs	r3, #20
 1103 000a 0293     		str	r3, [sp, #8]
  46:Src/gas.c     ****   fsm.run = FSM_ROTATION_INIT;
 1104              		.loc 1 46 0
 1105 000c 0023     		movs	r3, #0
 1106 000e 8DF80430 		strb	r3, [sp, #4]
  47:Src/gas.c     ****   do{
 1107              		.loc 1 47 0
 1108 0012 094B     		ldr	r3, .L112
 1109 0014 0093     		str	r3, [sp]
 1110              	.LVL103:
 1111              	.L108:
  49:Src/gas.c     ****   }while(fsm.state == FSM_RUNNING);
 1112              		.loc 1 49 0 discriminator 1
 1113 0016 04A8     		add	r0, sp, #16
 1114 0018 50F8103D 		ldr	r3, [r0, #-16]!
 1115 001c 9847     		blx	r3
 1116              	.LVL104:
  50:Src/gas.c     ****   return (fsm.state == FSM_SUCCESS)?(0):(-1);
 1117              		.loc 1 50 0 discriminator 1
 1118 001e 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
ARM GAS  /tmp/cceDm8rr.s 			page 29


 1119 0022 002B     		cmp	r3, #0
 1120 0024 F7D0     		beq	.L108
  51:Src/gas.c     **** }
 1121              		.loc 1 51 0
 1122 0026 012B     		cmp	r3, #1
 1123 0028 03D1     		bne	.L110
 1124 002a 0020     		movs	r0, #0
 1125              	.L107:
  52:Src/gas.c     **** 
 1126              		.loc 1 52 0
 1127 002c 05B0     		add	sp, sp, #20
 1128              	.LCFI30:
 1129              		.cfi_remember_state
 1130              		.cfi_def_cfa_offset 4
 1131              		@ sp needed
 1132 002e 5DF804FB 		ldr	pc, [sp], #4
 1133              	.L110:
 1134              	.LCFI31:
 1135              		.cfi_restore_state
  51:Src/gas.c     **** }
 1136              		.loc 1 51 0
 1137 0032 4FF0FF30 		mov	r0, #-1
 1138 0036 F9E7     		b	.L107
 1139              	.L113:
 1140              		.align	2
 1141              	.L112:
 1142 0038 00000000 		.word	FSM_ROTATION_INIT
 1143              		.cfi_endproc
 1144              	.LFE680:
 1146              		.global	__aeabi_dcmpgt
 1147              		.global	__aeabi_dsub
 1148              		.section	.text.Go_Straight,"ax",%progbits
 1149              		.align	1
 1150              		.global	Go_Straight
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	Go_Straight:
 1157              	.LFB686:
 145:Src/gas.c     ****   //Compute angle and distance
 1158              		.loc 1 145 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 0
 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              	.LVL105:
 1163 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1164              	.LCFI32:
 1165              		.cfi_def_cfa_offset 32
 1166              		.cfi_offset 3, -32
 1167              		.cfi_offset 4, -28
 1168              		.cfi_offset 5, -24
 1169              		.cfi_offset 6, -20
 1170              		.cfi_offset 7, -16
 1171              		.cfi_offset 8, -12
 1172              		.cfi_offset 9, -8
 1173              		.cfi_offset 14, -4
ARM GAS  /tmp/cceDm8rr.s 			page 30


 1174 0004 2DED028B 		vpush.64	{d8}
 1175              	.LCFI33:
 1176              		.cfi_def_cfa_offset 40
 1177              		.cfi_offset 80, -40
 1178              		.cfi_offset 81, -36
 1179 0008 0546     		mov	r5, r0
 1180 000a 0E46     		mov	r6, r1
 1181 000c 1746     		mov	r7, r2
 1182 000e B0EE408A 		vmov.f32	s16, s0
 147:Src/gas.c     ****   if(!forward){
 1183              		.loc 1 147 0
 1184 0012 294B     		ldr	r3, .L122+16
 1185 0014 5C88     		ldrh	r4, [r3, #2]
 1186 0016 0C1B     		subs	r4, r1, r4
 1187 0018 1888     		ldrh	r0, [r3]
 1188              	.LVL106:
 1189 001a 281A     		subs	r0, r5, r0
 1190 001c FFF7FEFF 		bl	__aeabi_i2d
 1191              	.LVL107:
 1192 0020 8046     		mov	r8, r0
 1193 0022 8946     		mov	r9, r1
 1194 0024 2046     		mov	r0, r4
 1195 0026 FFF7FEFF 		bl	__aeabi_i2d
 1196              	.LVL108:
 1197 002a 49EC118B 		vmov	d1, r8, r9
 1198 002e 41EC100B 		vmov	d0, r0, r1
 1199 0032 FFF7FEFF 		bl	atan2
 1200              	.LVL109:
 1201 0036 51EC100B 		vmov	r0, r1, d0
 1202 003a FFF7FEFF 		bl	__aeabi_d2f
 1203              	.LVL110:
 1204 003e 0446     		mov	r4, r0	@ float
 1205              	.LVL111:
 148:Src/gas.c     ****     g_angle += M_PI;
 1206              		.loc 1 148 0
 1207 0040 4FB9     		cbnz	r7, .L115
 149:Src/gas.c     ****   }
 1208              		.loc 1 149 0
 1209 0042 FFF7FEFF 		bl	__aeabi_f2d
 1210              	.LVL112:
 1211 0046 18A3     		adr	r3, .L122
 1212 0048 D3E90023 		ldrd	r2, [r3]
 1213 004c FFF7FEFF 		bl	__aeabi_dadd
 1214              	.LVL113:
 1215 0050 FFF7FEFF 		bl	__aeabi_d2f
 1216              	.LVL114:
 1217 0054 0446     		mov	r4, r0	@ float
 1218              	.LVL115:
 1219              	.L115:
 151:Src/gas.c     ****     g_angle -= 2*M_PI;
 1220              		.loc 1 151 0
 1221 0056 2046     		mov	r0, r4	@ float
 1222 0058 FFF7FEFF 		bl	__aeabi_f2d
 1223              	.LVL116:
 1224 005c 8046     		mov	r8, r0
 1225 005e 8946     		mov	r9, r1
 1226 0060 11A3     		adr	r3, .L122
ARM GAS  /tmp/cceDm8rr.s 			page 31


 1227 0062 D3E90023 		ldrd	r2, [r3]
 1228 0066 FFF7FEFF 		bl	__aeabi_dcmpgt
 1229              	.LVL117:
 1230 006a 48B1     		cbz	r0, .L116
 152:Src/gas.c     ****   }
 1231              		.loc 1 152 0
 1232 006c 10A3     		adr	r3, .L122+8
 1233 006e D3E90023 		ldrd	r2, [r3]
 1234 0072 4046     		mov	r0, r8
 1235 0074 4946     		mov	r1, r9
 1236 0076 FFF7FEFF 		bl	__aeabi_dsub
 1237              	.LVL118:
 1238 007a FFF7FEFF 		bl	__aeabi_d2f
 1239              	.LVL119:
 1240 007e 0446     		mov	r4, r0	@ float
 1241              	.LVL120:
 1242              	.L116:
 156:Src/gas.c     ****     return -1;
 1243              		.loc 1 156 0
 1244 0080 00EE104A 		vmov	s0, r4
 1245 0084 FFF7FEFF 		bl	Rotate
 1246              	.LVL121:
 1247 0088 50B9     		cbnz	r0, .L119
 160:Src/gas.c     **** }
 1248              		.loc 1 160 0
 1249 008a B0EE480A 		vmov.f32	s0, s16
 1250 008e 3A46     		mov	r2, r7
 1251 0090 3146     		mov	r1, r6
 1252 0092 2846     		mov	r0, r5
 1253 0094 FFF7FEFF 		bl	Go_Straight_Direct
 1254              	.LVL122:
 1255              	.L114:
 161:Src/gas.c     **** 
 1256              		.loc 1 161 0
 1257 0098 BDEC028B 		vldm	sp!, {d8}
 1258              	.LCFI34:
 1259              		.cfi_remember_state
 1260              		.cfi_restore 80
 1261              		.cfi_restore 81
 1262              		.cfi_def_cfa_offset 32
 1263              	.LVL123:
 1264 009c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1265              	.LVL124:
 1266              	.L119:
 1267              	.LCFI35:
 1268              		.cfi_restore_state
 157:Src/gas.c     ****   }
 1269              		.loc 1 157 0
 1270 00a0 4FF0FF30 		mov	r0, #-1
 1271 00a4 F8E7     		b	.L114
 1272              	.L123:
 1273 00a6 00BF     		.align	3
 1274              	.L122:
 1275 00a8 182D4454 		.word	1413754136
 1276 00ac FB210940 		.word	1074340347
 1277 00b0 182D4454 		.word	1413754136
 1278 00b4 FB211940 		.word	1075388923
ARM GAS  /tmp/cceDm8rr.s 			page 32


 1279 00b8 00000000 		.word	me
 1280              		.cfi_endproc
 1281              	.LFE686:
 1283              		.global	__aeabi_d2uiz
 1284              		.section	.text.Break_Free,"ax",%progbits
 1285              		.align	1
 1286              		.global	Break_Free
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu fpv4-sp-d16
 1292              	Break_Free:
 1293              	.LFB693:
 255:Src/gas.c     ****   float fwd_dist, bwd_dist;
 1294              		.loc 1 255 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 8
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1299              	.LCFI36:
 1300              		.cfi_def_cfa_offset 28
 1301              		.cfi_offset 4, -28
 1302              		.cfi_offset 5, -24
 1303              		.cfi_offset 6, -20
 1304              		.cfi_offset 7, -16
 1305              		.cfi_offset 8, -12
 1306              		.cfi_offset 9, -8
 1307              		.cfi_offset 14, -4
 1308 0004 2DED048B 		vpush.64	{d8, d9}
 1309              	.LCFI37:
 1310              		.cfi_def_cfa_offset 44
 1311              		.cfi_offset 80, -44
 1312              		.cfi_offset 81, -40
 1313              		.cfi_offset 82, -36
 1314              		.cfi_offset 83, -32
 1315 0008 83B0     		sub	sp, sp, #12
 1316              	.LCFI38:
 1317              		.cfi_def_cfa_offset 56
 1318 000a 88E0     		b	.L142
 1319              	.L167:
 1320              	.LBB2:
 259:Src/gas.c     ****     float bwd_goal = min(bwd_dist, max(0, MARGIN_MAX-fwd_dist));
 1321              		.loc 1 259 0
 1322 000c 9FED9E7A 		vldr.32	s14, .L168
 1323 0010 97E0     		b	.L125
 1324              	.L144:
 1325 0012 F0EE667A 		vmov.f32	s15, s13
 1326              	.L127:
 1327              	.LVL125:
 260:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
 1328              		.loc 1 260 0 discriminator 12
 1329 0016 9FED9D7A 		vldr.32	s14, .L168+4
 1330 001a 37EE667A 		vsub.f32	s14, s14, s13
 1331 001e B5EEC07A 		vcmpe.f32	s14, #0
 1332 0022 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1333 0026 40F29D80 		bls	.L161
 260:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
ARM GAS  /tmp/cceDm8rr.s 			page 33


 1334              		.loc 1 260 0 is_stmt 0
 1335 002a F0EE476A 		vmov.f32	s13, s14
 1336              	.L129:
 260:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
 1337              		.loc 1 260 0 discriminator 4
 1338 002e B4EEE68A 		vcmpe.f32	s16, s13
 1339 0032 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1340 0036 07D4     		bmi	.L131
 260:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
 1341              		.loc 1 260 0 discriminator 6
 1342 0038 B5EEC07A 		vcmpe.f32	s14, #0
 1343 003c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1344 0040 40F29380 		bls	.L162
 260:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
 1345              		.loc 1 260 0
 1346 0044 B0EE478A 		vmov.f32	s16, s14
 1347              	.L131:
 1348              	.LVL126:
 261:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 1349              		.loc 1 261 0 is_stmt 1 discriminator 12
 1350 0048 B7EE007A 		vmov.f32	s14, #1.0e+0
 1351 004c F4EEC77A 		vcmpe.f32	s15, s14
 1352 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1353 0054 00F18C80 		bmi	.L163
 1354              	.L133:
 268:Src/gas.c     ****       x = me.x - bwd_goal*cos(me.angle);
 1355              		.loc 1 268 0
 1356 0058 B7EE007A 		vmov.f32	s14, #1.0e+0
 1357 005c F4EEC77A 		vcmpe.f32	s15, s14
 1358 0060 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1359 0064 00F18E80 		bmi	.L164
 273:Src/gas.c     ****       x = me.x + bwd_goal*cos(me.angle);
 1360              		.loc 1 273 0
 1361 0068 B7EE007A 		vmov.f32	s14, #1.0e+0
 1362 006c B4EEC78A 		vcmpe.f32	s16, s14
 1363 0070 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1364 0074 00F1C480 		bmi	.L165
 1365              	.LBB3:
 278:Src/gas.c     ****       x = me.x + goal*cos(me.angle);
 1366              		.loc 1 278 0
 1367 0078 77EEC87A 		vsub.f32	s15, s15, s16
 1368              	.LVL127:
 1369 007c B6EE008A 		vmov.f32	s16, #5.0e-1
 1370              	.LVL128:
 1371 0080 27EE888A 		vmul.f32	s16, s15, s16
 1372              	.LVL129:
 279:Src/gas.c     ****       y = me.y + goal*sin(me.angle);
 1373              		.loc 1 279 0
 1374 0084 824D     		ldr	r5, .L168+8
 1375 0086 2C88     		ldrh	r4, [r5]
 1376 0088 18EE100A 		vmov	r0, s16
 1377 008c FFF7FEFF 		bl	__aeabi_f2d
 1378              	.LVL130:
 1379 0090 0646     		mov	r6, r0
 1380 0092 0F46     		mov	r7, r1
 1381 0094 6868     		ldr	r0, [r5, #4]	@ float
 1382 0096 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  /tmp/cceDm8rr.s 			page 34


 1383              	.LVL131:
 1384 009a 41EC190B 		vmov	d9, r0, r1
 1385 009e 41EC100B 		vmov	d0, r0, r1
 1386 00a2 FFF7FEFF 		bl	cos
 1387              	.LVL132:
 1388 00a6 53EC102B 		vmov	r2, r3, d0
 1389 00aa 3046     		mov	r0, r6
 1390 00ac 3946     		mov	r1, r7
 1391 00ae FFF7FEFF 		bl	__aeabi_dmul
 1392              	.LVL133:
 1393 00b2 8046     		mov	r8, r0
 1394 00b4 8946     		mov	r9, r1
 1395 00b6 2046     		mov	r0, r4
 1396 00b8 FFF7FEFF 		bl	__aeabi_i2d
 1397              	.LVL134:
 1398 00bc 4246     		mov	r2, r8
 1399 00be 4B46     		mov	r3, r9
 1400 00c0 FFF7FEFF 		bl	__aeabi_dadd
 1401              	.LVL135:
 1402 00c4 FFF7FEFF 		bl	__aeabi_d2uiz
 1403              	.LVL136:
 1404 00c8 84B2     		uxth	r4, r0
 1405              	.LVL137:
 280:Src/gas.c     ****       fwd = (goal > 0)?1:0;
 1406              		.loc 1 280 0
 1407 00ca 6D88     		ldrh	r5, [r5, #2]
 1408 00cc B0EE490A 		vmov.f32	s0, s18
 1409 00d0 F0EE690A 		vmov.f32	s1, s19
 1410 00d4 FFF7FEFF 		bl	sin
 1411              	.LVL138:
 1412 00d8 53EC102B 		vmov	r2, r3, d0
 1413 00dc 3046     		mov	r0, r6
 1414 00de 3946     		mov	r1, r7
 1415 00e0 FFF7FEFF 		bl	__aeabi_dmul
 1416              	.LVL139:
 1417 00e4 0646     		mov	r6, r0
 1418 00e6 0F46     		mov	r7, r1
 1419 00e8 2846     		mov	r0, r5
 1420 00ea FFF7FEFF 		bl	__aeabi_i2d
 1421              	.LVL140:
 1422 00ee 3246     		mov	r2, r6
 1423 00f0 3B46     		mov	r3, r7
 1424 00f2 FFF7FEFF 		bl	__aeabi_dadd
 1425              	.LVL141:
 1426 00f6 FFF7FEFF 		bl	__aeabi_d2uiz
 1427              	.LVL142:
 1428 00fa 81B2     		uxth	r1, r0
 1429              	.LVL143:
 281:Src/gas.c     ****     }
 1430              		.loc 1 281 0
 1431 00fc B5EEC08A 		vcmpe.f32	s16, #0
 1432 0100 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1433 0104 CCBF     		ite	gt
 1434 0106 0122     		movgt	r2, #1
 1435 0108 0022     		movle	r2, #0
 1436              	.LVL144:
 1437              	.L139:
ARM GAS  /tmp/cceDm8rr.s 			page 35


 1438              	.LBE3:
 284:Src/gas.c     ****   }while(!Can_Rotate());
 1439              		.loc 1 284 0
 1440 010a B6EE000A 		vmov.f32	s0, #5.0e-1
 1441 010e 2046     		mov	r0, r4
 1442 0110 FFF7FEFF 		bl	Go_Straight_Direct
 1443              	.LVL145:
 1444              	.L136:
 1445              	.LBE2:
 285:Src/gas.c     **** }
 1446              		.loc 1 285 0
 1447 0114 FFF7FEFF 		bl	Can_Rotate
 1448              	.LVL146:
 1449 0118 0028     		cmp	r0, #0
 1450 011a 40F0AF80 		bne	.L166
 1451              	.L142:
 1452              	.LBB4:
 258:Src/gas.c     ****     float fwd_goal = min(fwd_dist, max(0, MARGIN_MAX-bwd_dist));
 1453              		.loc 1 258 0
 1454 011e 6946     		mov	r1, sp
 1455 0120 01A8     		add	r0, sp, #4
 1456 0122 FFF7FEFF 		bl	Get_Avoidance_Flexibility
 1457              	.LVL147:
 259:Src/gas.c     ****     float bwd_goal = min(bwd_dist, max(0, MARGIN_MAX-fwd_dist));
 1458              		.loc 1 259 0
 1459 0126 9DED008A 		vldr.32	s16, [sp]
 1460 012a DFED587A 		vldr.32	s15, .L168+4
 1461 012e 77EEC87A 		vsub.f32	s15, s15, s16
 1462 0132 F5EEC07A 		vcmpe.f32	s15, #0
 1463 0136 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1464 013a 7FF667AF 		bls	.L167
 1465 013e B0EE677A 		vmov.f32	s14, s15
 1466              	.L125:
 259:Src/gas.c     ****     float bwd_goal = min(bwd_dist, max(0, MARGIN_MAX-fwd_dist));
 1467              		.loc 1 259 0 is_stmt 0 discriminator 4
 1468 0142 DDED016A 		vldr.32	s13, [sp, #4]
 1469 0146 F4EEC76A 		vcmpe.f32	s13, s14
 1470 014a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1471 014e 3FF560AF 		bmi	.L144
 259:Src/gas.c     ****     float bwd_goal = min(bwd_dist, max(0, MARGIN_MAX-fwd_dist));
 1472              		.loc 1 259 0 discriminator 6
 1473 0152 F5EEC07A 		vcmpe.f32	s15, #0
 1474 0156 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1475 015a 3FF65CAF 		bhi	.L127
 259:Src/gas.c     ****     float bwd_goal = min(bwd_dist, max(0, MARGIN_MAX-fwd_dist));
 1476              		.loc 1 259 0
 1477 015e DFED4A7A 		vldr.32	s15, .L168
 1478 0162 58E7     		b	.L127
 1479              	.LVL148:
 1480              	.L161:
 260:Src/gas.c     ****     if(fwd_goal < 1 && bwd_goal < 1){
 1481              		.loc 1 260 0 is_stmt 1
 1482 0164 DFED486A 		vldr.32	s13, .L168
 1483 0168 61E7     		b	.L129
 1484              	.L162:
 1485 016a 9FED478A 		vldr.32	s16, .L168
 1486 016e 6BE7     		b	.L131
ARM GAS  /tmp/cceDm8rr.s 			page 36


 1487              	.LVL149:
 1488              	.L163:
 261:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 1489              		.loc 1 261 0 discriminator 1
 1490 0170 B4EEC78A 		vcmpe.f32	s16, s14
 1491 0174 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1492 0178 7FF56EAF 		bpl	.L133
 262:Src/gas.c     ****       continue;
 1493              		.loc 1 262 0
 1494 017c 3220     		movs	r0, #50
 1495 017e FFF7FEFF 		bl	HAL_Delay
 1496              	.LVL150:
 263:Src/gas.c     ****     }
 1497              		.loc 1 263 0
 1498 0182 C7E7     		b	.L136
 1499              	.LVL151:
 1500              	.L164:
 269:Src/gas.c     ****       y = me.y - bwd_goal*sin(me.angle);
 1501              		.loc 1 269 0
 1502 0184 424D     		ldr	r5, .L168+8
 1503 0186 2C88     		ldrh	r4, [r5]
 1504 0188 18EE100A 		vmov	r0, s16
 1505 018c FFF7FEFF 		bl	__aeabi_f2d
 1506              	.LVL152:
 1507 0190 0646     		mov	r6, r0
 1508 0192 0F46     		mov	r7, r1
 1509 0194 6868     		ldr	r0, [r5, #4]	@ float
 1510 0196 FFF7FEFF 		bl	__aeabi_f2d
 1511              	.LVL153:
 1512 019a 41EC180B 		vmov	d8, r0, r1
 1513              	.LVL154:
 1514 019e 41EC100B 		vmov	d0, r0, r1
 1515 01a2 FFF7FEFF 		bl	cos
 1516              	.LVL155:
 1517 01a6 53EC102B 		vmov	r2, r3, d0
 1518 01aa 3046     		mov	r0, r6
 1519 01ac 3946     		mov	r1, r7
 1520 01ae FFF7FEFF 		bl	__aeabi_dmul
 1521              	.LVL156:
 1522 01b2 8046     		mov	r8, r0
 1523 01b4 8946     		mov	r9, r1
 1524 01b6 2046     		mov	r0, r4
 1525 01b8 FFF7FEFF 		bl	__aeabi_i2d
 1526              	.LVL157:
 1527 01bc 4246     		mov	r2, r8
 1528 01be 4B46     		mov	r3, r9
 1529 01c0 FFF7FEFF 		bl	__aeabi_dsub
 1530              	.LVL158:
 1531 01c4 FFF7FEFF 		bl	__aeabi_d2uiz
 1532              	.LVL159:
 1533 01c8 84B2     		uxth	r4, r0
 1534              	.LVL160:
 270:Src/gas.c     ****       fwd = 0;
 1535              		.loc 1 270 0
 1536 01ca 6D88     		ldrh	r5, [r5, #2]
 1537 01cc B0EE480A 		vmov.f32	s0, s16
 1538 01d0 F0EE680A 		vmov.f32	s1, s17
ARM GAS  /tmp/cceDm8rr.s 			page 37


 1539 01d4 FFF7FEFF 		bl	sin
 1540              	.LVL161:
 1541 01d8 53EC102B 		vmov	r2, r3, d0
 1542 01dc 3046     		mov	r0, r6
 1543 01de 3946     		mov	r1, r7
 1544 01e0 FFF7FEFF 		bl	__aeabi_dmul
 1545              	.LVL162:
 1546 01e4 0646     		mov	r6, r0
 1547 01e6 0F46     		mov	r7, r1
 1548 01e8 2846     		mov	r0, r5
 1549 01ea FFF7FEFF 		bl	__aeabi_i2d
 1550              	.LVL163:
 1551 01ee 3246     		mov	r2, r6
 1552 01f0 3B46     		mov	r3, r7
 1553 01f2 FFF7FEFF 		bl	__aeabi_dsub
 1554              	.LVL164:
 1555 01f6 FFF7FEFF 		bl	__aeabi_d2uiz
 1556              	.LVL165:
 1557 01fa 81B2     		uxth	r1, r0
 1558              	.LVL166:
 271:Src/gas.c     ****     }
 1559              		.loc 1 271 0
 1560 01fc 0022     		movs	r2, #0
 1561 01fe 84E7     		b	.L139
 1562              	.LVL167:
 1563              	.L165:
 274:Src/gas.c     ****       y = me.y + bwd_goal*sin(me.angle);
 1564              		.loc 1 274 0
 1565 0200 234D     		ldr	r5, .L168+8
 1566 0202 2C88     		ldrh	r4, [r5]
 1567 0204 18EE100A 		vmov	r0, s16
 1568 0208 FFF7FEFF 		bl	__aeabi_f2d
 1569              	.LVL168:
 1570 020c 0646     		mov	r6, r0
 1571 020e 0F46     		mov	r7, r1
 1572 0210 6868     		ldr	r0, [r5, #4]	@ float
 1573 0212 FFF7FEFF 		bl	__aeabi_f2d
 1574              	.LVL169:
 1575 0216 41EC180B 		vmov	d8, r0, r1
 1576              	.LVL170:
 1577 021a 41EC100B 		vmov	d0, r0, r1
 1578 021e FFF7FEFF 		bl	cos
 1579              	.LVL171:
 1580 0222 53EC102B 		vmov	r2, r3, d0
 1581 0226 3046     		mov	r0, r6
 1582 0228 3946     		mov	r1, r7
 1583 022a FFF7FEFF 		bl	__aeabi_dmul
 1584              	.LVL172:
 1585 022e 8046     		mov	r8, r0
 1586 0230 8946     		mov	r9, r1
 1587 0232 2046     		mov	r0, r4
 1588 0234 FFF7FEFF 		bl	__aeabi_i2d
 1589              	.LVL173:
 1590 0238 4246     		mov	r2, r8
 1591 023a 4B46     		mov	r3, r9
 1592 023c FFF7FEFF 		bl	__aeabi_dadd
 1593              	.LVL174:
ARM GAS  /tmp/cceDm8rr.s 			page 38


 1594 0240 FFF7FEFF 		bl	__aeabi_d2uiz
 1595              	.LVL175:
 1596 0244 84B2     		uxth	r4, r0
 1597              	.LVL176:
 275:Src/gas.c     ****       fwd = 1;
 1598              		.loc 1 275 0
 1599 0246 6D88     		ldrh	r5, [r5, #2]
 1600 0248 B0EE480A 		vmov.f32	s0, s16
 1601 024c F0EE680A 		vmov.f32	s1, s17
 1602 0250 FFF7FEFF 		bl	sin
 1603              	.LVL177:
 1604 0254 53EC102B 		vmov	r2, r3, d0
 1605 0258 3046     		mov	r0, r6
 1606 025a 3946     		mov	r1, r7
 1607 025c FFF7FEFF 		bl	__aeabi_dmul
 1608              	.LVL178:
 1609 0260 0646     		mov	r6, r0
 1610 0262 0F46     		mov	r7, r1
 1611 0264 2846     		mov	r0, r5
 1612 0266 FFF7FEFF 		bl	__aeabi_i2d
 1613              	.LVL179:
 1614 026a 3246     		mov	r2, r6
 1615 026c 3B46     		mov	r3, r7
 1616 026e FFF7FEFF 		bl	__aeabi_dadd
 1617              	.LVL180:
 1618 0272 FFF7FEFF 		bl	__aeabi_d2uiz
 1619              	.LVL181:
 1620 0276 81B2     		uxth	r1, r0
 1621              	.LVL182:
 276:Src/gas.c     ****     }else{
 1622              		.loc 1 276 0
 1623 0278 0122     		movs	r2, #1
 1624 027a 46E7     		b	.L139
 1625              	.LVL183:
 1626              	.L166:
 1627              	.LBE4:
 286:Src/gas.c     **** 
 1628              		.loc 1 286 0
 1629 027c 03B0     		add	sp, sp, #12
 1630              	.LCFI39:
 1631              		.cfi_def_cfa_offset 44
 1632              		@ sp needed
 1633 027e BDEC048B 		vldm	sp!, {d8-d9}
 1634              	.LCFI40:
 1635              		.cfi_restore 82
 1636              		.cfi_restore 83
 1637              		.cfi_restore 80
 1638              		.cfi_restore 81
 1639              		.cfi_def_cfa_offset 28
 1640 0282 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1641              	.L169:
 1642 0286 00BF     		.align	2
 1643              	.L168:
 1644 0288 00000000 		.word	0
 1645 028c 00001643 		.word	1125515264
 1646 0290 00000000 		.word	me
 1647              		.cfi_endproc
ARM GAS  /tmp/cceDm8rr.s 			page 39


 1648              	.LFE693:
 1650              		.global	__aeabi_ddiv
 1651              		.global	__aeabi_dcmple
 1652              		.section	.text.GOGOGO,"ax",%progbits
 1653              		.align	1
 1654              		.global	GOGOGO
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu fpv4-sp-d16
 1660              	GOGOGO:
 1661              	.LFB694:
 297:Src/gas.c     ****   Cell *path_end = NULL;
 1662              		.loc 1 297 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 16
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666              	.LVL184:
 1667 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1668              	.LCFI41:
 1669              		.cfi_def_cfa_offset 32
 1670              		.cfi_offset 4, -32
 1671              		.cfi_offset 5, -28
 1672              		.cfi_offset 6, -24
 1673              		.cfi_offset 7, -20
 1674              		.cfi_offset 8, -16
 1675              		.cfi_offset 9, -12
 1676              		.cfi_offset 10, -8
 1677              		.cfi_offset 14, -4
 1678 0004 84B0     		sub	sp, sp, #16
 1679              	.LCFI42:
 1680              		.cfi_def_cfa_offset 48
 1681 0006 8246     		mov	r10, r0
 1682 0008 8946     		mov	r9, r1
 298:Src/gas.c     ****   int retry_count = GO_RETRY_COUNT;
 1683              		.loc 1 298 0
 1684 000a 0023     		movs	r3, #0
 1685 000c 0393     		str	r3, [sp, #12]
 1686              	.LVL185:
 299:Src/gas.c     ****   
 1687              		.loc 1 299 0
 1688 000e 4FF03208 		mov	r8, #50
 1689 0012 55E0     		b	.L171
 1690              	.LVL186:
 1691              	.L193:
 1692              	.LBB5:
 304:Src/gas.c     ****       HAL_Delay(1000);
 1693              		.loc 1 304 0
 1694 0014 FFF7FEFF 		bl	Brake
 1695              	.LVL187:
 305:Src/gas.c     ****       Break_Free();
 1696              		.loc 1 305 0
 1697 0018 4FF47A70 		mov	r0, #1000
 1698 001c FFF7FEFF 		bl	HAL_Delay
 1699              	.LVL188:
 306:Src/gas.c     ****       path_end = NULL;//Reinit the process
 1700              		.loc 1 306 0
ARM GAS  /tmp/cceDm8rr.s 			page 40


 1701 0020 FFF7FEFF 		bl	Break_Free
 1702              	.LVL189:
 307:Src/gas.c     ****     }
 1703              		.loc 1 307 0
 1704 0024 0023     		movs	r3, #0
 1705 0026 0393     		str	r3, [sp, #12]
 1706 0028 4EE0     		b	.L172
 1707              	.LVL190:
 1708              	.L194:
 317:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 1709              		.loc 1 317 0
 1710 002a FFF7FEFF 		bl	Brake
 1711              	.LVL191:
 318:Src/gas.c     ****       retry_count--;
 1712              		.loc 1 318 0
 1713 002e 3220     		movs	r0, #50
 1714 0030 FFF7FEFF 		bl	HAL_Delay
 1715              	.LVL192:
 319:Src/gas.c     ****       continue;
 1716              		.loc 1 319 0
 1717 0034 08F1FF38 		add	r8, r8, #-1
 1718              	.LVL193:
 320:Src/gas.c     ****     }
 1719              		.loc 1 320 0
 1720 0038 42E0     		b	.L171
 1721              	.L176:
 326:Src/gas.c     ****     if(Pos_Config_Curve(POS_Z, POS_W, speed, ROTATION_SPEED, POS_P, POS_I, POS_D, POS_SPEED_PERCENT
 1722              		.loc 1 326 0 discriminator 6
 1723 003a 0022     		movs	r2, #0
 1724 003c 0023     		movs	r3, #0
 1725 003e 3046     		mov	r0, r6
 1726 0040 3946     		mov	r1, r7
 1727 0042 FFF7FEFF 		bl	__aeabi_dcmple
 1728              	.LVL194:
 1729 0046 0028     		cmp	r0, #0
 1730 0048 75D1     		bne	.L186
 326:Src/gas.c     ****     if(Pos_Config_Curve(POS_Z, POS_W, speed, ROTATION_SPEED, POS_P, POS_I, POS_D, POS_SPEED_PERCENT
 1731              		.loc 1 326 0 is_stmt 0 discriminator 9
 1732 004a 5BA3     		adr	r3, .L195+40
 1733 004c D3E90023 		ldrd	r2, [r3]
 1734 0050 3046     		mov	r0, r6
 1735 0052 3946     		mov	r1, r7
 1736 0054 FFF7FEFF 		bl	__aeabi_dmul
 1737              	.LVL195:
 1738 0058 0022     		movs	r2, #0
 1739 005a 4D4B     		ldr	r3, .L195
 1740 005c FFF7FEFF 		bl	__aeabi_dadd
 1741              	.LVL196:
 1742 0060 FFF7FEFF 		bl	__aeabi_d2f
 1743              	.LVL197:
 1744 0064 01EE100A 		vmov	s2, r0
 1745              	.L178:
 1746              	.LVL198:
 327:Src/gas.c     ****       PI_Log("Pos_Config_Curve : pas de réponse\n");
 1747              		.loc 1 327 0 is_stmt 1 discriminator 12
 1748 0068 F7EE003A 		vmov.f32	s7, #1.0e+0
 1749 006c B0EE633A 		vmov.f32	s6, s7
ARM GAS  /tmp/cceDm8rr.s 			page 41


 1750 0070 F0EE632A 		vmov.f32	s5, s7
 1751 0074 B0EE632A 		vmov.f32	s4, s7
 1752 0078 DFED461A 		vldr.32	s3, .L195+4
 1753 007c F0EE630A 		vmov.f32	s1, s7
 1754 0080 B0EE630A 		vmov.f32	s0, s7
 1755 0084 FFF7FEFF 		bl	Pos_Config_Curve
 1756              	.LVL199:
 1757 0088 B0F1FF3F 		cmp	r0, #-1
 1758 008c 56D0     		beq	.L189
 1759              	.L179:
 332:Src/gas.c     ****       //Check that this does not mess with UART
 1760              		.loc 1 332 0
 1761 008e 3DB1     		cbz	r5, .L180
 332:Src/gas.c     ****       //Check that this does not mess with UART
 1762              		.loc 1 332 0 is_stmt 0 discriminator 1
 1763 0090 4A46     		mov	r2, r9
 1764 0092 5146     		mov	r1, r10
 1765 0094 0398     		ldr	r0, [sp, #12]
 1766 0096 FFF7FEFF 		bl	Pos_Send_Path
 1767              	.LVL200:
 1768 009a B0F1FF3F 		cmp	r0, #-1
 1769 009e 51D0     		beq	.L190
 1770              	.L180:
 344:Src/gas.c     ****       PI_Log("Pos_Get_State : pas de réponse\n");
 1771              		.loc 1 344 0 is_stmt 1
 1772 00a0 0DF10300 		add	r0, sp, #3
 1773 00a4 FFF7FEFF 		bl	Pos_Get_State
 1774              	.LVL201:
 1775 00a8 B0F1FF3F 		cmp	r0, #-1
 1776 00ac 57D0     		beq	.L191
 346:Src/gas.c     ****       return 0;
 1777              		.loc 1 346 0
 1778 00ae 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1779 00b2 012B     		cmp	r3, #1
 1780 00b4 69D0     		beq	.L187
 348:Src/gas.c     ****       PI_Log("Position path error\n");
 1781              		.loc 1 348 0
 1782 00b6 022B     		cmp	r3, #2
 1783 00b8 55D0     		beq	.L192
 1784              	.L182:
 357:Src/gas.c     ****   }while(1);
 1785              		.loc 1 357 0
 1786 00ba 3220     		movs	r0, #50
 1787 00bc FFF7FEFF 		bl	HAL_Delay
 1788              	.LVL202:
 1789              	.L171:
 303:Src/gas.c     ****       Brake();
 1790              		.loc 1 303 0
 1791 00c0 FFF7FEFF 		bl	Can_Rotate
 1792              	.LVL203:
 1793 00c4 0028     		cmp	r0, #0
 1794 00c6 A5D0     		beq	.L193
 1795              	.L172:
 310:Src/gas.c     ****       return -1;
 1796              		.loc 1 310 0
 1797 00c8 B8F1000F 		cmp	r8, #0
 1798 00cc 58D0     		beq	.L184
ARM GAS  /tmp/cceDm8rr.s 			page 42


 315:Src/gas.c     ****     if(path_end == NULL){
 1799              		.loc 1 315 0
 1800 00ce 03AA     		add	r2, sp, #12
 1801 00d0 4946     		mov	r1, r9
 1802 00d2 5046     		mov	r0, r10
 1803 00d4 FFF7FEFF 		bl	Update_Path
 1804              	.LVL204:
 1805 00d8 0546     		mov	r5, r0
 1806              	.LVL205:
 316:Src/gas.c     ****       Brake();
 1807              		.loc 1 316 0
 1808 00da 039B     		ldr	r3, [sp, #12]
 1809 00dc 002B     		cmp	r3, #0
 1810 00de A4D0     		beq	.L194
 325:Src/gas.c     ****     float speed = MIN_SPEED + (MAX_SPEED - MIN_SPEED) * min(1., max(0., (fwd_dist - (ROBOT_RADIUS +
 1811              		.loc 1 325 0
 1812 00e0 02A9     		add	r1, sp, #8
 1813 00e2 01A8     		add	r0, sp, #4
 1814              	.LVL206:
 1815 00e4 FFF7FEFF 		bl	Get_In_Range_Obstacle_Dist
 1816              	.LVL207:
 326:Src/gas.c     ****     if(Pos_Config_Curve(POS_Z, POS_W, speed, ROTATION_SPEED, POS_P, POS_I, POS_D, POS_SPEED_PERCENT
 1817              		.loc 1 326 0
 1818 00e8 9DED017A 		vldr.32	s14, [sp, #4]
 1819 00ec DFED2A7A 		vldr.32	s15, .L195+8
 1820 00f0 77EE677A 		vsub.f32	s15, s14, s15
 1821 00f4 17EE900A 		vmov	r0, s15
 1822 00f8 FFF7FEFF 		bl	__aeabi_f2d
 1823              	.LVL208:
 1824 00fc 0022     		movs	r2, #0
 1825 00fe 274B     		ldr	r3, .L195+12
 1826 0100 FFF7FEFF 		bl	__aeabi_ddiv
 1827              	.LVL209:
 1828 0104 0646     		mov	r6, r0
 1829 0106 0F46     		mov	r7, r1
 1830 0108 0022     		movs	r2, #0
 1831 010a 0023     		movs	r3, #0
 1832 010c FFF7FEFF 		bl	__aeabi_dcmple
 1833              	.LVL210:
 1834 0110 0028     		cmp	r0, #0
 1835 0112 92D1     		bne	.L176
 326:Src/gas.c     ****     if(Pos_Config_Curve(POS_Z, POS_W, speed, ROTATION_SPEED, POS_P, POS_I, POS_D, POS_SPEED_PERCENT
 1836              		.loc 1 326 0 is_stmt 0 discriminator 2
 1837 0114 4FF00104 		mov	r4, #1
 1838 0118 0022     		movs	r2, #0
 1839 011a 214B     		ldr	r3, .L195+16
 1840 011c 3046     		mov	r0, r6
 1841 011e 3946     		mov	r1, r7
 1842 0120 FFF7FEFF 		bl	__aeabi_dcmpgt
 1843              	.LVL211:
 1844 0124 08B9     		cbnz	r0, .L177
 1845 0126 4FF00004 		mov	r4, #0
 1846              	.L177:
 1847 012a E4B2     		uxtb	r4, r4
 1848 012c 002C     		cmp	r4, #0
 1849 012e 84D0     		beq	.L176
 326:Src/gas.c     ****     if(Pos_Config_Curve(POS_Z, POS_W, speed, ROTATION_SPEED, POS_P, POS_I, POS_D, POS_SPEED_PERCENT
ARM GAS  /tmp/cceDm8rr.s 			page 43


 1850              		.loc 1 326 0
 1851 0130 9FED1C1A 		vldr.32	s2, .L195+20
 1852 0134 98E7     		b	.L178
 1853              	.L186:
 1854 0136 B2EE041A 		vmov.f32	s2, #1.0e+1
 1855 013a 95E7     		b	.L178
 1856              	.L189:
 328:Src/gas.c     ****     }
 1857              		.loc 1 328 0 is_stmt 1
 1858 013c 1A48     		ldr	r0, .L195+24
 1859 013e FFF7FEFF 		bl	PI_Log
 1860              	.LVL212:
 1861 0142 A4E7     		b	.L179
 1862              	.L190:
 334:Src/gas.c     ****       Brake();
 1863              		.loc 1 334 0
 1864 0144 1948     		ldr	r0, .L195+28
 1865 0146 FFF7FEFF 		bl	PI_Log
 1866              	.LVL213:
 335:Src/gas.c     ****       retry_count--;
 1867              		.loc 1 335 0
 1868 014a FFF7FEFF 		bl	Brake
 1869              	.LVL214:
 336:Src/gas.c     ****       path_end = NULL;
 1870              		.loc 1 336 0
 1871 014e 08F1FF38 		add	r8, r8, #-1
 1872              	.LVL215:
 337:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 1873              		.loc 1 337 0
 1874 0152 0023     		movs	r3, #0
 1875 0154 0393     		str	r3, [sp, #12]
 338:Src/gas.c     ****       continue;
 1876              		.loc 1 338 0
 1877 0156 3220     		movs	r0, #50
 1878 0158 FFF7FEFF 		bl	HAL_Delay
 1879              	.LVL216:
 339:Src/gas.c     ****     }
 1880              		.loc 1 339 0
 1881 015c B0E7     		b	.L171
 1882              	.L191:
 345:Src/gas.c     ****     }else if(state == POS_SUCCESS){
 1883              		.loc 1 345 0
 1884 015e 1448     		ldr	r0, .L195+32
 1885 0160 FFF7FEFF 		bl	PI_Log
 1886              	.LVL217:
 1887 0164 A9E7     		b	.L182
 1888              	.L192:
 349:Src/gas.c     ****       Brake();
 1889              		.loc 1 349 0
 1890 0166 1348     		ldr	r0, .L195+36
 1891 0168 FFF7FEFF 		bl	PI_Log
 1892              	.LVL218:
 350:Src/gas.c     ****       retry_count--;
 1893              		.loc 1 350 0
 1894 016c FFF7FEFF 		bl	Brake
 1895              	.LVL219:
 351:Src/gas.c     ****       path_end = NULL;
ARM GAS  /tmp/cceDm8rr.s 			page 44


 1896              		.loc 1 351 0
 1897 0170 08F1FF38 		add	r8, r8, #-1
 1898              	.LVL220:
 352:Src/gas.c     ****       HAL_Delay(WAIT_TIME);
 1899              		.loc 1 352 0
 1900 0174 0023     		movs	r3, #0
 1901 0176 0393     		str	r3, [sp, #12]
 353:Src/gas.c     ****       continue;
 1902              		.loc 1 353 0
 1903 0178 3220     		movs	r0, #50
 1904 017a FFF7FEFF 		bl	HAL_Delay
 1905              	.LVL221:
 354:Src/gas.c     ****     }
 1906              		.loc 1 354 0
 1907 017e 9FE7     		b	.L171
 1908              	.LVL222:
 1909              	.L184:
 311:Src/gas.c     ****     }
 1910              		.loc 1 311 0
 1911 0180 4FF0FF30 		mov	r0, #-1
 1912              	.L170:
 1913              	.LBE5:
 359:Src/gas.c     **** 
 1914              		.loc 1 359 0
 1915 0184 04B0     		add	sp, sp, #16
 1916              	.LCFI43:
 1917              		.cfi_remember_state
 1918              		.cfi_def_cfa_offset 32
 1919              		@ sp needed
 1920 0186 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1921              	.LVL223:
 1922              	.L187:
 1923              	.LCFI44:
 1924              		.cfi_restore_state
 1925              	.LBB6:
 347:Src/gas.c     ****     }else if(state == POS_ERROR){
 1926              		.loc 1 347 0
 1927 018a 0020     		movs	r0, #0
 1928 018c FAE7     		b	.L170
 1929              	.L196:
 1930 018e 00BF     		.align	3
 1931              	.L195:
 1932 0190 00002440 		.word	1076101120
 1933 0194 C3F54840 		.word	1078523331
 1934 0198 00008243 		.word	1132593152
 1935 019c 00408F40 		.word	1083129856
 1936 01a0 0000F03F 		.word	1072693248
 1937 01a4 00004843 		.word	1128792064
 1938 01a8 00000000 		.word	.LC4
 1939 01ac 24000000 		.word	.LC5
 1940 01b0 48000000 		.word	.LC6
 1941 01b4 6C000000 		.word	.LC7
 1942 01b8 00000000 		.word	0
 1943 01bc 00C06740 		.word	1080541184
 1944              	.LBE6:
 1945              		.cfi_endproc
 1946              	.LFE694:
ARM GAS  /tmp/cceDm8rr.s 			page 45


 1948              		.section	.rodata.Brake.str1.4,"aMS",%progbits,1
 1949              		.align	2
 1950              	.LC3:
 1951 0000 506F735F 		.ascii	"Pos_Brake : pas de r\303\251ponse.\012\000"
 1951      4272616B 
 1951      65203A20 
 1951      70617320 
 1951      64652072 
 1952              		.section	.rodata.FSM_MOVE_CMD.str1.4,"aMS",%progbits,1
 1953              		.align	2
 1954              	.LC2:
 1955 0000 506F735F 		.ascii	"Pos_Go_Forward : pas de r\303\251ponse.\012\000"
 1955      476F5F46 
 1955      6F727761 
 1955      7264203A 
 1955      20706173 
 1956              		.section	.rodata.FSM_ROTATION_CMD.str1.4,"aMS",%progbits,1
 1957              		.align	2
 1958              	.LC0:
 1959 0000 506F735F 		.ascii	"Pos_Set_Angle : pas de r\303\251ponse.\012\000"
 1959      5365745F 
 1959      416E676C 
 1959      65203A20 
 1959      70617320 
 1960              		.section	.rodata.FSM_ROTATION_WAIT.str1.4,"aMS",%progbits,1
 1961              		.align	2
 1962              	.LC1:
 1963 0000 506F735F 		.ascii	"Pos_Get_State : pas de r\303\251ponse.\012\000"
 1963      4765745F 
 1963      53746174 
 1963      65203A20 
 1963      70617320 
 1964              		.section	.rodata.GOGOGO.str1.4,"aMS",%progbits,1
 1965              		.align	2
 1966              	.LC4:
 1967 0000 506F735F 		.ascii	"Pos_Config_Curve : pas de r\303\251ponse\012\000"
 1967      436F6E66 
 1967      69675F43 
 1967      75727665 
 1967      203A2070 
 1968              	.LC5:
 1969 0024 506F735F 		.ascii	"Pos_Send_Path : pas de r\303\251ponse\012\000"
 1969      53656E64 
 1969      5F506174 
 1969      68203A20 
 1969      70617320 
 1970 0045 000000   		.space	3
 1971              	.LC6:
 1972 0048 506F735F 		.ascii	"Pos_Get_State : pas de r\303\251ponse\012\000"
 1972      4765745F 
 1972      53746174 
 1972      65203A20 
 1972      70617320 
 1973 0069 000000   		.space	3
 1974              	.LC7:
 1975 006c 506F7369 		.ascii	"Position path error\012\000"
 1975      74696F6E 
ARM GAS  /tmp/cceDm8rr.s 			page 46


 1975      20706174 
 1975      68206572 
 1975      726F720A 
 1976              		.text
 1977              	.Letext0:
 1978              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1979              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1980              		.file 4 "Inc/game_defs.h"
 1981              		.file 5 "Inc/map.h"
 1982              		.file 6 "Inc/strategy.h"
 1983              		.file 7 "Inc/obstacle.h"
 1984              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1985              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1986              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 1987              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 1988              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 1989              		.file 13 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1990              		.file 14 "Inc/crc_16.h"
 1991              		.file 15 "Inc/robotronik_protocol.h"
 1992              		.file 16 "Inc/usart.h"
 1993              		.file 17 "/usr/arm-none-eabi/include/stdlib.h"
 1994              		.file 18 "Inc/position_client.h"
 1995              		.file 19 "/usr/arm-none-eabi/include/math.h"
 1996              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_dma.h"
 1997              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1998              		.file 22 "Inc/pi_client.h"
ARM GAS  /tmp/cceDm8rr.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 gas.c
     /tmp/cceDm8rr.s:18     .text.FSM_ROTATION_END:0000000000000000 $t
     /tmp/cceDm8rr.s:24     .text.FSM_ROTATION_END:0000000000000000 FSM_ROTATION_END
     /tmp/cceDm8rr.s:39     .text.Go_Straight_Direct:0000000000000000 $t
     /tmp/cceDm8rr.s:45     .text.Go_Straight_Direct:0000000000000000 Go_Straight_Direct
     /tmp/cceDm8rr.s:124    .text.Go_Straight_Direct:000000000000006c $d
     /tmp/cceDm8rr.s:433    .text.FSM_MOVE_INIT:0000000000000000 FSM_MOVE_INIT
     /tmp/cceDm8rr.s:130    .text.FSM_MOVE_END:0000000000000000 $t
     /tmp/cceDm8rr.s:136    .text.FSM_MOVE_END:0000000000000000 FSM_MOVE_END
     /tmp/cceDm8rr.s:150    .text.Check_Path:0000000000000000 $t
     /tmp/cceDm8rr.s:156    .text.Check_Path:0000000000000000 Check_Path
     /tmp/cceDm8rr.s:197    .text.FSM_ROTATION_INIT:0000000000000000 $t
     /tmp/cceDm8rr.s:203    .text.FSM_ROTATION_INIT:0000000000000000 FSM_ROTATION_INIT
     /tmp/cceDm8rr.s:262    .text.FSM_ROTATION_INIT:0000000000000030 $d
     /tmp/cceDm8rr.s:274    .text.FSM_ROTATION_CMD:0000000000000000 FSM_ROTATION_CMD
     /tmp/cceDm8rr.s:268    .text.FSM_ROTATION_CMD:0000000000000000 $t
     /tmp/cceDm8rr.s:319    .text.FSM_ROTATION_CMD:0000000000000034 $d
     /tmp/cceDm8rr.s:334    .text.FSM_ROTATION_WAIT:0000000000000000 FSM_ROTATION_WAIT
     /tmp/cceDm8rr.s:328    .text.FSM_ROTATION_WAIT:0000000000000000 $t
     /tmp/cceDm8rr.s:417    .text.FSM_ROTATION_WAIT:0000000000000054 $d
     /tmp/cceDm8rr.s:1004   .text.FSM_ROTATION_STOP:0000000000000000 FSM_ROTATION_STOP
     /tmp/cceDm8rr.s:427    .text.FSM_MOVE_INIT:0000000000000000 $t
     /tmp/cceDm8rr.s:541    .text.FSM_MOVE_INIT:00000000000000a0 $d
     /tmp/cceDm8rr.s:714    .text.FSM_MOVE_CMD:0000000000000000 FSM_MOVE_CMD
     /tmp/cceDm8rr.s:550    .text.FSM_MOVE_WAIT:0000000000000000 $t
     /tmp/cceDm8rr.s:556    .text.FSM_MOVE_WAIT:0000000000000000 FSM_MOVE_WAIT
     /tmp/cceDm8rr.s:694    .text.FSM_MOVE_WAIT:00000000000000c8 $d
     /tmp/cceDm8rr.s:1044   .text.FSM_MOVE_STOP:0000000000000000 FSM_MOVE_STOP
     /tmp/cceDm8rr.s:708    .text.FSM_MOVE_CMD:0000000000000000 $t
     /tmp/cceDm8rr.s:814    .text.FSM_MOVE_CMD:0000000000000088 $d
     /tmp/cceDm8rr.s:825    .text.Make_Path:0000000000000000 $t
     /tmp/cceDm8rr.s:831    .text.Make_Path:0000000000000000 Make_Path
     /tmp/cceDm8rr.s:893    .text.Make_Path:000000000000003c $d
     /tmp/cceDm8rr.s:898    .text.Update_Path:0000000000000000 $t
     /tmp/cceDm8rr.s:904    .text.Update_Path:0000000000000000 Update_Path
     /tmp/cceDm8rr.s:953    .text.Brake:0000000000000000 $t
     /tmp/cceDm8rr.s:960    .text.Brake:0000000000000000 Brake
     /tmp/cceDm8rr.s:993    .text.Brake:000000000000001c $d
     /tmp/cceDm8rr.s:998    .text.FSM_ROTATION_STOP:0000000000000000 $t
     /tmp/cceDm8rr.s:1033   .text.FSM_ROTATION_STOP:0000000000000014 $d
     /tmp/cceDm8rr.s:1038   .text.FSM_MOVE_STOP:0000000000000000 $t
     /tmp/cceDm8rr.s:1073   .text.FSM_MOVE_STOP:0000000000000014 $d
     /tmp/cceDm8rr.s:1078   .text.Rotate:0000000000000000 $t
     /tmp/cceDm8rr.s:1085   .text.Rotate:0000000000000000 Rotate
     /tmp/cceDm8rr.s:1142   .text.Rotate:0000000000000038 $d
     /tmp/cceDm8rr.s:1149   .text.Go_Straight:0000000000000000 $t
     /tmp/cceDm8rr.s:1156   .text.Go_Straight:0000000000000000 Go_Straight
     /tmp/cceDm8rr.s:1275   .text.Go_Straight:00000000000000a8 $d
     /tmp/cceDm8rr.s:1285   .text.Break_Free:0000000000000000 $t
     /tmp/cceDm8rr.s:1292   .text.Break_Free:0000000000000000 Break_Free
     /tmp/cceDm8rr.s:1644   .text.Break_Free:0000000000000288 $d
     /tmp/cceDm8rr.s:1653   .text.GOGOGO:0000000000000000 $t
     /tmp/cceDm8rr.s:1660   .text.GOGOGO:0000000000000000 GOGOGO
     /tmp/cceDm8rr.s:1932   .text.GOGOGO:0000000000000190 $d
     /tmp/cceDm8rr.s:1949   .rodata.Brake.str1.4:0000000000000000 $d
     /tmp/cceDm8rr.s:1953   .rodata.FSM_MOVE_CMD.str1.4:0000000000000000 $d
ARM GAS  /tmp/cceDm8rr.s 			page 48


     /tmp/cceDm8rr.s:1957   .rodata.FSM_ROTATION_CMD.str1.4:0000000000000000 $d
     /tmp/cceDm8rr.s:1961   .rodata.FSM_ROTATION_WAIT.str1.4:0000000000000000 $d
     /tmp/cceDm8rr.s:1965   .rodata.GOGOGO.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
Can_Rotate
HAL_Delay
Pos_Set_Angle
PI_Log
me
Pos_Get_State
__aeabi_i2d
__aeabi_dadd
__aeabi_d2f
pow
sqrt
Can_Move
__aeabi_f2d
__aeabi_dmul
__aeabi_dcmplt
Pos_Go_Forward
Cell_From_Pos
Materialize_Obstacles
A_Star
Refresh_Map
Pos_Brake
__aeabi_dcmpgt
__aeabi_dsub
atan2
__aeabi_d2uiz
cos
sin
Get_Avoidance_Flexibility
__aeabi_ddiv
__aeabi_dcmple
Pos_Config_Curve
Pos_Send_Path
Get_In_Range_Obstacle_Dist
