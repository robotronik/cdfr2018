ARM GAS  /tmp/ccTQvZ7k.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ax_12a.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.AX_FSM_HEADER_0,"ax",%progbits
  18              		.align	1
  19              		.global	AX_FSM_HEADER_0
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	AX_FSM_HEADER_0:
  26              	.LFB3:
  27              		.file 1 "Src/ax_12a.c"
   1:Src/ax_12a.c  **** #include "ax_12a.h"
   2:Src/ax_12a.c  **** #include <stdio.h>
   3:Src/ax_12a.c  **** 
   4:Src/ax_12a.c  **** //========================================
   5:Src/ax_12a.c  **** //    CONSTANTES ET VARIABLES GLOBALES
   6:Src/ax_12a.c  **** //========================================
   7:Src/ax_12a.c  **** static const uint8_t header[2] = {0xFF, 0xFF};
   8:Src/ax_12a.c  **** static const uint8_t field_addr[] = {
   9:Src/ax_12a.c  ****   //EEPROM - Configuration  
  10:Src/ax_12a.c  ****   [AX_ID] = 0x03,
  11:Src/ax_12a.c  ****   [AX_BAUD_RATE] = 0x04,
  12:Src/ax_12a.c  ****   [AX_RETURN_DELAY_TIME] = 0x05,
  13:Src/ax_12a.c  ****   [AX_CW_ANGLE_LIMIT] = 0x06,
  14:Src/ax_12a.c  ****   [AX_CCW_ANGLE_LIMIT] = 0x08,
  15:Src/ax_12a.c  ****   [AX_LIMIT_TEMPERATURE] = 0x0B,
  16:Src/ax_12a.c  ****   [AX_LOWER_LIMIT_VOLTAGE] = 0x0C,
  17:Src/ax_12a.c  ****   [AX_UPPER_LIMIT_VOLTAGE] = 0x0D,
  18:Src/ax_12a.c  ****   [AX_MAX_TORQUE] = 0x0E,
  19:Src/ax_12a.c  ****   [AX_RETURN_LEVEL] = 0x10,
  20:Src/ax_12a.c  ****   [AX_ALARM_LED] = 0x11,
  21:Src/ax_12a.c  ****   [AX_ALARM_SHUTDOWN] = 0x12,
  22:Src/ax_12a.c  ****   //EEPROM - Info
  23:Src/ax_12a.c  ****   [AX_MODEL_NUMBER] = 0x00,
  24:Src/ax_12a.c  ****   [AX_FIRMWARE_VERSION] = 0x02,
  25:Src/ax_12a.c  ****   //RAM - Contrôle
  26:Src/ax_12a.c  ****   [AX_TORQUE_ENABLE] = 0x18,
  27:Src/ax_12a.c  ****   [AX_LED] = 0x19,
  28:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_MARGIN] = 0x1A,
  29:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_MARGIN] = 0x1B,
  30:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_SLOPE] = 0x1C,
  31:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_SLOPE] = 0x1D,
ARM GAS  /tmp/ccTQvZ7k.s 			page 2


  32:Src/ax_12a.c  ****   [AX_GOAL_POSITION] = 0x1E,
  33:Src/ax_12a.c  ****   [AX_MOVING_SPEED] = 0x20,
  34:Src/ax_12a.c  ****   [AX_TORQUE_LIMIT] = 0x22,
  35:Src/ax_12a.c  ****   [AX_EEPROM_LOCK] = 0x2F,
  36:Src/ax_12a.c  ****   [AX_PUNCH] = 0x30,
  37:Src/ax_12a.c  ****   //RAM - Info
  38:Src/ax_12a.c  ****   [AX_CURRENT_POSITION] = 0x24,
  39:Src/ax_12a.c  ****   [AX_CURRENT_SPEED] = 0x26,
  40:Src/ax_12a.c  ****   [AX_CURRENT_LOAD] = 0x28,
  41:Src/ax_12a.c  ****   [AX_CURRENT_VOLTAGE] = 0x2A,
  42:Src/ax_12a.c  ****   [AX_CURRENT_TEMPERATURE] = 0x2B,
  43:Src/ax_12a.c  ****   [AX_REGISTERED_INSTRUCTION] = 0x2C,
  44:Src/ax_12a.c  ****   [AX_MOVING] = 0x2E,
  45:Src/ax_12a.c  **** };
  46:Src/ax_12a.c  **** static const uint8_t field_length[] = {
  47:Src/ax_12a.c  ****   //EEPROM - Configuration  
  48:Src/ax_12a.c  ****   [AX_ID] = 1,
  49:Src/ax_12a.c  ****   [AX_BAUD_RATE] = 1,
  50:Src/ax_12a.c  ****   [AX_RETURN_DELAY_TIME] = 1,
  51:Src/ax_12a.c  ****   [AX_CW_ANGLE_LIMIT] = 2,
  52:Src/ax_12a.c  ****   [AX_CCW_ANGLE_LIMIT] = 2,
  53:Src/ax_12a.c  ****   [AX_LIMIT_TEMPERATURE] = 1,
  54:Src/ax_12a.c  ****   [AX_LOWER_LIMIT_VOLTAGE] = 1,
  55:Src/ax_12a.c  ****   [AX_UPPER_LIMIT_VOLTAGE] = 1,
  56:Src/ax_12a.c  ****   [AX_MAX_TORQUE] = 2,
  57:Src/ax_12a.c  ****   [AX_RETURN_LEVEL] = 1,
  58:Src/ax_12a.c  ****   [AX_ALARM_LED] = 1,
  59:Src/ax_12a.c  ****   [AX_ALARM_SHUTDOWN] = 1,
  60:Src/ax_12a.c  ****   //EEPROM - Info
  61:Src/ax_12a.c  ****   [AX_MODEL_NUMBER] = 2,
  62:Src/ax_12a.c  ****   [AX_FIRMWARE_VERSION] = 1,
  63:Src/ax_12a.c  ****   //RAM - Contrôle
  64:Src/ax_12a.c  ****   [AX_TORQUE_ENABLE] = 1,
  65:Src/ax_12a.c  ****   [AX_LED] = 1,
  66:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_MARGIN] = 1,
  67:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_MARGIN] = 1,
  68:Src/ax_12a.c  ****   [AX_CW_COMPLIANCE_SLOPE] = 1,
  69:Src/ax_12a.c  ****   [AX_CCW_COMPLIANCE_SLOPE] = 1,
  70:Src/ax_12a.c  ****   [AX_GOAL_POSITION] = 2,
  71:Src/ax_12a.c  ****   [AX_MOVING_SPEED] = 2,
  72:Src/ax_12a.c  ****   [AX_TORQUE_LIMIT] = 2,
  73:Src/ax_12a.c  ****   [AX_EEPROM_LOCK] = 1,
  74:Src/ax_12a.c  ****   [AX_PUNCH] = 2,
  75:Src/ax_12a.c  ****   //RAM - Info
  76:Src/ax_12a.c  ****   [AX_CURRENT_POSITION] = 2,
  77:Src/ax_12a.c  ****   [AX_CURRENT_SPEED] = 2,
  78:Src/ax_12a.c  ****   [AX_CURRENT_LOAD] = 2,
  79:Src/ax_12a.c  ****   [AX_CURRENT_VOLTAGE] = 1,
  80:Src/ax_12a.c  ****   [AX_CURRENT_TEMPERATURE] = 1,
  81:Src/ax_12a.c  ****   [AX_REGISTERED_INSTRUCTION] = 1,
  82:Src/ax_12a.c  ****   [AX_MOVING] = 1,
  83:Src/ax_12a.c  **** };
  84:Src/ax_12a.c  **** static uint16_t err;
  85:Src/ax_12a.c  **** 
  86:Src/ax_12a.c  **** //========================================
  87:Src/ax_12a.c  **** //        FONCTIONS DE RECEPTION
  88:Src/ax_12a.c  **** //========================================
ARM GAS  /tmp/ccTQvZ7k.s 			page 3


  89:Src/ax_12a.c  **** #define FSM_BYTE *(fsm->p_buffer)
  90:Src/ax_12a.c  **** #define FSM_NEXT fsm->p_buffer++
  91:Src/ax_12a.c  **** #define FSM_RESET fsm->update_state = AX_FSM_HEADER_0; fsm->p_buffer = fsm->buffer
  92:Src/ax_12a.c  **** #define FSM_UPDATE(state_function) fsm->update_state = state_function
  93:Src/ax_12a.c  **** 
  94:Src/ax_12a.c  **** void AX_FSM_HEADER_0(AX_Receiver_FSM *fsm){
  28              		.loc 1 94 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  95:Src/ax_12a.c  ****   if(FSM_BYTE == header[0]){
  34              		.loc 1 95 0
  35 0000 C368     		ldr	r3, [r0, #12]
  36 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  37 0004 FF2A     		cmp	r2, #255
  38 0006 00D0     		beq	.L3
  39              	.L1:
  96:Src/ax_12a.c  ****     FSM_NEXT;
  97:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_HEADER_1);
  98:Src/ax_12a.c  ****   }
  99:Src/ax_12a.c  **** }
  40              		.loc 1 99 0
  41 0008 7047     		bx	lr
  42              	.L3:
  96:Src/ax_12a.c  ****     FSM_NEXT;
  43              		.loc 1 96 0
  44 000a 0133     		adds	r3, r3, #1
  45 000c C360     		str	r3, [r0, #12]
  97:Src/ax_12a.c  ****   }
  46              		.loc 1 97 0
  47 000e 014B     		ldr	r3, .L4
  48 0010 0360     		str	r3, [r0]
  49              		.loc 1 99 0
  50 0012 F9E7     		b	.L1
  51              	.L5:
  52              		.align	2
  53              	.L4:
  54 0014 00000000 		.word	AX_FSM_HEADER_1
  55              		.cfi_endproc
  56              	.LFE3:
  58              		.section	.text.AX_FSM_HEADER_1,"ax",%progbits
  59              		.align	1
  60              		.global	AX_FSM_HEADER_1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv4-sp-d16
  66              	AX_FSM_HEADER_1:
  67              	.LFB4:
 100:Src/ax_12a.c  **** 
 101:Src/ax_12a.c  **** void AX_FSM_HEADER_1(AX_Receiver_FSM *fsm){
  68              		.loc 1 101 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 4


  72              		@ link register save eliminated.
  73              	.LVL1:
 102:Src/ax_12a.c  ****   if(FSM_BYTE == header[1]){
  74              		.loc 1 102 0
  75 0000 C368     		ldr	r3, [r0, #12]
  76 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  77 0004 FF2A     		cmp	r2, #255
  78 0006 04D0     		beq	.L9
 103:Src/ax_12a.c  ****     FSM_NEXT;
 104:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_ID);
 105:Src/ax_12a.c  ****   }
 106:Src/ax_12a.c  ****   else{
 107:Src/ax_12a.c  ****     FSM_RESET;
  79              		.loc 1 107 0
  80 0008 044B     		ldr	r3, .L10
  81 000a 0360     		str	r3, [r0]
  82 000c 8368     		ldr	r3, [r0, #8]
  83 000e C360     		str	r3, [r0, #12]
 108:Src/ax_12a.c  ****   }
 109:Src/ax_12a.c  **** }
  84              		.loc 1 109 0
  85 0010 7047     		bx	lr
  86              	.L9:
 103:Src/ax_12a.c  ****     FSM_NEXT;
  87              		.loc 1 103 0
  88 0012 0133     		adds	r3, r3, #1
  89 0014 C360     		str	r3, [r0, #12]
 104:Src/ax_12a.c  ****   }
  90              		.loc 1 104 0
  91 0016 024B     		ldr	r3, .L10+4
  92 0018 0360     		str	r3, [r0]
  93 001a 7047     		bx	lr
  94              	.L11:
  95              		.align	2
  96              	.L10:
  97 001c 00000000 		.word	AX_FSM_HEADER_0
  98 0020 00000000 		.word	AX_FSM_ID
  99              		.cfi_endproc
 100              	.LFE4:
 102              		.section	.text.AX_FSM_ID,"ax",%progbits
 103              		.align	1
 104              		.global	AX_FSM_ID
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu fpv4-sp-d16
 110              	AX_FSM_ID:
 111              	.LFB5:
 110:Src/ax_12a.c  **** 
 111:Src/ax_12a.c  **** void AX_FSM_ID(AX_Receiver_FSM *fsm){
 112              		.loc 1 111 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL2:
 112:Src/ax_12a.c  ****   if(FSM_BYTE != 0xFF){
ARM GAS  /tmp/ccTQvZ7k.s 			page 5


 118              		.loc 1 112 0
 119 0000 C368     		ldr	r3, [r0, #12]
 120 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 121 0004 FF2A     		cmp	r2, #255
 122 0006 04D0     		beq	.L13
 113:Src/ax_12a.c  ****     FSM_NEXT;
 123              		.loc 1 113 0
 124 0008 0133     		adds	r3, r3, #1
 125 000a C360     		str	r3, [r0, #12]
 114:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_LENGTH);
 126              		.loc 1 114 0
 127 000c 034B     		ldr	r3, .L15
 128 000e 0360     		str	r3, [r0]
 129 0010 7047     		bx	lr
 130              	.L13:
 115:Src/ax_12a.c  ****   }
 116:Src/ax_12a.c  ****   else{
 117:Src/ax_12a.c  ****     FSM_RESET;
 131              		.loc 1 117 0
 132 0012 034B     		ldr	r3, .L15+4
 133 0014 0360     		str	r3, [r0]
 134 0016 8368     		ldr	r3, [r0, #8]
 135 0018 C360     		str	r3, [r0, #12]
 118:Src/ax_12a.c  ****   }
 119:Src/ax_12a.c  **** }
 136              		.loc 1 119 0
 137 001a 7047     		bx	lr
 138              	.L16:
 139              		.align	2
 140              	.L15:
 141 001c 00000000 		.word	AX_FSM_LENGTH
 142 0020 00000000 		.word	AX_FSM_HEADER_0
 143              		.cfi_endproc
 144              	.LFE5:
 146              		.section	.text.AX_FSM_LENGTH,"ax",%progbits
 147              		.align	1
 148              		.global	AX_FSM_LENGTH
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	AX_FSM_LENGTH:
 155              	.LFB6:
 120:Src/ax_12a.c  **** 
 121:Src/ax_12a.c  **** void AX_FSM_LENGTH(AX_Receiver_FSM *fsm){
 156              		.loc 1 121 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL3:
 122:Src/ax_12a.c  ****   fsm->remaining_bytes = FSM_BYTE;
 162              		.loc 1 122 0
 163 0000 C268     		ldr	r2, [r0, #12]
 164 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 165 0004 0371     		strb	r3, [r0, #4]
 166              	.LVL4:
ARM GAS  /tmp/ccTQvZ7k.s 			page 6


 123:Src/ax_12a.c  ****   const uint8_t remaining_bytes = fsm->remaining_bytes;
 124:Src/ax_12a.c  ****   if((remaining_bytes >= 2) && (4 + remaining_bytes <= AX_BUFFER_SIZE)){
 167              		.loc 1 124 0
 168 0006 012B     		cmp	r3, #1
 169 0008 02D9     		bls	.L18
 170              		.loc 1 124 0 is_stmt 0 discriminator 1
 171 000a 0433     		adds	r3, r3, #4
 172              	.LVL5:
 173 000c 202B     		cmp	r3, #32
 174 000e 04DD     		ble	.L20
 175              	.L18:
 125:Src/ax_12a.c  ****     FSM_NEXT;
 126:Src/ax_12a.c  ****     FSM_UPDATE(AX_FSM_RECEIVING);
 127:Src/ax_12a.c  ****   }
 128:Src/ax_12a.c  ****   else{
 129:Src/ax_12a.c  ****     FSM_RESET;
 176              		.loc 1 129 0 is_stmt 1
 177 0010 044B     		ldr	r3, .L21
 178 0012 0360     		str	r3, [r0]
 179 0014 8368     		ldr	r3, [r0, #8]
 180 0016 C360     		str	r3, [r0, #12]
 130:Src/ax_12a.c  ****   }
 131:Src/ax_12a.c  **** }
 181              		.loc 1 131 0
 182 0018 7047     		bx	lr
 183              	.L20:
 125:Src/ax_12a.c  ****     FSM_NEXT;
 184              		.loc 1 125 0
 185 001a 0132     		adds	r2, r2, #1
 186 001c C260     		str	r2, [r0, #12]
 126:Src/ax_12a.c  ****   }
 187              		.loc 1 126 0
 188 001e 024B     		ldr	r3, .L21+4
 189 0020 0360     		str	r3, [r0]
 190 0022 7047     		bx	lr
 191              	.L22:
 192              		.align	2
 193              	.L21:
 194 0024 00000000 		.word	AX_FSM_HEADER_0
 195 0028 00000000 		.word	AX_FSM_RECEIVING
 196              		.cfi_endproc
 197              	.LFE6:
 199              		.section	.text.AX_FSM_RECEIVING,"ax",%progbits
 200              		.align	1
 201              		.global	AX_FSM_RECEIVING
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv4-sp-d16
 207              	AX_FSM_RECEIVING:
 208              	.LFB7:
 132:Src/ax_12a.c  **** 
 133:Src/ax_12a.c  **** void AX_FSM_RECEIVING(AX_Receiver_FSM *fsm){
 209              		.loc 1 133 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 7


 213              		@ link register save eliminated.
 214              	.LVL6:
 134:Src/ax_12a.c  ****   FSM_NEXT;
 215              		.loc 1 134 0
 216 0000 C368     		ldr	r3, [r0, #12]
 217 0002 0133     		adds	r3, r3, #1
 218 0004 C360     		str	r3, [r0, #12]
 135:Src/ax_12a.c  ****   fsm->remaining_bytes--;
 219              		.loc 1 135 0
 220 0006 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 221 0008 013B     		subs	r3, r3, #1
 222 000a DBB2     		uxtb	r3, r3
 223 000c 0371     		strb	r3, [r0, #4]
 136:Src/ax_12a.c  ****   if(fsm->remaining_bytes == 0){
 224              		.loc 1 136 0
 225 000e 0BB9     		cbnz	r3, .L23
 137:Src/ax_12a.c  ****     fsm->done = 1;
 226              		.loc 1 137 0
 227 0010 0123     		movs	r3, #1
 228 0012 0374     		strb	r3, [r0, #16]
 229              	.L23:
 138:Src/ax_12a.c  ****   }
 139:Src/ax_12a.c  **** }
 230              		.loc 1 139 0
 231 0014 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE7:
 235              		.section	.text.AX_Compute_Checksum,"ax",%progbits
 236              		.align	1
 237              		.global	AX_Compute_Checksum
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	AX_Compute_Checksum:
 244              	.LFB12:
 140:Src/ax_12a.c  **** 
 141:Src/ax_12a.c  **** uint8_t AX_Extract_Status_Packet(AX_Status_Packet *packet, uint8_t frame[AX_BUFFER_SIZE], uint16_t 
 142:Src/ax_12a.c  ****   //The packet size is supposed to be checked in AX_Receive function.
 143:Src/ax_12a.c  ****   //Checksum
 144:Src/ax_12a.c  ****   if(AX_Compute_Checksum(frame+2, packet_size-3) != frame[packet_size-1]){
 145:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 146:Src/ax_12a.c  ****     return 1;
 147:Src/ax_12a.c  ****   }
 148:Src/ax_12a.c  **** 
 149:Src/ax_12a.c  ****   packet->id = frame[2];
 150:Src/ax_12a.c  ****   packet->err = frame[4];
 151:Src/ax_12a.c  ****   
 152:Src/ax_12a.c  ****   //Paramètres
 153:Src/ax_12a.c  ****   packet->nb_params = 0;
 154:Src/ax_12a.c  ****   uint8_t *p_frame = frame+5;
 155:Src/ax_12a.c  ****   uint8_t *end_frame = frame+(packet_size-1);
 156:Src/ax_12a.c  ****   while(p_frame != end_frame){
 157:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 158:Src/ax_12a.c  ****   }
 159:Src/ax_12a.c  ****   
 160:Src/ax_12a.c  ****   return 0;
ARM GAS  /tmp/ccTQvZ7k.s 			page 8


 161:Src/ax_12a.c  **** }
 162:Src/ax_12a.c  **** 
 163:Src/ax_12a.c  **** uint8_t AX_Receive(AX_Interface *interface, uint16_t packet_size, uint32_t timeout){
 164:Src/ax_12a.c  ****   //Avoid overflow
 165:Src/ax_12a.c  ****   if(packet_size > AX_BUFFER_SIZE){
 166:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 167:Src/ax_12a.c  ****     return 1;
 168:Src/ax_12a.c  ****   }
 169:Src/ax_12a.c  ****   
 170:Src/ax_12a.c  ****   //Préparation de la réception
 171:Src/ax_12a.c  ****   interface->set_direction(AX_RECEIVE);
 172:Src/ax_12a.c  **** 
 173:Src/ax_12a.c  ****   //FSM initialization
 174:Src/ax_12a.c  ****   interface->fsm.update_state = AX_FSM_HEADER_0;
 175:Src/ax_12a.c  ****   interface->fsm.remaining_bytes = 0;
 176:Src/ax_12a.c  ****   interface->fsm.buffer = interface->buffer;
 177:Src/ax_12a.c  ****   interface->fsm.p_buffer = interface->buffer;
 178:Src/ax_12a.c  ****   interface->fsm.done = 0;
 179:Src/ax_12a.c  **** 
 180:Src/ax_12a.c  ****   //Reception
 181:Src/ax_12a.c  ****   if(interface->receive(interface->fsm.p_buffer, packet_size, timeout) != 0){
 182:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 183:Src/ax_12a.c  ****     return 1;
 184:Src/ax_12a.c  ****   }
 185:Src/ax_12a.c  **** 
 186:Src/ax_12a.c  ****   //FSM
 187:Src/ax_12a.c  ****   do{
 188:Src/ax_12a.c  ****     interface->fsm.update_state(&(interface->fsm));
 189:Src/ax_12a.c  **** 
 190:Src/ax_12a.c  ****     /*uint8_t *p;
 191:Src/ax_12a.c  ****     printf("Buffer : ");
 192:Src/ax_12a.c  ****     for(p = interface->buffer; p < interface->fsm.p_buffer; p++){
 193:Src/ax_12a.c  ****       printf("0x%2.2X ", *p);
 194:Src/ax_12a.c  ****     }
 195:Src/ax_12a.c  ****     printf("\n");*/
 196:Src/ax_12a.c  ****   }while(interface->fsm.p_buffer != interface->fsm.buffer && interface->fsm.done != 1);//If FSM is 
 197:Src/ax_12a.c  **** 
 198:Src/ax_12a.c  ****   //Checking that the frame is valid
 199:Src/ax_12a.c  ****   if(interface->fsm.done == 0){
 200:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 201:Src/ax_12a.c  ****     return 1;
 202:Src/ax_12a.c  ****   }
 203:Src/ax_12a.c  **** 
 204:Src/ax_12a.c  ****   //Checking the length of the packet
 205:Src/ax_12a.c  ****   uint16_t r_packet_size = interface->fsm.p_buffer - interface->fsm.buffer;
 206:Src/ax_12a.c  ****   if(r_packet_size != packet_size){
 207:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 208:Src/ax_12a.c  ****     return 1;
 209:Src/ax_12a.c  ****   }
 210:Src/ax_12a.c  **** 
 211:Src/ax_12a.c  ****   //Extract the packet, then return
 212:Src/ax_12a.c  ****   return AX_Extract_Status_Packet(&interface->status, interface->buffer, packet_size);
 213:Src/ax_12a.c  **** }
 214:Src/ax_12a.c  **** 
 215:Src/ax_12a.c  **** //======================================
 216:Src/ax_12a.c  **** //           FONCTIONS D'ENVOI          
 217:Src/ax_12a.c  **** //======================================
ARM GAS  /tmp/ccTQvZ7k.s 			page 9


 218:Src/ax_12a.c  **** uint8_t AX_Build_Frame(AX_Instruction_Packet *packet, uint8_t buffer[AX_BUFFER_SIZE]){
 219:Src/ax_12a.c  ****   //Verifying arguments
 220:Src/ax_12a.c  ****   if(packet == 0 || (packet->params == 0 && packet->nb_params > 0) || buffer == 0){
 221:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 222:Src/ax_12a.c  ****     return 0;
 223:Src/ax_12a.c  ****   }
 224:Src/ax_12a.c  ****   //and ID range
 225:Src/ax_12a.c  ****   if(packet->id == 0xFF){
 226:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 227:Src/ax_12a.c  ****     return 0;
 228:Src/ax_12a.c  ****   }
 229:Src/ax_12a.c  ****   //Avoid overflow
 230:Src/ax_12a.c  ****   if(6+packet->nb_params > AX_BUFFER_SIZE){
 231:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 232:Src/ax_12a.c  ****     return 0;
 233:Src/ax_12a.c  ****   }
 234:Src/ax_12a.c  **** 
 235:Src/ax_12a.c  ****   uint8_t *p_buffer = buffer;
 236:Src/ax_12a.c  ****   //Header
 237:Src/ax_12a.c  ****   *(p_buffer++) = header[0];
 238:Src/ax_12a.c  ****   *(p_buffer++) = header[1];
 239:Src/ax_12a.c  **** 
 240:Src/ax_12a.c  ****   //Packet ID
 241:Src/ax_12a.c  ****   *(p_buffer++) = packet->id;
 242:Src/ax_12a.c  **** 
 243:Src/ax_12a.c  ****   //Packet length
 244:Src/ax_12a.c  ****   *(p_buffer++) = packet->nb_params+2;
 245:Src/ax_12a.c  **** 
 246:Src/ax_12a.c  ****   //Instruction
 247:Src/ax_12a.c  ****   *(p_buffer++) = packet->instruction;
 248:Src/ax_12a.c  **** 
 249:Src/ax_12a.c  ****   //Parameters
 250:Src/ax_12a.c  ****   int i;
 251:Src/ax_12a.c  ****   for(i=0; i < packet->nb_params; i++){
 252:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 253:Src/ax_12a.c  ****   }
 254:Src/ax_12a.c  **** 
 255:Src/ax_12a.c  ****   //Checksum
 256:Src/ax_12a.c  ****   uint8_t checksum = AX_Compute_Checksum(buffer+2, p_buffer-buffer-2);
 257:Src/ax_12a.c  ****   *(p_buffer++) = checksum; 
 258:Src/ax_12a.c  ****   
 259:Src/ax_12a.c  ****   return p_buffer-buffer;    
 260:Src/ax_12a.c  **** }
 261:Src/ax_12a.c  **** 
 262:Src/ax_12a.c  **** uint8_t AX_Send(AX_Interface *interface, AX_Instruction_Packet *packet, uint32_t timeout){
 263:Src/ax_12a.c  ****   //Préparation de la trame
 264:Src/ax_12a.c  ****   uint8_t length = AX_Build_Frame(packet, interface->buffer);
 265:Src/ax_12a.c  ****   if(!length){
 266:Src/ax_12a.c  ****     return 1;
 267:Src/ax_12a.c  ****   }
 268:Src/ax_12a.c  **** 
 269:Src/ax_12a.c  ****   //Envoi
 270:Src/ax_12a.c  ****   interface->set_direction(AX_SEND);
 271:Src/ax_12a.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 272:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 273:Src/ax_12a.c  ****     return 1;
 274:Src/ax_12a.c  ****   }
ARM GAS  /tmp/ccTQvZ7k.s 			page 10


 275:Src/ax_12a.c  ****   return 0;
 276:Src/ax_12a.c  **** }
 277:Src/ax_12a.c  **** 
 278:Src/ax_12a.c  **** uint8_t AX_Compute_Checksum(uint8_t *data_blk_ptr, uint16_t data_blk_size){
 245              		.loc 1 278 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 250              	.LVL7:
 279:Src/ax_12a.c  ****   uint8_t checksum = 0;
 280:Src/ax_12a.c  ****   uint16_t i;
 281:Src/ax_12a.c  ****   for(i=0; i < data_blk_size; i++){
 251              		.loc 1 281 0
 252 0000 0023     		movs	r3, #0
 279:Src/ax_12a.c  ****   uint8_t checksum = 0;
 253              		.loc 1 279 0
 254 0002 1A46     		mov	r2, r3
 255              	.LVL8:
 256              		.loc 1 281 0
 257 0004 8B42     		cmp	r3, r1
 258 0006 0CD2     		bcs	.L32
 278:Src/ax_12a.c  ****   uint8_t checksum = 0;
 259              		.loc 1 278 0
 260 0008 10B4     		push	{r4}
 261              	.LCFI0:
 262              		.cfi_def_cfa_offset 4
 263              		.cfi_offset 4, -4
 264              	.LVL9:
 265              	.L27:
 282:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 266              		.loc 1 282 0 discriminator 3
 267 000a C45C     		ldrb	r4, [r0, r3]	@ zero_extendqisi2
 268 000c 2244     		add	r2, r2, r4
 269 000e D2B2     		uxtb	r2, r2
 270              	.LVL10:
 281:Src/ax_12a.c  ****     checksum += data_blk_ptr[i];
 271              		.loc 1 281 0 discriminator 3
 272 0010 0133     		adds	r3, r3, #1
 273              	.LVL11:
 274 0012 9BB2     		uxth	r3, r3
 275              	.LVL12:
 276 0014 8B42     		cmp	r3, r1
 277 0016 F8D3     		bcc	.L27
 283:Src/ax_12a.c  ****   }
 284:Src/ax_12a.c  ****   return ~checksum;
 278              		.loc 1 284 0
 279 0018 D043     		mvns	r0, r2
 280              	.LVL13:
 285:Src/ax_12a.c  **** }
 281              		.loc 1 285 0
 282 001a C0B2     		uxtb	r0, r0
 283 001c 5DF8044B 		ldr	r4, [sp], #4
 284              	.LCFI1:
 285              		.cfi_restore 4
 286              		.cfi_def_cfa_offset 0
 287 0020 7047     		bx	lr
ARM GAS  /tmp/ccTQvZ7k.s 			page 11


 288              	.LVL14:
 289              	.L32:
 284:Src/ax_12a.c  **** }
 290              		.loc 1 284 0
 291 0022 D843     		mvns	r0, r3
 292              	.LVL15:
 293              		.loc 1 285 0
 294 0024 C0B2     		uxtb	r0, r0
 295 0026 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE12:
 299              		.section	.text.AX_Extract_Status_Packet,"ax",%progbits
 300              		.align	1
 301              		.global	AX_Extract_Status_Packet
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	AX_Extract_Status_Packet:
 308              	.LFB8:
 141:Src/ax_12a.c  ****   //The packet size is supposed to be checked in AX_Receive function.
 309              		.loc 1 141 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              	.LVL16:
 314 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 315              	.LCFI2:
 316              		.cfi_def_cfa_offset 24
 317              		.cfi_offset 3, -24
 318              		.cfi_offset 4, -20
 319              		.cfi_offset 5, -16
 320              		.cfi_offset 6, -12
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 0002 0546     		mov	r5, r0
 324 0004 0C46     		mov	r4, r1
 325 0006 1646     		mov	r6, r2
 144:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 326              		.loc 1 144 0
 327 0008 D11E     		subs	r1, r2, #3
 328              	.LVL17:
 329 000a 89B2     		uxth	r1, r1
 330 000c A01C     		adds	r0, r4, #2
 331              	.LVL18:
 332 000e FFF7FEFF 		bl	AX_Compute_Checksum
 333              	.LVL19:
 334 0012 013E     		subs	r6, r6, #1
 335 0014 A719     		adds	r7, r4, r6
 336 0016 A35D     		ldrb	r3, [r4, r6]	@ zero_extendqisi2
 337 0018 9842     		cmp	r0, r3
 338 001a 05D0     		beq	.L34
 145:Src/ax_12a.c  ****     return 1;
 339              		.loc 1 145 0
 340 001c 0C4B     		ldr	r3, .L39
 341 001e 4FF48072 		mov	r2, #256
 342 0022 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccTQvZ7k.s 			page 12


 146:Src/ax_12a.c  ****   }
 343              		.loc 1 146 0
 344 0024 0120     		movs	r0, #1
 345              	.L35:
 161:Src/ax_12a.c  **** 
 346              		.loc 1 161 0
 347 0026 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 348              	.LVL20:
 349              	.L34:
 149:Src/ax_12a.c  ****   packet->err = frame[4];
 350              		.loc 1 149 0
 351 0028 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 352 002a 2B70     		strb	r3, [r5]
 150:Src/ax_12a.c  ****   
 353              		.loc 1 150 0
 354 002c 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 355 002e 6B70     		strb	r3, [r5, #1]
 153:Src/ax_12a.c  ****   uint8_t *p_frame = frame+5;
 356              		.loc 1 153 0
 357 0030 0023     		movs	r3, #0
 358 0032 AB70     		strb	r3, [r5, #2]
 154:Src/ax_12a.c  ****   uint8_t *end_frame = frame+(packet_size-1);
 359              		.loc 1 154 0
 360 0034 611D     		adds	r1, r4, #5
 361              	.LVL21:
 156:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 362              		.loc 1 156 0
 363 0036 06E0     		b	.L36
 364              	.L37:
 365              	.LVL22:
 157:Src/ax_12a.c  ****   }
 366              		.loc 1 157 0
 367 0038 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 368 003a 5A1C     		adds	r2, r3, #1
 369 003c AA70     		strb	r2, [r5, #2]
 370 003e 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 371 0040 2B44     		add	r3, r3, r5
 372 0042 DA70     		strb	r2, [r3, #3]
 373 0044 0131     		adds	r1, r1, #1
 374              	.LVL23:
 375              	.L36:
 156:Src/ax_12a.c  ****     packet->params[packet->nb_params++] = *p_frame++;
 376              		.loc 1 156 0
 377 0046 8F42     		cmp	r7, r1
 378 0048 F6D1     		bne	.L37
 160:Src/ax_12a.c  **** }
 379              		.loc 1 160 0
 380 004a 0020     		movs	r0, #0
 381 004c EBE7     		b	.L35
 382              	.L40:
 383 004e 00BF     		.align	2
 384              	.L39:
 385 0050 00000000 		.word	.LANCHOR0
 386              		.cfi_endproc
 387              	.LFE8:
 389              		.section	.text.AX_Receive,"ax",%progbits
 390              		.align	1
ARM GAS  /tmp/ccTQvZ7k.s 			page 13


 391              		.global	AX_Receive
 392              		.syntax unified
 393              		.thumb
 394              		.thumb_func
 395              		.fpu fpv4-sp-d16
 397              	AX_Receive:
 398              	.LFB9:
 163:Src/ax_12a.c  ****   //Avoid overflow
 399              		.loc 1 163 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              	.LVL24:
 404 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 405              	.LCFI3:
 406              		.cfi_def_cfa_offset 24
 407              		.cfi_offset 3, -24
 408              		.cfi_offset 4, -20
 409              		.cfi_offset 5, -16
 410              		.cfi_offset 6, -12
 411              		.cfi_offset 7, -8
 412              		.cfi_offset 14, -4
 165:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 413              		.loc 1 165 0
 414 0002 2029     		cmp	r1, #32
 415 0004 2ED8     		bhi	.L49
 416 0006 1746     		mov	r7, r2
 417 0008 0D46     		mov	r5, r1
 418 000a 0446     		mov	r4, r0
 171:Src/ax_12a.c  **** 
 419              		.loc 1 171 0
 420 000c 8368     		ldr	r3, [r0, #8]
 421 000e 0120     		movs	r0, #1
 422              	.LVL25:
 423 0010 9847     		blx	r3
 424              	.LVL26:
 174:Src/ax_12a.c  ****   interface->fsm.remaining_bytes = 0;
 425              		.loc 1 174 0
 426 0012 204B     		ldr	r3, .L52
 427 0014 2361     		str	r3, [r4, #16]
 175:Src/ax_12a.c  ****   interface->fsm.buffer = interface->buffer;
 428              		.loc 1 175 0
 429 0016 0023     		movs	r3, #0
 430 0018 2375     		strb	r3, [r4, #20]
 176:Src/ax_12a.c  ****   interface->fsm.p_buffer = interface->buffer;
 431              		.loc 1 176 0
 432 001a 04F12406 		add	r6, r4, #36
 433 001e A661     		str	r6, [r4, #24]
 177:Src/ax_12a.c  ****   interface->fsm.done = 0;
 434              		.loc 1 177 0
 435 0020 E661     		str	r6, [r4, #28]
 178:Src/ax_12a.c  **** 
 436              		.loc 1 178 0
 437 0022 84F82030 		strb	r3, [r4, #32]
 181:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 438              		.loc 1 181 0
 439 0026 6368     		ldr	r3, [r4, #4]
ARM GAS  /tmp/ccTQvZ7k.s 			page 14


 440 0028 3A46     		mov	r2, r7
 441 002a 2946     		mov	r1, r5
 442 002c 3046     		mov	r0, r6
 443 002e 9847     		blx	r3
 444              	.LVL27:
 445 0030 E0B9     		cbnz	r0, .L50
 446              	.L44:
 188:Src/ax_12a.c  **** 
 447              		.loc 1 188 0 discriminator 2
 448 0032 2046     		mov	r0, r4
 449 0034 50F8103F 		ldr	r3, [r0, #16]!
 450 0038 9847     		blx	r3
 451              	.LVL28:
 196:Src/ax_12a.c  **** 
 452              		.loc 1 196 0 discriminator 2
 453 003a E369     		ldr	r3, [r4, #28]
 454 003c A269     		ldr	r2, [r4, #24]
 455 003e 9342     		cmp	r3, r2
 456 0040 03D0     		beq	.L45
 196:Src/ax_12a.c  **** 
 457              		.loc 1 196 0 is_stmt 0 discriminator 1
 458 0042 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 459 0046 0129     		cmp	r1, #1
 460 0048 F3D1     		bne	.L44
 461              	.L45:
 199:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 462              		.loc 1 199 0 is_stmt 1
 463 004a 94F82010 		ldrb	r1, [r4, #32]	@ zero_extendqisi2
 464 004e 99B1     		cbz	r1, .L51
 205:Src/ax_12a.c  ****   if(r_packet_size != packet_size){
 465              		.loc 1 205 0
 466 0050 9B1A     		subs	r3, r3, r2
 467 0052 9BB2     		uxth	r3, r3
 468              	.LVL29:
 206:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_BAD_FRAME;
 469              		.loc 1 206 0
 470 0054 9D42     		cmp	r5, r3
 471 0056 15D0     		beq	.L47
 207:Src/ax_12a.c  ****     return 1;
 472              		.loc 1 207 0
 473 0058 0F4B     		ldr	r3, .L52+4
 474              	.LVL30:
 475 005a 4FF48072 		mov	r2, #256
 476              	.LVL31:
 477 005e 1A80     		strh	r2, [r3]	@ movhi
 208:Src/ax_12a.c  ****   }
 478              		.loc 1 208 0
 479 0060 0120     		movs	r0, #1
 480 0062 08E0     		b	.L43
 481              	.LVL32:
 482              	.L49:
 166:Src/ax_12a.c  ****     return 1;
 483              		.loc 1 166 0
 484 0064 0120     		movs	r0, #1
 485              	.LVL33:
 486 0066 0C4B     		ldr	r3, .L52+4
 487 0068 1880     		strh	r0, [r3]	@ movhi
ARM GAS  /tmp/ccTQvZ7k.s 			page 15


 167:Src/ax_12a.c  ****   }
 488              		.loc 1 167 0
 489 006a 04E0     		b	.L43
 490              	.LVL34:
 491              	.L50:
 182:Src/ax_12a.c  ****     return 1;
 492              		.loc 1 182 0
 493 006c 0A4B     		ldr	r3, .L52+4
 494 006e 40F20112 		movw	r2, #257
 495 0072 1A80     		strh	r2, [r3]	@ movhi
 183:Src/ax_12a.c  ****   }
 496              		.loc 1 183 0
 497 0074 0120     		movs	r0, #1
 498              	.LVL35:
 499              	.L43:
 213:Src/ax_12a.c  **** 
 500              		.loc 1 213 0
 501 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 502              	.LVL36:
 503              	.L51:
 200:Src/ax_12a.c  ****     return 1;
 504              		.loc 1 200 0
 505 0078 074B     		ldr	r3, .L52+4
 506 007a 4FF48072 		mov	r2, #256
 507 007e 1A80     		strh	r2, [r3]	@ movhi
 201:Src/ax_12a.c  ****   }
 508              		.loc 1 201 0
 509 0080 0120     		movs	r0, #1
 510 0082 F8E7     		b	.L43
 511              	.LVL37:
 512              	.L47:
 212:Src/ax_12a.c  **** }
 513              		.loc 1 212 0
 514 0084 2A46     		mov	r2, r5
 515 0086 3146     		mov	r1, r6
 516 0088 04F14400 		add	r0, r4, #68
 517 008c FFF7FEFF 		bl	AX_Extract_Status_Packet
 518              	.LVL38:
 519 0090 F1E7     		b	.L43
 520              	.L53:
 521 0092 00BF     		.align	2
 522              	.L52:
 523 0094 00000000 		.word	AX_FSM_HEADER_0
 524 0098 00000000 		.word	.LANCHOR0
 525              		.cfi_endproc
 526              	.LFE9:
 528              		.section	.text.AX_Build_Frame,"ax",%progbits
 529              		.align	1
 530              		.global	AX_Build_Frame
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu fpv4-sp-d16
 536              	AX_Build_Frame:
 537              	.LFB10:
 218:Src/ax_12a.c  ****   //Verifying arguments
 538              		.loc 1 218 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 16


 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL39:
 543 0000 38B5     		push	{r3, r4, r5, lr}
 544              	.LCFI4:
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 3, -16
 547              		.cfi_offset 4, -12
 548              		.cfi_offset 5, -8
 549              		.cfi_offset 14, -4
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 550              		.loc 1 220 0
 551 0002 D0B1     		cbz	r0, .L55
 552 0004 0346     		mov	r3, r0
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 553              		.loc 1 220 0 is_stmt 0 discriminator 1
 554 0006 4268     		ldr	r2, [r0, #4]
 555 0008 A2B1     		cbz	r2, .L64
 556              	.L56:
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 557              		.loc 1 220 0 discriminator 4
 558 000a B1B1     		cbz	r1, .L55
 225:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 559              		.loc 1 225 0 is_stmt 1
 560 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 561 000e FF2A     		cmp	r2, #255
 562 0010 17D0     		beq	.L65
 230:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_BUFFER_OVERFLOW;
 563              		.loc 1 230 0
 564 0012 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 565 0014 0632     		adds	r2, r2, #6
 566 0016 202A     		cmp	r2, #32
 567 0018 17DC     		bgt	.L66
 568              	.LVL40:
 237:Src/ax_12a.c  ****   *(p_buffer++) = header[1];
 569              		.loc 1 237 0
 570 001a FF22     		movs	r2, #255
 571 001c 0A70     		strb	r2, [r1]
 572              	.LVL41:
 238:Src/ax_12a.c  **** 
 573              		.loc 1 238 0
 574 001e 4A70     		strb	r2, [r1, #1]
 575              	.LVL42:
 241:Src/ax_12a.c  **** 
 576              		.loc 1 241 0
 577 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 578 0022 8A70     		strb	r2, [r1, #2]
 244:Src/ax_12a.c  **** 
 579              		.loc 1 244 0
 580 0024 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 581              	.LVL43:
 582 0026 0232     		adds	r2, r2, #2
 583 0028 CA70     		strb	r2, [r1, #3]
 247:Src/ax_12a.c  **** 
 584              		.loc 1 247 0
 585 002a 4C1D     		adds	r4, r1, #5
ARM GAS  /tmp/ccTQvZ7k.s 			page 17


 586              	.LVL44:
 587 002c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 588 002e 0A71     		strb	r2, [r1, #4]
 589              	.LVL45:
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 590              		.loc 1 251 0
 591 0030 0022     		movs	r2, #0
 592 0032 14E0     		b	.L61
 593              	.LVL46:
 594              	.L64:
 220:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 595              		.loc 1 220 0 discriminator 2
 596 0034 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 597 0036 002A     		cmp	r2, #0
 598 0038 E7D0     		beq	.L56
 599              	.L55:
 221:Src/ax_12a.c  ****     return 0;
 600              		.loc 1 221 0
 601 003a 0020     		movs	r0, #0
 602              	.LVL47:
 603 003c 0F4B     		ldr	r3, .L67
 604 003e 1880     		strh	r0, [r3]	@ movhi
 605              	.LVL48:
 606              	.L58:
 260:Src/ax_12a.c  **** 
 607              		.loc 1 260 0
 608 0040 38BD     		pop	{r3, r4, r5, pc}
 609              	.LVL49:
 610              	.L65:
 226:Src/ax_12a.c  ****     return 0;
 611              		.loc 1 226 0
 612 0042 0020     		movs	r0, #0
 613              	.LVL50:
 614 0044 0D4B     		ldr	r3, .L67
 615              	.LVL51:
 616 0046 1880     		strh	r0, [r3]	@ movhi
 227:Src/ax_12a.c  ****   }
 617              		.loc 1 227 0
 618 0048 FAE7     		b	.L58
 619              	.LVL52:
 620              	.L66:
 231:Src/ax_12a.c  ****     return 0;
 621              		.loc 1 231 0
 622 004a 0C4B     		ldr	r3, .L67
 623 004c 0122     		movs	r2, #1
 624 004e 1A80     		strh	r2, [r3]	@ movhi
 232:Src/ax_12a.c  ****   }
 625              		.loc 1 232 0
 626 0050 0020     		movs	r0, #0
 627              	.LVL53:
 628 0052 F5E7     		b	.L58
 629              	.LVL54:
 630              	.L62:
 252:Src/ax_12a.c  ****   }
 631              		.loc 1 252 0 discriminator 3
 632 0054 5868     		ldr	r0, [r3, #4]
 633              	.LVL55:
ARM GAS  /tmp/ccTQvZ7k.s 			page 18


 634 0056 805C     		ldrb	r0, [r0, r2]	@ zero_extendqisi2
 635 0058 2070     		strb	r0, [r4]
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 636              		.loc 1 251 0 discriminator 3
 637 005a 0132     		adds	r2, r2, #1
 638              	.LVL56:
 252:Src/ax_12a.c  ****   }
 639              		.loc 1 252 0 discriminator 3
 640 005c 0134     		adds	r4, r4, #1
 641              	.LVL57:
 642              	.L61:
 251:Src/ax_12a.c  ****     *(p_buffer++) = packet->params[i];
 643              		.loc 1 251 0 discriminator 1
 644 005e 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 645 0060 9042     		cmp	r0, r2
 646 0062 F7DC     		bgt	.L62
 647 0064 0D46     		mov	r5, r1
 256:Src/ax_12a.c  ****   *(p_buffer++) = checksum; 
 648              		.loc 1 256 0
 649 0066 611A     		subs	r1, r4, r1
 650              	.LVL58:
 651 0068 0239     		subs	r1, r1, #2
 652 006a 89B2     		uxth	r1, r1
 653 006c A81C     		adds	r0, r5, #2
 654 006e FFF7FEFF 		bl	AX_Compute_Checksum
 655              	.LVL59:
 257:Src/ax_12a.c  ****   
 656              		.loc 1 257 0
 657 0072 631C     		adds	r3, r4, #1
 658              	.LVL60:
 659 0074 2070     		strb	r0, [r4]
 259:Src/ax_12a.c  **** }
 660              		.loc 1 259 0
 661 0076 581B     		subs	r0, r3, r5
 662              	.LVL61:
 663 0078 C0B2     		uxtb	r0, r0
 664 007a E1E7     		b	.L58
 665              	.L68:
 666              		.align	2
 667              	.L67:
 668 007c 00000000 		.word	.LANCHOR0
 669              		.cfi_endproc
 670              	.LFE10:
 672              		.section	.text.AX_Send,"ax",%progbits
 673              		.align	1
 674              		.global	AX_Send
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	AX_Send:
 681              	.LFB11:
 262:Src/ax_12a.c  ****   //Préparation de la trame
 682              		.loc 1 262 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 19


 686              	.LVL62:
 687 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 688              	.LCFI5:
 689              		.cfi_def_cfa_offset 24
 690              		.cfi_offset 3, -24
 691              		.cfi_offset 4, -20
 692              		.cfi_offset 5, -16
 693              		.cfi_offset 6, -12
 694              		.cfi_offset 7, -8
 695              		.cfi_offset 14, -4
 696 0002 0446     		mov	r4, r0
 697 0004 0846     		mov	r0, r1
 698              	.LVL63:
 699 0006 1746     		mov	r7, r2
 264:Src/ax_12a.c  ****   if(!length){
 700              		.loc 1 264 0
 701 0008 04F12405 		add	r5, r4, #36
 702 000c 2946     		mov	r1, r5
 703              	.LVL64:
 704 000e FFF7FEFF 		bl	AX_Build_Frame
 705              	.LVL65:
 265:Src/ax_12a.c  ****     return 1;
 706              		.loc 1 265 0
 707 0012 88B1     		cbz	r0, .L71
 708 0014 0646     		mov	r6, r0
 270:Src/ax_12a.c  ****   if(interface->send(interface->buffer, length, timeout) == 1){
 709              		.loc 1 270 0
 710 0016 A368     		ldr	r3, [r4, #8]
 711 0018 0020     		movs	r0, #0
 712              	.LVL66:
 713 001a 9847     		blx	r3
 714              	.LVL67:
 271:Src/ax_12a.c  ****     err = AX_ERR_LINK | AX_ERR_TIMEOUT;
 715              		.loc 1 271 0
 716 001c 2368     		ldr	r3, [r4]
 717 001e 3A46     		mov	r2, r7
 718 0020 B1B2     		uxth	r1, r6
 719 0022 2846     		mov	r0, r5
 720 0024 9847     		blx	r3
 721              	.LVL68:
 722 0026 0128     		cmp	r0, #1
 723 0028 01D0     		beq	.L74
 275:Src/ax_12a.c  **** }
 724              		.loc 1 275 0
 725 002a 0020     		movs	r0, #0
 726              	.L70:
 276:Src/ax_12a.c  **** 
 727              		.loc 1 276 0
 728 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 729              	.LVL69:
 730              	.L74:
 272:Src/ax_12a.c  ****     return 1;
 731              		.loc 1 272 0
 732 002e 034B     		ldr	r3, .L75
 733 0030 40F20112 		movw	r2, #257
 734 0034 1A80     		strh	r2, [r3]	@ movhi
 273:Src/ax_12a.c  ****   }
ARM GAS  /tmp/ccTQvZ7k.s 			page 20


 735              		.loc 1 273 0
 736 0036 F9E7     		b	.L70
 737              	.LVL70:
 738              	.L71:
 266:Src/ax_12a.c  ****   }
 739              		.loc 1 266 0
 740 0038 0120     		movs	r0, #1
 741              	.LVL71:
 742 003a F7E7     		b	.L70
 743              	.L76:
 744              		.align	2
 745              	.L75:
 746 003c 00000000 		.word	.LANCHOR0
 747              		.cfi_endproc
 748              	.LFE11:
 750              		.section	.text.AX_Get_Error,"ax",%progbits
 751              		.align	1
 752              		.global	AX_Get_Error
 753              		.syntax unified
 754              		.thumb
 755              		.thumb_func
 756              		.fpu fpv4-sp-d16
 758              	AX_Get_Error:
 759              	.LFB13:
 286:Src/ax_12a.c  **** 
 287:Src/ax_12a.c  **** //======================================
 288:Src/ax_12a.c  **** //         ERROR HANDLING  
 289:Src/ax_12a.c  **** //======================================
 290:Src/ax_12a.c  **** uint16_t AX_Get_Error(){
 760              		.loc 1 290 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764              		@ link register save eliminated.
 291:Src/ax_12a.c  ****   return err;
 292:Src/ax_12a.c  **** }
 765              		.loc 1 292 0
 766 0000 014B     		ldr	r3, .L78
 767 0002 1888     		ldrh	r0, [r3]
 768 0004 7047     		bx	lr
 769              	.L79:
 770 0006 00BF     		.align	2
 771              	.L78:
 772 0008 00000000 		.word	.LANCHOR0
 773              		.cfi_endproc
 774              	.LFE13:
 776              		.section	.text.AX_Check_Status,"ax",%progbits
 777              		.align	1
 778              		.global	AX_Check_Status
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu fpv4-sp-d16
 784              	AX_Check_Status:
 785              	.LFB14:
 293:Src/ax_12a.c  **** 
 294:Src/ax_12a.c  **** uint8_t AX_Check_Status(AX *servo){
ARM GAS  /tmp/ccTQvZ7k.s 			page 21


 786              		.loc 1 294 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791              	.LVL72:
 295:Src/ax_12a.c  ****   if(AX_STATUS_ERROR(servo->interface->status.err) != 0){
 792              		.loc 1 295 0
 793 0000 4368     		ldr	r3, [r0, #4]
 794 0002 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 795 0006 13F03F03 		ands	r3, r3, #63
 796 000a 05D0     		beq	.L82
 296:Src/ax_12a.c  ****     err = AX_ERR_STATUS | AX_STATUS_ERROR(servo->interface->status.err);
 797              		.loc 1 296 0
 798 000c 43F40073 		orr	r3, r3, #512
 799 0010 024A     		ldr	r2, .L83
 800 0012 1380     		strh	r3, [r2]	@ movhi
 297:Src/ax_12a.c  ****     return 1;
 801              		.loc 1 297 0
 802 0014 0120     		movs	r0, #1
 803              	.LVL73:
 804 0016 7047     		bx	lr
 805              	.LVL74:
 806              	.L82:
 298:Src/ax_12a.c  ****   }
 299:Src/ax_12a.c  ****   return 0;
 807              		.loc 1 299 0
 808 0018 0020     		movs	r0, #0
 809              	.LVL75:
 300:Src/ax_12a.c  **** }
 810              		.loc 1 300 0
 811 001a 7047     		bx	lr
 812              	.L84:
 813              		.align	2
 814              	.L83:
 815 001c 00000000 		.word	.LANCHOR0
 816              		.cfi_endproc
 817              	.LFE14:
 819              		.section	.text.AX_Ping,"ax",%progbits
 820              		.align	1
 821              		.global	AX_Ping
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 825              		.fpu fpv4-sp-d16
 827              	AX_Ping:
 828              	.LFB15:
 301:Src/ax_12a.c  **** 
 302:Src/ax_12a.c  **** //======================================
 303:Src/ax_12a.c  **** //         INSTRUCTION SET   
 304:Src/ax_12a.c  **** //======================================
 305:Src/ax_12a.c  **** uint8_t AX_Ping(AX *servo){
 829              		.loc 1 305 0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 8
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              	.LVL76:
ARM GAS  /tmp/ccTQvZ7k.s 			page 22


 306:Src/ax_12a.c  ****   if(servo == 0){
 834              		.loc 1 306 0
 835 0000 F0B1     		cbz	r0, .L91
 305:Src/ax_12a.c  ****   if(servo == 0){
 836              		.loc 1 305 0
 837 0002 10B5     		push	{r4, lr}
 838              	.LCFI6:
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 4, -8
 841              		.cfi_offset 14, -4
 842 0004 82B0     		sub	sp, sp, #8
 843              	.LCFI7:
 844              		.cfi_def_cfa_offset 16
 845 0006 0446     		mov	r4, r0
 307:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 308:Src/ax_12a.c  ****     return 1;
 309:Src/ax_12a.c  ****   }
 310:Src/ax_12a.c  ****   
 311:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 312:Src/ax_12a.c  ****   packet.id = servo->id;
 846              		.loc 1 312 0
 847 0008 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 848 000a 8DF80030 		strb	r3, [sp]
 313:Src/ax_12a.c  ****   packet.instruction = AX_PING;
 849              		.loc 1 313 0
 850 000e 0122     		movs	r2, #1
 851 0010 8DF80120 		strb	r2, [sp, #1]
 314:Src/ax_12a.c  ****   packet.nb_params = 0;
 852              		.loc 1 314 0
 853 0014 0023     		movs	r3, #0
 854 0016 8DF80230 		strb	r3, [sp, #2]
 315:Src/ax_12a.c  ****   packet.params = 0;
 855              		.loc 1 315 0
 856 001a 0193     		str	r3, [sp, #4]
 316:Src/ax_12a.c  **** 
 317:Src/ax_12a.c  ****   //Sending the instruction
 318:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 857              		.loc 1 318 0
 858 001c 6946     		mov	r1, sp
 859 001e 4068     		ldr	r0, [r0, #4]
 860              	.LVL77:
 861 0020 FFF7FEFF 		bl	AX_Send
 862              	.LVL78:
 863 0024 0128     		cmp	r0, #1
 864 0026 09D0     		beq	.L87
 319:Src/ax_12a.c  ****     return 1;
 320:Src/ax_12a.c  ****   }
 321:Src/ax_12a.c  **** 
 322:Src/ax_12a.c  ****   //Receiving status
 323:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 865              		.loc 1 323 0
 866 0028 0122     		movs	r2, #1
 867 002a 0621     		movs	r1, #6
 868 002c 6068     		ldr	r0, [r4, #4]
 869 002e FFF7FEFF 		bl	AX_Receive
 870              	.LVL79:
 871 0032 0128     		cmp	r0, #1
ARM GAS  /tmp/ccTQvZ7k.s 			page 23


 872 0034 02D0     		beq	.L87
 324:Src/ax_12a.c  ****     return 1;
 325:Src/ax_12a.c  ****   }
 326:Src/ax_12a.c  **** 
 327:Src/ax_12a.c  ****   //Vérification de la réponse
 328:Src/ax_12a.c  ****   return AX_Check_Status(servo);
 873              		.loc 1 328 0
 874 0036 2046     		mov	r0, r4
 875 0038 FFF7FEFF 		bl	AX_Check_Status
 876              	.LVL80:
 877              	.L87:
 329:Src/ax_12a.c  **** }
 878              		.loc 1 329 0
 879 003c 02B0     		add	sp, sp, #8
 880              	.LCFI8:
 881              		.cfi_def_cfa_offset 8
 882              		@ sp needed
 883 003e 10BD     		pop	{r4, pc}
 884              	.LVL81:
 885              	.L91:
 886              	.LCFI9:
 887              		.cfi_def_cfa_offset 0
 888              		.cfi_restore 4
 889              		.cfi_restore 14
 307:Src/ax_12a.c  ****     return 1;
 890              		.loc 1 307 0
 891 0040 024B     		ldr	r3, .L92
 892 0042 0022     		movs	r2, #0
 893 0044 1A80     		strh	r2, [r3]	@ movhi
 308:Src/ax_12a.c  ****   }
 894              		.loc 1 308 0
 895 0046 0120     		movs	r0, #1
 896              	.LVL82:
 897              		.loc 1 329 0
 898 0048 7047     		bx	lr
 899              	.L93:
 900 004a 00BF     		.align	2
 901              	.L92:
 902 004c 00000000 		.word	.LANCHOR0
 903              		.cfi_endproc
 904              	.LFE15:
 906              		.section	.text.AX_Discover,"ax",%progbits
 907              		.align	1
 908              		.global	AX_Discover
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu fpv4-sp-d16
 914              	AX_Discover:
 915              	.LFB16:
 330:Src/ax_12a.c  **** 
 331:Src/ax_12a.c  **** uint8_t AX_Discover(AX_Interface *interface, AX *buffer_servos, uint8_t len_buffer, uint16_t *nb_se
 916              		.loc 1 331 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 8
 919              		@ frame_needed = 0, uses_anonymous_args = 0
 920              	.LVL83:
ARM GAS  /tmp/ccTQvZ7k.s 			page 24


 921 0000 70B5     		push	{r4, r5, r6, lr}
 922              	.LCFI10:
 923              		.cfi_def_cfa_offset 16
 924              		.cfi_offset 4, -16
 925              		.cfi_offset 5, -12
 926              		.cfi_offset 6, -8
 927              		.cfi_offset 14, -4
 928 0002 82B0     		sub	sp, sp, #8
 929              	.LCFI11:
 930              		.cfi_def_cfa_offset 24
 931 0004 0E46     		mov	r6, r1
 932 0006 1546     		mov	r5, r2
 933 0008 1C46     		mov	r4, r3
 332:Src/ax_12a.c  ****   AX servo;
 333:Src/ax_12a.c  ****   servo.interface = interface;
 934              		.loc 1 333 0
 935 000a 0190     		str	r0, [sp, #4]
 334:Src/ax_12a.c  **** 
 335:Src/ax_12a.c  ****   *nb_servos = 0;
 936              		.loc 1 335 0
 937 000c 0023     		movs	r3, #0
 938              	.LVL84:
 939 000e 2380     		strh	r3, [r4]	@ movhi
 336:Src/ax_12a.c  ****   for(servo.id = 0x00; servo.id < 0xFD && (*nb_servos < len_buffer); servo.id++){
 940              		.loc 1 336 0
 941 0010 8DF80030 		strb	r3, [sp]
 942 0014 04E0     		b	.L95
 943              	.LVL85:
 944              	.L96:
 945              		.loc 1 336 0 is_stmt 0 discriminator 2
 946 0016 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 947 001a 0133     		adds	r3, r3, #1
 948 001c 8DF80030 		strb	r3, [sp]
 949              	.L95:
 950              		.loc 1 336 0 discriminator 1
 951 0020 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 952 0024 FC2B     		cmp	r3, #252
 953 0026 13D8     		bhi	.L97
 954              		.loc 1 336 0 discriminator 3
 955 0028 2288     		ldrh	r2, [r4]
 956 002a ABB2     		uxth	r3, r5
 957 002c 9A42     		cmp	r2, r3
 958 002e 0FD2     		bcs	.L97
 337:Src/ax_12a.c  ****     if(AX_Ping(&servo) == 0){
 959              		.loc 1 337 0 is_stmt 1
 960 0030 6846     		mov	r0, sp
 961 0032 FFF7FEFF 		bl	AX_Ping
 962              	.LVL86:
 963 0036 0028     		cmp	r0, #0
 964 0038 EDD1     		bne	.L96
 338:Src/ax_12a.c  ****       buffer_servos[(*nb_servos)++] = servo;
 965              		.loc 1 338 0
 966 003a 2388     		ldrh	r3, [r4]
 967 003c 5A1C     		adds	r2, r3, #1
 968 003e 2280     		strh	r2, [r4]	@ movhi
 969 0040 06EBC303 		add	r3, r6, r3, lsl #3
 970 0044 02AA     		add	r2, sp, #8
ARM GAS  /tmp/ccTQvZ7k.s 			page 25


 971 0046 12E90300 		ldmdb	r2, {r0, r1}
 972 004a 83E80300 		stm	r3, {r0, r1}
 973 004e E2E7     		b	.L96
 974              	.L97:
 339:Src/ax_12a.c  ****     }
 340:Src/ax_12a.c  ****   }
 341:Src/ax_12a.c  ****   
 342:Src/ax_12a.c  ****   return (*nb_servos > 0)?0:1;
 975              		.loc 1 342 0
 976 0050 2088     		ldrh	r0, [r4]
 343:Src/ax_12a.c  **** }
 977              		.loc 1 343 0
 978 0052 B0FA80F0 		clz	r0, r0
 979 0056 4009     		lsrs	r0, r0, #5
 980 0058 02B0     		add	sp, sp, #8
 981              	.LCFI12:
 982              		.cfi_def_cfa_offset 16
 983              		@ sp needed
 984 005a 70BD     		pop	{r4, r5, r6, pc}
 985              		.cfi_endproc
 986              	.LFE16:
 988              		.section	.text.AX_Read,"ax",%progbits
 989              		.align	1
 990              		.global	AX_Read
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 994              		.fpu fpv4-sp-d16
 996              	AX_Read:
 997              	.LFB18:
 344:Src/ax_12a.c  **** 
 345:Src/ax_12a.c  **** uint8_t AX_Say_Hello(AX *servo){
 346:Src/ax_12a.c  ****   if(AX_Ping(servo) == 1){
 347:Src/ax_12a.c  ****     return 1;
 348:Src/ax_12a.c  ****   }
 349:Src/ax_12a.c  **** 
 350:Src/ax_12a.c  ****   uint8_t i;
 351:Src/ax_12a.c  ****   for(i = 0; i < servo->id; i++){
 352:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 353:Src/ax_12a.c  ****     servo->interface->delay(500);
 354:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_OFF, AX_NOW);
 355:Src/ax_12a.c  ****     servo->interface->delay(500);
 356:Src/ax_12a.c  ****   }
 357:Src/ax_12a.c  **** 
 358:Src/ax_12a.c  ****   return 0;
 359:Src/ax_12a.c  **** }
 360:Src/ax_12a.c  **** 
 361:Src/ax_12a.c  **** uint8_t AX_Read(AX *servo, AX_Field field, uint16_t *data){
 998              		.loc 1 361 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 16
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              	.LVL87:
 362:Src/ax_12a.c  ****   if(field > AX_NB_FIELDS-1){
 1003              		.loc 1 362 0
 1004 0000 1F29     		cmp	r1, #31
 1005 0002 04D9     		bls	.L101
ARM GAS  /tmp/ccTQvZ7k.s 			page 26


 363:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1006              		.loc 1 363 0
 1007 0004 1F4B     		ldr	r3, .L108
 1008 0006 0022     		movs	r2, #0
 1009              	.LVL88:
 1010 0008 1A80     		strh	r2, [r3]	@ movhi
 364:Src/ax_12a.c  ****     return 1;
 1011              		.loc 1 364 0
 1012 000a 0120     		movs	r0, #1
 1013              	.LVL89:
 365:Src/ax_12a.c  ****   }
 366:Src/ax_12a.c  ****   
 367:Src/ax_12a.c  ****   //Preparation of READ instruction
 368:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 369:Src/ax_12a.c  ****   packet.id = servo->id;
 370:Src/ax_12a.c  ****   packet.instruction = AX_READ;
 371:Src/ax_12a.c  ****   packet.nb_params = 2;
 372:Src/ax_12a.c  ****   uint8_t params[2] = {field_addr[field], field_length[field]};
 373:Src/ax_12a.c  ****   packet.params = params;
 374:Src/ax_12a.c  **** 
 375:Src/ax_12a.c  ****   //Sending the instruction
 376:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 377:Src/ax_12a.c  ****     return 1;
 378:Src/ax_12a.c  ****   }
 379:Src/ax_12a.c  ****   
 380:Src/ax_12a.c  ****   //Receiving status packet
 381:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6+field_length[field], AX_DEFAULT_TIMEOUT) == 1){
 382:Src/ax_12a.c  ****     return 1;
 383:Src/ax_12a.c  ****   }
 384:Src/ax_12a.c  **** 
 385:Src/ax_12a.c  ****   //Checking for errors
 386:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 387:Src/ax_12a.c  ****     return 1;
 388:Src/ax_12a.c  ****   }
 389:Src/ax_12a.c  ****   
 390:Src/ax_12a.c  ****   //Gathering data
 391:Src/ax_12a.c  ****   *data = servo->interface->status.params[0];
 392:Src/ax_12a.c  ****   if(field_length[field] == 2){
 393:Src/ax_12a.c  ****     *data |= servo->interface->status.params[1] << 8;
 394:Src/ax_12a.c  ****   }
 395:Src/ax_12a.c  ****   return 0;
 396:Src/ax_12a.c  **** }
 1014              		.loc 1 396 0
 1015 000c 7047     		bx	lr
 1016              	.LVL90:
 1017              	.L101:
 361:Src/ax_12a.c  ****   if(field > AX_NB_FIELDS-1){
 1018              		.loc 1 361 0
 1019 000e 70B5     		push	{r4, r5, r6, lr}
 1020              	.LCFI13:
 1021              		.cfi_def_cfa_offset 16
 1022              		.cfi_offset 4, -16
 1023              		.cfi_offset 5, -12
 1024              		.cfi_offset 6, -8
 1025              		.cfi_offset 14, -4
 1026 0010 84B0     		sub	sp, sp, #16
 1027              	.LCFI14:
ARM GAS  /tmp/ccTQvZ7k.s 			page 27


 1028              		.cfi_def_cfa_offset 32
 1029 0012 1546     		mov	r5, r2
 1030 0014 0446     		mov	r4, r0
 369:Src/ax_12a.c  ****   packet.instruction = AX_READ;
 1031              		.loc 1 369 0
 1032 0016 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1033 0018 8DF80830 		strb	r3, [sp, #8]
 370:Src/ax_12a.c  ****   packet.nb_params = 2;
 1034              		.loc 1 370 0
 1035 001c 0223     		movs	r3, #2
 1036 001e 8DF80930 		strb	r3, [sp, #9]
 371:Src/ax_12a.c  ****   uint8_t params[2] = {field_addr[field], field_length[field]};
 1037              		.loc 1 371 0
 1038 0022 8DF80A30 		strb	r3, [sp, #10]
 372:Src/ax_12a.c  ****   packet.params = params;
 1039              		.loc 1 372 0
 1040 0026 184B     		ldr	r3, .L108+4
 1041 0028 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1042 002a 8DF80430 		strb	r3, [sp, #4]
 1043 002e 174B     		ldr	r3, .L108+8
 1044 0030 5E5C     		ldrb	r6, [r3, r1]	@ zero_extendqisi2
 1045 0032 8DF80560 		strb	r6, [sp, #5]
 373:Src/ax_12a.c  **** 
 1046              		.loc 1 373 0
 1047 0036 01AB     		add	r3, sp, #4
 1048 0038 0393     		str	r3, [sp, #12]
 376:Src/ax_12a.c  ****     return 1;
 1049              		.loc 1 376 0
 1050 003a 0122     		movs	r2, #1
 1051              	.LVL91:
 1052 003c 02A9     		add	r1, sp, #8
 1053              	.LVL92:
 1054 003e 4068     		ldr	r0, [r0, #4]
 1055              	.LVL93:
 1056 0040 FFF7FEFF 		bl	AX_Send
 1057              	.LVL94:
 1058 0044 0128     		cmp	r0, #1
 1059 0046 12D0     		beq	.L102
 381:Src/ax_12a.c  ****     return 1;
 1060              		.loc 1 381 0
 1061 0048 0122     		movs	r2, #1
 1062 004a B11D     		adds	r1, r6, #6
 1063 004c 6068     		ldr	r0, [r4, #4]
 1064 004e FFF7FEFF 		bl	AX_Receive
 1065              	.LVL95:
 1066 0052 0128     		cmp	r0, #1
 1067 0054 0BD0     		beq	.L102
 386:Src/ax_12a.c  ****     return 1;
 1068              		.loc 1 386 0
 1069 0056 2046     		mov	r0, r4
 1070 0058 FFF7FEFF 		bl	AX_Check_Status
 1071              	.LVL96:
 1072 005c 0128     		cmp	r0, #1
 1073 005e 06D0     		beq	.L102
 391:Src/ax_12a.c  ****   if(field_length[field] == 2){
 1074              		.loc 1 391 0
 1075 0060 6368     		ldr	r3, [r4, #4]
ARM GAS  /tmp/ccTQvZ7k.s 			page 28


 1076 0062 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 1077 0066 2B80     		strh	r3, [r5]	@ movhi
 392:Src/ax_12a.c  ****     *data |= servo->interface->status.params[1] << 8;
 1078              		.loc 1 392 0
 1079 0068 022E     		cmp	r6, #2
 1080 006a 02D0     		beq	.L107
 395:Src/ax_12a.c  **** }
 1081              		.loc 1 395 0
 1082 006c 0020     		movs	r0, #0
 1083              	.L102:
 1084              		.loc 1 396 0
 1085 006e 04B0     		add	sp, sp, #16
 1086              	.LCFI15:
 1087              		.cfi_remember_state
 1088              		.cfi_def_cfa_offset 16
 1089              		@ sp needed
 1090 0070 70BD     		pop	{r4, r5, r6, pc}
 1091              	.LVL97:
 1092              	.L107:
 1093              	.LCFI16:
 1094              		.cfi_restore_state
 393:Src/ax_12a.c  ****   }
 1095              		.loc 1 393 0
 1096 0072 6268     		ldr	r2, [r4, #4]
 1097 0074 92F84820 		ldrb	r2, [r2, #72]	@ zero_extendqisi2
 1098 0078 43EA0223 		orr	r3, r3, r2, lsl #8
 1099 007c 2B80     		strh	r3, [r5]	@ movhi
 395:Src/ax_12a.c  **** }
 1100              		.loc 1 395 0
 1101 007e 0020     		movs	r0, #0
 1102 0080 F5E7     		b	.L102
 1103              	.L109:
 1104 0082 00BF     		.align	2
 1105              	.L108:
 1106 0084 00000000 		.word	.LANCHOR0
 1107 0088 00000000 		.word	.LANCHOR1
 1108 008c 00000000 		.word	.LANCHOR2
 1109              		.cfi_endproc
 1110              	.LFE18:
 1112              		.section	.text.AX_Action,"ax",%progbits
 1113              		.align	1
 1114              		.global	AX_Action
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	AX_Action:
 1121              	.LFB19:
 397:Src/ax_12a.c  **** 
 398:Src/ax_12a.c  **** uint8_t AX_Action(AX *servo){
 1122              		.loc 1 398 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 8
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126              	.LVL98:
 1127 0000 10B5     		push	{r4, lr}
 1128              	.LCFI17:
ARM GAS  /tmp/ccTQvZ7k.s 			page 29


 1129              		.cfi_def_cfa_offset 8
 1130              		.cfi_offset 4, -8
 1131              		.cfi_offset 14, -4
 1132 0002 82B0     		sub	sp, sp, #8
 1133              	.LCFI18:
 1134              		.cfi_def_cfa_offset 16
 1135 0004 0446     		mov	r4, r0
 399:Src/ax_12a.c  ****   //Preparing instruction
 400:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 401:Src/ax_12a.c  ****   packet.id = servo->id;
 1136              		.loc 1 401 0
 1137 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1138 0008 8DF80030 		strb	r3, [sp]
 402:Src/ax_12a.c  ****   packet.instruction = AX_ACTION;
 1139              		.loc 1 402 0
 1140 000c 0523     		movs	r3, #5
 1141 000e 8DF80130 		strb	r3, [sp, #1]
 403:Src/ax_12a.c  ****   packet.nb_params = 0;
 1142              		.loc 1 403 0
 1143 0012 0023     		movs	r3, #0
 1144 0014 8DF80230 		strb	r3, [sp, #2]
 404:Src/ax_12a.c  ****   packet.params = 0;
 1145              		.loc 1 404 0
 1146 0018 0193     		str	r3, [sp, #4]
 405:Src/ax_12a.c  **** 
 406:Src/ax_12a.c  ****   //Sending instruction
 407:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1147              		.loc 1 407 0
 1148 001a 0122     		movs	r2, #1
 1149 001c 6946     		mov	r1, sp
 1150 001e 4068     		ldr	r0, [r0, #4]
 1151              	.LVL99:
 1152 0020 FFF7FEFF 		bl	AX_Send
 1153              	.LVL100:
 1154 0024 0128     		cmp	r0, #1
 1155 0026 0CD0     		beq	.L111
 408:Src/ax_12a.c  ****     return 1;
 409:Src/ax_12a.c  ****   }
 410:Src/ax_12a.c  **** 
 411:Src/ax_12a.c  ****   //Receiving status
 412:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1156              		.loc 1 412 0
 1157 0028 0122     		movs	r2, #1
 1158 002a 0621     		movs	r1, #6
 1159 002c 6068     		ldr	r0, [r4, #4]
 1160 002e FFF7FEFF 		bl	AX_Receive
 1161              	.LVL101:
 1162 0032 0128     		cmp	r0, #1
 1163 0034 05D0     		beq	.L111
 413:Src/ax_12a.c  ****     return 1;
 414:Src/ax_12a.c  ****   }
 415:Src/ax_12a.c  **** 
 416:Src/ax_12a.c  ****   //Checking status
 417:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 1164              		.loc 1 417 0
 1165 0036 2046     		mov	r0, r4
 1166 0038 FFF7FEFF 		bl	AX_Check_Status
ARM GAS  /tmp/ccTQvZ7k.s 			page 30


 1167              	.LVL102:
 1168 003c 0128     		cmp	r0, #1
 1169 003e 00D0     		beq	.L111
 418:Src/ax_12a.c  ****     return 1;
 419:Src/ax_12a.c  ****   }
 420:Src/ax_12a.c  **** 
 421:Src/ax_12a.c  ****   //Action OK
 422:Src/ax_12a.c  ****   return 0;
 1170              		.loc 1 422 0
 1171 0040 0020     		movs	r0, #0
 1172              	.L111:
 423:Src/ax_12a.c  **** }
 1173              		.loc 1 423 0
 1174 0042 02B0     		add	sp, sp, #8
 1175              	.LCFI19:
 1176              		.cfi_def_cfa_offset 8
 1177              		@ sp needed
 1178 0044 10BD     		pop	{r4, pc}
 1179              		.cfi_endproc
 1180              	.LFE19:
 1182              		.section	.text.AX_Factory_Reset,"ax",%progbits
 1183              		.align	1
 1184              		.global	AX_Factory_Reset
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu fpv4-sp-d16
 1190              	AX_Factory_Reset:
 1191              	.LFB20:
 424:Src/ax_12a.c  **** 
 425:Src/ax_12a.c  **** uint8_t AX_Factory_Reset(AX *servo){
 1192              		.loc 1 425 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 8
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              	.LVL103:
 1197 0000 10B5     		push	{r4, lr}
 1198              	.LCFI20:
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 4, -8
 1201              		.cfi_offset 14, -4
 1202 0002 82B0     		sub	sp, sp, #8
 1203              	.LCFI21:
 1204              		.cfi_def_cfa_offset 16
 1205 0004 0446     		mov	r4, r0
 426:Src/ax_12a.c  ****   AX_Instruction_Packet packet;
 427:Src/ax_12a.c  ****   packet.id = servo->id;
 1206              		.loc 1 427 0
 1207 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1208 0008 8DF80030 		strb	r3, [sp]
 428:Src/ax_12a.c  ****   packet.instruction = AX_FACTORY_RESET;
 1209              		.loc 1 428 0
 1210 000c 0623     		movs	r3, #6
 1211 000e 8DF80130 		strb	r3, [sp, #1]
 429:Src/ax_12a.c  ****   packet.nb_params = 0;
 1212              		.loc 1 429 0
 1213 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccTQvZ7k.s 			page 31


 1214 0014 8DF80230 		strb	r3, [sp, #2]
 430:Src/ax_12a.c  **** 
 431:Src/ax_12a.c  ****   //Envoi de l'instruction
 432:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1215              		.loc 1 432 0
 1216 0018 0122     		movs	r2, #1
 1217 001a 6946     		mov	r1, sp
 1218 001c 4068     		ldr	r0, [r0, #4]
 1219              	.LVL104:
 1220 001e FFF7FEFF 		bl	AX_Send
 1221              	.LVL105:
 1222 0022 0128     		cmp	r0, #1
 1223 0024 05D0     		beq	.L115
 433:Src/ax_12a.c  ****     return 1;
 434:Src/ax_12a.c  ****   }
 435:Src/ax_12a.c  **** 
 436:Src/ax_12a.c  ****   //Attente de la réinitialisation
 437:Src/ax_12a.c  ****   servo->interface->delay(5000);
 1224              		.loc 1 437 0
 1225 0026 6368     		ldr	r3, [r4, #4]
 1226 0028 DB68     		ldr	r3, [r3, #12]
 1227 002a 41F28830 		movw	r0, #5000
 1228 002e 9847     		blx	r3
 1229              	.LVL106:
 438:Src/ax_12a.c  ****   
 439:Src/ax_12a.c  ****   return 0;
 1230              		.loc 1 439 0
 1231 0030 0020     		movs	r0, #0
 1232              	.L115:
 440:Src/ax_12a.c  **** }
 1233              		.loc 1 440 0
 1234 0032 02B0     		add	sp, sp, #8
 1235              	.LCFI22:
 1236              		.cfi_def_cfa_offset 8
 1237              		@ sp needed
 1238 0034 10BD     		pop	{r4, pc}
 1239              		.cfi_endproc
 1240              	.LFE20:
 1242              		.section	.text.AX_Write,"ax",%progbits
 1243              		.align	1
 1244              		.global	AX_Write
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu fpv4-sp-d16
 1250              	AX_Write:
 1251              	.LFB21:
 441:Src/ax_12a.c  **** 
 442:Src/ax_12a.c  **** uint8_t AX_Write(AX *servo, AX_Field field, uint8_t *data, uint8_t size, uint8_t now){
 1252              		.loc 1 442 0
 1253              		.cfi_startproc
 1254              		@ args = 4, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              	.LVL107:
 443:Src/ax_12a.c  ****   if(servo == 0 || field > (AX_NB_FIELDS-1) || ((6+size+1) > AX_BUFFER_SIZE)){
 1257              		.loc 1 443 0
 1258 0000 0028     		cmp	r0, #0
ARM GAS  /tmp/ccTQvZ7k.s 			page 32


 1259 0002 38D0     		beq	.L122
 442:Src/ax_12a.c  ****   if(servo == 0 || field > (AX_NB_FIELDS-1) || ((6+size+1) > AX_BUFFER_SIZE)){
 1260              		.loc 1 442 0 discriminator 1
 1261 0004 70B5     		push	{r4, r5, r6, lr}
 1262              	.LCFI23:
 1263              		.cfi_def_cfa_offset 16
 1264              		.cfi_offset 4, -16
 1265              		.cfi_offset 5, -12
 1266              		.cfi_offset 6, -8
 1267              		.cfi_offset 14, -4
 1268 0006 0646     		mov	r6, r0
 1269              		.loc 1 443 0 discriminator 1
 1270 0008 1F29     		cmp	r1, #31
 1271 000a 36D8     		bhi	.L123
 1272              		.loc 1 443 0 is_stmt 0 discriminator 2
 1273 000c 1846     		mov	r0, r3
 1274              	.LVL108:
 1275 000e DC1D     		adds	r4, r3, #7
 1276 0010 202C     		cmp	r4, #32
 1277 0012 34DC     		bgt	.L124
 444:Src/ax_12a.c  ****     return 1;
 445:Src/ax_12a.c  ****   }
 446:Src/ax_12a.c  **** 
 447:Src/ax_12a.c  ****   //Preparing instruction
 448:Src/ax_12a.c  ****   static AX_Instruction_Packet packet;
 449:Src/ax_12a.c  ****   static uint8_t params[AX_BUFFER_SIZE];
 450:Src/ax_12a.c  ****   params[0] = field_addr[field];
 1278              		.loc 1 450 0 is_stmt 1
 1279 0014 1B4C     		ldr	r4, .L132
 1280 0016 645C     		ldrb	r4, [r4, r1]	@ zero_extendqisi2
 1281 0018 1B49     		ldr	r1, .L132+4
 1282              	.LVL109:
 1283 001a 0C70     		strb	r4, [r1]
 1284              	.LVL110:
 451:Src/ax_12a.c  ****   int i;
 452:Src/ax_12a.c  ****   for(i=0; i < size; i++){
 1285              		.loc 1 452 0
 1286 001c 0021     		movs	r1, #0
 1287 001e 04E0     		b	.L119
 1288              	.LVL111:
 1289              	.L120:
 453:Src/ax_12a.c  ****     params[i+1] = data[i];
 1290              		.loc 1 453 0 discriminator 3
 1291 0020 5418     		adds	r4, r2, r1
 1292 0022 0131     		adds	r1, r1, #1
 1293              	.LVL112:
 1294 0024 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 1295 0026 184C     		ldr	r4, .L132+4
 1296 0028 6554     		strb	r5, [r4, r1]
 1297              	.LVL113:
 1298              	.L119:
 452:Src/ax_12a.c  ****     params[i+1] = data[i];
 1299              		.loc 1 452 0 discriminator 1
 1300 002a 8842     		cmp	r0, r1
 1301 002c F8DC     		bgt	.L120
 454:Src/ax_12a.c  ****   }
 455:Src/ax_12a.c  ****   packet.id = servo->id;
ARM GAS  /tmp/ccTQvZ7k.s 			page 33


 1302              		.loc 1 455 0
 1303 002e 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1304              	.LVL114:
 1305 0030 164A     		ldr	r2, .L132+8
 1306              	.LVL115:
 1307 0032 1170     		strb	r1, [r2]
 456:Src/ax_12a.c  ****   packet.instruction = (now==AX_NOW)?AX_WRITE:AX_REG_WRITE;
 1308              		.loc 1 456 0
 1309 0034 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1310 0038 012A     		cmp	r2, #1
 1311 003a 1AD0     		beq	.L131
 1312 003c 0422     		movs	r2, #4
 1313              	.L121:
 1314              		.loc 1 456 0 is_stmt 0 discriminator 4
 1315 003e 1349     		ldr	r1, .L132+8
 1316 0040 4A70     		strb	r2, [r1, #1]
 457:Src/ax_12a.c  ****   packet.nb_params = 1 + size;
 1317              		.loc 1 457 0 is_stmt 1 discriminator 4
 1318 0042 0133     		adds	r3, r3, #1
 1319              	.LVL116:
 1320 0044 8B70     		strb	r3, [r1, #2]
 458:Src/ax_12a.c  ****   packet.params = params;
 1321              		.loc 1 458 0 discriminator 4
 1322 0046 104B     		ldr	r3, .L132+4
 1323 0048 4B60     		str	r3, [r1, #4]
 459:Src/ax_12a.c  **** 
 460:Src/ax_12a.c  ****   //Sending instruction
 461:Src/ax_12a.c  ****   if(AX_Send(servo->interface, &packet, AX_DEFAULT_TIMEOUT) == 1){
 1324              		.loc 1 461 0 discriminator 4
 1325 004a 0122     		movs	r2, #1
 1326 004c 7068     		ldr	r0, [r6, #4]
 1327 004e FFF7FEFF 		bl	AX_Send
 1328              	.LVL117:
 1329 0052 0128     		cmp	r0, #1
 1330 0054 12D0     		beq	.L118
 462:Src/ax_12a.c  ****     return 1;
 463:Src/ax_12a.c  ****   }
 464:Src/ax_12a.c  **** 
 465:Src/ax_12a.c  ****   //Receiving status
 466:Src/ax_12a.c  ****   if(AX_Receive(servo->interface, 6, AX_DEFAULT_TIMEOUT) == 1){
 1331              		.loc 1 466 0
 1332 0056 0122     		movs	r2, #1
 1333 0058 0621     		movs	r1, #6
 1334 005a 7068     		ldr	r0, [r6, #4]
 1335 005c FFF7FEFF 		bl	AX_Receive
 1336              	.LVL118:
 1337 0060 0128     		cmp	r0, #1
 1338 0062 0BD0     		beq	.L118
 467:Src/ax_12a.c  ****     return 1;
 468:Src/ax_12a.c  ****   }
 469:Src/ax_12a.c  **** 
 470:Src/ax_12a.c  ****   //Checking status
 471:Src/ax_12a.c  ****   if(AX_Check_Status(servo) == 1){
 1339              		.loc 1 471 0
 1340 0064 3046     		mov	r0, r6
 1341 0066 FFF7FEFF 		bl	AX_Check_Status
 1342              	.LVL119:
ARM GAS  /tmp/ccTQvZ7k.s 			page 34


 1343 006a 0128     		cmp	r0, #1
 1344 006c 06D0     		beq	.L118
 472:Src/ax_12a.c  ****     return 1;
 473:Src/ax_12a.c  ****   }
 474:Src/ax_12a.c  **** 
 475:Src/ax_12a.c  ****   //Write OK
 476:Src/ax_12a.c  ****   return 0;
 1345              		.loc 1 476 0
 1346 006e 0020     		movs	r0, #0
 1347 0070 04E0     		b	.L118
 1348              	.LVL120:
 1349              	.L131:
 456:Src/ax_12a.c  ****   packet.nb_params = 1 + size;
 1350              		.loc 1 456 0
 1351 0072 0322     		movs	r2, #3
 1352 0074 E3E7     		b	.L121
 1353              	.LVL121:
 1354              	.L122:
 1355              	.LCFI24:
 1356              		.cfi_def_cfa_offset 0
 1357              		.cfi_restore 4
 1358              		.cfi_restore 5
 1359              		.cfi_restore 6
 1360              		.cfi_restore 14
 444:Src/ax_12a.c  ****   }
 1361              		.loc 1 444 0
 1362 0076 0120     		movs	r0, #1
 1363              	.LVL122:
 477:Src/ax_12a.c  **** }
 1364              		.loc 1 477 0
 1365 0078 7047     		bx	lr
 1366              	.LVL123:
 1367              	.L123:
 1368              	.LCFI25:
 1369              		.cfi_def_cfa_offset 16
 1370              		.cfi_offset 4, -16
 1371              		.cfi_offset 5, -12
 1372              		.cfi_offset 6, -8
 1373              		.cfi_offset 14, -4
 444:Src/ax_12a.c  ****   }
 1374              		.loc 1 444 0
 1375 007a 0120     		movs	r0, #1
 1376              	.LVL124:
 1377              	.L118:
 1378              		.loc 1 477 0
 1379 007c 70BD     		pop	{r4, r5, r6, pc}
 1380              	.LVL125:
 1381              	.L124:
 444:Src/ax_12a.c  ****   }
 1382              		.loc 1 444 0
 1383 007e 0120     		movs	r0, #1
 1384 0080 FCE7     		b	.L118
 1385              	.L133:
 1386 0082 00BF     		.align	2
 1387              	.L132:
 1388 0084 00000000 		.word	.LANCHOR1
 1389 0088 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccTQvZ7k.s 			page 35


 1390 008c 00000000 		.word	.LANCHOR4
 1391              		.cfi_endproc
 1392              	.LFE21:
 1394              		.section	.text.AX_Configure_ID,"ax",%progbits
 1395              		.align	1
 1396              		.global	AX_Configure_ID
 1397              		.syntax unified
 1398              		.thumb
 1399              		.thumb_func
 1400              		.fpu fpv4-sp-d16
 1402              	AX_Configure_ID:
 1403              	.LFB22:
 478:Src/ax_12a.c  **** 
 479:Src/ax_12a.c  **** //======================================
 480:Src/ax_12a.c  **** //         CONFIGURATION EEPROM       
 481:Src/ax_12a.c  **** //======================================
 482:Src/ax_12a.c  **** uint8_t AX_Configure_ID(AX *servo, uint8_t id){
 1404              		.loc 1 482 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 8
 1407              		@ frame_needed = 0, uses_anonymous_args = 0
 1408              	.LVL126:
 1409 0000 30B5     		push	{r4, r5, lr}
 1410              	.LCFI26:
 1411              		.cfi_def_cfa_offset 12
 1412              		.cfi_offset 4, -12
 1413              		.cfi_offset 5, -8
 1414              		.cfi_offset 14, -4
 1415 0002 85B0     		sub	sp, sp, #20
 1416              	.LCFI27:
 1417              		.cfi_def_cfa_offset 32
 1418 0004 8DF80F10 		strb	r1, [sp, #15]
 483:Src/ax_12a.c  ****   if(id > 252){
 1419              		.loc 1 483 0
 1420 0008 FC29     		cmp	r1, #252
 1421 000a 06D9     		bls	.L135
 484:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1422              		.loc 1 484 0
 1423 000c 0A4B     		ldr	r3, .L138
 1424 000e 0022     		movs	r2, #0
 1425 0010 1A80     		strh	r2, [r3]	@ movhi
 485:Src/ax_12a.c  ****     return 1;
 1426              		.loc 1 485 0
 1427 0012 0125     		movs	r5, #1
 1428              	.LVL127:
 1429              	.L136:
 486:Src/ax_12a.c  ****   }
 487:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ID, &id, 1, AX_NOW);
 488:Src/ax_12a.c  ****   servo->interface->delay(10);
 489:Src/ax_12a.c  ****   return r;
 490:Src/ax_12a.c  **** }
 1430              		.loc 1 490 0
 1431 0014 2846     		mov	r0, r5
 1432 0016 05B0     		add	sp, sp, #20
 1433              	.LCFI28:
 1434              		.cfi_remember_state
 1435              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccTQvZ7k.s 			page 36


 1436              		@ sp needed
 1437 0018 30BD     		pop	{r4, r5, pc}
 1438              	.LVL128:
 1439              	.L135:
 1440              	.LCFI29:
 1441              		.cfi_restore_state
 1442 001a 0446     		mov	r4, r0
 487:Src/ax_12a.c  ****   servo->interface->delay(10);
 1443              		.loc 1 487 0
 1444 001c 0123     		movs	r3, #1
 1445 001e 0093     		str	r3, [sp]
 1446 0020 0DF10F02 		add	r2, sp, #15
 1447 0024 0021     		movs	r1, #0
 1448              	.LVL129:
 1449 0026 FFF7FEFF 		bl	AX_Write
 1450              	.LVL130:
 1451 002a 0546     		mov	r5, r0
 1452              	.LVL131:
 488:Src/ax_12a.c  ****   return r;
 1453              		.loc 1 488 0
 1454 002c 6368     		ldr	r3, [r4, #4]
 1455 002e DB68     		ldr	r3, [r3, #12]
 1456 0030 0A20     		movs	r0, #10
 1457 0032 9847     		blx	r3
 1458              	.LVL132:
 489:Src/ax_12a.c  **** }
 1459              		.loc 1 489 0
 1460 0034 EEE7     		b	.L136
 1461              	.L139:
 1462 0036 00BF     		.align	2
 1463              	.L138:
 1464 0038 00000000 		.word	.LANCHOR0
 1465              		.cfi_endproc
 1466              	.LFE22:
 1468              		.section	.text.AX_Configure_Baud_Rate,"ax",%progbits
 1469              		.align	1
 1470              		.global	AX_Configure_Baud_Rate
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1474              		.fpu fpv4-sp-d16
 1476              	AX_Configure_Baud_Rate:
 1477              	.LFB23:
 491:Src/ax_12a.c  **** 
 492:Src/ax_12a.c  **** uint8_t AX_Configure_Baud_Rate(AX *servo, AX_Baud_Rate baud_rate){
 1478              		.loc 1 492 0
 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 8
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              	.LVL133:
 1483 0000 30B5     		push	{r4, r5, lr}
 1484              	.LCFI30:
 1485              		.cfi_def_cfa_offset 12
 1486              		.cfi_offset 4, -12
 1487              		.cfi_offset 5, -8
 1488              		.cfi_offset 14, -4
 1489 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccTQvZ7k.s 			page 37


 1490              	.LCFI31:
 1491              		.cfi_def_cfa_offset 32
 493:Src/ax_12a.c  ****   if(baud_rate != AX_BAUD_RATE_9600 && baud_rate != AX_BAUD_RATE_57600 && baud_rate != AX_BAUD_RATE
 1492              		.loc 1 493 0
 1493 0004 CF29     		cmp	r1, #207
 1494 0006 0AD0     		beq	.L141
 1495              		.loc 1 493 0 is_stmt 0 discriminator 1
 1496 0008 2229     		cmp	r1, #34
 1497 000a 08D0     		beq	.L141
 1498              		.loc 1 493 0 discriminator 2
 1499 000c 1029     		cmp	r1, #16
 1500 000e 06D0     		beq	.L141
 1501              		.loc 1 493 0 discriminator 3
 1502 0010 0129     		cmp	r1, #1
 1503 0012 04D0     		beq	.L141
 494:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1504              		.loc 1 494 0 is_stmt 1
 1505 0014 0A4B     		ldr	r3, .L144
 1506 0016 0022     		movs	r2, #0
 1507 0018 1A80     		strh	r2, [r3]	@ movhi
 495:Src/ax_12a.c  ****     return 1;
 1508              		.loc 1 495 0
 1509 001a 0125     		movs	r5, #1
 1510 001c 0DE0     		b	.L142
 1511              	.L141:
 1512 001e 0446     		mov	r4, r0
 496:Src/ax_12a.c  ****   }
 497:Src/ax_12a.c  ****   uint8_t value = baud_rate;
 1513              		.loc 1 497 0
 1514 0020 04AA     		add	r2, sp, #16
 1515 0022 02F8011D 		strb	r1, [r2, #-1]!
 498:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_BAUD_RATE, &value, 1, AX_NOW);
 1516              		.loc 1 498 0
 1517 0026 0121     		movs	r1, #1
 1518              	.LVL134:
 1519 0028 0091     		str	r1, [sp]
 1520 002a 0B46     		mov	r3, r1
 1521 002c FFF7FEFF 		bl	AX_Write
 1522              	.LVL135:
 1523 0030 0546     		mov	r5, r0
 1524              	.LVL136:
 499:Src/ax_12a.c  ****   servo->interface->delay(10);
 1525              		.loc 1 499 0
 1526 0032 6368     		ldr	r3, [r4, #4]
 1527 0034 DB68     		ldr	r3, [r3, #12]
 1528 0036 0A20     		movs	r0, #10
 1529 0038 9847     		blx	r3
 1530              	.LVL137:
 1531              	.L142:
 500:Src/ax_12a.c  ****   return r;
 501:Src/ax_12a.c  **** }
 1532              		.loc 1 501 0
 1533 003a 2846     		mov	r0, r5
 1534 003c 05B0     		add	sp, sp, #20
 1535              	.LCFI32:
 1536              		.cfi_def_cfa_offset 12
 1537              		@ sp needed
ARM GAS  /tmp/ccTQvZ7k.s 			page 38


 1538 003e 30BD     		pop	{r4, r5, pc}
 1539              	.L145:
 1540              		.align	2
 1541              	.L144:
 1542 0040 00000000 		.word	.LANCHOR0
 1543              		.cfi_endproc
 1544              	.LFE23:
 1546              		.section	.text.AX_Configure_Return_Delay_Time,"ax",%progbits
 1547              		.align	1
 1548              		.global	AX_Configure_Return_Delay_Time
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv4-sp-d16
 1554              	AX_Configure_Return_Delay_Time:
 1555              	.LFB24:
 502:Src/ax_12a.c  **** 
 503:Src/ax_12a.c  **** uint8_t AX_Configure_Return_Delay_Time(AX *servo, uint8_t delay){
 1556              		.loc 1 503 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 8
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              	.LVL138:
 1561 0000 30B5     		push	{r4, r5, lr}
 1562              	.LCFI33:
 1563              		.cfi_def_cfa_offset 12
 1564              		.cfi_offset 4, -12
 1565              		.cfi_offset 5, -8
 1566              		.cfi_offset 14, -4
 1567 0002 85B0     		sub	sp, sp, #20
 1568              	.LCFI34:
 1569              		.cfi_def_cfa_offset 32
 1570 0004 8DF80F10 		strb	r1, [sp, #15]
 504:Src/ax_12a.c  ****   if(delay > 0xFE){
 1571              		.loc 1 504 0
 1572 0008 FF29     		cmp	r1, #255
 1573 000a 0FD0     		beq	.L150
 1574 000c 0446     		mov	r4, r0
 505:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 506:Src/ax_12a.c  ****     return 1;
 507:Src/ax_12a.c  ****   }
 508:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_DELAY_TIME, &delay, 1, AX_NOW);
 1575              		.loc 1 508 0
 1576 000e 0123     		movs	r3, #1
 1577 0010 0093     		str	r3, [sp]
 1578 0012 0DF10F02 		add	r2, sp, #15
 1579 0016 0221     		movs	r1, #2
 1580              	.LVL139:
 1581 0018 FFF7FEFF 		bl	AX_Write
 1582              	.LVL140:
 1583 001c 0546     		mov	r5, r0
 1584              	.LVL141:
 509:Src/ax_12a.c  ****   servo->interface->delay(10);
 1585              		.loc 1 509 0
 1586 001e 6368     		ldr	r3, [r4, #4]
 1587 0020 DB68     		ldr	r3, [r3, #12]
 1588 0022 0A20     		movs	r0, #10
ARM GAS  /tmp/ccTQvZ7k.s 			page 39


 1589 0024 9847     		blx	r3
 1590              	.LVL142:
 1591              	.L148:
 510:Src/ax_12a.c  ****   return r;
 511:Src/ax_12a.c  **** }
 1592              		.loc 1 511 0
 1593 0026 2846     		mov	r0, r5
 1594 0028 05B0     		add	sp, sp, #20
 1595              	.LCFI35:
 1596              		.cfi_remember_state
 1597              		.cfi_def_cfa_offset 12
 1598              		@ sp needed
 1599 002a 30BD     		pop	{r4, r5, pc}
 1600              	.LVL143:
 1601              	.L150:
 1602              	.LCFI36:
 1603              		.cfi_restore_state
 505:Src/ax_12a.c  ****     return 1;
 1604              		.loc 1 505 0
 1605 002c 024B     		ldr	r3, .L151
 1606 002e 0022     		movs	r2, #0
 1607 0030 1A80     		strh	r2, [r3]	@ movhi
 506:Src/ax_12a.c  ****   }
 1608              		.loc 1 506 0
 1609 0032 0125     		movs	r5, #1
 1610 0034 F7E7     		b	.L148
 1611              	.L152:
 1612 0036 00BF     		.align	2
 1613              	.L151:
 1614 0038 00000000 		.word	.LANCHOR0
 1615              		.cfi_endproc
 1616              	.LFE24:
 1618              		.section	.text.AX_Configure_Angle_Limit,"ax",%progbits
 1619              		.align	1
 1620              		.global	AX_Configure_Angle_Limit
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1624              		.fpu fpv4-sp-d16
 1626              	AX_Configure_Angle_Limit:
 1627              	.LFB25:
 512:Src/ax_12a.c  **** 
 513:Src/ax_12a.c  **** uint8_t AX_Configure_Angle_Limit(AX *servo, uint16_t cw_angle, uint16_t ccw_angle){
 1628              		.loc 1 513 0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 8
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              	.LVL144:
 1633 0000 30B5     		push	{r4, r5, lr}
 1634              	.LCFI37:
 1635              		.cfi_def_cfa_offset 12
 1636              		.cfi_offset 4, -12
 1637              		.cfi_offset 5, -8
 1638              		.cfi_offset 14, -4
 1639 0002 85B0     		sub	sp, sp, #20
 1640              	.LCFI38:
 1641              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccTQvZ7k.s 			page 40


 514:Src/ax_12a.c  ****   if(cw_angle > 0x3FF || ccw_angle > 0x3FF){
 1642              		.loc 1 514 0
 1643 0004 B1F5806F 		cmp	r1, #1024
 1644 0008 02D2     		bcs	.L154
 1645              		.loc 1 514 0 is_stmt 0 discriminator 1
 1646 000a B2F5806F 		cmp	r2, #1024
 1647 000e 06D3     		bcc	.L155
 1648              	.L154:
 515:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1649              		.loc 1 515 0 is_stmt 1
 1650 0010 0F4B     		ldr	r3, .L158
 1651 0012 0022     		movs	r2, #0
 1652              	.LVL145:
 1653 0014 1A80     		strh	r2, [r3]	@ movhi
 516:Src/ax_12a.c  ****     return 1;
 1654              		.loc 1 516 0
 1655 0016 0124     		movs	r4, #1
 1656              	.LVL146:
 1657              	.L156:
 517:Src/ax_12a.c  ****   }
 518:Src/ax_12a.c  ****   uint8_t data[4] = {cw_angle&0xFF, cw_angle>>8, ccw_angle&0xFF, ccw_angle>>8};
 519:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_CW_ANGLE_LIMIT, data, 4, AX_NOW);
 520:Src/ax_12a.c  ****   servo->interface->delay(10);
 521:Src/ax_12a.c  ****   return r;
 522:Src/ax_12a.c  **** }
 1658              		.loc 1 522 0
 1659 0018 2046     		mov	r0, r4
 1660 001a 05B0     		add	sp, sp, #20
 1661              	.LCFI39:
 1662              		.cfi_remember_state
 1663              		.cfi_def_cfa_offset 12
 1664              		@ sp needed
 1665 001c 30BD     		pop	{r4, r5, pc}
 1666              	.LVL147:
 1667              	.L155:
 1668              	.LCFI40:
 1669              		.cfi_restore_state
 1670 001e 0546     		mov	r5, r0
 518:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_CW_ANGLE_LIMIT, data, 4, AX_NOW);
 1671              		.loc 1 518 0
 1672 0020 8DF80C10 		strb	r1, [sp, #12]
 1673 0024 090A     		lsrs	r1, r1, #8
 1674              	.LVL148:
 1675 0026 8DF80D10 		strb	r1, [sp, #13]
 1676 002a 8DF80E20 		strb	r2, [sp, #14]
 1677 002e 120A     		lsrs	r2, r2, #8
 1678              	.LVL149:
 1679 0030 8DF80F20 		strb	r2, [sp, #15]
 519:Src/ax_12a.c  ****   servo->interface->delay(10);
 1680              		.loc 1 519 0
 1681 0034 0123     		movs	r3, #1
 1682 0036 0093     		str	r3, [sp]
 1683 0038 0423     		movs	r3, #4
 1684 003a 03AA     		add	r2, sp, #12
 1685 003c 0321     		movs	r1, #3
 1686 003e FFF7FEFF 		bl	AX_Write
 1687              	.LVL150:
ARM GAS  /tmp/ccTQvZ7k.s 			page 41


 1688 0042 0446     		mov	r4, r0
 1689              	.LVL151:
 520:Src/ax_12a.c  ****   return r;
 1690              		.loc 1 520 0
 1691 0044 6B68     		ldr	r3, [r5, #4]
 1692 0046 DB68     		ldr	r3, [r3, #12]
 1693 0048 0A20     		movs	r0, #10
 1694 004a 9847     		blx	r3
 1695              	.LVL152:
 521:Src/ax_12a.c  **** }
 1696              		.loc 1 521 0
 1697 004c E4E7     		b	.L156
 1698              	.L159:
 1699 004e 00BF     		.align	2
 1700              	.L158:
 1701 0050 00000000 		.word	.LANCHOR0
 1702              		.cfi_endproc
 1703              	.LFE25:
 1705              		.section	.text.AX_Configure_Limit_Temperature,"ax",%progbits
 1706              		.align	1
 1707              		.global	AX_Configure_Limit_Temperature
 1708              		.syntax unified
 1709              		.thumb
 1710              		.thumb_func
 1711              		.fpu fpv4-sp-d16
 1713              	AX_Configure_Limit_Temperature:
 1714              	.LFB26:
 523:Src/ax_12a.c  **** 
 524:Src/ax_12a.c  **** uint8_t AX_Configure_Limit_Temperature(AX *servo, uint8_t temp){
 1715              		.loc 1 524 0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 8
 1718              		@ frame_needed = 0, uses_anonymous_args = 0
 1719              	.LVL153:
 1720 0000 30B5     		push	{r4, r5, lr}
 1721              	.LCFI41:
 1722              		.cfi_def_cfa_offset 12
 1723              		.cfi_offset 4, -12
 1724              		.cfi_offset 5, -8
 1725              		.cfi_offset 14, -4
 1726 0002 85B0     		sub	sp, sp, #20
 1727              	.LCFI42:
 1728              		.cfi_def_cfa_offset 32
 1729 0004 8DF80F10 		strb	r1, [sp, #15]
 525:Src/ax_12a.c  ****   if(temp > 150){
 1730              		.loc 1 525 0
 1731 0008 9629     		cmp	r1, #150
 1732 000a 06D9     		bls	.L161
 526:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1733              		.loc 1 526 0
 1734 000c 0A4B     		ldr	r3, .L164
 1735 000e 0022     		movs	r2, #0
 1736 0010 1A80     		strh	r2, [r3]	@ movhi
 527:Src/ax_12a.c  ****     return 1;
 1737              		.loc 1 527 0
 1738 0012 0125     		movs	r5, #1
 1739              	.LVL154:
ARM GAS  /tmp/ccTQvZ7k.s 			page 42


 1740              	.L162:
 528:Src/ax_12a.c  ****   }
 529:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_LIMIT_TEMPERATURE, &temp, 1, AX_NOW);
 530:Src/ax_12a.c  ****   servo->interface->delay(10);
 531:Src/ax_12a.c  ****   return r;
 532:Src/ax_12a.c  **** }
 1741              		.loc 1 532 0
 1742 0014 2846     		mov	r0, r5
 1743 0016 05B0     		add	sp, sp, #20
 1744              	.LCFI43:
 1745              		.cfi_remember_state
 1746              		.cfi_def_cfa_offset 12
 1747              		@ sp needed
 1748 0018 30BD     		pop	{r4, r5, pc}
 1749              	.LVL155:
 1750              	.L161:
 1751              	.LCFI44:
 1752              		.cfi_restore_state
 1753 001a 0446     		mov	r4, r0
 529:Src/ax_12a.c  ****   servo->interface->delay(10);
 1754              		.loc 1 529 0
 1755 001c 0123     		movs	r3, #1
 1756 001e 0093     		str	r3, [sp]
 1757 0020 0DF10F02 		add	r2, sp, #15
 1758 0024 0521     		movs	r1, #5
 1759              	.LVL156:
 1760 0026 FFF7FEFF 		bl	AX_Write
 1761              	.LVL157:
 1762 002a 0546     		mov	r5, r0
 1763              	.LVL158:
 530:Src/ax_12a.c  ****   return r;
 1764              		.loc 1 530 0
 1765 002c 6368     		ldr	r3, [r4, #4]
 1766 002e DB68     		ldr	r3, [r3, #12]
 1767 0030 0A20     		movs	r0, #10
 1768 0032 9847     		blx	r3
 1769              	.LVL159:
 531:Src/ax_12a.c  **** }
 1770              		.loc 1 531 0
 1771 0034 EEE7     		b	.L162
 1772              	.L165:
 1773 0036 00BF     		.align	2
 1774              	.L164:
 1775 0038 00000000 		.word	.LANCHOR0
 1776              		.cfi_endproc
 1777              	.LFE26:
 1779              		.section	.text.AX_Configure_Lower_Limit_Voltage,"ax",%progbits
 1780              		.align	1
 1781              		.global	AX_Configure_Lower_Limit_Voltage
 1782              		.syntax unified
 1783              		.thumb
 1784              		.thumb_func
 1785              		.fpu fpv4-sp-d16
 1787              	AX_Configure_Lower_Limit_Voltage:
 1788              	.LFB27:
 533:Src/ax_12a.c  **** 
 534:Src/ax_12a.c  **** uint8_t AX_Configure_Lower_Limit_Voltage(AX *servo, uint8_t voltage){
ARM GAS  /tmp/ccTQvZ7k.s 			page 43


 1789              		.loc 1 534 0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 8
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793              	.LVL160:
 1794 0000 30B5     		push	{r4, r5, lr}
 1795              	.LCFI45:
 1796              		.cfi_def_cfa_offset 12
 1797              		.cfi_offset 4, -12
 1798              		.cfi_offset 5, -8
 1799              		.cfi_offset 14, -4
 1800 0002 85B0     		sub	sp, sp, #20
 1801              	.LCFI46:
 1802              		.cfi_def_cfa_offset 32
 1803 0004 8DF80F10 		strb	r1, [sp, #15]
 535:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 1804              		.loc 1 535 0
 1805 0008 3239     		subs	r1, r1, #50
 1806              	.LVL161:
 1807 000a C9B2     		uxtb	r1, r1
 1808 000c C829     		cmp	r1, #200
 1809 000e 06D9     		bls	.L167
 536:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1810              		.loc 1 536 0
 1811 0010 0A4B     		ldr	r3, .L170
 1812 0012 0022     		movs	r2, #0
 1813 0014 1A80     		strh	r2, [r3]	@ movhi
 537:Src/ax_12a.c  ****     return 1;
 1814              		.loc 1 537 0
 1815 0016 0125     		movs	r5, #1
 1816              	.LVL162:
 1817              	.L168:
 538:Src/ax_12a.c  ****   }
 539:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_LOWER_LIMIT_VOLTAGE, &voltage, 1, AX_NOW);
 540:Src/ax_12a.c  ****   servo->interface->delay(10);
 541:Src/ax_12a.c  ****   return r;
 542:Src/ax_12a.c  **** }
 1818              		.loc 1 542 0
 1819 0018 2846     		mov	r0, r5
 1820 001a 05B0     		add	sp, sp, #20
 1821              	.LCFI47:
 1822              		.cfi_remember_state
 1823              		.cfi_def_cfa_offset 12
 1824              		@ sp needed
 1825 001c 30BD     		pop	{r4, r5, pc}
 1826              	.LVL163:
 1827              	.L167:
 1828              	.LCFI48:
 1829              		.cfi_restore_state
 1830 001e 0446     		mov	r4, r0
 539:Src/ax_12a.c  ****   servo->interface->delay(10);
 1831              		.loc 1 539 0
 1832 0020 0123     		movs	r3, #1
 1833 0022 0093     		str	r3, [sp]
 1834 0024 0DF10F02 		add	r2, sp, #15
 1835              	.LVL164:
 1836 0028 0621     		movs	r1, #6
ARM GAS  /tmp/ccTQvZ7k.s 			page 44


 1837 002a FFF7FEFF 		bl	AX_Write
 1838              	.LVL165:
 1839 002e 0546     		mov	r5, r0
 1840              	.LVL166:
 540:Src/ax_12a.c  ****   return r;
 1841              		.loc 1 540 0
 1842 0030 6368     		ldr	r3, [r4, #4]
 1843 0032 DB68     		ldr	r3, [r3, #12]
 1844 0034 0A20     		movs	r0, #10
 1845 0036 9847     		blx	r3
 1846              	.LVL167:
 541:Src/ax_12a.c  **** }
 1847              		.loc 1 541 0
 1848 0038 EEE7     		b	.L168
 1849              	.L171:
 1850 003a 00BF     		.align	2
 1851              	.L170:
 1852 003c 00000000 		.word	.LANCHOR0
 1853              		.cfi_endproc
 1854              	.LFE27:
 1856              		.section	.text.AX_Configure_Upper_Limit_Voltage,"ax",%progbits
 1857              		.align	1
 1858              		.global	AX_Configure_Upper_Limit_Voltage
 1859              		.syntax unified
 1860              		.thumb
 1861              		.thumb_func
 1862              		.fpu fpv4-sp-d16
 1864              	AX_Configure_Upper_Limit_Voltage:
 1865              	.LFB28:
 543:Src/ax_12a.c  **** 
 544:Src/ax_12a.c  **** uint8_t AX_Configure_Upper_Limit_Voltage(AX *servo, uint8_t voltage){
 1866              		.loc 1 544 0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 8
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
 1870              	.LVL168:
 1871 0000 30B5     		push	{r4, r5, lr}
 1872              	.LCFI49:
 1873              		.cfi_def_cfa_offset 12
 1874              		.cfi_offset 4, -12
 1875              		.cfi_offset 5, -8
 1876              		.cfi_offset 14, -4
 1877 0002 85B0     		sub	sp, sp, #20
 1878              	.LCFI50:
 1879              		.cfi_def_cfa_offset 32
 1880 0004 8DF80F10 		strb	r1, [sp, #15]
 545:Src/ax_12a.c  ****   if(voltage < 50 || voltage > 250){
 1881              		.loc 1 545 0
 1882 0008 3239     		subs	r1, r1, #50
 1883              	.LVL169:
 1884 000a C9B2     		uxtb	r1, r1
 1885 000c C829     		cmp	r1, #200
 1886 000e 06D9     		bls	.L173
 546:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1887              		.loc 1 546 0
 1888 0010 0A4B     		ldr	r3, .L176
 1889 0012 0022     		movs	r2, #0
ARM GAS  /tmp/ccTQvZ7k.s 			page 45


 1890 0014 1A80     		strh	r2, [r3]	@ movhi
 547:Src/ax_12a.c  ****     return 1;
 1891              		.loc 1 547 0
 1892 0016 0125     		movs	r5, #1
 1893              	.LVL170:
 1894              	.L174:
 548:Src/ax_12a.c  ****   }
 549:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_UPPER_LIMIT_VOLTAGE, &voltage, 1, AX_NOW);
 550:Src/ax_12a.c  ****   servo->interface->delay(10);
 551:Src/ax_12a.c  ****   return r;
 552:Src/ax_12a.c  **** }
 1895              		.loc 1 552 0
 1896 0018 2846     		mov	r0, r5
 1897 001a 05B0     		add	sp, sp, #20
 1898              	.LCFI51:
 1899              		.cfi_remember_state
 1900              		.cfi_def_cfa_offset 12
 1901              		@ sp needed
 1902 001c 30BD     		pop	{r4, r5, pc}
 1903              	.LVL171:
 1904              	.L173:
 1905              	.LCFI52:
 1906              		.cfi_restore_state
 1907 001e 0446     		mov	r4, r0
 549:Src/ax_12a.c  ****   servo->interface->delay(10);
 1908              		.loc 1 549 0
 1909 0020 0123     		movs	r3, #1
 1910 0022 0093     		str	r3, [sp]
 1911 0024 0DF10F02 		add	r2, sp, #15
 1912              	.LVL172:
 1913 0028 0721     		movs	r1, #7
 1914 002a FFF7FEFF 		bl	AX_Write
 1915              	.LVL173:
 1916 002e 0546     		mov	r5, r0
 1917              	.LVL174:
 550:Src/ax_12a.c  ****   return r;
 1918              		.loc 1 550 0
 1919 0030 6368     		ldr	r3, [r4, #4]
 1920 0032 DB68     		ldr	r3, [r3, #12]
 1921 0034 0A20     		movs	r0, #10
 1922 0036 9847     		blx	r3
 1923              	.LVL175:
 551:Src/ax_12a.c  **** }
 1924              		.loc 1 551 0
 1925 0038 EEE7     		b	.L174
 1926              	.L177:
 1927 003a 00BF     		.align	2
 1928              	.L176:
 1929 003c 00000000 		.word	.LANCHOR0
 1930              		.cfi_endproc
 1931              	.LFE28:
 1933              		.section	.text.AX_Configure_Max_Torque,"ax",%progbits
 1934              		.align	1
 1935              		.global	AX_Configure_Max_Torque
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
ARM GAS  /tmp/ccTQvZ7k.s 			page 46


 1939              		.fpu fpv4-sp-d16
 1941              	AX_Configure_Max_Torque:
 1942              	.LFB29:
 553:Src/ax_12a.c  **** 
 554:Src/ax_12a.c  **** uint8_t AX_Configure_Max_Torque(AX *servo, uint16_t max_torque){
 1943              		.loc 1 554 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 8
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              	.LVL176:
 1948 0000 30B5     		push	{r4, r5, lr}
 1949              	.LCFI53:
 1950              		.cfi_def_cfa_offset 12
 1951              		.cfi_offset 4, -12
 1952              		.cfi_offset 5, -8
 1953              		.cfi_offset 14, -4
 1954 0002 85B0     		sub	sp, sp, #20
 1955              	.LCFI54:
 1956              		.cfi_def_cfa_offset 32
 555:Src/ax_12a.c  ****   if(max_torque > 1023){
 1957              		.loc 1 555 0
 1958 0004 B1F5806F 		cmp	r1, #1024
 1959 0008 06D3     		bcc	.L179
 556:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 1960              		.loc 1 556 0
 1961 000a 0D4B     		ldr	r3, .L182
 1962 000c 0022     		movs	r2, #0
 1963 000e 1A80     		strh	r2, [r3]	@ movhi
 557:Src/ax_12a.c  ****     return 1;
 1964              		.loc 1 557 0
 1965 0010 0125     		movs	r5, #1
 1966              	.LVL177:
 1967              	.L180:
 558:Src/ax_12a.c  ****   }
 559:Src/ax_12a.c  ****   uint8_t data[2] = {max_torque&0xFF, max_torque>>8};
 560:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_MAX_TORQUE, data, 2, AX_NOW);
 561:Src/ax_12a.c  ****   servo->interface->delay(10);
 562:Src/ax_12a.c  ****   return r;
 563:Src/ax_12a.c  **** }
 1968              		.loc 1 563 0
 1969 0012 2846     		mov	r0, r5
 1970 0014 05B0     		add	sp, sp, #20
 1971              	.LCFI55:
 1972              		.cfi_remember_state
 1973              		.cfi_def_cfa_offset 12
 1974              		@ sp needed
 1975 0016 30BD     		pop	{r4, r5, pc}
 1976              	.LVL178:
 1977              	.L179:
 1978              	.LCFI56:
 1979              		.cfi_restore_state
 1980 0018 0446     		mov	r4, r0
 559:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_MAX_TORQUE, data, 2, AX_NOW);
 1981              		.loc 1 559 0
 1982 001a 8DF80C10 		strb	r1, [sp, #12]
 1983 001e 090A     		lsrs	r1, r1, #8
 1984              	.LVL179:
ARM GAS  /tmp/ccTQvZ7k.s 			page 47


 1985 0020 8DF80D10 		strb	r1, [sp, #13]
 560:Src/ax_12a.c  ****   servo->interface->delay(10);
 1986              		.loc 1 560 0
 1987 0024 0123     		movs	r3, #1
 1988 0026 0093     		str	r3, [sp]
 1989 0028 0223     		movs	r3, #2
 1990 002a 03AA     		add	r2, sp, #12
 1991 002c 0821     		movs	r1, #8
 1992 002e FFF7FEFF 		bl	AX_Write
 1993              	.LVL180:
 1994 0032 0546     		mov	r5, r0
 1995              	.LVL181:
 561:Src/ax_12a.c  ****   return r;
 1996              		.loc 1 561 0
 1997 0034 6368     		ldr	r3, [r4, #4]
 1998 0036 DB68     		ldr	r3, [r3, #12]
 1999 0038 0A20     		movs	r0, #10
 2000 003a 9847     		blx	r3
 2001              	.LVL182:
 562:Src/ax_12a.c  **** }
 2002              		.loc 1 562 0
 2003 003c E9E7     		b	.L180
 2004              	.L183:
 2005 003e 00BF     		.align	2
 2006              	.L182:
 2007 0040 00000000 		.word	.LANCHOR0
 2008              		.cfi_endproc
 2009              	.LFE29:
 2011              		.section	.text.AX_Configure_Return_Level,"ax",%progbits
 2012              		.align	1
 2013              		.global	AX_Configure_Return_Level
 2014              		.syntax unified
 2015              		.thumb
 2016              		.thumb_func
 2017              		.fpu fpv4-sp-d16
 2019              	AX_Configure_Return_Level:
 2020              	.LFB30:
 564:Src/ax_12a.c  **** 
 565:Src/ax_12a.c  **** uint8_t AX_Configure_Return_Level(AX *servo, AX_Return_Level level){
 2021              		.loc 1 565 0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 8
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 2025              	.LVL183:
 2026 0000 30B5     		push	{r4, r5, lr}
 2027              	.LCFI57:
 2028              		.cfi_def_cfa_offset 12
 2029              		.cfi_offset 4, -12
 2030              		.cfi_offset 5, -8
 2031              		.cfi_offset 14, -4
 2032 0002 85B0     		sub	sp, sp, #20
 2033              	.LCFI58:
 2034              		.cfi_def_cfa_offset 32
 566:Src/ax_12a.c  ****   if(level != AX_PING_RETURN && level != AX_READ_RETURN && level != AX_ALL_RETURN){
 2035              		.loc 1 566 0
 2036 0004 0229     		cmp	r1, #2
 2037 0006 06D9     		bls	.L185
ARM GAS  /tmp/ccTQvZ7k.s 			page 48


 567:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2038              		.loc 1 567 0
 2039 0008 0A4B     		ldr	r3, .L188
 2040 000a 0022     		movs	r2, #0
 2041 000c 1A80     		strh	r2, [r3]	@ movhi
 568:Src/ax_12a.c  ****     return 1;
 2042              		.loc 1 568 0
 2043 000e 0125     		movs	r5, #1
 2044              	.LVL184:
 2045              	.L186:
 569:Src/ax_12a.c  ****   }
 570:Src/ax_12a.c  ****   uint8_t lvl = level;
 571:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_LEVEL, &lvl, 1, AX_NOW);
 572:Src/ax_12a.c  ****   servo->interface->delay(10);
 573:Src/ax_12a.c  ****   return r;
 574:Src/ax_12a.c  **** }
 2046              		.loc 1 574 0
 2047 0010 2846     		mov	r0, r5
 2048 0012 05B0     		add	sp, sp, #20
 2049              	.LCFI59:
 2050              		.cfi_remember_state
 2051              		.cfi_def_cfa_offset 12
 2052              		@ sp needed
 2053 0014 30BD     		pop	{r4, r5, pc}
 2054              	.LVL185:
 2055              	.L185:
 2056              	.LCFI60:
 2057              		.cfi_restore_state
 2058 0016 0446     		mov	r4, r0
 570:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_RETURN_LEVEL, &lvl, 1, AX_NOW);
 2059              		.loc 1 570 0
 2060 0018 04AA     		add	r2, sp, #16
 2061 001a 02F8011D 		strb	r1, [r2, #-1]!
 571:Src/ax_12a.c  ****   servo->interface->delay(10);
 2062              		.loc 1 571 0
 2063 001e 0123     		movs	r3, #1
 2064 0020 0093     		str	r3, [sp]
 2065 0022 0921     		movs	r1, #9
 2066              	.LVL186:
 2067 0024 FFF7FEFF 		bl	AX_Write
 2068              	.LVL187:
 2069 0028 0546     		mov	r5, r0
 2070              	.LVL188:
 572:Src/ax_12a.c  ****   return r;
 2071              		.loc 1 572 0
 2072 002a 6368     		ldr	r3, [r4, #4]
 2073 002c DB68     		ldr	r3, [r3, #12]
 2074 002e 0A20     		movs	r0, #10
 2075 0030 9847     		blx	r3
 2076              	.LVL189:
 573:Src/ax_12a.c  **** }
 2077              		.loc 1 573 0
 2078 0032 EDE7     		b	.L186
 2079              	.L189:
 2080              		.align	2
 2081              	.L188:
 2082 0034 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccTQvZ7k.s 			page 49


 2083              		.cfi_endproc
 2084              	.LFE30:
 2086              		.section	.text.AX_Configure_Alarm_LED,"ax",%progbits
 2087              		.align	1
 2088              		.global	AX_Configure_Alarm_LED
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2092              		.fpu fpv4-sp-d16
 2094              	AX_Configure_Alarm_LED:
 2095              	.LFB31:
 575:Src/ax_12a.c  **** 
 576:Src/ax_12a.c  **** uint8_t AX_Configure_Alarm_LED(AX *servo, AX_Status_Error errors){
 2096              		.loc 1 576 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 8
 2099              		@ frame_needed = 0, uses_anonymous_args = 0
 2100              	.LVL190:
 2101 0000 30B5     		push	{r4, r5, lr}
 2102              	.LCFI61:
 2103              		.cfi_def_cfa_offset 12
 2104              		.cfi_offset 4, -12
 2105              		.cfi_offset 5, -8
 2106              		.cfi_offset 14, -4
 2107 0002 85B0     		sub	sp, sp, #20
 2108              	.LCFI62:
 2109              		.cfi_def_cfa_offset 32
 577:Src/ax_12a.c  ****   if(errors&10000000){
 2110              		.loc 1 577 0
 2111 0004 11F0800F 		tst	r1, #128
 2112 0008 06D0     		beq	.L191
 578:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2113              		.loc 1 578 0
 2114 000a 0B4B     		ldr	r3, .L194
 2115 000c 0022     		movs	r2, #0
 2116 000e 1A80     		strh	r2, [r3]	@ movhi
 579:Src/ax_12a.c  ****     return 1;
 2117              		.loc 1 579 0
 2118 0010 0125     		movs	r5, #1
 2119              	.LVL191:
 2120              	.L192:
 580:Src/ax_12a.c  ****   }
 581:Src/ax_12a.c  ****   uint8_t value = errors;
 582:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_LED, &value, 1, AX_NOW);
 583:Src/ax_12a.c  ****   servo->interface->delay(10);
 584:Src/ax_12a.c  ****   return r;
 585:Src/ax_12a.c  **** }
 2121              		.loc 1 585 0
 2122 0012 2846     		mov	r0, r5
 2123 0014 05B0     		add	sp, sp, #20
 2124              	.LCFI63:
 2125              		.cfi_remember_state
 2126              		.cfi_def_cfa_offset 12
 2127              		@ sp needed
 2128 0016 30BD     		pop	{r4, r5, pc}
 2129              	.LVL192:
 2130              	.L191:
ARM GAS  /tmp/ccTQvZ7k.s 			page 50


 2131              	.LCFI64:
 2132              		.cfi_restore_state
 2133 0018 0446     		mov	r4, r0
 581:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_LED, &value, 1, AX_NOW);
 2134              		.loc 1 581 0
 2135 001a 04AA     		add	r2, sp, #16
 2136 001c 02F8011D 		strb	r1, [r2, #-1]!
 582:Src/ax_12a.c  ****   servo->interface->delay(10);
 2137              		.loc 1 582 0
 2138 0020 0123     		movs	r3, #1
 2139 0022 0093     		str	r3, [sp]
 2140 0024 0A21     		movs	r1, #10
 2141              	.LVL193:
 2142 0026 FFF7FEFF 		bl	AX_Write
 2143              	.LVL194:
 2144 002a 0546     		mov	r5, r0
 2145              	.LVL195:
 583:Src/ax_12a.c  ****   return r;
 2146              		.loc 1 583 0
 2147 002c 6368     		ldr	r3, [r4, #4]
 2148 002e DB68     		ldr	r3, [r3, #12]
 2149 0030 0A20     		movs	r0, #10
 2150 0032 9847     		blx	r3
 2151              	.LVL196:
 584:Src/ax_12a.c  **** }
 2152              		.loc 1 584 0
 2153 0034 EDE7     		b	.L192
 2154              	.L195:
 2155 0036 00BF     		.align	2
 2156              	.L194:
 2157 0038 00000000 		.word	.LANCHOR0
 2158              		.cfi_endproc
 2159              	.LFE31:
 2161              		.section	.text.AX_Configure_Alarm_Shutdown,"ax",%progbits
 2162              		.align	1
 2163              		.global	AX_Configure_Alarm_Shutdown
 2164              		.syntax unified
 2165              		.thumb
 2166              		.thumb_func
 2167              		.fpu fpv4-sp-d16
 2169              	AX_Configure_Alarm_Shutdown:
 2170              	.LFB32:
 586:Src/ax_12a.c  **** 
 587:Src/ax_12a.c  **** uint8_t AX_Configure_Alarm_Shutdown(AX *servo, AX_Status_Error errors){
 2171              		.loc 1 587 0
 2172              		.cfi_startproc
 2173              		@ args = 0, pretend = 0, frame = 8
 2174              		@ frame_needed = 0, uses_anonymous_args = 0
 2175              	.LVL197:
 2176 0000 30B5     		push	{r4, r5, lr}
 2177              	.LCFI65:
 2178              		.cfi_def_cfa_offset 12
 2179              		.cfi_offset 4, -12
 2180              		.cfi_offset 5, -8
 2181              		.cfi_offset 14, -4
 2182 0002 85B0     		sub	sp, sp, #20
 2183              	.LCFI66:
ARM GAS  /tmp/ccTQvZ7k.s 			page 51


 2184              		.cfi_def_cfa_offset 32
 588:Src/ax_12a.c  ****   if(errors&10000000){
 2185              		.loc 1 588 0
 2186 0004 11F0800F 		tst	r1, #128
 2187 0008 06D0     		beq	.L197
 589:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2188              		.loc 1 589 0
 2189 000a 0B4B     		ldr	r3, .L200
 2190 000c 0022     		movs	r2, #0
 2191 000e 1A80     		strh	r2, [r3]	@ movhi
 590:Src/ax_12a.c  ****     return 1;
 2192              		.loc 1 590 0
 2193 0010 0125     		movs	r5, #1
 2194              	.LVL198:
 2195              	.L198:
 591:Src/ax_12a.c  ****   }
 592:Src/ax_12a.c  ****   uint8_t value = errors;
 593:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_SHUTDOWN, &value, 1, AX_NOW);
 594:Src/ax_12a.c  ****   servo->interface->delay(10);
 595:Src/ax_12a.c  ****   return r;
 596:Src/ax_12a.c  **** }
 2196              		.loc 1 596 0
 2197 0012 2846     		mov	r0, r5
 2198 0014 05B0     		add	sp, sp, #20
 2199              	.LCFI67:
 2200              		.cfi_remember_state
 2201              		.cfi_def_cfa_offset 12
 2202              		@ sp needed
 2203 0016 30BD     		pop	{r4, r5, pc}
 2204              	.LVL199:
 2205              	.L197:
 2206              	.LCFI68:
 2207              		.cfi_restore_state
 2208 0018 0446     		mov	r4, r0
 592:Src/ax_12a.c  ****   uint8_t r = AX_Write(servo, AX_ALARM_SHUTDOWN, &value, 1, AX_NOW);
 2209              		.loc 1 592 0
 2210 001a 04AA     		add	r2, sp, #16
 2211 001c 02F8011D 		strb	r1, [r2, #-1]!
 593:Src/ax_12a.c  ****   servo->interface->delay(10);
 2212              		.loc 1 593 0
 2213 0020 0123     		movs	r3, #1
 2214 0022 0093     		str	r3, [sp]
 2215 0024 0B21     		movs	r1, #11
 2216              	.LVL200:
 2217 0026 FFF7FEFF 		bl	AX_Write
 2218              	.LVL201:
 2219 002a 0546     		mov	r5, r0
 2220              	.LVL202:
 594:Src/ax_12a.c  ****   return r;
 2221              		.loc 1 594 0
 2222 002c 6368     		ldr	r3, [r4, #4]
 2223 002e DB68     		ldr	r3, [r3, #12]
 2224 0030 0A20     		movs	r0, #10
 2225 0032 9847     		blx	r3
 2226              	.LVL203:
 595:Src/ax_12a.c  **** }
 2227              		.loc 1 595 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 52


 2228 0034 EDE7     		b	.L198
 2229              	.L201:
 2230 0036 00BF     		.align	2
 2231              	.L200:
 2232 0038 00000000 		.word	.LANCHOR0
 2233              		.cfi_endproc
 2234              	.LFE32:
 2236              		.section	.text.AX_Power_On,"ax",%progbits
 2237              		.align	1
 2238              		.global	AX_Power_On
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2242              		.fpu fpv4-sp-d16
 2244              	AX_Power_On:
 2245              	.LFB33:
 597:Src/ax_12a.c  **** 
 598:Src/ax_12a.c  **** 
 599:Src/ax_12a.c  **** //======================================
 600:Src/ax_12a.c  **** //       COMMANDES SERVOMOTEUR       
 601:Src/ax_12a.c  **** //======================================
 602:Src/ax_12a.c  **** 
 603:Src/ax_12a.c  **** uint8_t AX_Power_On(AX *servo, uint8_t now){
 2246              		.loc 1 603 0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 8
 2249              		@ frame_needed = 0, uses_anonymous_args = 0
 2250              	.LVL204:
 2251 0000 00B5     		push	{lr}
 2252              	.LCFI69:
 2253              		.cfi_def_cfa_offset 4
 2254              		.cfi_offset 14, -4
 2255 0002 85B0     		sub	sp, sp, #20
 2256              	.LCFI70:
 2257              		.cfi_def_cfa_offset 24
 604:Src/ax_12a.c  ****   uint8_t value = 1;
 2258              		.loc 1 604 0
 2259 0004 0123     		movs	r3, #1
 2260 0006 04AA     		add	r2, sp, #16
 2261 0008 02F8013D 		strb	r3, [r2, #-1]!
 605:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 2262              		.loc 1 605 0
 2263 000c 0091     		str	r1, [sp]
 2264 000e 0E21     		movs	r1, #14
 2265              	.LVL205:
 2266 0010 FFF7FEFF 		bl	AX_Write
 2267              	.LVL206:
 606:Src/ax_12a.c  **** }
 2268              		.loc 1 606 0
 2269 0014 05B0     		add	sp, sp, #20
 2270              	.LCFI71:
 2271              		.cfi_def_cfa_offset 4
 2272              		@ sp needed
 2273 0016 5DF804FB 		ldr	pc, [sp], #4
 2274              		.cfi_endproc
 2275              	.LFE33:
 2277              		.section	.text.AX_Power_Off,"ax",%progbits
ARM GAS  /tmp/ccTQvZ7k.s 			page 53


 2278              		.align	1
 2279              		.global	AX_Power_Off
 2280              		.syntax unified
 2281              		.thumb
 2282              		.thumb_func
 2283              		.fpu fpv4-sp-d16
 2285              	AX_Power_Off:
 2286              	.LFB34:
 607:Src/ax_12a.c  **** 
 608:Src/ax_12a.c  **** uint8_t AX_Power_Off(AX *servo, uint8_t now){
 2287              		.loc 1 608 0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 8
 2290              		@ frame_needed = 0, uses_anonymous_args = 0
 2291              	.LVL207:
 2292 0000 00B5     		push	{lr}
 2293              	.LCFI72:
 2294              		.cfi_def_cfa_offset 4
 2295              		.cfi_offset 14, -4
 2296 0002 85B0     		sub	sp, sp, #20
 2297              	.LCFI73:
 2298              		.cfi_def_cfa_offset 24
 609:Src/ax_12a.c  ****   uint8_t value = 0;
 2299              		.loc 1 609 0
 2300 0004 04AA     		add	r2, sp, #16
 2301 0006 0023     		movs	r3, #0
 2302 0008 02F8013D 		strb	r3, [r2, #-1]!
 610:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_ENABLE, &value, 1, now);
 2303              		.loc 1 610 0
 2304 000c 0091     		str	r1, [sp]
 2305 000e 0123     		movs	r3, #1
 2306 0010 0E21     		movs	r1, #14
 2307              	.LVL208:
 2308 0012 FFF7FEFF 		bl	AX_Write
 2309              	.LVL209:
 611:Src/ax_12a.c  **** }
 2310              		.loc 1 611 0
 2311 0016 05B0     		add	sp, sp, #20
 2312              	.LCFI74:
 2313              		.cfi_def_cfa_offset 4
 2314              		@ sp needed
 2315 0018 5DF804FB 		ldr	pc, [sp], #4
 2316              		.cfi_endproc
 2317              	.LFE34:
 2319              		.section	.text.AX_Set_LED,"ax",%progbits
 2320              		.align	1
 2321              		.global	AX_Set_LED
 2322              		.syntax unified
 2323              		.thumb
 2324              		.thumb_func
 2325              		.fpu fpv4-sp-d16
 2327              	AX_Set_LED:
 2328              	.LFB35:
 612:Src/ax_12a.c  **** 
 613:Src/ax_12a.c  **** uint8_t AX_Set_LED(AX *servo, AX_LED_State state, uint8_t now){
 2329              		.loc 1 613 0
 2330              		.cfi_startproc
ARM GAS  /tmp/ccTQvZ7k.s 			page 54


 2331              		@ args = 0, pretend = 0, frame = 8
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 2333              	.LVL210:
 614:Src/ax_12a.c  ****   if((state != AX_LED_OFF) && (state != AX_LED_ON)){
 2334              		.loc 1 614 0
 2335 0000 0129     		cmp	r1, #1
 2336 0002 04D9     		bls	.L207
 615:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2337              		.loc 1 615 0
 2338 0004 094B     		ldr	r3, .L212
 2339 0006 0022     		movs	r2, #0
 2340              	.LVL211:
 2341 0008 1A80     		strh	r2, [r3]	@ movhi
 616:Src/ax_12a.c  ****     return 1;
 2342              		.loc 1 616 0
 2343 000a 0120     		movs	r0, #1
 2344              	.LVL212:
 617:Src/ax_12a.c  ****   }
 618:Src/ax_12a.c  ****   uint8_t value = state;
 619:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 620:Src/ax_12a.c  **** }
 2345              		.loc 1 620 0
 2346 000c 7047     		bx	lr
 2347              	.LVL213:
 2348              	.L207:
 613:Src/ax_12a.c  ****   if((state != AX_LED_OFF) && (state != AX_LED_ON)){
 2349              		.loc 1 613 0
 2350 000e 00B5     		push	{lr}
 2351              	.LCFI75:
 2352              		.cfi_def_cfa_offset 4
 2353              		.cfi_offset 14, -4
 2354 0010 85B0     		sub	sp, sp, #20
 2355              	.LCFI76:
 2356              		.cfi_def_cfa_offset 24
 2357 0012 1346     		mov	r3, r2
 618:Src/ax_12a.c  ****   return AX_Write(servo, AX_LED, &value, 1, now);
 2358              		.loc 1 618 0
 2359 0014 04AA     		add	r2, sp, #16
 2360              	.LVL214:
 2361 0016 02F8011D 		strb	r1, [r2, #-1]!
 619:Src/ax_12a.c  **** }
 2362              		.loc 1 619 0
 2363 001a 0093     		str	r3, [sp]
 2364 001c 0123     		movs	r3, #1
 2365 001e 0F21     		movs	r1, #15
 2366              	.LVL215:
 2367 0020 FFF7FEFF 		bl	AX_Write
 2368              	.LVL216:
 2369              		.loc 1 620 0
 2370 0024 05B0     		add	sp, sp, #20
 2371              	.LCFI77:
 2372              		.cfi_def_cfa_offset 4
 2373              		@ sp needed
 2374 0026 5DF804FB 		ldr	pc, [sp], #4
 2375              	.L213:
 2376 002a 00BF     		.align	2
 2377              	.L212:
ARM GAS  /tmp/ccTQvZ7k.s 			page 55


 2378 002c 00000000 		.word	.LANCHOR0
 2379              		.cfi_endproc
 2380              	.LFE35:
 2382              		.section	.text.AX_Say_Hello,"ax",%progbits
 2383              		.align	1
 2384              		.global	AX_Say_Hello
 2385              		.syntax unified
 2386              		.thumb
 2387              		.thumb_func
 2388              		.fpu fpv4-sp-d16
 2390              	AX_Say_Hello:
 2391              	.LFB17:
 345:Src/ax_12a.c  ****   if(AX_Ping(servo) == 1){
 2392              		.loc 1 345 0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 0
 2395              		@ frame_needed = 0, uses_anonymous_args = 0
 2396              	.LVL217:
 2397 0000 38B5     		push	{r3, r4, r5, lr}
 2398              	.LCFI78:
 2399              		.cfi_def_cfa_offset 16
 2400              		.cfi_offset 3, -16
 2401              		.cfi_offset 4, -12
 2402              		.cfi_offset 5, -8
 2403              		.cfi_offset 14, -4
 2404 0002 0446     		mov	r4, r0
 346:Src/ax_12a.c  ****     return 1;
 2405              		.loc 1 346 0
 2406 0004 FFF7FEFF 		bl	AX_Ping
 2407              	.LVL218:
 2408 0008 0128     		cmp	r0, #1
 2409 000a 1BD0     		beq	.L215
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 2410              		.loc 1 351 0
 2411 000c 0025     		movs	r5, #0
 2412 000e 15E0     		b	.L216
 2413              	.LVL219:
 2414              	.L217:
 352:Src/ax_12a.c  ****     servo->interface->delay(500);
 2415              		.loc 1 352 0 discriminator 3
 2416 0010 0122     		movs	r2, #1
 2417 0012 1146     		mov	r1, r2
 2418 0014 2046     		mov	r0, r4
 2419 0016 FFF7FEFF 		bl	AX_Set_LED
 2420              	.LVL220:
 353:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_OFF, AX_NOW);
 2421              		.loc 1 353 0 discriminator 3
 2422 001a 6368     		ldr	r3, [r4, #4]
 2423 001c DB68     		ldr	r3, [r3, #12]
 2424 001e 4FF4FA70 		mov	r0, #500
 2425 0022 9847     		blx	r3
 2426              	.LVL221:
 354:Src/ax_12a.c  ****     servo->interface->delay(500);
 2427              		.loc 1 354 0 discriminator 3
 2428 0024 0122     		movs	r2, #1
 2429 0026 0021     		movs	r1, #0
 2430 0028 2046     		mov	r0, r4
ARM GAS  /tmp/ccTQvZ7k.s 			page 56


 2431 002a FFF7FEFF 		bl	AX_Set_LED
 2432              	.LVL222:
 355:Src/ax_12a.c  ****   }
 2433              		.loc 1 355 0 discriminator 3
 2434 002e 6368     		ldr	r3, [r4, #4]
 2435 0030 DB68     		ldr	r3, [r3, #12]
 2436 0032 4FF4FA70 		mov	r0, #500
 2437 0036 9847     		blx	r3
 2438              	.LVL223:
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 2439              		.loc 1 351 0 discriminator 3
 2440 0038 0135     		adds	r5, r5, #1
 2441              	.LVL224:
 2442 003a EDB2     		uxtb	r5, r5
 2443              	.LVL225:
 2444              	.L216:
 351:Src/ax_12a.c  ****     AX_Set_LED(servo, AX_LED_ON, AX_NOW);
 2445              		.loc 1 351 0 is_stmt 0 discriminator 1
 2446 003c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2447 003e AB42     		cmp	r3, r5
 2448 0040 E6D8     		bhi	.L217
 358:Src/ax_12a.c  **** }
 2449              		.loc 1 358 0 is_stmt 1
 2450 0042 0020     		movs	r0, #0
 2451              	.LVL226:
 2452              	.L215:
 359:Src/ax_12a.c  **** 
 2453              		.loc 1 359 0
 2454 0044 38BD     		pop	{r3, r4, r5, pc}
 2455              		.cfi_endproc
 2456              	.LFE17:
 2458              		.section	.text.AX_Set_Compliance,"ax",%progbits
 2459              		.align	1
 2460              		.global	AX_Set_Compliance
 2461              		.syntax unified
 2462              		.thumb
 2463              		.thumb_func
 2464              		.fpu fpv4-sp-d16
 2466              	AX_Set_Compliance:
 2467              	.LFB36:
 621:Src/ax_12a.c  **** 
 622:Src/ax_12a.c  **** uint8_t AX_Set_Compliance(AX *servo, AX_Compliance compliance, uint8_t now){
 2468              		.loc 1 622 0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 16
 2471              		@ frame_needed = 0, uses_anonymous_args = 0
 2472              	.LVL227:
 2473 0000 10B5     		push	{r4, lr}
 2474              	.LCFI79:
 2475              		.cfi_def_cfa_offset 8
 2476              		.cfi_offset 4, -8
 2477              		.cfi_offset 14, -4
 2478 0002 86B0     		sub	sp, sp, #24
 2479              	.LCFI80:
 2480              		.cfi_def_cfa_offset 32
 2481 0004 0391     		str	r1, [sp, #12]
 623:Src/ax_12a.c  ****   if(compliance.ccw_slope > 6 || compliance.cw_slope > 6){
ARM GAS  /tmp/ccTQvZ7k.s 			page 57


 2482              		.loc 1 623 0
 2483 0006 090E     		lsrs	r1, r1, #24
 2484 0008 0629     		cmp	r1, #6
 2485 000a 03D8     		bhi	.L220
 2486              		.loc 1 623 0 is_stmt 0 discriminator 1
 2487 000c 9DF80E30 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 2488 0010 062B     		cmp	r3, #6
 2489 0012 05D9     		bls	.L221
 2490              	.L220:
 624:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2491              		.loc 1 624 0 is_stmt 1
 2492 0014 0C4B     		ldr	r3, .L224
 2493 0016 0022     		movs	r2, #0
 2494              	.LVL228:
 2495 0018 1A80     		strh	r2, [r3]	@ movhi
 625:Src/ax_12a.c  ****     return 1;
 2496              		.loc 1 625 0
 2497 001a 0120     		movs	r0, #1
 2498              	.LVL229:
 2499              	.L222:
 626:Src/ax_12a.c  ****   }
 627:Src/ax_12a.c  ****   uint8_t data[4] = {
 628:Src/ax_12a.c  ****     compliance.cw_margin,
 629:Src/ax_12a.c  ****     compliance.ccw_margin,
 630:Src/ax_12a.c  ****     compliance.cw_slope,
 631:Src/ax_12a.c  ****     compliance.ccw_slope};
 632:Src/ax_12a.c  ****   return AX_Write(servo, AX_CW_COMPLIANCE_MARGIN, data, 4, now);     
 633:Src/ax_12a.c  **** }
 2500              		.loc 1 633 0
 2501 001c 06B0     		add	sp, sp, #24
 2502              	.LCFI81:
 2503              		.cfi_remember_state
 2504              		.cfi_def_cfa_offset 8
 2505              		@ sp needed
 2506 001e 10BD     		pop	{r4, pc}
 2507              	.LVL230:
 2508              	.L221:
 2509              	.LCFI82:
 2510              		.cfi_restore_state
 628:Src/ax_12a.c  ****     compliance.ccw_margin,
 2511              		.loc 1 628 0
 2512 0020 9DF80C40 		ldrb	r4, [sp, #12]	@ zero_extendqisi2
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 2513              		.loc 1 627 0
 2514 0024 8DF81440 		strb	r4, [sp, #20]
 629:Src/ax_12a.c  ****     compliance.cw_slope,
 2515              		.loc 1 629 0
 2516 0028 9DF80D40 		ldrb	r4, [sp, #13]	@ zero_extendqisi2
 627:Src/ax_12a.c  ****     compliance.cw_margin,
 2517              		.loc 1 627 0
 2518 002c 8DF81540 		strb	r4, [sp, #21]
 2519 0030 8DF81630 		strb	r3, [sp, #22]
 2520 0034 8DF81710 		strb	r1, [sp, #23]
 632:Src/ax_12a.c  **** }
 2521              		.loc 1 632 0
 2522 0038 0092     		str	r2, [sp]
 2523 003a 0423     		movs	r3, #4
ARM GAS  /tmp/ccTQvZ7k.s 			page 58


 2524 003c 05AA     		add	r2, sp, #20
 2525              	.LVL231:
 2526 003e 1021     		movs	r1, #16
 2527 0040 FFF7FEFF 		bl	AX_Write
 2528              	.LVL232:
 2529 0044 EAE7     		b	.L222
 2530              	.L225:
 2531 0046 00BF     		.align	2
 2532              	.L224:
 2533 0048 00000000 		.word	.LANCHOR0
 2534              		.cfi_endproc
 2535              	.LFE36:
 2537              		.section	.text.AX_Set_Goal_Position,"ax",%progbits
 2538              		.align	1
 2539              		.global	AX_Set_Goal_Position
 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2543              		.fpu fpv4-sp-d16
 2545              	AX_Set_Goal_Position:
 2546              	.LFB37:
 634:Src/ax_12a.c  **** 
 635:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Position(AX *servo, uint16_t position, uint8_t now){
 2547              		.loc 1 635 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 8
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              	.LVL233:
 636:Src/ax_12a.c  ****   if(position > 1023){
 2552              		.loc 1 636 0
 2553 0000 B1F5806F 		cmp	r1, #1024
 2554 0004 04D3     		bcc	.L227
 637:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2555              		.loc 1 637 0
 2556 0006 0A4B     		ldr	r3, .L232
 2557 0008 0022     		movs	r2, #0
 2558              	.LVL234:
 2559 000a 1A80     		strh	r2, [r3]	@ movhi
 638:Src/ax_12a.c  ****     return 1;
 2560              		.loc 1 638 0
 2561 000c 0120     		movs	r0, #1
 2562              	.LVL235:
 639:Src/ax_12a.c  ****   }
 640:Src/ax_12a.c  ****   uint8_t data[2] = {position&0xFF, position>>8};
 641:Src/ax_12a.c  ****   return AX_Write(servo, AX_GOAL_POSITION, data, 2, now);
 642:Src/ax_12a.c  **** }
 2563              		.loc 1 642 0
 2564 000e 7047     		bx	lr
 2565              	.LVL236:
 2566              	.L227:
 635:Src/ax_12a.c  ****   if(position > 1023){
 2567              		.loc 1 635 0
 2568 0010 00B5     		push	{lr}
 2569              	.LCFI83:
 2570              		.cfi_def_cfa_offset 4
 2571              		.cfi_offset 14, -4
 2572 0012 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccTQvZ7k.s 			page 59


 2573              	.LCFI84:
 2574              		.cfi_def_cfa_offset 24
 640:Src/ax_12a.c  ****   return AX_Write(servo, AX_GOAL_POSITION, data, 2, now);
 2575              		.loc 1 640 0
 2576 0014 8DF80C10 		strb	r1, [sp, #12]
 2577 0018 090A     		lsrs	r1, r1, #8
 2578              	.LVL237:
 2579 001a 8DF80D10 		strb	r1, [sp, #13]
 641:Src/ax_12a.c  **** }
 2580              		.loc 1 641 0
 2581 001e 0092     		str	r2, [sp]
 2582 0020 0223     		movs	r3, #2
 2583 0022 03AA     		add	r2, sp, #12
 2584              	.LVL238:
 2585 0024 1421     		movs	r1, #20
 2586 0026 FFF7FEFF 		bl	AX_Write
 2587              	.LVL239:
 2588              		.loc 1 642 0
 2589 002a 05B0     		add	sp, sp, #20
 2590              	.LCFI85:
 2591              		.cfi_def_cfa_offset 4
 2592              		@ sp needed
 2593 002c 5DF804FB 		ldr	pc, [sp], #4
 2594              	.L233:
 2595              		.align	2
 2596              	.L232:
 2597 0030 00000000 		.word	.LANCHOR0
 2598              		.cfi_endproc
 2599              	.LFE37:
 2601              		.section	.text.AX_Set_Goal_Speed_Join,"ax",%progbits
 2602              		.align	1
 2603              		.global	AX_Set_Goal_Speed_Join
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2607              		.fpu fpv4-sp-d16
 2609              	AX_Set_Goal_Speed_Join:
 2610              	.LFB38:
 643:Src/ax_12a.c  **** 
 644:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Speed_Join(AX *servo, uint16_t speed, uint8_t now){
 2611              		.loc 1 644 0
 2612              		.cfi_startproc
 2613              		@ args = 0, pretend = 0, frame = 8
 2614              		@ frame_needed = 0, uses_anonymous_args = 0
 2615              	.LVL240:
 645:Src/ax_12a.c  ****   if(speed > 1023){
 2616              		.loc 1 645 0
 2617 0000 B1F5806F 		cmp	r1, #1024
 2618 0004 04D3     		bcc	.L235
 646:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2619              		.loc 1 646 0
 2620 0006 0A4B     		ldr	r3, .L240
 2621 0008 0022     		movs	r2, #0
 2622              	.LVL241:
 2623 000a 1A80     		strh	r2, [r3]	@ movhi
 647:Src/ax_12a.c  ****     return 1;
 2624              		.loc 1 647 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 60


 2625 000c 0120     		movs	r0, #1
 2626              	.LVL242:
 648:Src/ax_12a.c  ****   }
 649:Src/ax_12a.c  ****   uint8_t data[2] = {speed&0xFF, speed>>8};
 650:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now); 
 651:Src/ax_12a.c  **** }
 2627              		.loc 1 651 0
 2628 000e 7047     		bx	lr
 2629              	.LVL243:
 2630              	.L235:
 644:Src/ax_12a.c  ****   if(speed > 1023){
 2631              		.loc 1 644 0
 2632 0010 00B5     		push	{lr}
 2633              	.LCFI86:
 2634              		.cfi_def_cfa_offset 4
 2635              		.cfi_offset 14, -4
 2636 0012 85B0     		sub	sp, sp, #20
 2637              	.LCFI87:
 2638              		.cfi_def_cfa_offset 24
 649:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now); 
 2639              		.loc 1 649 0
 2640 0014 8DF80C10 		strb	r1, [sp, #12]
 2641 0018 090A     		lsrs	r1, r1, #8
 2642              	.LVL244:
 2643 001a 8DF80D10 		strb	r1, [sp, #13]
 650:Src/ax_12a.c  **** }
 2644              		.loc 1 650 0
 2645 001e 0092     		str	r2, [sp]
 2646 0020 0223     		movs	r3, #2
 2647 0022 03AA     		add	r2, sp, #12
 2648              	.LVL245:
 2649 0024 1521     		movs	r1, #21
 2650 0026 FFF7FEFF 		bl	AX_Write
 2651              	.LVL246:
 2652              		.loc 1 651 0
 2653 002a 05B0     		add	sp, sp, #20
 2654              	.LCFI88:
 2655              		.cfi_def_cfa_offset 4
 2656              		@ sp needed
 2657 002c 5DF804FB 		ldr	pc, [sp], #4
 2658              	.L241:
 2659              		.align	2
 2660              	.L240:
 2661 0030 00000000 		.word	.LANCHOR0
 2662              		.cfi_endproc
 2663              	.LFE38:
 2665              		.section	.text.AX_Set_Goal_Speed_Wheel,"ax",%progbits
 2666              		.align	1
 2667              		.global	AX_Set_Goal_Speed_Wheel
 2668              		.syntax unified
 2669              		.thumb
 2670              		.thumb_func
 2671              		.fpu fpv4-sp-d16
 2673              	AX_Set_Goal_Speed_Wheel:
 2674              	.LFB39:
 652:Src/ax_12a.c  **** 
 653:Src/ax_12a.c  **** uint8_t AX_Set_Goal_Speed_Wheel(AX *servo, uint16_t speed, AX_Wheel_Direction dir, uint8_t now){
ARM GAS  /tmp/ccTQvZ7k.s 			page 61


 2675              		.loc 1 653 0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 8
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 2679              	.LVL247:
 654:Src/ax_12a.c  ****   if(speed > 1023){
 2680              		.loc 1 654 0
 2681 0000 B1F5806F 		cmp	r1, #1024
 2682 0004 07D2     		bcs	.L252
 655:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 656:Src/ax_12a.c  ****     return 1;
 657:Src/ax_12a.c  ****   }
 658:Src/ax_12a.c  ****   
 659:Src/ax_12a.c  ****   switch(dir){
 2683              		.loc 1 659 0
 2684 0006 5AB1     		cbz	r2, .L246
 2685 0008 012A     		cmp	r2, #1
 2686 000a 0CD0     		beq	.L247
 660:Src/ax_12a.c  ****   case AX_CLOCKWISE:
 661:Src/ax_12a.c  ****     speed += 1024;
 662:Src/ax_12a.c  ****     break;
 663:Src/ax_12a.c  ****   case AX_COUNTERCLOCKWISE:
 664:Src/ax_12a.c  ****   break;
 665:Src/ax_12a.c  ****   default:
 666:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2687              		.loc 1 666 0
 2688 000c 0E4B     		ldr	r3, .L253
 2689              	.LVL248:
 2690 000e 0022     		movs	r2, #0
 2691              	.LVL249:
 2692 0010 1A80     		strh	r2, [r3]	@ movhi
 667:Src/ax_12a.c  ****     return 1;
 2693              		.loc 1 667 0
 2694 0012 0120     		movs	r0, #1
 2695              	.LVL250:
 668:Src/ax_12a.c  ****     break;
 669:Src/ax_12a.c  ****   }
 670:Src/ax_12a.c  ****   uint8_t data[2] = {speed&0xFF, speed>>8};
 671:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now);
 672:Src/ax_12a.c  **** }
 2696              		.loc 1 672 0
 2697 0014 7047     		bx	lr
 2698              	.LVL251:
 2699              	.L252:
 655:Src/ax_12a.c  ****     return 1;
 2700              		.loc 1 655 0
 2701 0016 0C4B     		ldr	r3, .L253
 2702              	.LVL252:
 2703 0018 0022     		movs	r2, #0
 2704              	.LVL253:
 2705 001a 1A80     		strh	r2, [r3]	@ movhi
 656:Src/ax_12a.c  ****   }
 2706              		.loc 1 656 0
 2707 001c 0120     		movs	r0, #1
 2708              	.LVL254:
 2709 001e 7047     		bx	lr
 2710              	.LVL255:
ARM GAS  /tmp/ccTQvZ7k.s 			page 62


 2711              	.L246:
 661:Src/ax_12a.c  ****     break;
 2712              		.loc 1 661 0
 2713 0020 01F58061 		add	r1, r1, #1024
 2714              	.LVL256:
 2715 0024 89B2     		uxth	r1, r1
 2716              	.LVL257:
 2717              	.L247:
 653:Src/ax_12a.c  ****   if(speed > 1023){
 2718              		.loc 1 653 0
 2719 0026 00B5     		push	{lr}
 2720              	.LCFI89:
 2721              		.cfi_def_cfa_offset 4
 2722              		.cfi_offset 14, -4
 2723 0028 85B0     		sub	sp, sp, #20
 2724              	.LCFI90:
 2725              		.cfi_def_cfa_offset 24
 670:Src/ax_12a.c  ****   return AX_Write(servo, AX_MOVING_SPEED, data, 2, now);
 2726              		.loc 1 670 0
 2727 002a 8DF80C10 		strb	r1, [sp, #12]
 2728 002e 090A     		lsrs	r1, r1, #8
 2729              	.LVL258:
 2730 0030 8DF80D10 		strb	r1, [sp, #13]
 671:Src/ax_12a.c  **** }
 2731              		.loc 1 671 0
 2732 0034 0093     		str	r3, [sp]
 2733 0036 0223     		movs	r3, #2
 2734              	.LVL259:
 2735 0038 03AA     		add	r2, sp, #12
 2736              	.LVL260:
 2737 003a 1521     		movs	r1, #21
 2738 003c FFF7FEFF 		bl	AX_Write
 2739              	.LVL261:
 2740              		.loc 1 672 0
 2741 0040 05B0     		add	sp, sp, #20
 2742              	.LCFI91:
 2743              		.cfi_def_cfa_offset 4
 2744              		@ sp needed
 2745 0042 5DF804FB 		ldr	pc, [sp], #4
 2746              	.L254:
 2747 0046 00BF     		.align	2
 2748              	.L253:
 2749 0048 00000000 		.word	.LANCHOR0
 2750              		.cfi_endproc
 2751              	.LFE39:
 2753              		.section	.text.AX_Set_Torque_Limit,"ax",%progbits
 2754              		.align	1
 2755              		.global	AX_Set_Torque_Limit
 2756              		.syntax unified
 2757              		.thumb
 2758              		.thumb_func
 2759              		.fpu fpv4-sp-d16
 2761              	AX_Set_Torque_Limit:
 2762              	.LFB40:
 673:Src/ax_12a.c  **** 
 674:Src/ax_12a.c  **** uint8_t AX_Set_Torque_Limit(AX *servo, uint16_t torque_limit, uint8_t now){
 2763              		.loc 1 674 0
ARM GAS  /tmp/ccTQvZ7k.s 			page 63


 2764              		.cfi_startproc
 2765              		@ args = 0, pretend = 0, frame = 8
 2766              		@ frame_needed = 0, uses_anonymous_args = 0
 2767              	.LVL262:
 675:Src/ax_12a.c  ****   if(torque_limit > 1023){
 2768              		.loc 1 675 0
 2769 0000 B1F5806F 		cmp	r1, #1024
 2770 0004 04D3     		bcc	.L256
 676:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2771              		.loc 1 676 0
 2772 0006 0A4B     		ldr	r3, .L261
 2773 0008 0022     		movs	r2, #0
 2774              	.LVL263:
 2775 000a 1A80     		strh	r2, [r3]	@ movhi
 677:Src/ax_12a.c  ****     return 1;
 2776              		.loc 1 677 0
 2777 000c 0120     		movs	r0, #1
 2778              	.LVL264:
 678:Src/ax_12a.c  ****   }
 679:Src/ax_12a.c  ****   uint8_t data[2] = {torque_limit&0xFF, torque_limit>>8};
 680:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_LIMIT, data, 2, now);
 681:Src/ax_12a.c  **** }
 2779              		.loc 1 681 0
 2780 000e 7047     		bx	lr
 2781              	.LVL265:
 2782              	.L256:
 674:Src/ax_12a.c  ****   if(torque_limit > 1023){
 2783              		.loc 1 674 0
 2784 0010 00B5     		push	{lr}
 2785              	.LCFI92:
 2786              		.cfi_def_cfa_offset 4
 2787              		.cfi_offset 14, -4
 2788 0012 85B0     		sub	sp, sp, #20
 2789              	.LCFI93:
 2790              		.cfi_def_cfa_offset 24
 679:Src/ax_12a.c  ****   return AX_Write(servo, AX_TORQUE_LIMIT, data, 2, now);
 2791              		.loc 1 679 0
 2792 0014 8DF80C10 		strb	r1, [sp, #12]
 2793 0018 090A     		lsrs	r1, r1, #8
 2794              	.LVL266:
 2795 001a 8DF80D10 		strb	r1, [sp, #13]
 680:Src/ax_12a.c  **** }
 2796              		.loc 1 680 0
 2797 001e 0092     		str	r2, [sp]
 2798 0020 0223     		movs	r3, #2
 2799 0022 03AA     		add	r2, sp, #12
 2800              	.LVL267:
 2801 0024 1621     		movs	r1, #22
 2802 0026 FFF7FEFF 		bl	AX_Write
 2803              	.LVL268:
 2804              		.loc 1 681 0
 2805 002a 05B0     		add	sp, sp, #20
 2806              	.LCFI94:
 2807              		.cfi_def_cfa_offset 4
 2808              		@ sp needed
 2809 002c 5DF804FB 		ldr	pc, [sp], #4
 2810              	.L262:
ARM GAS  /tmp/ccTQvZ7k.s 			page 64


 2811              		.align	2
 2812              	.L261:
 2813 0030 00000000 		.word	.LANCHOR0
 2814              		.cfi_endproc
 2815              	.LFE40:
 2817              		.section	.text.AX_Set_Punch,"ax",%progbits
 2818              		.align	1
 2819              		.global	AX_Set_Punch
 2820              		.syntax unified
 2821              		.thumb
 2822              		.thumb_func
 2823              		.fpu fpv4-sp-d16
 2825              	AX_Set_Punch:
 2826              	.LFB41:
 682:Src/ax_12a.c  **** 
 683:Src/ax_12a.c  **** uint8_t AX_Set_Punch(AX *servo, uint16_t punch, uint8_t now){
 2827              		.loc 1 683 0
 2828              		.cfi_startproc
 2829              		@ args = 0, pretend = 0, frame = 8
 2830              		@ frame_needed = 0, uses_anonymous_args = 0
 2831              	.LVL269:
 684:Src/ax_12a.c  ****   if(punch < 0x20 || punch > 0x3FF){
 2832              		.loc 1 684 0
 2833 0000 A1F12003 		sub	r3, r1, #32
 2834 0004 9BB2     		uxth	r3, r3
 2835 0006 B3F5787F 		cmp	r3, #992
 2836 000a 04D3     		bcc	.L264
 685:Src/ax_12a.c  ****     err = AX_ERR_INTERNAL | AX_ERR_ILLEGAL_ARGUMENTS;
 2837              		.loc 1 685 0
 2838 000c 0A4B     		ldr	r3, .L269
 2839 000e 0022     		movs	r2, #0
 2840              	.LVL270:
 2841 0010 1A80     		strh	r2, [r3]	@ movhi
 686:Src/ax_12a.c  ****     return 1;
 2842              		.loc 1 686 0
 2843 0012 0120     		movs	r0, #1
 2844              	.LVL271:
 687:Src/ax_12a.c  ****   }
 688:Src/ax_12a.c  ****   uint8_t data[2] = {punch&0xFF, punch>>8};
 689:Src/ax_12a.c  ****   return AX_Write(servo, AX_PUNCH, data, 2, now);
 690:Src/ax_12a.c  **** }
 2845              		.loc 1 690 0
 2846 0014 7047     		bx	lr
 2847              	.LVL272:
 2848              	.L264:
 683:Src/ax_12a.c  ****   if(punch < 0x20 || punch > 0x3FF){
 2849              		.loc 1 683 0
 2850 0016 00B5     		push	{lr}
 2851              	.LCFI95:
 2852              		.cfi_def_cfa_offset 4
 2853              		.cfi_offset 14, -4
 2854 0018 85B0     		sub	sp, sp, #20
 2855              	.LCFI96:
 2856              		.cfi_def_cfa_offset 24
 688:Src/ax_12a.c  ****   return AX_Write(servo, AX_PUNCH, data, 2, now);
 2857              		.loc 1 688 0
 2858 001a 8DF80C10 		strb	r1, [sp, #12]
ARM GAS  /tmp/ccTQvZ7k.s 			page 65


 2859 001e 090A     		lsrs	r1, r1, #8
 2860              	.LVL273:
 2861 0020 8DF80D10 		strb	r1, [sp, #13]
 689:Src/ax_12a.c  **** }
 2862              		.loc 1 689 0
 2863 0024 0092     		str	r2, [sp]
 2864 0026 0223     		movs	r3, #2
 2865 0028 03AA     		add	r2, sp, #12
 2866              	.LVL274:
 2867 002a 1821     		movs	r1, #24
 2868 002c FFF7FEFF 		bl	AX_Write
 2869              	.LVL275:
 2870              		.loc 1 690 0
 2871 0030 05B0     		add	sp, sp, #20
 2872              	.LCFI97:
 2873              		.cfi_def_cfa_offset 4
 2874              		@ sp needed
 2875 0032 5DF804FB 		ldr	pc, [sp], #4
 2876              	.L270:
 2877 0036 00BF     		.align	2
 2878              	.L269:
 2879 0038 00000000 		.word	.LANCHOR0
 2880              		.cfi_endproc
 2881              	.LFE41:
 2883              		.section	.text.AX_Lock_ROM,"ax",%progbits
 2884              		.align	1
 2885              		.global	AX_Lock_ROM
 2886              		.syntax unified
 2887              		.thumb
 2888              		.thumb_func
 2889              		.fpu fpv4-sp-d16
 2891              	AX_Lock_ROM:
 2892              	.LFB42:
 691:Src/ax_12a.c  **** 
 692:Src/ax_12a.c  **** uint8_t AX_Lock_ROM(AX *servo, uint8_t now){
 2893              		.loc 1 692 0
 2894              		.cfi_startproc
 2895              		@ args = 0, pretend = 0, frame = 8
 2896              		@ frame_needed = 0, uses_anonymous_args = 0
 2897              	.LVL276:
 2898 0000 00B5     		push	{lr}
 2899              	.LCFI98:
 2900              		.cfi_def_cfa_offset 4
 2901              		.cfi_offset 14, -4
 2902 0002 85B0     		sub	sp, sp, #20
 2903              	.LCFI99:
 2904              		.cfi_def_cfa_offset 24
 693:Src/ax_12a.c  ****   uint8_t value = 1;
 2905              		.loc 1 693 0
 2906 0004 0123     		movs	r3, #1
 2907 0006 04AA     		add	r2, sp, #16
 2908 0008 02F8013D 		strb	r3, [r2, #-1]!
 694:Src/ax_12a.c  ****   return AX_Write(servo, AX_EEPROM_LOCK, &value, 1, now);
 2909              		.loc 1 694 0
 2910 000c 0091     		str	r1, [sp]
 2911 000e 1721     		movs	r1, #23
 2912              	.LVL277:
ARM GAS  /tmp/ccTQvZ7k.s 			page 66


 2913 0010 FFF7FEFF 		bl	AX_Write
 2914              	.LVL278:
 695:Src/ax_12a.c  **** }
 2915              		.loc 1 695 0
 2916 0014 05B0     		add	sp, sp, #20
 2917              	.LCFI100:
 2918              		.cfi_def_cfa_offset 4
 2919              		@ sp needed
 2920 0016 5DF804FB 		ldr	pc, [sp], #4
 2921              		.cfi_endproc
 2922              	.LFE42:
 2924              		.section	.text.AX_Unlock_ROM,"ax",%progbits
 2925              		.align	1
 2926              		.global	AX_Unlock_ROM
 2927              		.syntax unified
 2928              		.thumb
 2929              		.thumb_func
 2930              		.fpu fpv4-sp-d16
 2932              	AX_Unlock_ROM:
 2933              	.LFB43:
 696:Src/ax_12a.c  **** 
 697:Src/ax_12a.c  **** uint8_t AX_Unlock_ROM(AX *servo, uint8_t now){
 2934              		.loc 1 697 0
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 8
 2937              		@ frame_needed = 0, uses_anonymous_args = 0
 2938              	.LVL279:
 2939 0000 00B5     		push	{lr}
 2940              	.LCFI101:
 2941              		.cfi_def_cfa_offset 4
 2942              		.cfi_offset 14, -4
 2943 0002 85B0     		sub	sp, sp, #20
 2944              	.LCFI102:
 2945              		.cfi_def_cfa_offset 24
 698:Src/ax_12a.c  ****   uint8_t value = 0;
 2946              		.loc 1 698 0
 2947 0004 04AA     		add	r2, sp, #16
 2948 0006 0023     		movs	r3, #0
 2949 0008 02F8013D 		strb	r3, [r2, #-1]!
 699:Src/ax_12a.c  ****   return AX_Write(servo, AX_EEPROM_LOCK, &value, 1, now);
 2950              		.loc 1 699 0
 2951 000c 0091     		str	r1, [sp]
 2952 000e 0123     		movs	r3, #1
 2953 0010 1721     		movs	r1, #23
 2954              	.LVL280:
 2955 0012 FFF7FEFF 		bl	AX_Write
 2956              	.LVL281:
 700:Src/ax_12a.c  **** }
 2957              		.loc 1 700 0
 2958 0016 05B0     		add	sp, sp, #20
 2959              	.LCFI103:
 2960              		.cfi_def_cfa_offset 4
 2961              		@ sp needed
 2962 0018 5DF804FB 		ldr	pc, [sp], #4
 2963              		.cfi_endproc
 2964              	.LFE43:
 2966              		.section	.text.AX_Get_Current_Position,"ax",%progbits
ARM GAS  /tmp/ccTQvZ7k.s 			page 67


 2967              		.align	1
 2968              		.global	AX_Get_Current_Position
 2969              		.syntax unified
 2970              		.thumb
 2971              		.thumb_func
 2972              		.fpu fpv4-sp-d16
 2974              	AX_Get_Current_Position:
 2975              	.LFB44:
 701:Src/ax_12a.c  **** 
 702:Src/ax_12a.c  **** //======================================
 703:Src/ax_12a.c  **** //       LECTURE D'INFORMATIONS
 704:Src/ax_12a.c  **** //======================================
 705:Src/ax_12a.c  **** uint8_t AX_Get_Current_Position(AX *servo, uint16_t *position){
 2976              		.loc 1 705 0
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 0
 2979              		@ frame_needed = 0, uses_anonymous_args = 0
 2980              	.LVL282:
 2981 0000 08B5     		push	{r3, lr}
 2982              	.LCFI104:
 2983              		.cfi_def_cfa_offset 8
 2984              		.cfi_offset 3, -8
 2985              		.cfi_offset 14, -4
 706:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_POSITION, position);
 2986              		.loc 1 706 0
 2987 0002 0A46     		mov	r2, r1
 2988 0004 1921     		movs	r1, #25
 2989              	.LVL283:
 2990 0006 FFF7FEFF 		bl	AX_Read
 2991              	.LVL284:
 707:Src/ax_12a.c  **** }
 2992              		.loc 1 707 0
 2993 000a 08BD     		pop	{r3, pc}
 2994              		.cfi_endproc
 2995              	.LFE44:
 2997              		.section	.text.AX_Get_Current_Speed,"ax",%progbits
 2998              		.align	1
 2999              		.global	AX_Get_Current_Speed
 3000              		.syntax unified
 3001              		.thumb
 3002              		.thumb_func
 3003              		.fpu fpv4-sp-d16
 3005              	AX_Get_Current_Speed:
 3006              	.LFB45:
 708:Src/ax_12a.c  **** 
 709:Src/ax_12a.c  **** uint8_t AX_Get_Current_Speed(AX *servo, AX_Wheel_Direction *direction, uint16_t *speed){
 3007              		.loc 1 709 0
 3008              		.cfi_startproc
 3009              		@ args = 0, pretend = 0, frame = 0
 3010              		@ frame_needed = 0, uses_anonymous_args = 0
 3011              	.LVL285:
 3012 0000 38B5     		push	{r3, r4, r5, lr}
 3013              	.LCFI105:
 3014              		.cfi_def_cfa_offset 16
 3015              		.cfi_offset 3, -16
 3016              		.cfi_offset 4, -12
 3017              		.cfi_offset 5, -8
ARM GAS  /tmp/ccTQvZ7k.s 			page 68


 3018              		.cfi_offset 14, -4
 3019 0002 0D46     		mov	r5, r1
 3020 0004 1446     		mov	r4, r2
 710:Src/ax_12a.c  ****   if(AX_Read(servo, AX_CURRENT_SPEED, speed) == 1){
 3021              		.loc 1 710 0
 3022 0006 1A21     		movs	r1, #26
 3023              	.LVL286:
 3024 0008 FFF7FEFF 		bl	AX_Read
 3025              	.LVL287:
 3026 000c 0128     		cmp	r0, #1
 3027 000e 0BD0     		beq	.L278
 711:Src/ax_12a.c  ****     return 1;
 712:Src/ax_12a.c  ****   }
 713:Src/ax_12a.c  ****   *direction = (*speed > 1023)?AX_CLOCKWISE:AX_COUNTERCLOCKWISE;
 3028              		.loc 1 713 0
 3029 0010 2388     		ldrh	r3, [r4]
 3030 0012 B3F5806F 		cmp	r3, #1024
 3031 0016 2CBF     		ite	cs
 3032 0018 0023     		movcs	r3, #0
 3033 001a 0123     		movcc	r3, #1
 3034 001c 2B70     		strb	r3, [r5]
 714:Src/ax_12a.c  ****   *speed &= 0x3FF;
 3035              		.loc 1 714 0
 3036 001e 2388     		ldrh	r3, [r4]
 3037 0020 C3F30903 		ubfx	r3, r3, #0, #10
 3038 0024 2380     		strh	r3, [r4]	@ movhi
 715:Src/ax_12a.c  ****   return 0;
 3039              		.loc 1 715 0
 3040 0026 0020     		movs	r0, #0
 3041              	.L278:
 716:Src/ax_12a.c  **** }
 3042              		.loc 1 716 0
 3043 0028 38BD     		pop	{r3, r4, r5, pc}
 3044              		.cfi_endproc
 3045              	.LFE45:
 3047              		.section	.text.AX_Get_Current_Load,"ax",%progbits
 3048              		.align	1
 3049              		.global	AX_Get_Current_Load
 3050              		.syntax unified
 3051              		.thumb
 3052              		.thumb_func
 3053              		.fpu fpv4-sp-d16
 3055              	AX_Get_Current_Load:
 3056              	.LFB46:
 717:Src/ax_12a.c  **** 
 718:Src/ax_12a.c  **** uint8_t AX_Get_Current_Load(AX *servo, AX_Wheel_Direction *direction, uint16_t *load){
 3057              		.loc 1 718 0
 3058              		.cfi_startproc
 3059              		@ args = 0, pretend = 0, frame = 0
 3060              		@ frame_needed = 0, uses_anonymous_args = 0
 3061              	.LVL288:
 3062 0000 38B5     		push	{r3, r4, r5, lr}
 3063              	.LCFI106:
 3064              		.cfi_def_cfa_offset 16
 3065              		.cfi_offset 3, -16
 3066              		.cfi_offset 4, -12
 3067              		.cfi_offset 5, -8
ARM GAS  /tmp/ccTQvZ7k.s 			page 69


 3068              		.cfi_offset 14, -4
 3069 0002 0D46     		mov	r5, r1
 3070 0004 1446     		mov	r4, r2
 719:Src/ax_12a.c  ****   if(AX_Read(servo, AX_CURRENT_LOAD, load) == 1){
 3071              		.loc 1 719 0
 3072 0006 1B21     		movs	r1, #27
 3073              	.LVL289:
 3074 0008 FFF7FEFF 		bl	AX_Read
 3075              	.LVL290:
 3076 000c 0128     		cmp	r0, #1
 3077 000e 0BD0     		beq	.L281
 720:Src/ax_12a.c  ****     return 1;
 721:Src/ax_12a.c  ****   }
 722:Src/ax_12a.c  ****   *direction = (*load > 1023)?AX_CLOCKWISE:AX_COUNTERCLOCKWISE;
 3078              		.loc 1 722 0
 3079 0010 2388     		ldrh	r3, [r4]
 3080 0012 B3F5806F 		cmp	r3, #1024
 3081 0016 2CBF     		ite	cs
 3082 0018 0023     		movcs	r3, #0
 3083 001a 0123     		movcc	r3, #1
 3084 001c 2B70     		strb	r3, [r5]
 723:Src/ax_12a.c  ****   *load &= 0x3FF;
 3085              		.loc 1 723 0
 3086 001e 2388     		ldrh	r3, [r4]
 3087 0020 C3F30903 		ubfx	r3, r3, #0, #10
 3088 0024 2380     		strh	r3, [r4]	@ movhi
 724:Src/ax_12a.c  ****   return 0;
 3089              		.loc 1 724 0
 3090 0026 0020     		movs	r0, #0
 3091              	.L281:
 725:Src/ax_12a.c  **** }
 3092              		.loc 1 725 0
 3093 0028 38BD     		pop	{r3, r4, r5, pc}
 3094              		.cfi_endproc
 3095              	.LFE46:
 3097              		.section	.text.AX_Get_Current_Voltage,"ax",%progbits
 3098              		.align	1
 3099              		.global	AX_Get_Current_Voltage
 3100              		.syntax unified
 3101              		.thumb
 3102              		.thumb_func
 3103              		.fpu fpv4-sp-d16
 3105              	AX_Get_Current_Voltage:
 3106              	.LFB47:
 726:Src/ax_12a.c  **** 
 727:Src/ax_12a.c  **** uint8_t AX_Get_Current_Voltage(AX *servo, uint16_t *voltage){
 3107              		.loc 1 727 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 0
 3110              		@ frame_needed = 0, uses_anonymous_args = 0
 3111              	.LVL291:
 3112 0000 08B5     		push	{r3, lr}
 3113              	.LCFI107:
 3114              		.cfi_def_cfa_offset 8
 3115              		.cfi_offset 3, -8
 3116              		.cfi_offset 14, -4
 728:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_VOLTAGE, voltage);
ARM GAS  /tmp/ccTQvZ7k.s 			page 70


 3117              		.loc 1 728 0
 3118 0002 0A46     		mov	r2, r1
 3119 0004 1C21     		movs	r1, #28
 3120              	.LVL292:
 3121 0006 FFF7FEFF 		bl	AX_Read
 3122              	.LVL293:
 729:Src/ax_12a.c  **** }
 3123              		.loc 1 729 0
 3124 000a 08BD     		pop	{r3, pc}
 3125              		.cfi_endproc
 3126              	.LFE47:
 3128              		.section	.text.AX_Get_Current_Temperature,"ax",%progbits
 3129              		.align	1
 3130              		.global	AX_Get_Current_Temperature
 3131              		.syntax unified
 3132              		.thumb
 3133              		.thumb_func
 3134              		.fpu fpv4-sp-d16
 3136              	AX_Get_Current_Temperature:
 3137              	.LFB48:
 730:Src/ax_12a.c  **** 
 731:Src/ax_12a.c  **** uint8_t AX_Get_Current_Temperature(AX *servo, uint16_t *temperature){
 3138              		.loc 1 731 0
 3139              		.cfi_startproc
 3140              		@ args = 0, pretend = 0, frame = 0
 3141              		@ frame_needed = 0, uses_anonymous_args = 0
 3142              	.LVL294:
 3143 0000 08B5     		push	{r3, lr}
 3144              	.LCFI108:
 3145              		.cfi_def_cfa_offset 8
 3146              		.cfi_offset 3, -8
 3147              		.cfi_offset 14, -4
 732:Src/ax_12a.c  ****   return AX_Read(servo, AX_CURRENT_TEMPERATURE, temperature);
 3148              		.loc 1 732 0
 3149 0002 0A46     		mov	r2, r1
 3150 0004 1D21     		movs	r1, #29
 3151              	.LVL295:
 3152 0006 FFF7FEFF 		bl	AX_Read
 3153              	.LVL296:
 733:Src/ax_12a.c  **** }
 3154              		.loc 1 733 0
 3155 000a 08BD     		pop	{r3, pc}
 3156              		.cfi_endproc
 3157              	.LFE48:
 3159              		.section	.text.AX_Is_Working,"ax",%progbits
 3160              		.align	1
 3161              		.global	AX_Is_Working
 3162              		.syntax unified
 3163              		.thumb
 3164              		.thumb_func
 3165              		.fpu fpv4-sp-d16
 3167              	AX_Is_Working:
 3168              	.LFB49:
 734:Src/ax_12a.c  **** 
 735:Src/ax_12a.c  **** uint8_t AX_Is_Working(AX *servo, uint16_t *working){
 3169              		.loc 1 735 0
 3170              		.cfi_startproc
ARM GAS  /tmp/ccTQvZ7k.s 			page 71


 3171              		@ args = 0, pretend = 0, frame = 0
 3172              		@ frame_needed = 0, uses_anonymous_args = 0
 3173              	.LVL297:
 3174 0000 08B5     		push	{r3, lr}
 3175              	.LCFI109:
 3176              		.cfi_def_cfa_offset 8
 3177              		.cfi_offset 3, -8
 3178              		.cfi_offset 14, -4
 736:Src/ax_12a.c  ****   return AX_Read(servo, AX_TORQUE_ENABLE, working);
 3179              		.loc 1 736 0
 3180 0002 0A46     		mov	r2, r1
 3181 0004 0E21     		movs	r1, #14
 3182              	.LVL298:
 3183 0006 FFF7FEFF 		bl	AX_Read
 3184              	.LVL299:
 737:Src/ax_12a.c  **** }
 3185              		.loc 1 737 0
 3186 000a 08BD     		pop	{r3, pc}
 3187              		.cfi_endproc
 3188              	.LFE49:
 3190              		.section	.text.AX_Is_Moving,"ax",%progbits
 3191              		.align	1
 3192              		.global	AX_Is_Moving
 3193              		.syntax unified
 3194              		.thumb
 3195              		.thumb_func
 3196              		.fpu fpv4-sp-d16
 3198              	AX_Is_Moving:
 3199              	.LFB50:
 738:Src/ax_12a.c  **** 
 739:Src/ax_12a.c  **** uint8_t AX_Is_Moving(AX *servo, uint16_t *moving){
 3200              		.loc 1 739 0
 3201              		.cfi_startproc
 3202              		@ args = 0, pretend = 0, frame = 0
 3203              		@ frame_needed = 0, uses_anonymous_args = 0
 3204              	.LVL300:
 3205 0000 08B5     		push	{r3, lr}
 3206              	.LCFI110:
 3207              		.cfi_def_cfa_offset 8
 3208              		.cfi_offset 3, -8
 3209              		.cfi_offset 14, -4
 740:Src/ax_12a.c  ****   return AX_Read(servo, AX_MOVING, moving);
 3210              		.loc 1 740 0
 3211 0002 0A46     		mov	r2, r1
 3212 0004 1F21     		movs	r1, #31
 3213              	.LVL301:
 3214 0006 FFF7FEFF 		bl	AX_Read
 3215              	.LVL302:
 741:Src/ax_12a.c  **** }
 3216              		.loc 1 741 0
 3217 000a 08BD     		pop	{r3, pc}
 3218              		.cfi_endproc
 3219              	.LFE50:
 3221              		.section	.bss.err,"aw",%nobits
 3222              		.align	1
 3223              		.set	.LANCHOR0,. + 0
 3226              	err:
ARM GAS  /tmp/ccTQvZ7k.s 			page 72


 3227 0000 0000     		.space	2
 3228              		.section	.bss.packet.6820,"aw",%nobits
 3229              		.align	2
 3230              		.set	.LANCHOR4,. + 0
 3233              	packet.6820:
 3234 0000 00000000 		.space	8
 3234      00000000 
 3235              		.section	.bss.params.6821,"aw",%nobits
 3236              		.align	2
 3237              		.set	.LANCHOR3,. + 0
 3240              	params.6821:
 3241 0000 00000000 		.space	32
 3241      00000000 
 3241      00000000 
 3241      00000000 
 3241      00000000 
 3242              		.section	.rodata.field_addr,"a",%progbits
 3243              		.align	2
 3244              		.set	.LANCHOR1,. + 0
 3247              	field_addr:
 3248 0000 03       		.byte	3
 3249 0001 04       		.byte	4
 3250 0002 05       		.byte	5
 3251 0003 06       		.byte	6
 3252 0004 08       		.byte	8
 3253 0005 0B       		.byte	11
 3254 0006 0C       		.byte	12
 3255 0007 0D       		.byte	13
 3256 0008 0E       		.byte	14
 3257 0009 10       		.byte	16
 3258 000a 11       		.byte	17
 3259 000b 12       		.byte	18
 3260 000c 00       		.byte	0
 3261 000d 02       		.byte	2
 3262 000e 18       		.byte	24
 3263 000f 19       		.byte	25
 3264 0010 1A       		.byte	26
 3265 0011 1B       		.byte	27
 3266 0012 1C       		.byte	28
 3267 0013 1D       		.byte	29
 3268 0014 1E       		.byte	30
 3269 0015 20       		.byte	32
 3270 0016 22       		.byte	34
 3271 0017 2F       		.byte	47
 3272 0018 30       		.byte	48
 3273 0019 24       		.byte	36
 3274 001a 26       		.byte	38
 3275 001b 28       		.byte	40
 3276 001c 2A       		.byte	42
 3277 001d 2B       		.byte	43
 3278 001e 2C       		.byte	44
 3279 001f 2E       		.byte	46
 3280              		.section	.rodata.field_length,"a",%progbits
 3281              		.align	2
 3282              		.set	.LANCHOR2,. + 0
 3285              	field_length:
 3286 0000 01       		.byte	1
ARM GAS  /tmp/ccTQvZ7k.s 			page 73


 3287 0001 01       		.byte	1
 3288 0002 01       		.byte	1
 3289 0003 02       		.byte	2
 3290 0004 02       		.byte	2
 3291 0005 01       		.byte	1
 3292 0006 01       		.byte	1
 3293 0007 01       		.byte	1
 3294 0008 02       		.byte	2
 3295 0009 01       		.byte	1
 3296 000a 01       		.byte	1
 3297 000b 01       		.byte	1
 3298 000c 02       		.byte	2
 3299 000d 01       		.byte	1
 3300 000e 01       		.byte	1
 3301 000f 01       		.byte	1
 3302 0010 01       		.byte	1
 3303 0011 01       		.byte	1
 3304 0012 01       		.byte	1
 3305 0013 01       		.byte	1
 3306 0014 02       		.byte	2
 3307 0015 02       		.byte	2
 3308 0016 02       		.byte	2
 3309 0017 01       		.byte	1
 3310 0018 02       		.byte	2
 3311 0019 02       		.byte	2
 3312 001a 02       		.byte	2
 3313 001b 02       		.byte	2
 3314 001c 01       		.byte	1
 3315 001d 01       		.byte	1
 3316 001e 01       		.byte	1
 3317 001f 01       		.byte	1
 3318              		.text
 3319              	.Letext0:
 3320              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3321              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3322              		.file 4 "Inc/ax_12a.h"
 3323              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 3324              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 3325              		.file 7 "/usr/lib/gcc/arm-none-eabi/7.2.0/include/stddef.h"
 3326              		.file 8 "/usr/arm-none-eabi/include/sys/reent.h"
ARM GAS  /tmp/ccTQvZ7k.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ax_12a.c
     /tmp/ccTQvZ7k.s:18     .text.AX_FSM_HEADER_0:0000000000000000 $t
     /tmp/ccTQvZ7k.s:25     .text.AX_FSM_HEADER_0:0000000000000000 AX_FSM_HEADER_0
     /tmp/ccTQvZ7k.s:54     .text.AX_FSM_HEADER_0:0000000000000014 $d
     /tmp/ccTQvZ7k.s:66     .text.AX_FSM_HEADER_1:0000000000000000 AX_FSM_HEADER_1
     /tmp/ccTQvZ7k.s:59     .text.AX_FSM_HEADER_1:0000000000000000 $t
     /tmp/ccTQvZ7k.s:97     .text.AX_FSM_HEADER_1:000000000000001c $d
     /tmp/ccTQvZ7k.s:110    .text.AX_FSM_ID:0000000000000000 AX_FSM_ID
     /tmp/ccTQvZ7k.s:103    .text.AX_FSM_ID:0000000000000000 $t
     /tmp/ccTQvZ7k.s:141    .text.AX_FSM_ID:000000000000001c $d
     /tmp/ccTQvZ7k.s:154    .text.AX_FSM_LENGTH:0000000000000000 AX_FSM_LENGTH
     /tmp/ccTQvZ7k.s:147    .text.AX_FSM_LENGTH:0000000000000000 $t
     /tmp/ccTQvZ7k.s:194    .text.AX_FSM_LENGTH:0000000000000024 $d
     /tmp/ccTQvZ7k.s:207    .text.AX_FSM_RECEIVING:0000000000000000 AX_FSM_RECEIVING
     /tmp/ccTQvZ7k.s:200    .text.AX_FSM_RECEIVING:0000000000000000 $t
     /tmp/ccTQvZ7k.s:236    .text.AX_Compute_Checksum:0000000000000000 $t
     /tmp/ccTQvZ7k.s:243    .text.AX_Compute_Checksum:0000000000000000 AX_Compute_Checksum
     /tmp/ccTQvZ7k.s:300    .text.AX_Extract_Status_Packet:0000000000000000 $t
     /tmp/ccTQvZ7k.s:307    .text.AX_Extract_Status_Packet:0000000000000000 AX_Extract_Status_Packet
     /tmp/ccTQvZ7k.s:385    .text.AX_Extract_Status_Packet:0000000000000050 $d
     /tmp/ccTQvZ7k.s:390    .text.AX_Receive:0000000000000000 $t
     /tmp/ccTQvZ7k.s:397    .text.AX_Receive:0000000000000000 AX_Receive
     /tmp/ccTQvZ7k.s:523    .text.AX_Receive:0000000000000094 $d
     /tmp/ccTQvZ7k.s:529    .text.AX_Build_Frame:0000000000000000 $t
     /tmp/ccTQvZ7k.s:536    .text.AX_Build_Frame:0000000000000000 AX_Build_Frame
     /tmp/ccTQvZ7k.s:668    .text.AX_Build_Frame:000000000000007c $d
     /tmp/ccTQvZ7k.s:673    .text.AX_Send:0000000000000000 $t
     /tmp/ccTQvZ7k.s:680    .text.AX_Send:0000000000000000 AX_Send
     /tmp/ccTQvZ7k.s:746    .text.AX_Send:000000000000003c $d
     /tmp/ccTQvZ7k.s:751    .text.AX_Get_Error:0000000000000000 $t
     /tmp/ccTQvZ7k.s:758    .text.AX_Get_Error:0000000000000000 AX_Get_Error
     /tmp/ccTQvZ7k.s:772    .text.AX_Get_Error:0000000000000008 $d
     /tmp/ccTQvZ7k.s:777    .text.AX_Check_Status:0000000000000000 $t
     /tmp/ccTQvZ7k.s:784    .text.AX_Check_Status:0000000000000000 AX_Check_Status
     /tmp/ccTQvZ7k.s:815    .text.AX_Check_Status:000000000000001c $d
     /tmp/ccTQvZ7k.s:820    .text.AX_Ping:0000000000000000 $t
     /tmp/ccTQvZ7k.s:827    .text.AX_Ping:0000000000000000 AX_Ping
     /tmp/ccTQvZ7k.s:902    .text.AX_Ping:000000000000004c $d
     /tmp/ccTQvZ7k.s:907    .text.AX_Discover:0000000000000000 $t
     /tmp/ccTQvZ7k.s:914    .text.AX_Discover:0000000000000000 AX_Discover
     /tmp/ccTQvZ7k.s:989    .text.AX_Read:0000000000000000 $t
     /tmp/ccTQvZ7k.s:996    .text.AX_Read:0000000000000000 AX_Read
     /tmp/ccTQvZ7k.s:1106   .text.AX_Read:0000000000000084 $d
     /tmp/ccTQvZ7k.s:1113   .text.AX_Action:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1120   .text.AX_Action:0000000000000000 AX_Action
     /tmp/ccTQvZ7k.s:1183   .text.AX_Factory_Reset:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1190   .text.AX_Factory_Reset:0000000000000000 AX_Factory_Reset
     /tmp/ccTQvZ7k.s:1243   .text.AX_Write:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1250   .text.AX_Write:0000000000000000 AX_Write
     /tmp/ccTQvZ7k.s:1388   .text.AX_Write:0000000000000084 $d
     /tmp/ccTQvZ7k.s:1395   .text.AX_Configure_ID:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1402   .text.AX_Configure_ID:0000000000000000 AX_Configure_ID
     /tmp/ccTQvZ7k.s:1464   .text.AX_Configure_ID:0000000000000038 $d
     /tmp/ccTQvZ7k.s:1469   .text.AX_Configure_Baud_Rate:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1476   .text.AX_Configure_Baud_Rate:0000000000000000 AX_Configure_Baud_Rate
     /tmp/ccTQvZ7k.s:1542   .text.AX_Configure_Baud_Rate:0000000000000040 $d
ARM GAS  /tmp/ccTQvZ7k.s 			page 75


     /tmp/ccTQvZ7k.s:1547   .text.AX_Configure_Return_Delay_Time:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1554   .text.AX_Configure_Return_Delay_Time:0000000000000000 AX_Configure_Return_Delay_Time
     /tmp/ccTQvZ7k.s:1614   .text.AX_Configure_Return_Delay_Time:0000000000000038 $d
     /tmp/ccTQvZ7k.s:1619   .text.AX_Configure_Angle_Limit:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1626   .text.AX_Configure_Angle_Limit:0000000000000000 AX_Configure_Angle_Limit
     /tmp/ccTQvZ7k.s:1701   .text.AX_Configure_Angle_Limit:0000000000000050 $d
     /tmp/ccTQvZ7k.s:1706   .text.AX_Configure_Limit_Temperature:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1713   .text.AX_Configure_Limit_Temperature:0000000000000000 AX_Configure_Limit_Temperature
     /tmp/ccTQvZ7k.s:1775   .text.AX_Configure_Limit_Temperature:0000000000000038 $d
     /tmp/ccTQvZ7k.s:1780   .text.AX_Configure_Lower_Limit_Voltage:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1787   .text.AX_Configure_Lower_Limit_Voltage:0000000000000000 AX_Configure_Lower_Limit_Voltage
     /tmp/ccTQvZ7k.s:1852   .text.AX_Configure_Lower_Limit_Voltage:000000000000003c $d
     /tmp/ccTQvZ7k.s:1857   .text.AX_Configure_Upper_Limit_Voltage:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1864   .text.AX_Configure_Upper_Limit_Voltage:0000000000000000 AX_Configure_Upper_Limit_Voltage
     /tmp/ccTQvZ7k.s:1929   .text.AX_Configure_Upper_Limit_Voltage:000000000000003c $d
     /tmp/ccTQvZ7k.s:1934   .text.AX_Configure_Max_Torque:0000000000000000 $t
     /tmp/ccTQvZ7k.s:1941   .text.AX_Configure_Max_Torque:0000000000000000 AX_Configure_Max_Torque
     /tmp/ccTQvZ7k.s:2007   .text.AX_Configure_Max_Torque:0000000000000040 $d
     /tmp/ccTQvZ7k.s:2012   .text.AX_Configure_Return_Level:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2019   .text.AX_Configure_Return_Level:0000000000000000 AX_Configure_Return_Level
     /tmp/ccTQvZ7k.s:2082   .text.AX_Configure_Return_Level:0000000000000034 $d
     /tmp/ccTQvZ7k.s:2087   .text.AX_Configure_Alarm_LED:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2094   .text.AX_Configure_Alarm_LED:0000000000000000 AX_Configure_Alarm_LED
     /tmp/ccTQvZ7k.s:2157   .text.AX_Configure_Alarm_LED:0000000000000038 $d
     /tmp/ccTQvZ7k.s:2162   .text.AX_Configure_Alarm_Shutdown:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2169   .text.AX_Configure_Alarm_Shutdown:0000000000000000 AX_Configure_Alarm_Shutdown
     /tmp/ccTQvZ7k.s:2232   .text.AX_Configure_Alarm_Shutdown:0000000000000038 $d
     /tmp/ccTQvZ7k.s:2237   .text.AX_Power_On:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2244   .text.AX_Power_On:0000000000000000 AX_Power_On
     /tmp/ccTQvZ7k.s:2278   .text.AX_Power_Off:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2285   .text.AX_Power_Off:0000000000000000 AX_Power_Off
     /tmp/ccTQvZ7k.s:2320   .text.AX_Set_LED:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2327   .text.AX_Set_LED:0000000000000000 AX_Set_LED
     /tmp/ccTQvZ7k.s:2378   .text.AX_Set_LED:000000000000002c $d
     /tmp/ccTQvZ7k.s:2383   .text.AX_Say_Hello:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2390   .text.AX_Say_Hello:0000000000000000 AX_Say_Hello
     /tmp/ccTQvZ7k.s:2459   .text.AX_Set_Compliance:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2466   .text.AX_Set_Compliance:0000000000000000 AX_Set_Compliance
     /tmp/ccTQvZ7k.s:2533   .text.AX_Set_Compliance:0000000000000048 $d
     /tmp/ccTQvZ7k.s:2538   .text.AX_Set_Goal_Position:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2545   .text.AX_Set_Goal_Position:0000000000000000 AX_Set_Goal_Position
     /tmp/ccTQvZ7k.s:2597   .text.AX_Set_Goal_Position:0000000000000030 $d
     /tmp/ccTQvZ7k.s:2602   .text.AX_Set_Goal_Speed_Join:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2609   .text.AX_Set_Goal_Speed_Join:0000000000000000 AX_Set_Goal_Speed_Join
     /tmp/ccTQvZ7k.s:2661   .text.AX_Set_Goal_Speed_Join:0000000000000030 $d
     /tmp/ccTQvZ7k.s:2666   .text.AX_Set_Goal_Speed_Wheel:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2673   .text.AX_Set_Goal_Speed_Wheel:0000000000000000 AX_Set_Goal_Speed_Wheel
     /tmp/ccTQvZ7k.s:2749   .text.AX_Set_Goal_Speed_Wheel:0000000000000048 $d
     /tmp/ccTQvZ7k.s:2754   .text.AX_Set_Torque_Limit:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2761   .text.AX_Set_Torque_Limit:0000000000000000 AX_Set_Torque_Limit
     /tmp/ccTQvZ7k.s:2813   .text.AX_Set_Torque_Limit:0000000000000030 $d
     /tmp/ccTQvZ7k.s:2818   .text.AX_Set_Punch:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2825   .text.AX_Set_Punch:0000000000000000 AX_Set_Punch
     /tmp/ccTQvZ7k.s:2879   .text.AX_Set_Punch:0000000000000038 $d
     /tmp/ccTQvZ7k.s:2884   .text.AX_Lock_ROM:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2891   .text.AX_Lock_ROM:0000000000000000 AX_Lock_ROM
     /tmp/ccTQvZ7k.s:2925   .text.AX_Unlock_ROM:0000000000000000 $t
ARM GAS  /tmp/ccTQvZ7k.s 			page 76


     /tmp/ccTQvZ7k.s:2932   .text.AX_Unlock_ROM:0000000000000000 AX_Unlock_ROM
     /tmp/ccTQvZ7k.s:2967   .text.AX_Get_Current_Position:0000000000000000 $t
     /tmp/ccTQvZ7k.s:2974   .text.AX_Get_Current_Position:0000000000000000 AX_Get_Current_Position
     /tmp/ccTQvZ7k.s:2998   .text.AX_Get_Current_Speed:0000000000000000 $t
     /tmp/ccTQvZ7k.s:3005   .text.AX_Get_Current_Speed:0000000000000000 AX_Get_Current_Speed
     /tmp/ccTQvZ7k.s:3048   .text.AX_Get_Current_Load:0000000000000000 $t
     /tmp/ccTQvZ7k.s:3055   .text.AX_Get_Current_Load:0000000000000000 AX_Get_Current_Load
     /tmp/ccTQvZ7k.s:3098   .text.AX_Get_Current_Voltage:0000000000000000 $t
     /tmp/ccTQvZ7k.s:3105   .text.AX_Get_Current_Voltage:0000000000000000 AX_Get_Current_Voltage
     /tmp/ccTQvZ7k.s:3129   .text.AX_Get_Current_Temperature:0000000000000000 $t
     /tmp/ccTQvZ7k.s:3136   .text.AX_Get_Current_Temperature:0000000000000000 AX_Get_Current_Temperature
     /tmp/ccTQvZ7k.s:3160   .text.AX_Is_Working:0000000000000000 $t
     /tmp/ccTQvZ7k.s:3167   .text.AX_Is_Working:0000000000000000 AX_Is_Working
     /tmp/ccTQvZ7k.s:3191   .text.AX_Is_Moving:0000000000000000 $t
     /tmp/ccTQvZ7k.s:3198   .text.AX_Is_Moving:0000000000000000 AX_Is_Moving
     /tmp/ccTQvZ7k.s:3222   .bss.err:0000000000000000 $d
     /tmp/ccTQvZ7k.s:3226   .bss.err:0000000000000000 err
     /tmp/ccTQvZ7k.s:3229   .bss.packet.6820:0000000000000000 $d
     /tmp/ccTQvZ7k.s:3233   .bss.packet.6820:0000000000000000 packet.6820
     /tmp/ccTQvZ7k.s:3236   .bss.params.6821:0000000000000000 $d
     /tmp/ccTQvZ7k.s:3240   .bss.params.6821:0000000000000000 params.6821
     /tmp/ccTQvZ7k.s:3243   .rodata.field_addr:0000000000000000 $d
     /tmp/ccTQvZ7k.s:3247   .rodata.field_addr:0000000000000000 field_addr
     /tmp/ccTQvZ7k.s:3281   .rodata.field_length:0000000000000000 $d
     /tmp/ccTQvZ7k.s:3285   .rodata.field_length:0000000000000000 field_length
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
