ARM GAS  /tmp/ccMEniw0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB169:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file           : main.c
   4:Src/main.c    ****   * @brief          : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccMEniw0.s 			page 2


  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  39:Src/main.c    **** #include "main.h"
  40:Src/main.c    **** #include "stm32f3xx_hal.h"
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE BEGIN Includes */
  43:Src/main.c    **** #define ARM_MATH_CM4
  44:Src/main.c    **** #include "arm_math.h"
  45:Src/main.c    **** 
  46:Src/main.c    **** #include "Robotronik_corp_pid.h"
  47:Src/main.c    **** 
  48:Src/main.c    **** #define PWM_MAX 50 //a value between 0 and 255, 255 if not for debug
  49:Src/main.c    **** /* USER CODE END Includes */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim1;
  55:Src/main.c    **** TIM_HandleTypeDef htim2;
  56:Src/main.c    **** TIM_HandleTypeDef htim3;
  57:Src/main.c    **** 
  58:Src/main.c    **** UART_HandleTypeDef huart2;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  62:Src/main.c    **** typedef struct Encoder_S{
  63:Src/main.c    ****   volatile int last;
  64:Src/main.c    ****   volatile int current;
  65:Src/main.c    ****   volatile int dl;
  66:Src/main.c    ****   volatile int cnt;
  67:Src/main.c    **** }Encoder;
  68:Src/main.c    **** 
  69:Src/main.c    **** Encoder encoder1 = (Encoder) {.last = 0, .current = 0, .dl = 0, .cnt = 0}, encoder2 = (Encoder) {.l
  70:Src/main.c    **** 
  71:Src/main.c    **** typedef struct Position_S{
  72:Src/main.c    ****   volatile float x;
  73:Src/main.c    ****   volatile float y;
  74:Src/main.c    ****   volatile float theta;
  75:Src/main.c    **** }Position;
  76:Src/main.c    **** 
  77:Src/main.c    **** Position position=(Position){.x=0,.y=0,.theta=0};
  78:Src/main.c    **** #define L 20//distance between encoders
  79:Src/main.c    **** #define delta2 0.01//distance for 1 encoder step/2
  80:Src/main.c    **** #define deltaL delta2/L
  81:Src/main.c    **** 
  82:Src/main.c    **** int sum_goal,diff_goal;
  83:Src/main.c    **** 
  84:Src/main.c    **** //TEST ENCODER
  85:Src/main.c    **** #define TEST_ENCODER 0
  86:Src/main.c    **** #define ENCODER_MAX 1440
  87:Src/main.c    **** uint8_t led_level = 0;
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PV */
ARM GAS  /tmp/ccMEniw0.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  92:Src/main.c    **** void SystemClock_Config(void);
  93:Src/main.c    **** static void MX_GPIO_Init(void);
  94:Src/main.c    **** static void MX_I2C1_Init(void);
  95:Src/main.c    **** static void MX_TIM1_Init(void);
  96:Src/main.c    **** static void MX_TIM2_Init(void);
  97:Src/main.c    **** static void MX_USART2_UART_Init(void);
  98:Src/main.c    **** static void MX_TIM3_Init(void);
  99:Src/main.c    **** 
 100:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
 101:Src/main.c    **** 
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE BEGIN PFP */
 104:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 105:Src/main.c    **** 
 106:Src/main.c    **** void motor_1(float voltage)
 107:Src/main.c    **** {
 108:Src/main.c    ****     uint16_t value;
 109:Src/main.c    ****     if(voltage>0)
 110:Src/main.c    ****     {
 111:Src/main.c    ****       HAL_GPIO_WritePin(DIR_1_GPIO_Port,DIR_1_Pin,1);
 112:Src/main.c    ****       value=(uint16_t) (voltage*255.0/12.0);
 113:Src/main.c    ****     }
 114:Src/main.c    ****     else
 115:Src/main.c    ****     {
 116:Src/main.c    ****       HAL_GPIO_WritePin(DIR_1_GPIO_Port,DIR_1_Pin,0);
 117:Src/main.c    ****       value=(uint16_t) (-voltage*255.0/12.0);
 118:Src/main.c    ****     }
 119:Src/main.c    ****     if(value>PWM_MAX) value=PWM_MAX;
 120:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 121:Src/main.c    ****     sConfigOC.OCMode = TIM_OCMODE_PWM1;
 122:Src/main.c    ****     sConfigOC.Pulse = value;
 123:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 124:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 125:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 126:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 127:Src/main.c    **** }
 128:Src/main.c    **** 
 129:Src/main.c    **** void motor_2(float voltage)
 130:Src/main.c    **** {
 131:Src/main.c    ****     uint16_t value;
 132:Src/main.c    ****     if(voltage>0)
 133:Src/main.c    ****     {
 134:Src/main.c    ****       HAL_GPIO_WritePin(DIR_2_GPIO_Port,DIR_2_Pin,0);
 135:Src/main.c    ****       value=(uint16_t) (voltage*255.0/12.0);
 136:Src/main.c    ****     }
 137:Src/main.c    ****     else
 138:Src/main.c    ****     {
 139:Src/main.c    ****       HAL_GPIO_WritePin(DIR_2_GPIO_Port,DIR_2_Pin,1);
 140:Src/main.c    ****       value=(uint16_t) (-voltage*255.0/12.0);
 141:Src/main.c    ****     }
 142:Src/main.c    ****     if(value>PWM_MAX) value=PWM_MAX;
 143:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 144:Src/main.c    ****     sConfigOC.OCMode = TIM_OCMODE_PWM1;
 145:Src/main.c    ****     sConfigOC.Pulse = value;
 146:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  /tmp/ccMEniw0.s 			page 4


 147:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 148:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 149:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim)
 153:Src/main.c    **** {
 154:Src/main.c    ****   Encoder *encoder;
 155:Src/main.c    ****   if(htim->Instance == htim1.Instance){
 156:Src/main.c    ****     encoder = &encoder1;
 157:Src/main.c    ****   }else if(htim->Instance == htim2.Instance){
 158:Src/main.c    ****     encoder = &encoder2;
 159:Src/main.c    ****   }else{
 160:Src/main.c    ****     return;
 161:Src/main.c    ****   }
 162:Src/main.c    ****  
 163:Src/main.c    ****   encoder->last = encoder->current;
 164:Src/main.c    ****   encoder->current = htim->Instance->CNT;
 165:Src/main.c    ****   int dl = encoder->current - encoder->last;
 166:Src/main.c    ****   if(dl > 1){
 167:Src/main.c    ****     dl = -1;
 168:Src/main.c    ****   }else if(dl < -1){
 169:Src/main.c    ****     dl = +1;
 170:Src/main.c    ****   }
 171:Src/main.c    ****   encoder->dl = dl;
 172:Src/main.c    ****   encoder->cnt += dl;
 173:Src/main.c    ****   
 174:Src/main.c    ****   position.x=position.x+cos(position.theta)*delta2*dl;
 175:Src/main.c    ****   position.y=position.y+sin(position.theta)*delta2*dl;
 176:Src/main.c    ****   position.theta=position.theta+deltaL*dl;
 177:Src/main.c    ****   
 178:Src/main.c    **** #if TEST_ENCODER==1
 179:Src/main.c    ****   led_level = (int) (((float) encoder1.current / ENCODER_MAX)*255);
 180:Src/main.c    **** #endif
 181:Src/main.c    **** 
 182:Src/main.c    **** #if TEST_ENCODER==2
 183:Src/main.c    ****   led_level = (int) (((float) encoder2.current / ENCODER_MAX)*255);
 184:Src/main.c    **** #endif
 185:Src/main.c    **** 
 186:Src/main.c    ****   if(position.theta>PI)//angle limitation to -PI +PI
 187:Src/main.c    ****   {
 188:Src/main.c    ****     position.theta=2*PI-position.theta;
 189:Src/main.c    ****   }
 190:Src/main.c    ****   else if(position.theta<=-PI)
 191:Src/main.c    ****   {
 192:Src/main.c    ****     position.theta=2*PI+position.theta;
 193:Src/main.c    ****   }
 194:Src/main.c    **** }
 195:Src/main.c    **** /* USER CODE END PFP */
 196:Src/main.c    **** 
 197:Src/main.c    **** /* USER CODE BEGIN 0 */
 198:Src/main.c    **** 
 199:Src/main.c    **** /* USER CODE END 0 */
 200:Src/main.c    **** 
 201:Src/main.c    **** /**
 202:Src/main.c    ****   * @brief  The application entry point.
 203:Src/main.c    ****   *
ARM GAS  /tmp/ccMEniw0.s 			page 5


 204:Src/main.c    ****   * @retval None
 205:Src/main.c    ****   */
 206:Src/main.c    **** int main(void)
 207:Src/main.c    **** {
 208:Src/main.c    ****   /* USER CODE BEGIN 1 */
 209:Src/main.c    **** 
 210:Src/main.c    ****   /* USER CODE END 1 */
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 213:Src/main.c    **** 
 214:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 215:Src/main.c    ****   HAL_Init();
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* USER CODE BEGIN Init */
 218:Src/main.c    ****   int Te=10;//in ms
 219:Src/main.c    ****   float cor_sum,cor_diff;
 220:Src/main.c    ****   PID_DATA pid_sum,pid_diff;
 221:Src/main.c    ****   pid_sum.Te=0.01;
 222:Src/main.c    ****   pid_diff.Te=0.01;
 223:Src/main.c    ****   pid_sum.Kp=0.01;
 224:Src/main.c    ****   pid_sum.Ki=0;
 225:Src/main.c    ****   pid_sum.Kd=0;
 226:Src/main.c    ****   pid_diff.Kp=0.01;
 227:Src/main.c    ****   pid_diff.Ki=0;
 228:Src/main.c    ****   pid_diff.Kd=0;
 229:Src/main.c    ****   /* USER CODE END Init */
 230:Src/main.c    **** 
 231:Src/main.c    ****   /* Configure the system clock */
 232:Src/main.c    ****   SystemClock_Config();
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 235:Src/main.c    **** 
 236:Src/main.c    ****   /* USER CODE END SysInit */
 237:Src/main.c    **** 
 238:Src/main.c    ****   /* Initialize all configured peripherals */
 239:Src/main.c    ****   MX_GPIO_Init();
 240:Src/main.c    ****   MX_I2C1_Init();
 241:Src/main.c    ****   MX_TIM1_Init();
 242:Src/main.c    ****   MX_TIM2_Init();
 243:Src/main.c    ****   MX_USART2_UART_Init();
 244:Src/main.c    ****   MX_TIM3_Init();
 245:Src/main.c    ****   /* USER CODE BEGIN 2 */
 246:Src/main.c    **** 
 247:Src/main.c    ****   HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 248:Src/main.c    ****   HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 249:Src/main.c    **** 
 250:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//EN_2
 251:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//EN_1
 252:Src/main.c    ****   /* USER CODE END 2 */
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* Infinite loop */
 255:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 256:Src/main.c    **** 
 257:Src/main.c    ****   HAL_GPIO_WritePin (BRAKE_1_GPIO_Port, BRAKE_1_Pin, GPIO_PIN_SET);
 258:Src/main.c    ****   HAL_GPIO_WritePin (BRAKE_2_GPIO_Port, BRAKE_2_Pin, GPIO_PIN_SET);
 259:Src/main.c    **** 
 260:Src/main.c    ****   HAL_GPIO_WritePin(DIR_1_GPIO_Port,DIR_1_Pin,1);
ARM GAS  /tmp/ccMEniw0.s 			page 6


 261:Src/main.c    ****   HAL_GPIO_WritePin(DIR_2_GPIO_Port,DIR_2_Pin,0);
 262:Src/main.c    ****   motor_1(0);//encoder2 forward positive positive voltage
 263:Src/main.c    ****   motor_2(0);//encoder1 forward positive positive voltage
 264:Src/main.c    **** 
 265:Src/main.c    **** #if TEST_ENCODER != 0
 266:Src/main.c    ****   while (1) {
 267:Src/main.c    ****     int i;
 268:Src/main.c    ****     for(i = 0; i < 25500; i++){
 269:Src/main.c    ****       if(i == 0){
 270:Src/main.c    **** 	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 271:Src/main.c    ****       }
 272:Src/main.c    ****       if(i%100 && i/100 == led_level){
 273:Src/main.c    **** 	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 274:Src/main.c    ****       }
 275:Src/main.c    ****     }
 276:Src/main.c    ****   }
 277:Src/main.c    **** #endif
 278:Src/main.c    **** 
 279:Src/main.c    ****   pid_init(&pid_sum);
 280:Src/main.c    ****   pid_init(&pid_diff);
 281:Src/main.c    **** 
 282:Src/main.c    ****   sum_goal=1000;
 283:Src/main.c    ****   diff_goal=0;
 284:Src/main.c    **** 
 285:Src/main.c    ****   while (1)
 286:Src/main.c    ****   {
 287:Src/main.c    ****     cor_sum=pid(&pid_sum,sum_goal-0.5*(encoder1.current+encoder2.current));
 288:Src/main.c    ****     cor_diff=pid(&pid_diff,diff_goal-(encoder1.current-encoder2.current));
 289:Src/main.c    ****     motor_1(cor_sum+cor_diff);
 290:Src/main.c    ****     motor_2(cor_sum-cor_diff);
 291:Src/main.c    ****     HAL_Delay(Te);
 292:Src/main.c    ****     //TODO generateur de consigne
 293:Src/main.c    ****   /* USER CODE END WHILE */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE BEGIN 3 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   }
 298:Src/main.c    ****   /* USER CODE END 3 */
 299:Src/main.c    **** 
 300:Src/main.c    **** }
 301:Src/main.c    **** 
 302:Src/main.c    **** /**
 303:Src/main.c    ****   * @brief System Clock Configuration
 304:Src/main.c    ****   * @retval None
 305:Src/main.c    ****   */
 306:Src/main.c    **** void SystemClock_Config(void)
 307:Src/main.c    **** {
 308:Src/main.c    **** 
 309:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 310:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 311:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 312:Src/main.c    **** 
 313:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 314:Src/main.c    ****     */
 315:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 316:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 317:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
ARM GAS  /tmp/ccMEniw0.s 			page 7


 318:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 319:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 320:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 321:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 322:Src/main.c    ****   {
 323:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 324:Src/main.c    ****   }
 325:Src/main.c    **** 
 326:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 327:Src/main.c    ****     */
 328:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 329:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 330:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 331:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 332:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 333:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 334:Src/main.c    **** 
 335:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 338:Src/main.c    ****   }
 339:Src/main.c    **** 
 340:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 341:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 342:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 343:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 344:Src/main.c    ****   {
 345:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 346:Src/main.c    ****   }
 347:Src/main.c    **** 
 348:Src/main.c    ****     /**Configure the Systick interrupt time
 349:Src/main.c    ****     */
 350:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 351:Src/main.c    **** 
 352:Src/main.c    ****     /**Configure the Systick
 353:Src/main.c    ****     */
 354:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 355:Src/main.c    **** 
 356:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 357:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 358:Src/main.c    **** }
 359:Src/main.c    **** 
 360:Src/main.c    **** /* I2C1 init function */
 361:Src/main.c    **** static void MX_I2C1_Init(void)
 362:Src/main.c    **** {
 363:Src/main.c    **** 
 364:Src/main.c    ****   hi2c1.Instance = I2C1;
 365:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 366:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 367:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 368:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 369:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 370:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 371:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 372:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 373:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 374:Src/main.c    ****   {
ARM GAS  /tmp/ccMEniw0.s 			page 8


 375:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    ****     /**Configure Analogue filter
 379:Src/main.c    ****     */
 380:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 381:Src/main.c    ****   {
 382:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 383:Src/main.c    ****   }
 384:Src/main.c    **** 
 385:Src/main.c    ****     /**Configure Digital filter
 386:Src/main.c    ****     */
 387:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 388:Src/main.c    ****   {
 389:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 390:Src/main.c    ****   }
 391:Src/main.c    **** 
 392:Src/main.c    **** }
 393:Src/main.c    **** 
 394:Src/main.c    **** /* TIM1 init function */
 395:Src/main.c    **** static void MX_TIM1_Init(void)
 396:Src/main.c    **** {
 397:Src/main.c    **** 
 398:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig;
 399:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 400:Src/main.c    **** 
 401:Src/main.c    ****   htim1.Instance = TIM1;
 402:Src/main.c    ****   htim1.Init.Prescaler = 0;
 403:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 404:Src/main.c    ****   htim1.Init.Period = 1440-1;
 405:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 406:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 407:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 408:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 409:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 410:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 411:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 412:Src/main.c    ****   sConfig.IC1Filter = 0;
 413:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 414:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 415:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 416:Src/main.c    ****   sConfig.IC2Filter = 0;
 417:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 418:Src/main.c    ****   {
 419:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 420:Src/main.c    ****   }
 421:Src/main.c    **** 
 422:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 423:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 424:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 425:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 426:Src/main.c    ****   {
 427:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 428:Src/main.c    ****   }
 429:Src/main.c    **** 
 430:Src/main.c    **** }
 431:Src/main.c    **** 
ARM GAS  /tmp/ccMEniw0.s 			page 9


 432:Src/main.c    **** /* TIM2 init function */
 433:Src/main.c    **** static void MX_TIM2_Init(void)
 434:Src/main.c    **** {
 435:Src/main.c    **** 
 436:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig;
 437:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 438:Src/main.c    **** 
 439:Src/main.c    ****   htim2.Instance = TIM2;
 440:Src/main.c    ****   htim2.Init.Prescaler = 0;
 441:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 442:Src/main.c    ****   htim2.Init.Period = 1440-1;
 443:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 444:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 445:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 446:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 447:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 448:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 449:Src/main.c    ****   sConfig.IC1Filter = 0;
 450:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 451:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 452:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 453:Src/main.c    ****   sConfig.IC2Filter = 0;
 454:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 457:Src/main.c    ****   }
 458:Src/main.c    **** 
 459:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 460:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 461:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 462:Src/main.c    ****   {
 463:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 464:Src/main.c    ****   }
 465:Src/main.c    **** 
 466:Src/main.c    **** }
 467:Src/main.c    **** 
 468:Src/main.c    **** /* TIM3 init function */
 469:Src/main.c    **** static void MX_TIM3_Init(void)
 470:Src/main.c    **** {
 471:Src/main.c    **** 
 472:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 473:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 474:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 475:Src/main.c    **** 
 476:Src/main.c    ****   htim3.Instance = TIM3;
 477:Src/main.c    ****   htim3.Init.Prescaler = 1250-1;
 478:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 479:Src/main.c    ****   htim3.Init.Period = 255-1;
 480:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 481:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 482:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 483:Src/main.c    ****   {
 484:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 485:Src/main.c    ****   }
 486:Src/main.c    **** 
 487:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 488:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/ccMEniw0.s 			page 10


 489:Src/main.c    ****   {
 490:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 491:Src/main.c    ****   }
 492:Src/main.c    **** 
 493:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 494:Src/main.c    ****   {
 495:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 496:Src/main.c    ****   }
 497:Src/main.c    **** 
 498:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 499:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 500:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 501:Src/main.c    ****   {
 502:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 503:Src/main.c    ****   }
 504:Src/main.c    **** 
 505:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 506:Src/main.c    ****   sConfigOC.Pulse = 0;
 507:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 508:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 509:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 510:Src/main.c    ****   {
 511:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 512:Src/main.c    ****   }
 513:Src/main.c    **** 
 514:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 515:Src/main.c    ****   {
 516:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 517:Src/main.c    ****   }
 518:Src/main.c    **** 
 519:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 520:Src/main.c    **** 
 521:Src/main.c    **** }
 522:Src/main.c    **** 
 523:Src/main.c    **** /* USART2 init function */
 524:Src/main.c    **** static void MX_USART2_UART_Init(void)
 525:Src/main.c    **** {
 526:Src/main.c    **** 
 527:Src/main.c    ****   huart2.Instance = USART2;
 528:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 529:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 530:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 531:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 532:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 533:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 534:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 535:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 536:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 537:Src/main.c    ****   {
 538:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 539:Src/main.c    ****   }
 540:Src/main.c    **** 
 541:Src/main.c    **** }
 542:Src/main.c    **** 
 543:Src/main.c    **** /** Configure pins as
 544:Src/main.c    ****         * Analog
 545:Src/main.c    ****         * Input
ARM GAS  /tmp/ccMEniw0.s 			page 11


 546:Src/main.c    ****         * Output
 547:Src/main.c    ****         * EVENT_OUT
 548:Src/main.c    ****         * EXTI
 549:Src/main.c    **** */
 550:Src/main.c    **** static void MX_GPIO_Init(void)
 551:Src/main.c    **** {
  27              		.loc 1 551 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 70B5     		push	{r4, r5, r6, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
  41              	.LBB2:
 552:Src/main.c    **** 
 553:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 554:Src/main.c    **** 
 555:Src/main.c    ****   /* GPIO Ports Clock Enable */
 556:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  42              		.loc 1 556 0
  43 0004 244B     		ldr	r3, .L3
  44 0006 5A69     		ldr	r2, [r3, #20]
  45 0008 42F40032 		orr	r2, r2, #131072
  46 000c 5A61     		str	r2, [r3, #20]
  47 000e 5A69     		ldr	r2, [r3, #20]
  48 0010 02F40032 		and	r2, r2, #131072
  49 0014 0192     		str	r2, [sp, #4]
  50 0016 019A     		ldr	r2, [sp, #4]
  51              	.LBE2:
  52              	.LBB3:
 557:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  53              		.loc 1 557 0
  54 0018 5A69     		ldr	r2, [r3, #20]
  55 001a 42F48022 		orr	r2, r2, #262144
  56 001e 5A61     		str	r2, [r3, #20]
  57 0020 5B69     		ldr	r3, [r3, #20]
  58 0022 03F48023 		and	r3, r3, #262144
  59 0026 0293     		str	r3, [sp, #8]
  60 0028 029B     		ldr	r3, [sp, #8]
  61              	.LBE3:
 558:Src/main.c    **** 
 559:Src/main.c    ****   /*Configure GPIO pin Output Level */
 560:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, BRAKE_1_Pin|LED_Pin, GPIO_PIN_RESET);
  62              		.loc 1 560 0
  63 002a 0022     		movs	r2, #0
  64 002c 4FF40861 		mov	r1, #2176
  65 0030 4FF09040 		mov	r0, #1207959552
  66 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
  67              	.LVL0:
 561:Src/main.c    **** 
ARM GAS  /tmp/ccMEniw0.s 			page 12


 562:Src/main.c    ****   /*Configure GPIO pin Output Level */
 563:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|DIR_2_Pin|BRAKE_2_Pin, GPIO_PIN_RESET);
  68              		.loc 1 563 0
  69 0038 184D     		ldr	r5, .L3+4
  70 003a 0022     		movs	r2, #0
  71 003c 1921     		movs	r1, #25
  72 003e 2846     		mov	r0, r5
  73 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
  74              	.LVL1:
 564:Src/main.c    **** 
 565:Src/main.c    ****   /*Configure GPIO pins : BRAKE_1_Pin LED_Pin */
 566:Src/main.c    ****   GPIO_InitStruct.Pin = BRAKE_1_Pin|LED_Pin;
  75              		.loc 1 566 0
  76 0044 4FF40863 		mov	r3, #2176
  77 0048 0393     		str	r3, [sp, #12]
 567:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  78              		.loc 1 567 0
  79 004a 0126     		movs	r6, #1
  80 004c 0496     		str	r6, [sp, #16]
 568:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  81              		.loc 1 568 0
  82 004e 0024     		movs	r4, #0
  83 0050 0594     		str	r4, [sp, #20]
 569:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  84              		.loc 1 569 0
  85 0052 0694     		str	r4, [sp, #24]
 570:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  86              		.loc 1 570 0
  87 0054 03A9     		add	r1, sp, #12
  88 0056 4FF09040 		mov	r0, #1207959552
  89 005a FFF7FEFF 		bl	HAL_GPIO_Init
  90              	.LVL2:
 571:Src/main.c    **** 
 572:Src/main.c    ****   /*Configure GPIO pins : DIR_1_Pin DIR_2_Pin BRAKE_2_Pin */
 573:Src/main.c    ****   GPIO_InitStruct.Pin = DIR_1_Pin|DIR_2_Pin|BRAKE_2_Pin;
  91              		.loc 1 573 0
  92 005e 1923     		movs	r3, #25
  93 0060 0393     		str	r3, [sp, #12]
 574:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  94              		.loc 1 574 0
  95 0062 0496     		str	r6, [sp, #16]
 575:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  96              		.loc 1 575 0
  97 0064 0594     		str	r4, [sp, #20]
 576:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  98              		.loc 1 576 0
  99 0066 0694     		str	r4, [sp, #24]
 577:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 100              		.loc 1 577 0
 101 0068 03A9     		add	r1, sp, #12
 102 006a 2846     		mov	r0, r5
 103 006c FFF7FEFF 		bl	HAL_GPIO_Init
 104              	.LVL3:
 578:Src/main.c    **** 
 579:Src/main.c    ****   /*Configure GPIO pin : DIAG_1_Pin */
 580:Src/main.c    ****   GPIO_InitStruct.Pin = DIAG_1_Pin;
 105              		.loc 1 580 0
ARM GAS  /tmp/ccMEniw0.s 			page 13


 106 0070 0223     		movs	r3, #2
 107 0072 0393     		str	r3, [sp, #12]
 581:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 108              		.loc 1 581 0
 109 0074 0494     		str	r4, [sp, #16]
 582:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 110              		.loc 1 582 0
 111 0076 0593     		str	r3, [sp, #20]
 583:Src/main.c    ****   HAL_GPIO_Init(DIAG_1_GPIO_Port, &GPIO_InitStruct);
 112              		.loc 1 583 0
 113 0078 03A9     		add	r1, sp, #12
 114 007a 2846     		mov	r0, r5
 115 007c FFF7FEFF 		bl	HAL_GPIO_Init
 116              	.LVL4:
 584:Src/main.c    **** 
 585:Src/main.c    ****   /*Configure GPIO pins : TACHO_1_Pin TACHO_2_Pin DIAG_2_Pin */
 586:Src/main.c    ****   GPIO_InitStruct.Pin = TACHO_1_Pin|TACHO_2_Pin|DIAG_2_Pin;
 117              		.loc 1 586 0
 118 0080 4FF41443 		mov	r3, #37888
 119 0084 0393     		str	r3, [sp, #12]
 587:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 120              		.loc 1 587 0
 121 0086 0494     		str	r4, [sp, #16]
 588:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 588 0
 123 0088 0594     		str	r4, [sp, #20]
 589:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 124              		.loc 1 589 0
 125 008a 03A9     		add	r1, sp, #12
 126 008c 4FF09040 		mov	r0, #1207959552
 127 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 128              	.LVL5:
 590:Src/main.c    **** 
 591:Src/main.c    **** }
 129              		.loc 1 591 0
 130 0094 08B0     		add	sp, sp, #32
 131              	.LCFI2:
 132              		.cfi_def_cfa_offset 16
 133              		@ sp needed
 134 0096 70BD     		pop	{r4, r5, r6, pc}
 135              	.L4:
 136              		.align	2
 137              	.L3:
 138 0098 00100240 		.word	1073876992
 139 009c 00040048 		.word	1207960576
 140              		.cfi_endproc
 141              	.LFE169:
 143              		.global	__aeabi_f2d
 144              		.global	__aeabi_dmul
 145              		.global	__aeabi_ddiv
 146              		.global	__aeabi_d2uiz
 147              		.section	.text.motor_1,"ax",%progbits
 148              		.align	1
 149              		.global	motor_1
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
ARM GAS  /tmp/ccMEniw0.s 			page 14


 153              		.fpu fpv4-sp-d16
 155              	motor_1:
 156              	.LFB159:
 107:Src/main.c    ****     uint16_t value;
 157              		.loc 1 107 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 32
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              	.LVL6:
 162 0000 30B5     		push	{r4, r5, lr}
 163              	.LCFI3:
 164              		.cfi_def_cfa_offset 12
 165              		.cfi_offset 4, -12
 166              		.cfi_offset 5, -8
 167              		.cfi_offset 14, -4
 168 0002 2DED028B 		vpush.64	{d8}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 20
 171              		.cfi_offset 80, -20
 172              		.cfi_offset 81, -16
 173 0006 89B0     		sub	sp, sp, #36
 174              	.LCFI5:
 175              		.cfi_def_cfa_offset 56
 176 0008 B0EE408A 		vmov.f32	s16, s0
 109:Src/main.c    ****     {
 177              		.loc 1 109 0
 178 000c B5EEC00A 		vcmpe.f32	s0, #0
 179 0010 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 180 0014 2BDD     		ble	.L12
 111:Src/main.c    ****       value=(uint16_t) (voltage*255.0/12.0);
 181              		.loc 1 111 0
 182 0016 0122     		movs	r2, #1
 183 0018 1146     		mov	r1, r2
 184 001a 2348     		ldr	r0, .L14+8
 185 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 186              	.LVL7:
 112:Src/main.c    ****     }
 187              		.loc 1 112 0
 188 0020 18EE100A 		vmov	r0, s16
 189 0024 FFF7FEFF 		bl	__aeabi_f2d
 190              	.LVL8:
 191 0028 1DA3     		adr	r3, .L14
 192 002a D3E90023 		ldrd	r2, [r3]
 193 002e FFF7FEFF 		bl	__aeabi_dmul
 194              	.LVL9:
 195 0032 0022     		movs	r2, #0
 196 0034 1D4B     		ldr	r3, .L14+12
 197 0036 FFF7FEFF 		bl	__aeabi_ddiv
 198              	.LVL10:
 199 003a FFF7FEFF 		bl	__aeabi_d2uiz
 200              	.LVL11:
 201 003e 80B2     		uxth	r0, r0
 202              	.LVL12:
 203              	.L8:
 119:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 204              		.loc 1 119 0
 205 0040 3228     		cmp	r0, #50
ARM GAS  /tmp/ccMEniw0.s 			page 15


 206 0042 00D9     		bls	.L9
 207 0044 3220     		movs	r0, #50
 208              	.LVL13:
 209              	.L9:
 121:Src/main.c    ****     sConfigOC.Pulse = value;
 210              		.loc 1 121 0
 211 0046 6023     		movs	r3, #96
 212 0048 0193     		str	r3, [sp, #4]
 122:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 213              		.loc 1 122 0
 214 004a 0290     		str	r0, [sp, #8]
 123:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 215              		.loc 1 123 0
 216 004c 0024     		movs	r4, #0
 217 004e 0394     		str	r4, [sp, #12]
 124:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 218              		.loc 1 124 0
 219 0050 0594     		str	r4, [sp, #20]
 125:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 220              		.loc 1 125 0
 221 0052 174D     		ldr	r5, .L14+16
 222 0054 2246     		mov	r2, r4
 223 0056 01A9     		add	r1, sp, #4
 224 0058 2846     		mov	r0, r5
 225              	.LVL14:
 226 005a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 227              	.LVL15:
 126:Src/main.c    **** }
 228              		.loc 1 126 0
 229 005e 2146     		mov	r1, r4
 230 0060 2846     		mov	r0, r5
 231 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 232              	.LVL16:
 127:Src/main.c    **** 
 233              		.loc 1 127 0
 234 0066 09B0     		add	sp, sp, #36
 235              	.LCFI6:
 236              		.cfi_remember_state
 237              		.cfi_def_cfa_offset 20
 238              		@ sp needed
 239 0068 BDEC028B 		vldm	sp!, {d8}
 240              	.LCFI7:
 241              		.cfi_restore 80
 242              		.cfi_restore 81
 243              		.cfi_def_cfa_offset 12
 244              	.LVL17:
 245 006c 30BD     		pop	{r4, r5, pc}
 246              	.LVL18:
 247              	.L12:
 248              	.LCFI8:
 249              		.cfi_restore_state
 116:Src/main.c    ****       value=(uint16_t) (-voltage*255.0/12.0);
 250              		.loc 1 116 0
 251 006e 0022     		movs	r2, #0
 252 0070 0121     		movs	r1, #1
 253 0072 0D48     		ldr	r0, .L14+8
 254 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccMEniw0.s 			page 16


 255              	.LVL19:
 117:Src/main.c    ****     }
 256              		.loc 1 117 0
 257 0078 F1EE487A 		vneg.f32	s15, s16
 258 007c 17EE900A 		vmov	r0, s15
 259 0080 FFF7FEFF 		bl	__aeabi_f2d
 260              	.LVL20:
 261 0084 06A3     		adr	r3, .L14
 262 0086 D3E90023 		ldrd	r2, [r3]
 263 008a FFF7FEFF 		bl	__aeabi_dmul
 264              	.LVL21:
 265 008e 0022     		movs	r2, #0
 266 0090 064B     		ldr	r3, .L14+12
 267 0092 FFF7FEFF 		bl	__aeabi_ddiv
 268              	.LVL22:
 269 0096 FFF7FEFF 		bl	__aeabi_d2uiz
 270              	.LVL23:
 271 009a 80B2     		uxth	r0, r0
 272              	.LVL24:
 273 009c D0E7     		b	.L8
 274              	.L15:
 275 009e 00BF     		.align	3
 276              	.L14:
 277 00a0 00000000 		.word	0
 278 00a4 00E06F40 		.word	1081073664
 279 00a8 00040048 		.word	1207960576
 280 00ac 00002840 		.word	1076363264
 281 00b0 00000000 		.word	htim3
 282              		.cfi_endproc
 283              	.LFE159:
 285              		.section	.text.motor_2,"ax",%progbits
 286              		.align	1
 287              		.global	motor_2
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 291              		.fpu fpv4-sp-d16
 293              	motor_2:
 294              	.LFB160:
 130:Src/main.c    ****     uint16_t value;
 295              		.loc 1 130 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 32
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              	.LVL25:
 300 0000 10B5     		push	{r4, lr}
 301              	.LCFI9:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 4, -8
 304              		.cfi_offset 14, -4
 305 0002 2DED028B 		vpush.64	{d8}
 306              	.LCFI10:
 307              		.cfi_def_cfa_offset 16
 308              		.cfi_offset 80, -16
 309              		.cfi_offset 81, -12
 310 0006 88B0     		sub	sp, sp, #32
 311              	.LCFI11:
ARM GAS  /tmp/ccMEniw0.s 			page 17


 312              		.cfi_def_cfa_offset 48
 313 0008 B0EE408A 		vmov.f32	s16, s0
 132:Src/main.c    ****     {
 314              		.loc 1 132 0
 315 000c B5EEC00A 		vcmpe.f32	s0, #0
 316 0010 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 317 0014 2CDD     		ble	.L23
 134:Src/main.c    ****       value=(uint16_t) (voltage*255.0/12.0);
 318              		.loc 1 134 0
 319 0016 0022     		movs	r2, #0
 320 0018 0821     		movs	r1, #8
 321 001a 2348     		ldr	r0, .L25+8
 322 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 323              	.LVL26:
 135:Src/main.c    ****     }
 324              		.loc 1 135 0
 325 0020 18EE100A 		vmov	r0, s16
 326 0024 FFF7FEFF 		bl	__aeabi_f2d
 327              	.LVL27:
 328 0028 1DA3     		adr	r3, .L25
 329 002a D3E90023 		ldrd	r2, [r3]
 330 002e FFF7FEFF 		bl	__aeabi_dmul
 331              	.LVL28:
 332 0032 0022     		movs	r2, #0
 333 0034 1D4B     		ldr	r3, .L25+12
 334 0036 FFF7FEFF 		bl	__aeabi_ddiv
 335              	.LVL29:
 336 003a FFF7FEFF 		bl	__aeabi_d2uiz
 337              	.LVL30:
 338 003e 80B2     		uxth	r0, r0
 339              	.LVL31:
 340              	.L19:
 142:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 341              		.loc 1 142 0
 342 0040 3228     		cmp	r0, #50
 343 0042 00D9     		bls	.L20
 344 0044 3220     		movs	r0, #50
 345              	.LVL32:
 346              	.L20:
 144:Src/main.c    ****     sConfigOC.Pulse = value;
 347              		.loc 1 144 0
 348 0046 6023     		movs	r3, #96
 349 0048 0193     		str	r3, [sp, #4]
 145:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 350              		.loc 1 145 0
 351 004a 0290     		str	r0, [sp, #8]
 146:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 352              		.loc 1 146 0
 353 004c 0023     		movs	r3, #0
 354 004e 0393     		str	r3, [sp, #12]
 147:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 355              		.loc 1 147 0
 356 0050 0593     		str	r3, [sp, #20]
 148:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 357              		.loc 1 148 0
 358 0052 174C     		ldr	r4, .L25+16
 359 0054 0422     		movs	r2, #4
ARM GAS  /tmp/ccMEniw0.s 			page 18


 360 0056 0DEB0201 		add	r1, sp, r2
 361 005a 2046     		mov	r0, r4
 362              	.LVL33:
 363 005c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 364              	.LVL34:
 149:Src/main.c    **** }
 365              		.loc 1 149 0
 366 0060 0421     		movs	r1, #4
 367 0062 2046     		mov	r0, r4
 368 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 369              	.LVL35:
 150:Src/main.c    **** 
 370              		.loc 1 150 0
 371 0068 08B0     		add	sp, sp, #32
 372              	.LCFI12:
 373              		.cfi_remember_state
 374              		.cfi_def_cfa_offset 16
 375              		@ sp needed
 376 006a BDEC028B 		vldm	sp!, {d8}
 377              	.LCFI13:
 378              		.cfi_restore 80
 379              		.cfi_restore 81
 380              		.cfi_def_cfa_offset 8
 381              	.LVL36:
 382 006e 10BD     		pop	{r4, pc}
 383              	.LVL37:
 384              	.L23:
 385              	.LCFI14:
 386              		.cfi_restore_state
 139:Src/main.c    ****       value=(uint16_t) (-voltage*255.0/12.0);
 387              		.loc 1 139 0
 388 0070 0122     		movs	r2, #1
 389 0072 0821     		movs	r1, #8
 390 0074 0C48     		ldr	r0, .L25+8
 391 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 392              	.LVL38:
 140:Src/main.c    ****     }
 393              		.loc 1 140 0
 394 007a F1EE487A 		vneg.f32	s15, s16
 395 007e 17EE900A 		vmov	r0, s15
 396 0082 FFF7FEFF 		bl	__aeabi_f2d
 397              	.LVL39:
 398 0086 06A3     		adr	r3, .L25
 399 0088 D3E90023 		ldrd	r2, [r3]
 400 008c FFF7FEFF 		bl	__aeabi_dmul
 401              	.LVL40:
 402 0090 0022     		movs	r2, #0
 403 0092 064B     		ldr	r3, .L25+12
 404 0094 FFF7FEFF 		bl	__aeabi_ddiv
 405              	.LVL41:
 406 0098 FFF7FEFF 		bl	__aeabi_d2uiz
 407              	.LVL42:
 408 009c 80B2     		uxth	r0, r0
 409              	.LVL43:
 410 009e CFE7     		b	.L19
 411              	.L26:
 412              		.align	3
ARM GAS  /tmp/ccMEniw0.s 			page 19


 413              	.L25:
 414 00a0 00000000 		.word	0
 415 00a4 00E06F40 		.word	1081073664
 416 00a8 00040048 		.word	1207960576
 417 00ac 00002840 		.word	1076363264
 418 00b0 00000000 		.word	htim3
 419              		.cfi_endproc
 420              	.LFE160:
 422              		.global	__aeabi_i2d
 423              		.global	__aeabi_dadd
 424              		.global	__aeabi_d2f
 425              		.section	.text.HAL_TIM_IC_CaptureCallback,"ax",%progbits
 426              		.align	1
 427              		.global	HAL_TIM_IC_CaptureCallback
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	HAL_TIM_IC_CaptureCallback:
 434              	.LFB161:
 153:Src/main.c    ****   Encoder *encoder;
 435              		.loc 1 153 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              	.LVL44:
 155:Src/main.c    ****     encoder = &encoder1;
 440              		.loc 1 155 0
 441 0000 0368     		ldr	r3, [r0]
 442 0002 5F4A     		ldr	r2, .L46+16
 443 0004 1268     		ldr	r2, [r2]
 444 0006 9342     		cmp	r3, r2
 445 0008 06D0     		beq	.L34
 157:Src/main.c    ****     encoder = &encoder2;
 446              		.loc 1 157 0
 447 000a 5E4A     		ldr	r2, .L46+20
 448 000c 1268     		ldr	r2, [r2]
 449 000e 9342     		cmp	r3, r2
 450 0010 00D0     		beq	.L43
 451 0012 7047     		bx	lr
 452              	.L43:
 158:Src/main.c    ****   }else{
 453              		.loc 1 158 0
 454 0014 5C4B     		ldr	r3, .L46+24
 455 0016 00E0     		b	.L28
 456              	.L34:
 156:Src/main.c    ****   }else if(htim->Instance == htim2.Instance){
 457              		.loc 1 156 0
 458 0018 5C4B     		ldr	r3, .L46+28
 459              	.L28:
 153:Src/main.c    ****   Encoder *encoder;
 460              		.loc 1 153 0
 461 001a 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 462              	.LCFI15:
 463              		.cfi_def_cfa_offset 32
 464              		.cfi_offset 4, -32
 465              		.cfi_offset 5, -28
ARM GAS  /tmp/ccMEniw0.s 			page 20


 466              		.cfi_offset 6, -24
 467              		.cfi_offset 7, -20
 468              		.cfi_offset 8, -16
 469              		.cfi_offset 9, -12
 470              		.cfi_offset 10, -8
 471              		.cfi_offset 14, -4
 472              	.LVL45:
 163:Src/main.c    ****   encoder->current = htim->Instance->CNT;
 473              		.loc 1 163 0
 474 001e 5A68     		ldr	r2, [r3, #4]
 475 0020 1A60     		str	r2, [r3]
 164:Src/main.c    ****   int dl = encoder->current - encoder->last;
 476              		.loc 1 164 0
 477 0022 0268     		ldr	r2, [r0]
 478 0024 526A     		ldr	r2, [r2, #36]
 479 0026 5A60     		str	r2, [r3, #4]
 165:Src/main.c    ****   if(dl > 1){
 480              		.loc 1 165 0
 481 0028 5C68     		ldr	r4, [r3, #4]
 482 002a 1A68     		ldr	r2, [r3]
 483 002c A41A     		subs	r4, r4, r2
 484              	.LVL46:
 166:Src/main.c    ****     dl = -1;
 485              		.loc 1 166 0
 486 002e 012C     		cmp	r4, #1
 487 0030 40F38C80 		ble	.L44
 167:Src/main.c    ****   }else if(dl < -1){
 488              		.loc 1 167 0
 489 0034 4FF0FF34 		mov	r4, #-1
 490              	.LVL47:
 491              	.L30:
 171:Src/main.c    ****   encoder->cnt += dl;
 492              		.loc 1 171 0
 493 0038 9C60     		str	r4, [r3, #8]
 172:Src/main.c    ****   
 494              		.loc 1 172 0
 495 003a DA68     		ldr	r2, [r3, #12]
 496 003c 2244     		add	r2, r2, r4
 497 003e DA60     		str	r2, [r3, #12]
 174:Src/main.c    ****   position.y=position.y+sin(position.theta)*delta2*dl;
 498              		.loc 1 174 0
 499 0040 DFF850A1 		ldr	r10, .L46+36
 500 0044 DAF80000 		ldr	r0, [r10]	@ float
 501              	.LVL48:
 502 0048 FFF7FEFF 		bl	__aeabi_f2d
 503              	.LVL49:
 504 004c 0646     		mov	r6, r0
 505 004e 0F46     		mov	r7, r1
 506 0050 DAF80800 		ldr	r0, [r10, #8]	@ float
 507 0054 FFF7FEFF 		bl	__aeabi_f2d
 508              	.LVL50:
 509 0058 41EC100B 		vmov	d0, r0, r1
 510 005c FFF7FEFF 		bl	cos
 511              	.LVL51:
 512 0060 43A3     		adr	r3, .L46
 513 0062 D3E90023 		ldrd	r2, [r3]
 514 0066 51EC100B 		vmov	r0, r1, d0
ARM GAS  /tmp/ccMEniw0.s 			page 21


 515 006a FFF7FEFF 		bl	__aeabi_dmul
 516              	.LVL52:
 517 006e 8046     		mov	r8, r0
 518 0070 8946     		mov	r9, r1
 519 0072 2046     		mov	r0, r4
 520 0074 FFF7FEFF 		bl	__aeabi_i2d
 521              	.LVL53:
 522 0078 0446     		mov	r4, r0
 523              	.LVL54:
 524 007a 0D46     		mov	r5, r1
 525 007c 0246     		mov	r2, r0
 526 007e 0B46     		mov	r3, r1
 527 0080 4046     		mov	r0, r8
 528 0082 4946     		mov	r1, r9
 529 0084 FFF7FEFF 		bl	__aeabi_dmul
 530              	.LVL55:
 531 0088 0246     		mov	r2, r0
 532 008a 0B46     		mov	r3, r1
 533 008c 3046     		mov	r0, r6
 534 008e 3946     		mov	r1, r7
 535 0090 FFF7FEFF 		bl	__aeabi_dadd
 536              	.LVL56:
 537 0094 FFF7FEFF 		bl	__aeabi_d2f
 538              	.LVL57:
 539 0098 CAF80000 		str	r0, [r10]	@ float
 175:Src/main.c    ****   position.theta=position.theta+deltaL*dl;
 540              		.loc 1 175 0
 541 009c DAF80400 		ldr	r0, [r10, #4]	@ float
 542 00a0 FFF7FEFF 		bl	__aeabi_f2d
 543              	.LVL58:
 544 00a4 0646     		mov	r6, r0
 545 00a6 0F46     		mov	r7, r1
 546 00a8 DAF80800 		ldr	r0, [r10, #8]	@ float
 547 00ac FFF7FEFF 		bl	__aeabi_f2d
 548              	.LVL59:
 549 00b0 41EC100B 		vmov	d0, r0, r1
 550 00b4 FFF7FEFF 		bl	sin
 551              	.LVL60:
 552 00b8 2DA3     		adr	r3, .L46
 553 00ba D3E90023 		ldrd	r2, [r3]
 554 00be 51EC100B 		vmov	r0, r1, d0
 555 00c2 FFF7FEFF 		bl	__aeabi_dmul
 556              	.LVL61:
 557 00c6 0246     		mov	r2, r0
 558 00c8 0B46     		mov	r3, r1
 559 00ca 2046     		mov	r0, r4
 560 00cc 2946     		mov	r1, r5
 561 00ce FFF7FEFF 		bl	__aeabi_dmul
 562              	.LVL62:
 563 00d2 0246     		mov	r2, r0
 564 00d4 0B46     		mov	r3, r1
 565 00d6 3046     		mov	r0, r6
 566 00d8 3946     		mov	r1, r7
 567 00da FFF7FEFF 		bl	__aeabi_dadd
 568              	.LVL63:
 569 00de FFF7FEFF 		bl	__aeabi_d2f
 570              	.LVL64:
ARM GAS  /tmp/ccMEniw0.s 			page 22


 571 00e2 CAF80400 		str	r0, [r10, #4]	@ float
 176:Src/main.c    ****   
 572              		.loc 1 176 0
 573 00e6 DAF80800 		ldr	r0, [r10, #8]	@ float
 574 00ea FFF7FEFF 		bl	__aeabi_f2d
 575              	.LVL65:
 576 00ee 0646     		mov	r6, r0
 577 00f0 0F46     		mov	r7, r1
 578 00f2 21A3     		adr	r3, .L46+8
 579 00f4 D3E90023 		ldrd	r2, [r3]
 580 00f8 2046     		mov	r0, r4
 581 00fa 2946     		mov	r1, r5
 582 00fc FFF7FEFF 		bl	__aeabi_dmul
 583              	.LVL66:
 584 0100 0246     		mov	r2, r0
 585 0102 0B46     		mov	r3, r1
 586 0104 3046     		mov	r0, r6
 587 0106 3946     		mov	r1, r7
 588 0108 FFF7FEFF 		bl	__aeabi_dadd
 589              	.LVL67:
 590 010c FFF7FEFF 		bl	__aeabi_d2f
 591              	.LVL68:
 592 0110 CAF80800 		str	r0, [r10, #8]	@ float
 186:Src/main.c    ****   {
 593              		.loc 1 186 0
 594 0114 9AED027A 		vldr.32	s14, [r10, #8]
 595 0118 DFED1D7A 		vldr.32	s15, .L46+32
 596 011c B4EEE77A 		vcmpe.f32	s14, s15
 597 0120 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 598 0124 18DC     		bgt	.L45
 190:Src/main.c    ****   {
 599              		.loc 1 190 0
 600 0126 1B4B     		ldr	r3, .L46+36
 601 0128 93ED027A 		vldr.32	s14, [r3, #8]
 602 012c DFED1A7A 		vldr.32	s15, .L46+40
 603 0130 B4EEE77A 		vcmpe.f32	s14, s15
 604 0134 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 605 0138 16D8     		bhi	.L27
 192:Src/main.c    ****   }
 606              		.loc 1 192 0
 607 013a D3ED027A 		vldr.32	s15, [r3, #8]
 608 013e 9FED177A 		vldr.32	s14, .L46+44
 609 0142 77EE877A 		vadd.f32	s15, s15, s14
 610 0146 C3ED027A 		vstr.32	s15, [r3, #8]
 611 014a 0DE0     		b	.L27
 612              	.LVL69:
 613              	.L44:
 168:Src/main.c    ****     dl = +1;
 614              		.loc 1 168 0
 615 014c B4F1FF3F 		cmp	r4, #-1
 616 0150 BFF672AF 		bge	.L30
 169:Src/main.c    ****   }
 617              		.loc 1 169 0
 618 0154 0124     		movs	r4, #1
 619              	.LVL70:
 620 0156 6FE7     		b	.L30
 621              	.LVL71:
ARM GAS  /tmp/ccMEniw0.s 			page 23


 622              	.L45:
 188:Src/main.c    ****   }
 623              		.loc 1 188 0
 624 0158 9AED027A 		vldr.32	s14, [r10, #8]
 625 015c DFED0F7A 		vldr.32	s15, .L46+44
 626 0160 77EEC77A 		vsub.f32	s15, s15, s14
 627 0164 CAED027A 		vstr.32	s15, [r10, #8]
 628              	.L27:
 194:Src/main.c    **** /* USER CODE END PFP */
 629              		.loc 1 194 0
 630 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 631              	.L47:
 632 016c AFF30080 		.align	3
 633              	.L46:
 634 0170 7B14AE47 		.word	1202590843
 635 0174 E17A843F 		.word	1065646817
 636 0178 FCA9F1D2 		.word	3539053052
 637 017c 4D62403F 		.word	1061184077
 638 0180 00000000 		.word	htim1
 639 0184 00000000 		.word	htim2
 640 0188 00000000 		.word	.LANCHOR1
 641 018c 00000000 		.word	.LANCHOR0
 642 0190 DB0F4940 		.word	1078530011
 643 0194 00000000 		.word	.LANCHOR2
 644 0198 DB0F49C0 		.word	3226013659
 645 019c DB0FC940 		.word	1086918619
 646              		.cfi_endproc
 647              	.LFE161:
 649              		.section	.text._Error_Handler,"ax",%progbits
 650              		.align	1
 651              		.global	_Error_Handler
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv4-sp-d16
 657              	_Error_Handler:
 658              	.LFB170:
 592:Src/main.c    **** 
 593:Src/main.c    **** /* USER CODE BEGIN 4 */
 594:Src/main.c    **** 
 595:Src/main.c    **** /* USER CODE END 4 */
 596:Src/main.c    **** 
 597:Src/main.c    **** /**
 598:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 599:Src/main.c    ****   * @param  file: The file name as string.
 600:Src/main.c    ****   * @param  line: The line in file as a number.
 601:Src/main.c    ****   * @retval None
 602:Src/main.c    ****   */
 603:Src/main.c    **** void _Error_Handler(char *file, int line)
 604:Src/main.c    **** {
 659              		.loc 1 604 0
 660              		.cfi_startproc
 661              		@ Volatile: function does not return.
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 665              	.LVL72:
ARM GAS  /tmp/ccMEniw0.s 			page 24


 666              	.L49:
 667 0000 FEE7     		b	.L49
 668              		.cfi_endproc
 669              	.LFE170:
 671              		.section	.text.MX_I2C1_Init,"ax",%progbits
 672              		.align	1
 673              		.syntax unified
 674              		.thumb
 675              		.thumb_func
 676              		.fpu fpv4-sp-d16
 678              	MX_I2C1_Init:
 679              	.LFB164:
 362:Src/main.c    **** 
 680              		.loc 1 362 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 362:Src/main.c    **** 
 684              		.loc 1 362 0
 685 0000 08B5     		push	{r3, lr}
 686              	.LCFI16:
 687              		.cfi_def_cfa_offset 8
 688              		.cfi_offset 3, -8
 689              		.cfi_offset 14, -4
 364:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 690              		.loc 1 364 0
 691 0002 1548     		ldr	r0, .L58
 692 0004 154B     		ldr	r3, .L58+4
 693 0006 0360     		str	r3, [r0]
 365:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 694              		.loc 1 365 0
 695 0008 154B     		ldr	r3, .L58+8
 696 000a 4360     		str	r3, [r0, #4]
 366:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 697              		.loc 1 366 0
 698 000c 0023     		movs	r3, #0
 699 000e 8360     		str	r3, [r0, #8]
 367:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 700              		.loc 1 367 0
 701 0010 0122     		movs	r2, #1
 702 0012 C260     		str	r2, [r0, #12]
 368:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 703              		.loc 1 368 0
 704 0014 0361     		str	r3, [r0, #16]
 369:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 705              		.loc 1 369 0
 706 0016 4361     		str	r3, [r0, #20]
 370:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 707              		.loc 1 370 0
 708 0018 8361     		str	r3, [r0, #24]
 371:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 709              		.loc 1 371 0
 710 001a C361     		str	r3, [r0, #28]
 372:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 711              		.loc 1 372 0
 712 001c 0362     		str	r3, [r0, #32]
 373:Src/main.c    ****   {
ARM GAS  /tmp/ccMEniw0.s 			page 25


 713              		.loc 1 373 0
 714 001e FFF7FEFF 		bl	HAL_I2C_Init
 715              	.LVL73:
 716 0022 50B9     		cbnz	r0, .L55
 380:Src/main.c    ****   {
 717              		.loc 1 380 0
 718 0024 0021     		movs	r1, #0
 719 0026 0C48     		ldr	r0, .L58
 720 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 721              	.LVL74:
 722 002c 50B9     		cbnz	r0, .L56
 387:Src/main.c    ****   {
 723              		.loc 1 387 0
 724 002e 0021     		movs	r1, #0
 725 0030 0948     		ldr	r0, .L58
 726 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 727              	.LVL75:
 728 0036 50B9     		cbnz	r0, .L57
 392:Src/main.c    **** 
 729              		.loc 1 392 0
 730 0038 08BD     		pop	{r3, pc}
 731              	.L55:
 375:Src/main.c    ****   }
 732              		.loc 1 375 0
 733 003a 40F27711 		movw	r1, #375
 734 003e 0948     		ldr	r0, .L58+12
 735 0040 FFF7FEFF 		bl	_Error_Handler
 736              	.LVL76:
 737              	.L56:
 382:Src/main.c    ****   }
 738              		.loc 1 382 0
 739 0044 4FF4BF71 		mov	r1, #382
 740 0048 0648     		ldr	r0, .L58+12
 741 004a FFF7FEFF 		bl	_Error_Handler
 742              	.LVL77:
 743              	.L57:
 389:Src/main.c    ****   }
 744              		.loc 1 389 0
 745 004e 40F28511 		movw	r1, #389
 746 0052 0448     		ldr	r0, .L58+12
 747 0054 FFF7FEFF 		bl	_Error_Handler
 748              	.LVL78:
 749              	.L59:
 750              		.align	2
 751              	.L58:
 752 0058 00000000 		.word	hi2c1
 753 005c 00540040 		.word	1073763328
 754 0060 0E090020 		.word	536873230
 755 0064 00000000 		.word	.LC0
 756              		.cfi_endproc
 757              	.LFE164:
 759              		.section	.text.MX_TIM1_Init,"ax",%progbits
 760              		.align	1
 761              		.syntax unified
 762              		.thumb
 763              		.thumb_func
 764              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccMEniw0.s 			page 26


 766              	MX_TIM1_Init:
 767              	.LFB165:
 396:Src/main.c    **** 
 768              		.loc 1 396 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 48
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772 0000 00B5     		push	{lr}
 773              	.LCFI17:
 774              		.cfi_def_cfa_offset 4
 775              		.cfi_offset 14, -4
 776 0002 8DB0     		sub	sp, sp, #52
 777              	.LCFI18:
 778              		.cfi_def_cfa_offset 56
 401:Src/main.c    ****   htim1.Init.Prescaler = 0;
 779              		.loc 1 401 0
 780 0004 1848     		ldr	r0, .L66
 781 0006 194B     		ldr	r3, .L66+4
 782 0008 0360     		str	r3, [r0]
 402:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 783              		.loc 1 402 0
 784 000a 0023     		movs	r3, #0
 785 000c 4360     		str	r3, [r0, #4]
 403:Src/main.c    ****   htim1.Init.Period = 1440-1;
 786              		.loc 1 403 0
 787 000e 8360     		str	r3, [r0, #8]
 404:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 788              		.loc 1 404 0
 789 0010 40F29F52 		movw	r2, #1439
 790 0014 C260     		str	r2, [r0, #12]
 405:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 791              		.loc 1 405 0
 792 0016 0361     		str	r3, [r0, #16]
 406:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 793              		.loc 1 406 0
 794 0018 4361     		str	r3, [r0, #20]
 407:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 795              		.loc 1 407 0
 796 001a 8361     		str	r3, [r0, #24]
 408:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 797              		.loc 1 408 0
 798 001c 0322     		movs	r2, #3
 799 001e 0392     		str	r2, [sp, #12]
 409:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800              		.loc 1 409 0
 801 0020 0222     		movs	r2, #2
 802 0022 0492     		str	r2, [sp, #16]
 410:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 803              		.loc 1 410 0
 804 0024 0122     		movs	r2, #1
 805 0026 0592     		str	r2, [sp, #20]
 411:Src/main.c    ****   sConfig.IC1Filter = 0;
 806              		.loc 1 411 0
 807 0028 0693     		str	r3, [sp, #24]
 412:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 808              		.loc 1 412 0
 809 002a 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccMEniw0.s 			page 27


 413:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810              		.loc 1 413 0
 811 002c 0893     		str	r3, [sp, #32]
 414:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 812              		.loc 1 414 0
 813 002e 0992     		str	r2, [sp, #36]
 415:Src/main.c    ****   sConfig.IC2Filter = 0;
 814              		.loc 1 415 0
 815 0030 0A93     		str	r3, [sp, #40]
 416:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 816              		.loc 1 416 0
 817 0032 0B93     		str	r3, [sp, #44]
 417:Src/main.c    ****   {
 818              		.loc 1 417 0
 819 0034 03A9     		add	r1, sp, #12
 820 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 821              	.LVL79:
 822 003a 58B9     		cbnz	r0, .L64
 422:Src/main.c    ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 823              		.loc 1 422 0
 824 003c 0023     		movs	r3, #0
 825 003e 0093     		str	r3, [sp]
 423:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 826              		.loc 1 423 0
 827 0040 0193     		str	r3, [sp, #4]
 424:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 828              		.loc 1 424 0
 829 0042 0293     		str	r3, [sp, #8]
 425:Src/main.c    ****   {
 830              		.loc 1 425 0
 831 0044 6946     		mov	r1, sp
 832 0046 0848     		ldr	r0, .L66
 833 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 834              	.LVL80:
 835 004c 38B9     		cbnz	r0, .L65
 430:Src/main.c    **** 
 836              		.loc 1 430 0
 837 004e 0DB0     		add	sp, sp, #52
 838              	.LCFI19:
 839              		.cfi_remember_state
 840              		.cfi_def_cfa_offset 4
 841              		@ sp needed
 842 0050 5DF804FB 		ldr	pc, [sp], #4
 843              	.L64:
 844              	.LCFI20:
 845              		.cfi_restore_state
 419:Src/main.c    ****   }
 846              		.loc 1 419 0
 847 0054 40F2A311 		movw	r1, #419
 848 0058 0548     		ldr	r0, .L66+8
 849 005a FFF7FEFF 		bl	_Error_Handler
 850              	.LVL81:
 851              	.L65:
 427:Src/main.c    ****   }
 852              		.loc 1 427 0
 853 005e 40F2AB11 		movw	r1, #427
 854 0062 0348     		ldr	r0, .L66+8
ARM GAS  /tmp/ccMEniw0.s 			page 28


 855 0064 FFF7FEFF 		bl	_Error_Handler
 856              	.LVL82:
 857              	.L67:
 858              		.align	2
 859              	.L66:
 860 0068 00000000 		.word	htim1
 861 006c 002C0140 		.word	1073818624
 862 0070 00000000 		.word	.LC0
 863              		.cfi_endproc
 864              	.LFE165:
 866              		.section	.text.MX_TIM2_Init,"ax",%progbits
 867              		.align	1
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 871              		.fpu fpv4-sp-d16
 873              	MX_TIM2_Init:
 874              	.LFB166:
 434:Src/main.c    **** 
 875              		.loc 1 434 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 48
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879 0000 00B5     		push	{lr}
 880              	.LCFI21:
 881              		.cfi_def_cfa_offset 4
 882              		.cfi_offset 14, -4
 883 0002 8DB0     		sub	sp, sp, #52
 884              	.LCFI22:
 885              		.cfi_def_cfa_offset 56
 439:Src/main.c    ****   htim2.Init.Prescaler = 0;
 886              		.loc 1 439 0
 887 0004 1748     		ldr	r0, .L74
 888 0006 4FF08043 		mov	r3, #1073741824
 889 000a 0360     		str	r3, [r0]
 440:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 890              		.loc 1 440 0
 891 000c 0023     		movs	r3, #0
 892 000e 4360     		str	r3, [r0, #4]
 441:Src/main.c    ****   htim2.Init.Period = 1440-1;
 893              		.loc 1 441 0
 894 0010 8360     		str	r3, [r0, #8]
 442:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 895              		.loc 1 442 0
 896 0012 40F29F52 		movw	r2, #1439
 897 0016 C260     		str	r2, [r0, #12]
 443:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 898              		.loc 1 443 0
 899 0018 0361     		str	r3, [r0, #16]
 444:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 900              		.loc 1 444 0
 901 001a 8361     		str	r3, [r0, #24]
 445:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 902              		.loc 1 445 0
 903 001c 0322     		movs	r2, #3
 904 001e 0392     		str	r2, [sp, #12]
 446:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
ARM GAS  /tmp/ccMEniw0.s 			page 29


 905              		.loc 1 446 0
 906 0020 0493     		str	r3, [sp, #16]
 447:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 907              		.loc 1 447 0
 908 0022 0122     		movs	r2, #1
 909 0024 0592     		str	r2, [sp, #20]
 448:Src/main.c    ****   sConfig.IC1Filter = 0;
 910              		.loc 1 448 0
 911 0026 0693     		str	r3, [sp, #24]
 449:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 912              		.loc 1 449 0
 913 0028 0793     		str	r3, [sp, #28]
 450:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 914              		.loc 1 450 0
 915 002a 0893     		str	r3, [sp, #32]
 451:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 916              		.loc 1 451 0
 917 002c 0992     		str	r2, [sp, #36]
 452:Src/main.c    ****   sConfig.IC2Filter = 0;
 918              		.loc 1 452 0
 919 002e 0A93     		str	r3, [sp, #40]
 453:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 920              		.loc 1 453 0
 921 0030 0B93     		str	r3, [sp, #44]
 454:Src/main.c    ****   {
 922              		.loc 1 454 0
 923 0032 03A9     		add	r1, sp, #12
 924 0034 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 925              	.LVL83:
 926 0038 50B9     		cbnz	r0, .L72
 459:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 927              		.loc 1 459 0
 928 003a 0023     		movs	r3, #0
 929 003c 0093     		str	r3, [sp]
 460:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 930              		.loc 1 460 0
 931 003e 0293     		str	r3, [sp, #8]
 461:Src/main.c    ****   {
 932              		.loc 1 461 0
 933 0040 6946     		mov	r1, sp
 934 0042 0848     		ldr	r0, .L74
 935 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 936              	.LVL84:
 937 0048 38B9     		cbnz	r0, .L73
 466:Src/main.c    **** 
 938              		.loc 1 466 0
 939 004a 0DB0     		add	sp, sp, #52
 940              	.LCFI23:
 941              		.cfi_remember_state
 942              		.cfi_def_cfa_offset 4
 943              		@ sp needed
 944 004c 5DF804FB 		ldr	pc, [sp], #4
 945              	.L72:
 946              	.LCFI24:
 947              		.cfi_restore_state
 456:Src/main.c    ****   }
 948              		.loc 1 456 0
ARM GAS  /tmp/ccMEniw0.s 			page 30


 949 0050 4FF4E471 		mov	r1, #456
 950 0054 0448     		ldr	r0, .L74+4
 951 0056 FFF7FEFF 		bl	_Error_Handler
 952              	.LVL85:
 953              	.L73:
 463:Src/main.c    ****   }
 954              		.loc 1 463 0
 955 005a 40F2CF11 		movw	r1, #463
 956 005e 0248     		ldr	r0, .L74+4
 957 0060 FFF7FEFF 		bl	_Error_Handler
 958              	.LVL86:
 959              	.L75:
 960              		.align	2
 961              	.L74:
 962 0064 00000000 		.word	htim2
 963 0068 00000000 		.word	.LC0
 964              		.cfi_endproc
 965              	.LFE166:
 967              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 968              		.align	1
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 972              		.fpu fpv4-sp-d16
 974              	MX_USART2_UART_Init:
 975              	.LFB168:
 525:Src/main.c    **** 
 976              		.loc 1 525 0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 0
 979              		@ frame_needed = 0, uses_anonymous_args = 0
 980 0000 08B5     		push	{r3, lr}
 981              	.LCFI25:
 982              		.cfi_def_cfa_offset 8
 983              		.cfi_offset 3, -8
 984              		.cfi_offset 14, -4
 527:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 985              		.loc 1 527 0
 986 0002 0C48     		ldr	r0, .L80
 987 0004 0C4B     		ldr	r3, .L80+4
 988 0006 0360     		str	r3, [r0]
 528:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 989              		.loc 1 528 0
 990 0008 4FF41643 		mov	r3, #38400
 991 000c 4360     		str	r3, [r0, #4]
 529:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 992              		.loc 1 529 0
 993 000e 0023     		movs	r3, #0
 994 0010 C360     		str	r3, [r0, #12]
 530:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 995              		.loc 1 530 0
 996 0012 0361     		str	r3, [r0, #16]
 531:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 997              		.loc 1 531 0
 998 0014 0C22     		movs	r2, #12
 999 0016 4261     		str	r2, [r0, #20]
 532:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/ccMEniw0.s 			page 31


 1000              		.loc 1 532 0
 1001 0018 8361     		str	r3, [r0, #24]
 533:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1002              		.loc 1 533 0
 1003 001a C361     		str	r3, [r0, #28]
 534:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1004              		.loc 1 534 0
 1005 001c 0362     		str	r3, [r0, #32]
 535:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1006              		.loc 1 535 0
 1007 001e 4362     		str	r3, [r0, #36]
 536:Src/main.c    ****   {
 1008              		.loc 1 536 0
 1009 0020 FFF7FEFF 		bl	HAL_UART_Init
 1010              	.LVL87:
 1011 0024 00B9     		cbnz	r0, .L79
 541:Src/main.c    **** 
 1012              		.loc 1 541 0
 1013 0026 08BD     		pop	{r3, pc}
 1014              	.L79:
 538:Src/main.c    ****   }
 1015              		.loc 1 538 0
 1016 0028 40F21A21 		movw	r1, #538
 1017 002c 0348     		ldr	r0, .L80+8
 1018 002e FFF7FEFF 		bl	_Error_Handler
 1019              	.LVL88:
 1020              	.L81:
 1021 0032 00BF     		.align	2
 1022              	.L80:
 1023 0034 00000000 		.word	huart2
 1024 0038 00440040 		.word	1073759232
 1025 003c 00000000 		.word	.LC0
 1026              		.cfi_endproc
 1027              	.LFE168:
 1029              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1030              		.align	1
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1034              		.fpu fpv4-sp-d16
 1036              	MX_TIM3_Init:
 1037              	.LFB167:
 470:Src/main.c    **** 
 1038              		.loc 1 470 0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 56
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 1042 0000 00B5     		push	{lr}
 1043              	.LCFI26:
 1044              		.cfi_def_cfa_offset 4
 1045              		.cfi_offset 14, -4
 1046 0002 8FB0     		sub	sp, sp, #60
 1047              	.LCFI27:
 1048              		.cfi_def_cfa_offset 64
 476:Src/main.c    ****   htim3.Init.Prescaler = 1250-1;
 1049              		.loc 1 476 0
 1050 0004 2C48     		ldr	r0, .L96
ARM GAS  /tmp/ccMEniw0.s 			page 32


 1051 0006 2D4B     		ldr	r3, .L96+4
 1052 0008 0360     		str	r3, [r0]
 477:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1053              		.loc 1 477 0
 1054 000a 40F2E143 		movw	r3, #1249
 1055 000e 4360     		str	r3, [r0, #4]
 478:Src/main.c    ****   htim3.Init.Period = 255-1;
 1056              		.loc 1 478 0
 1057 0010 0023     		movs	r3, #0
 1058 0012 8360     		str	r3, [r0, #8]
 479:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1059              		.loc 1 479 0
 1060 0014 FE22     		movs	r2, #254
 1061 0016 C260     		str	r2, [r0, #12]
 480:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1062              		.loc 1 480 0
 1063 0018 0361     		str	r3, [r0, #16]
 481:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1064              		.loc 1 481 0
 1065 001a 8361     		str	r3, [r0, #24]
 482:Src/main.c    ****   {
 1066              		.loc 1 482 0
 1067 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1068              	.LVL89:
 1069 0020 58BB     		cbnz	r0, .L90
 487:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1070              		.loc 1 487 0
 1071 0022 0EA9     		add	r1, sp, #56
 1072 0024 4FF48053 		mov	r3, #4096
 1073 0028 41F8103D 		str	r3, [r1, #-16]!
 488:Src/main.c    ****   {
 1074              		.loc 1 488 0
 1075 002c 2248     		ldr	r0, .L96
 1076 002e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1077              	.LVL90:
 1078 0032 38BB     		cbnz	r0, .L91
 493:Src/main.c    ****   {
 1079              		.loc 1 493 0
 1080 0034 2048     		ldr	r0, .L96
 1081 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1082              	.LVL91:
 1083 003a 40BB     		cbnz	r0, .L92
 498:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1084              		.loc 1 498 0
 1085 003c 0023     		movs	r3, #0
 1086 003e 0793     		str	r3, [sp, #28]
 499:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1087              		.loc 1 499 0
 1088 0040 0993     		str	r3, [sp, #36]
 500:Src/main.c    ****   {
 1089              		.loc 1 500 0
 1090 0042 07A9     		add	r1, sp, #28
 1091 0044 1C48     		ldr	r0, .L96
 1092 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1093              	.LVL92:
 1094 004a 28BB     		cbnz	r0, .L93
 505:Src/main.c    ****   sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccMEniw0.s 			page 33


 1095              		.loc 1 505 0
 1096 004c 6023     		movs	r3, #96
 1097 004e 0093     		str	r3, [sp]
 506:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1098              		.loc 1 506 0
 1099 0050 0022     		movs	r2, #0
 1100 0052 0192     		str	r2, [sp, #4]
 507:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1101              		.loc 1 507 0
 1102 0054 0292     		str	r2, [sp, #8]
 508:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1103              		.loc 1 508 0
 1104 0056 0492     		str	r2, [sp, #16]
 509:Src/main.c    ****   {
 1105              		.loc 1 509 0
 1106 0058 6946     		mov	r1, sp
 1107 005a 1748     		ldr	r0, .L96
 1108 005c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1109              	.LVL93:
 1110 0060 F8B9     		cbnz	r0, .L94
 514:Src/main.c    ****   {
 1111              		.loc 1 514 0
 1112 0062 0422     		movs	r2, #4
 1113 0064 6946     		mov	r1, sp
 1114 0066 1448     		ldr	r0, .L96
 1115 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1116              	.LVL94:
 1117 006c F0B9     		cbnz	r0, .L95
 519:Src/main.c    **** 
 1118              		.loc 1 519 0
 1119 006e 1248     		ldr	r0, .L96
 1120 0070 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1121              	.LVL95:
 521:Src/main.c    **** 
 1122              		.loc 1 521 0
 1123 0074 0FB0     		add	sp, sp, #60
 1124              	.LCFI28:
 1125              		.cfi_remember_state
 1126              		.cfi_def_cfa_offset 4
 1127              		@ sp needed
 1128 0076 5DF804FB 		ldr	pc, [sp], #4
 1129              	.L90:
 1130              	.LCFI29:
 1131              		.cfi_restore_state
 484:Src/main.c    ****   }
 1132              		.loc 1 484 0
 1133 007a 4FF4F271 		mov	r1, #484
 1134 007e 1048     		ldr	r0, .L96+8
 1135 0080 FFF7FEFF 		bl	_Error_Handler
 1136              	.LVL96:
 1137              	.L91:
 490:Src/main.c    ****   }
 1138              		.loc 1 490 0
 1139 0084 4FF4F571 		mov	r1, #490
 1140 0088 0D48     		ldr	r0, .L96+8
 1141 008a FFF7FEFF 		bl	_Error_Handler
 1142              	.LVL97:
ARM GAS  /tmp/ccMEniw0.s 			page 34


 1143              	.L92:
 495:Src/main.c    ****   }
 1144              		.loc 1 495 0
 1145 008e 40F2EF11 		movw	r1, #495
 1146 0092 0B48     		ldr	r0, .L96+8
 1147 0094 FFF7FEFF 		bl	_Error_Handler
 1148              	.LVL98:
 1149              	.L93:
 502:Src/main.c    ****   }
 1150              		.loc 1 502 0
 1151 0098 4FF4FB71 		mov	r1, #502
 1152 009c 0848     		ldr	r0, .L96+8
 1153 009e FFF7FEFF 		bl	_Error_Handler
 1154              	.LVL99:
 1155              	.L94:
 511:Src/main.c    ****   }
 1156              		.loc 1 511 0
 1157 00a2 40F2FF11 		movw	r1, #511
 1158 00a6 0648     		ldr	r0, .L96+8
 1159 00a8 FFF7FEFF 		bl	_Error_Handler
 1160              	.LVL100:
 1161              	.L95:
 516:Src/main.c    ****   }
 1162              		.loc 1 516 0
 1163 00ac 4FF40171 		mov	r1, #516
 1164 00b0 0348     		ldr	r0, .L96+8
 1165 00b2 FFF7FEFF 		bl	_Error_Handler
 1166              	.LVL101:
 1167              	.L97:
 1168 00b6 00BF     		.align	2
 1169              	.L96:
 1170 00b8 00000000 		.word	htim3
 1171 00bc 00040040 		.word	1073742848
 1172 00c0 00000000 		.word	.LC0
 1173              		.cfi_endproc
 1174              	.LFE167:
 1176              		.section	.text.SystemClock_Config,"ax",%progbits
 1177              		.align	1
 1178              		.global	SystemClock_Config
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu fpv4-sp-d16
 1184              	SystemClock_Config:
 1185              	.LFB163:
 307:Src/main.c    **** 
 1186              		.loc 1 307 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 88
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190 0000 00B5     		push	{lr}
 1191              	.LCFI30:
 1192              		.cfi_def_cfa_offset 4
 1193              		.cfi_offset 14, -4
 1194 0002 97B0     		sub	sp, sp, #92
 1195              	.LCFI31:
 1196              		.cfi_def_cfa_offset 96
ARM GAS  /tmp/ccMEniw0.s 			page 35


 315:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1197              		.loc 1 315 0
 1198 0004 0223     		movs	r3, #2
 1199 0006 0C93     		str	r3, [sp, #48]
 316:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1200              		.loc 1 316 0
 1201 0008 0122     		movs	r2, #1
 1202 000a 1092     		str	r2, [sp, #64]
 317:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1203              		.loc 1 317 0
 1204 000c 1022     		movs	r2, #16
 1205 000e 1192     		str	r2, [sp, #68]
 318:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1206              		.loc 1 318 0
 1207 0010 1393     		str	r3, [sp, #76]
 319:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 1208              		.loc 1 319 0
 1209 0012 0023     		movs	r3, #0
 1210 0014 1493     		str	r3, [sp, #80]
 320:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1211              		.loc 1 320 0
 1212 0016 4FF46013 		mov	r3, #3670016
 1213 001a 1593     		str	r3, [sp, #84]
 321:Src/main.c    ****   {
 1214              		.loc 1 321 0
 1215 001c 0CA8     		add	r0, sp, #48
 1216 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1217              	.LVL102:
 1218 0022 58BB     		cbnz	r0, .L103
 328:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1219              		.loc 1 328 0
 1220 0024 0F23     		movs	r3, #15
 1221 0026 0793     		str	r3, [sp, #28]
 330:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1222              		.loc 1 330 0
 1223 0028 0221     		movs	r1, #2
 1224 002a 0891     		str	r1, [sp, #32]
 331:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1225              		.loc 1 331 0
 1226 002c 0023     		movs	r3, #0
 1227 002e 0993     		str	r3, [sp, #36]
 332:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1228              		.loc 1 332 0
 1229 0030 4FF48062 		mov	r2, #1024
 1230 0034 0A92     		str	r2, [sp, #40]
 333:Src/main.c    **** 
 1231              		.loc 1 333 0
 1232 0036 0B93     		str	r3, [sp, #44]
 335:Src/main.c    ****   {
 1233              		.loc 1 335 0
 1234 0038 07A8     		add	r0, sp, #28
 1235 003a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1236              	.LVL103:
 1237 003e 10BB     		cbnz	r0, .L104
 340:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1238              		.loc 1 340 0
 1239 0040 4FF48153 		mov	r3, #4128
ARM GAS  /tmp/ccMEniw0.s 			page 36


 1240 0044 0193     		str	r3, [sp, #4]
 341:Src/main.c    ****   PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 1241              		.loc 1 341 0
 1242 0046 0023     		movs	r3, #0
 1243 0048 0493     		str	r3, [sp, #16]
 342:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1244              		.loc 1 342 0
 1245 004a 0693     		str	r3, [sp, #24]
 343:Src/main.c    ****   {
 1246              		.loc 1 343 0
 1247 004c 01A8     		add	r0, sp, #4
 1248 004e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1249              	.LVL104:
 1250 0052 E8B9     		cbnz	r0, .L105
 350:Src/main.c    **** 
 1251              		.loc 1 350 0
 1252 0054 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1253              	.LVL105:
 1254 0058 104B     		ldr	r3, .L106
 1255 005a A3FB0030 		umull	r3, r0, r3, r0
 1256 005e 8009     		lsrs	r0, r0, #6
 1257 0060 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1258              	.LVL106:
 354:Src/main.c    **** 
 1259              		.loc 1 354 0
 1260 0064 0420     		movs	r0, #4
 1261 0066 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1262              	.LVL107:
 357:Src/main.c    **** }
 1263              		.loc 1 357 0
 1264 006a 0022     		movs	r2, #0
 1265 006c 1146     		mov	r1, r2
 1266 006e 4FF0FF30 		mov	r0, #-1
 1267 0072 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1268              	.LVL108:
 358:Src/main.c    **** 
 1269              		.loc 1 358 0
 1270 0076 17B0     		add	sp, sp, #92
 1271              	.LCFI32:
 1272              		.cfi_remember_state
 1273              		.cfi_def_cfa_offset 4
 1274              		@ sp needed
 1275 0078 5DF804FB 		ldr	pc, [sp], #4
 1276              	.L103:
 1277              	.LCFI33:
 1278              		.cfi_restore_state
 323:Src/main.c    ****   }
 1279              		.loc 1 323 0
 1280 007c 40F24311 		movw	r1, #323
 1281 0080 0748     		ldr	r0, .L106+4
 1282 0082 FFF7FEFF 		bl	_Error_Handler
 1283              	.LVL109:
 1284              	.L104:
 337:Src/main.c    ****   }
 1285              		.loc 1 337 0
 1286 0086 40F25111 		movw	r1, #337
 1287 008a 0548     		ldr	r0, .L106+4
ARM GAS  /tmp/ccMEniw0.s 			page 37


 1288 008c FFF7FEFF 		bl	_Error_Handler
 1289              	.LVL110:
 1290              	.L105:
 345:Src/main.c    ****   }
 1291              		.loc 1 345 0
 1292 0090 40F25911 		movw	r1, #345
 1293 0094 0248     		ldr	r0, .L106+4
 1294 0096 FFF7FEFF 		bl	_Error_Handler
 1295              	.LVL111:
 1296              	.L107:
 1297 009a 00BF     		.align	2
 1298              	.L106:
 1299 009c D34D6210 		.word	274877907
 1300 00a0 00000000 		.word	.LC0
 1301              		.cfi_endproc
 1302              	.LFE163:
 1304              		.global	__aeabi_dsub
 1305              		.global	__aeabi_d2iz
 1306              		.section	.text.main,"ax",%progbits
 1307              		.align	1
 1308              		.global	main
 1309              		.syntax unified
 1310              		.thumb
 1311              		.thumb_func
 1312              		.fpu fpv4-sp-d16
 1314              	main:
 1315              	.LFB162:
 207:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1316              		.loc 1 207 0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 48
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1321              	.LCFI34:
 1322              		.cfi_def_cfa_offset 20
 1323              		.cfi_offset 4, -20
 1324              		.cfi_offset 5, -16
 1325              		.cfi_offset 6, -12
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 2DED028B 		vpush.64	{d8}
 1329              	.LCFI35:
 1330              		.cfi_def_cfa_offset 28
 1331              		.cfi_offset 80, -28
 1332              		.cfi_offset 81, -24
 1333 0006 8DB0     		sub	sp, sp, #52
 1334              	.LCFI36:
 1335              		.cfi_def_cfa_offset 80
 215:Src/main.c    **** 
 1336              		.loc 1 215 0
 1337 0008 FFF7FEFF 		bl	HAL_Init
 1338              	.LVL112:
 221:Src/main.c    ****   pid_diff.Te=0.01;
 1339              		.loc 1 221 0
 1340 000c 464B     		ldr	r3, .L111
 1341 000e 0B93     		str	r3, [sp, #44]	@ float
 222:Src/main.c    ****   pid_sum.Kp=0.01;
ARM GAS  /tmp/ccMEniw0.s 			page 38


 1342              		.loc 1 222 0
 1343 0010 0593     		str	r3, [sp, #20]	@ float
 223:Src/main.c    ****   pid_sum.Ki=0;
 1344              		.loc 1 223 0
 1345 0012 0693     		str	r3, [sp, #24]	@ float
 224:Src/main.c    ****   pid_sum.Kd=0;
 1346              		.loc 1 224 0
 1347 0014 9FED458A 		vldr.32	s16, .L111+4
 1348 0018 8DED078A 		vstr.32	s16, [sp, #28]
 225:Src/main.c    ****   pid_diff.Kp=0.01;
 1349              		.loc 1 225 0
 1350 001c 8DED088A 		vstr.32	s16, [sp, #32]
 226:Src/main.c    ****   pid_diff.Ki=0;
 1351              		.loc 1 226 0
 1352 0020 0093     		str	r3, [sp]	@ float
 227:Src/main.c    ****   pid_diff.Kd=0;
 1353              		.loc 1 227 0
 1354 0022 8DED018A 		vstr.32	s16, [sp, #4]
 228:Src/main.c    ****   /* USER CODE END Init */
 1355              		.loc 1 228 0
 1356 0026 8DED028A 		vstr.32	s16, [sp, #8]
 232:Src/main.c    **** 
 1357              		.loc 1 232 0
 1358 002a FFF7FEFF 		bl	SystemClock_Config
 1359              	.LVL113:
 239:Src/main.c    ****   MX_I2C1_Init();
 1360              		.loc 1 239 0
 1361 002e FFF7FEFF 		bl	MX_GPIO_Init
 1362              	.LVL114:
 240:Src/main.c    ****   MX_TIM1_Init();
 1363              		.loc 1 240 0
 1364 0032 FFF7FEFF 		bl	MX_I2C1_Init
 1365              	.LVL115:
 241:Src/main.c    ****   MX_TIM2_Init();
 1366              		.loc 1 241 0
 1367 0036 FFF7FEFF 		bl	MX_TIM1_Init
 1368              	.LVL116:
 242:Src/main.c    ****   MX_USART2_UART_Init();
 1369              		.loc 1 242 0
 1370 003a FFF7FEFF 		bl	MX_TIM2_Init
 1371              	.LVL117:
 243:Src/main.c    ****   MX_TIM3_Init();
 1372              		.loc 1 243 0
 1373 003e FFF7FEFF 		bl	MX_USART2_UART_Init
 1374              	.LVL118:
 244:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1375              		.loc 1 244 0
 1376 0042 FFF7FEFF 		bl	MX_TIM3_Init
 1377              	.LVL119:
 247:Src/main.c    ****   HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 1378              		.loc 1 247 0
 1379 0046 3C21     		movs	r1, #60
 1380 0048 3948     		ldr	r0, .L111+8
 1381 004a FFF7FEFF 		bl	HAL_TIM_Encoder_Start_IT
 1382              	.LVL120:
 248:Src/main.c    **** 
 1383              		.loc 1 248 0
ARM GAS  /tmp/ccMEniw0.s 			page 39


 1384 004e 3C21     		movs	r1, #60
 1385 0050 3848     		ldr	r0, .L111+12
 1386 0052 FFF7FEFF 		bl	HAL_TIM_Encoder_Start_IT
 1387              	.LVL121:
 250:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//EN_1
 1388              		.loc 1 250 0
 1389 0056 384C     		ldr	r4, .L111+16
 1390 0058 0421     		movs	r1, #4
 1391 005a 2046     		mov	r0, r4
 1392 005c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1393              	.LVL122:
 251:Src/main.c    ****   /* USER CODE END 2 */
 1394              		.loc 1 251 0
 1395 0060 0021     		movs	r1, #0
 1396 0062 2046     		mov	r0, r4
 1397 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1398              	.LVL123:
 257:Src/main.c    ****   HAL_GPIO_WritePin (BRAKE_2_GPIO_Port, BRAKE_2_Pin, GPIO_PIN_SET);
 1399              		.loc 1 257 0
 1400 0068 0122     		movs	r2, #1
 1401 006a 8021     		movs	r1, #128
 1402 006c 4FF09040 		mov	r0, #1207959552
 1403 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1404              	.LVL124:
 258:Src/main.c    **** 
 1405              		.loc 1 258 0
 1406 0074 314C     		ldr	r4, .L111+20
 1407 0076 0122     		movs	r2, #1
 1408 0078 1021     		movs	r1, #16
 1409 007a 2046     		mov	r0, r4
 1410 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1411              	.LVL125:
 260:Src/main.c    ****   HAL_GPIO_WritePin(DIR_2_GPIO_Port,DIR_2_Pin,0);
 1412              		.loc 1 260 0
 1413 0080 0122     		movs	r2, #1
 1414 0082 1146     		mov	r1, r2
 1415 0084 2046     		mov	r0, r4
 1416 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1417              	.LVL126:
 261:Src/main.c    ****   motor_1(0);//encoder2 forward positive positive voltage
 1418              		.loc 1 261 0
 1419 008a 0022     		movs	r2, #0
 1420 008c 0821     		movs	r1, #8
 1421 008e 2046     		mov	r0, r4
 1422 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1423              	.LVL127:
 262:Src/main.c    ****   motor_2(0);//encoder1 forward positive positive voltage
 1424              		.loc 1 262 0
 1425 0094 B0EE480A 		vmov.f32	s0, s16
 1426 0098 FFF7FEFF 		bl	motor_1
 1427              	.LVL128:
 263:Src/main.c    **** 
 1428              		.loc 1 263 0
 1429 009c B0EE480A 		vmov.f32	s0, s16
 1430 00a0 FFF7FEFF 		bl	motor_2
 1431              	.LVL129:
 279:Src/main.c    ****   pid_init(&pid_diff);
ARM GAS  /tmp/ccMEniw0.s 			page 40


 1432              		.loc 1 279 0
 1433 00a4 06A8     		add	r0, sp, #24
 1434 00a6 FFF7FEFF 		bl	pid_init
 1435              	.LVL130:
 280:Src/main.c    **** 
 1436              		.loc 1 280 0
 1437 00aa 6846     		mov	r0, sp
 1438 00ac FFF7FEFF 		bl	pid_init
 1439              	.LVL131:
 282:Src/main.c    ****   diff_goal=0;
 1440              		.loc 1 282 0
 1441 00b0 234B     		ldr	r3, .L111+24
 1442 00b2 4FF47A72 		mov	r2, #1000
 1443 00b6 1A60     		str	r2, [r3]
 283:Src/main.c    **** 
 1444              		.loc 1 283 0
 1445 00b8 224B     		ldr	r3, .L111+28
 1446 00ba 0022     		movs	r2, #0
 1447 00bc 1A60     		str	r2, [r3]
 1448              	.L109:
 287:Src/main.c    ****     cor_diff=pid(&pid_diff,diff_goal-(encoder1.current-encoder2.current));
 1449              		.loc 1 287 0 discriminator 1
 1450 00be 224D     		ldr	r5, .L111+32
 1451 00c0 6868     		ldr	r0, [r5, #4]
 1452 00c2 224C     		ldr	r4, .L111+36
 1453 00c4 6368     		ldr	r3, [r4, #4]
 1454 00c6 1844     		add	r0, r0, r3
 1455 00c8 FFF7FEFF 		bl	__aeabi_i2d
 1456              	.LVL132:
 1457 00cc 0022     		movs	r2, #0
 1458 00ce 204B     		ldr	r3, .L111+40
 1459 00d0 FFF7FEFF 		bl	__aeabi_dmul
 1460              	.LVL133:
 1461 00d4 0646     		mov	r6, r0
 1462 00d6 0F46     		mov	r7, r1
 1463 00d8 194B     		ldr	r3, .L111+24
 1464 00da 1868     		ldr	r0, [r3]
 1465 00dc FFF7FEFF 		bl	__aeabi_i2d
 1466              	.LVL134:
 1467 00e0 3246     		mov	r2, r6
 1468 00e2 3B46     		mov	r3, r7
 1469 00e4 FFF7FEFF 		bl	__aeabi_dsub
 1470              	.LVL135:
 1471 00e8 FFF7FEFF 		bl	__aeabi_d2iz
 1472              	.LVL136:
 1473 00ec 0146     		mov	r1, r0
 1474 00ee 06A8     		add	r0, sp, #24
 1475 00f0 FFF7FEFF 		bl	pid
 1476              	.LVL137:
 1477 00f4 F0EE408A 		vmov.f32	s17, s0
 1478              	.LVL138:
 288:Src/main.c    ****     motor_1(cor_sum+cor_diff);
 1479              		.loc 1 288 0 discriminator 1
 1480 00f8 6B68     		ldr	r3, [r5, #4]
 1481 00fa 6168     		ldr	r1, [r4, #4]
 1482 00fc 5B1A     		subs	r3, r3, r1
 1483 00fe 114A     		ldr	r2, .L111+28
ARM GAS  /tmp/ccMEniw0.s 			page 41


 1484 0100 1168     		ldr	r1, [r2]
 1485 0102 C91A     		subs	r1, r1, r3
 1486 0104 6846     		mov	r0, sp
 1487 0106 FFF7FEFF 		bl	pid
 1488              	.LVL139:
 1489 010a B0EE408A 		vmov.f32	s16, s0
 1490              	.LVL140:
 289:Src/main.c    ****     motor_2(cor_sum-cor_diff);
 1491              		.loc 1 289 0 discriminator 1
 1492 010e 38EE800A 		vadd.f32	s0, s17, s0
 1493              	.LVL141:
 1494 0112 FFF7FEFF 		bl	motor_1
 1495              	.LVL142:
 290:Src/main.c    ****     HAL_Delay(Te);
 1496              		.loc 1 290 0 discriminator 1
 1497 0116 38EEC80A 		vsub.f32	s0, s17, s16
 1498 011a FFF7FEFF 		bl	motor_2
 1499              	.LVL143:
 291:Src/main.c    ****     //TODO generateur de consigne
 1500              		.loc 1 291 0 discriminator 1
 1501 011e 0A20     		movs	r0, #10
 1502 0120 FFF7FEFF 		bl	HAL_Delay
 1503              	.LVL144:
 1504 0124 CBE7     		b	.L109
 1505              	.L112:
 1506 0126 00BF     		.align	2
 1507              	.L111:
 1508 0128 0AD7233C 		.word	1008981770
 1509 012c 00000000 		.word	0
 1510 0130 00000000 		.word	htim1
 1511 0134 00000000 		.word	htim2
 1512 0138 00000000 		.word	htim3
 1513 013c 00040048 		.word	1207960576
 1514 0140 00000000 		.word	sum_goal
 1515 0144 00000000 		.word	diff_goal
 1516 0148 00000000 		.word	.LANCHOR0
 1517 014c 00000000 		.word	.LANCHOR1
 1518 0150 0000E03F 		.word	1071644672
 1519              		.cfi_endproc
 1520              	.LFE162:
 1522              		.global	led_level
 1523              		.comm	diff_goal,4,4
 1524              		.comm	sum_goal,4,4
 1525              		.global	position
 1526              		.global	encoder2
 1527              		.global	encoder1
 1528              		.comm	huart2,112,4
 1529              		.comm	htim3,64,4
 1530              		.comm	htim2,64,4
 1531              		.comm	htim1,64,4
 1532              		.comm	hi2c1,76,4
 1533              		.section	.bss.encoder1,"aw",%nobits
 1534              		.align	2
 1535              		.set	.LANCHOR0,. + 0
 1538              	encoder1:
 1539 0000 00000000 		.space	16
 1539      00000000 
ARM GAS  /tmp/ccMEniw0.s 			page 42


 1539      00000000 
 1539      00000000 
 1540              		.section	.bss.encoder2,"aw",%nobits
 1541              		.align	2
 1542              		.set	.LANCHOR1,. + 0
 1545              	encoder2:
 1546 0000 00000000 		.space	16
 1546      00000000 
 1546      00000000 
 1546      00000000 
 1547              		.section	.bss.led_level,"aw",%nobits
 1550              	led_level:
 1551 0000 00       		.space	1
 1552              		.section	.bss.position,"aw",%nobits
 1553              		.align	2
 1554              		.set	.LANCHOR2,. + 0
 1557              	position:
 1558 0000 00000000 		.space	12
 1558      00000000 
 1558      00000000 
 1559              		.section	.rodata.MX_I2C1_Init.str1.4,"aMS",%progbits,1
 1560              		.align	2
 1561              	.LC0:
 1562 0000 5372632F 		.ascii	"Src/main.c\000"
 1562      6D61696E 
 1562      2E6300
 1563              		.text
 1564              	.Letext0:
 1565              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1566              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1567              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1568              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 1569              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 1570              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 1571              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 1572              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.0/include/stddef.h"
 1573              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 1574              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1575              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1576              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1577              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1578              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1579              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 1580              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1581              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1582              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1583              		.file 20 "/usr/arm-none-eabi/include/math.h"
 1584              		.file 21 "Inc/Robotronik_corp_pid.h"
 1585              		.file 22 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
 1586              		.file 23 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 1587              		.file 24 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/ccMEniw0.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMEniw0.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccMEniw0.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccMEniw0.s:138    .text.MX_GPIO_Init:0000000000000098 $d
     /tmp/ccMEniw0.s:148    .text.motor_1:0000000000000000 $t
     /tmp/ccMEniw0.s:155    .text.motor_1:0000000000000000 motor_1
     /tmp/ccMEniw0.s:277    .text.motor_1:00000000000000a0 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccMEniw0.s:286    .text.motor_2:0000000000000000 $t
     /tmp/ccMEniw0.s:293    .text.motor_2:0000000000000000 motor_2
     /tmp/ccMEniw0.s:414    .text.motor_2:00000000000000a0 $d
     /tmp/ccMEniw0.s:426    .text.HAL_TIM_IC_CaptureCallback:0000000000000000 $t
     /tmp/ccMEniw0.s:433    .text.HAL_TIM_IC_CaptureCallback:0000000000000000 HAL_TIM_IC_CaptureCallback
     /tmp/ccMEniw0.s:634    .text.HAL_TIM_IC_CaptureCallback:0000000000000170 $d
                            *COM*:0000000000000040 htim1
                            *COM*:0000000000000040 htim2
     /tmp/ccMEniw0.s:650    .text._Error_Handler:0000000000000000 $t
     /tmp/ccMEniw0.s:657    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccMEniw0.s:672    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccMEniw0.s:678    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccMEniw0.s:752    .text.MX_I2C1_Init:0000000000000058 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccMEniw0.s:760    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccMEniw0.s:766    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccMEniw0.s:860    .text.MX_TIM1_Init:0000000000000068 $d
     /tmp/ccMEniw0.s:867    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccMEniw0.s:873    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccMEniw0.s:962    .text.MX_TIM2_Init:0000000000000064 $d
     /tmp/ccMEniw0.s:968    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccMEniw0.s:974    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccMEniw0.s:1023   .text.MX_USART2_UART_Init:0000000000000034 $d
                            *COM*:0000000000000070 huart2
     /tmp/ccMEniw0.s:1030   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccMEniw0.s:1036   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccMEniw0.s:1170   .text.MX_TIM3_Init:00000000000000b8 $d
     /tmp/ccMEniw0.s:1177   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccMEniw0.s:1184   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccMEniw0.s:1299   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccMEniw0.s:1307   .text.main:0000000000000000 $t
     /tmp/ccMEniw0.s:1314   .text.main:0000000000000000 main
     /tmp/ccMEniw0.s:1508   .text.main:0000000000000128 $d
                            *COM*:0000000000000004 sum_goal
                            *COM*:0000000000000004 diff_goal
     /tmp/ccMEniw0.s:1550   .bss.led_level:0000000000000000 led_level
     /tmp/ccMEniw0.s:1557   .bss.position:0000000000000000 position
     /tmp/ccMEniw0.s:1545   .bss.encoder2:0000000000000000 encoder2
     /tmp/ccMEniw0.s:1538   .bss.encoder1:0000000000000000 encoder1
     /tmp/ccMEniw0.s:1534   .bss.encoder1:0000000000000000 $d
     /tmp/ccMEniw0.s:1541   .bss.encoder2:0000000000000000 $d
     /tmp/ccMEniw0.s:1551   .bss.led_level:0000000000000000 $d
     /tmp/ccMEniw0.s:1553   .bss.position:0000000000000000 $d
     /tmp/ccMEniw0.s:1560   .rodata.MX_I2C1_Init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
ARM GAS  /tmp/ccMEniw0.s 			page 44


__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2uiz
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
__aeabi_i2d
__aeabi_dadd
__aeabi_d2f
cos
sin
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_dsub
__aeabi_d2iz
HAL_Init
HAL_TIM_Encoder_Start_IT
pid_init
pid
HAL_Delay
