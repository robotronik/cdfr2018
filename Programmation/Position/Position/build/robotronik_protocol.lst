ARM GAS  /tmp/cca1eqPD.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"robotronik_protocol.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.err,"aw",%nobits
  18              		.align	1
  21              	err:
  22 0000 0000     		.space	2
  23              		.section	.text.RP_Init_Interface,"ax",%progbits
  24              		.align	1
  25              		.global	RP_Init_Interface
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	RP_Init_Interface:
  32              	.LFB0:
  33              		.file 1 "Src/robotronik_protocol.c"
   1:Src/robotronik_protocol.c **** /**
   2:Src/robotronik_protocol.c ****  * Library Robotronik Protocol
   3:Src/robotronik_protocol.c ****  * robotronik_protocol.c
   4:Src/robotronik_protocol.c ****  *
   5:Src/robotronik_protocol.c ****  * This library is meant to implement a light and reliable protocol
   6:Src/robotronik_protocol.c ****  * for communication between two MCUs. The protocol was designed for
   7:Src/robotronik_protocol.c ****  * request-response oriented communications. It is why it focuses on
   8:Src/robotronik_protocol.c ****  * performance for asynchronous reception.
   9:Src/robotronik_protocol.c ****  * 
  10:Src/robotronik_protocol.c ****  * It uses the Consistent Overhead Byte Stuffing algorithm to delimit
  11:Src/robotronik_protocol.c ****  * the frames and for synchronization purposes. CRC-16/BUYPASS is
  12:Src/robotronik_protocol.c ****  * used to detect corrupted frames.
  13:Src/robotronik_protocol.c ****  *
  14:Src/robotronik_protocol.c ****  * Copyright 2018 Antonin Hirschy
  15:Src/robotronik_protocol.c ****  *
  16:Src/robotronik_protocol.c ****  * This program is free software: you can redistribute it and/or modify
  17:Src/robotronik_protocol.c ****  * it under the terms of the GNU General Public License as published by
  18:Src/robotronik_protocol.c ****  * the Free Software Foundation, either version 3 of the License, or
  19:Src/robotronik_protocol.c ****  * (at your option) any later version.
  20:Src/robotronik_protocol.c ****  * 
  21:Src/robotronik_protocol.c ****  * This program is distributed in the hope that it will be useful,
  22:Src/robotronik_protocol.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  23:Src/robotronik_protocol.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  24:Src/robotronik_protocol.c ****  * GNU General Public License for more details.
  25:Src/robotronik_protocol.c ****  *
  26:Src/robotronik_protocol.c ****  * You should have received a copy of the GNU General Public License
  27:Src/robotronik_protocol.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  /tmp/cca1eqPD.s 			page 2


  28:Src/robotronik_protocol.c ****  */
  29:Src/robotronik_protocol.c **** #include "robotronik_protocol.h"
  30:Src/robotronik_protocol.c **** 
  31:Src/robotronik_protocol.c **** #define RP_EOF 0x00
  32:Src/robotronik_protocol.c **** #define WRITE_BUFF(p_buffer,byte) *(p_buffer++) = byte;
  33:Src/robotronik_protocol.c **** #define ENCODE_BYTE(byte,p_buffer,p_code) {\
  34:Src/robotronik_protocol.c ****     if(byte == RP_EOF){			   \
  35:Src/robotronik_protocol.c ****       *p_code = p_buffer - p_code;	   \
  36:Src/robotronik_protocol.c ****       p_code = p_buffer++;		   \
  37:Src/robotronik_protocol.c ****     }					   \
  38:Src/robotronik_protocol.c ****     else{				   \
  39:Src/robotronik_protocol.c ****       *(p_buffer++) = byte;		   \
  40:Src/robotronik_protocol.c ****     }					   \
  41:Src/robotronik_protocol.c ****   }
  42:Src/robotronik_protocol.c **** 
  43:Src/robotronik_protocol.c **** static uint16_t err;
  44:Src/robotronik_protocol.c **** 
  45:Src/robotronik_protocol.c **** static void RP_FSM_INIT(RP_Interface *interface);
  46:Src/robotronik_protocol.c **** static void RP_FSM_ID(RP_Interface *interface);
  47:Src/robotronik_protocol.c **** static void RP_FSM_SIZE(RP_Interface *interface);
  48:Src/robotronik_protocol.c **** static void RP_FSM_DATA(RP_Interface *interface);
  49:Src/robotronik_protocol.c **** static void RP_FSM_CRC_LOW(RP_Interface *interface);
  50:Src/robotronik_protocol.c **** static void RP_FSM_CRC_HIGH(RP_Interface *interface);
  51:Src/robotronik_protocol.c **** static void RP_FSM_END(RP_Interface *interface);
  52:Src/robotronik_protocol.c **** 
  53:Src/robotronik_protocol.c **** //==================================================
  54:Src/robotronik_protocol.c **** //           Initialization functions
  55:Src/robotronik_protocol.c **** //==================================================
  56:Src/robotronik_protocol.c **** 
  57:Src/robotronik_protocol.c **** void RP_Init_Interface(RP_Interface *interface,
  58:Src/robotronik_protocol.c **** 		       void* link_handler,
  59:Src/robotronik_protocol.c **** 		       uint8_t (*send)(void*, uint8_t *, uint16_t, uint32_t),
  60:Src/robotronik_protocol.c **** 		       uint32_t (*get_tick)()){
  34              		.loc 1 60 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 16
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39 0000 80B4     		push	{r7}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 4
  42              		.cfi_offset 7, -4
  43 0002 85B0     		sub	sp, sp, #20
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 24
  46 0004 00AF     		add	r7, sp, #0
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  49 0006 F860     		str	r0, [r7, #12]
  50 0008 B960     		str	r1, [r7, #8]
  51 000a 7A60     		str	r2, [r7, #4]
  52 000c 3B60     		str	r3, [r7]
  61:Src/robotronik_protocol.c ****   interface->link_handler = link_handler;
  53              		.loc 1 61 0
  54 000e FB68     		ldr	r3, [r7, #12]
  55 0010 BA68     		ldr	r2, [r7, #8]
  56 0012 C3F81824 		str	r2, [r3, #1048]
ARM GAS  /tmp/cca1eqPD.s 			page 3


  62:Src/robotronik_protocol.c ****   interface->send = send;
  57              		.loc 1 62 0
  58 0016 FB68     		ldr	r3, [r7, #12]
  59 0018 7A68     		ldr	r2, [r7, #4]
  60 001a 1A60     		str	r2, [r3]
  63:Src/robotronik_protocol.c ****   interface->get_tick = get_tick;
  61              		.loc 1 63 0
  62 001c FB68     		ldr	r3, [r7, #12]
  63 001e 3A68     		ldr	r2, [r7]
  64 0020 5A60     		str	r2, [r3, #4]
  64:Src/robotronik_protocol.c ****   interface->received = false;
  65              		.loc 1 64 0
  66 0022 FB68     		ldr	r3, [r7, #12]
  67 0024 0022     		movs	r2, #0
  68 0026 83F81224 		strb	r2, [r3, #1042]
  65:Src/robotronik_protocol.c ****   
  66:Src/robotronik_protocol.c ****   //FSM
  67:Src/robotronik_protocol.c ****   interface->update_state = RP_FSM_INIT;
  69              		.loc 1 67 0
  70 002a FB68     		ldr	r3, [r7, #12]
  71 002c 0C4A     		ldr	r2, .L2
  72 002e C3F80024 		str	r2, [r3, #1024]
  68:Src/robotronik_protocol.c ****   interface->p_in = interface->buffer_in;
  73              		.loc 1 68 0
  74 0032 FB68     		ldr	r3, [r7, #12]
  75 0034 03F10802 		add	r2, r3, #8
  76 0038 FB68     		ldr	r3, [r7, #12]
  77 003a C3F80824 		str	r2, [r3, #1032]
  69:Src/robotronik_protocol.c ****   interface->p_out = interface->r_packet.data;
  78              		.loc 1 69 0
  79 003e FB68     		ldr	r3, [r7, #12]
  80 0040 03F58572 		add	r2, r3, #266
  81 0044 FB68     		ldr	r3, [r7, #12]
  82 0046 C3F80C24 		str	r2, [r3, #1036]
  70:Src/robotronik_protocol.c ****   interface->crc_accum = 0;
  83              		.loc 1 70 0
  84 004a FB68     		ldr	r3, [r7, #12]
  85 004c 0022     		movs	r2, #0
  86 004e A3F81024 		strh	r2, [r3, #1040]	@ movhi
  71:Src/robotronik_protocol.c **** }
  87              		.loc 1 71 0
  88 0052 00BF     		nop
  89 0054 1437     		adds	r7, r7, #20
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 4
  92 0056 BD46     		mov	sp, r7
  93              	.LCFI4:
  94              		.cfi_def_cfa_register 13
  95              		@ sp needed
  96 0058 5DF8047B 		ldr	r7, [sp], #4
  97              	.LCFI5:
  98              		.cfi_restore 7
  99              		.cfi_def_cfa_offset 0
 100 005c 7047     		bx	lr
 101              	.L3:
 102 005e 00BF     		.align	2
 103              	.L2:
ARM GAS  /tmp/cca1eqPD.s 			page 4


 104 0060 00000000 		.word	RP_FSM_INIT
 105              		.cfi_endproc
 106              	.LFE0:
 108              		.section	.text.RP_Packet_Received,"ax",%progbits
 109              		.align	1
 110              		.weak	RP_Packet_Received
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv4-sp-d16
 116              	RP_Packet_Received:
 117              	.LFB1:
  72:Src/robotronik_protocol.c **** 
  73:Src/robotronik_protocol.c **** void __attribute__((weak)) RP_Packet_Received(RP_Interface* interface, RP_Packet* packet){
 118              		.loc 1 73 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123 0000 80B4     		push	{r7}
 124              	.LCFI6:
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 0002 83B0     		sub	sp, sp, #12
 128              	.LCFI7:
 129              		.cfi_def_cfa_offset 16
 130 0004 00AF     		add	r7, sp, #0
 131              	.LCFI8:
 132              		.cfi_def_cfa_register 7
 133 0006 7860     		str	r0, [r7, #4]
 134 0008 3960     		str	r1, [r7]
  74:Src/robotronik_protocol.c ****   //Avoid compiler warnings.
  75:Src/robotronik_protocol.c ****   (void)interface;
  76:Src/robotronik_protocol.c ****   (void)packet;
  77:Src/robotronik_protocol.c **** }
 135              		.loc 1 77 0
 136 000a 00BF     		nop
 137 000c 0C37     		adds	r7, r7, #12
 138              	.LCFI9:
 139              		.cfi_def_cfa_offset 4
 140 000e BD46     		mov	sp, r7
 141              	.LCFI10:
 142              		.cfi_def_cfa_register 13
 143              		@ sp needed
 144 0010 5DF8047B 		ldr	r7, [sp], #4
 145              	.LCFI11:
 146              		.cfi_restore 7
 147              		.cfi_def_cfa_offset 0
 148 0014 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE1:
 152              		.section	.text.RP_Error_Handler,"ax",%progbits
 153              		.align	1
 154              		.weak	RP_Error_Handler
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
ARM GAS  /tmp/cca1eqPD.s 			page 5


 158              		.fpu fpv4-sp-d16
 160              	RP_Error_Handler:
 161              	.LFB2:
  78:Src/robotronik_protocol.c **** 
  79:Src/robotronik_protocol.c **** void __attribute__((weak)) RP_Error_Handler(RP_Interface* interface, uint16_t err){
 162              		.loc 1 79 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167 0000 80B4     		push	{r7}
 168              	.LCFI12:
 169              		.cfi_def_cfa_offset 4
 170              		.cfi_offset 7, -4
 171 0002 83B0     		sub	sp, sp, #12
 172              	.LCFI13:
 173              		.cfi_def_cfa_offset 16
 174 0004 00AF     		add	r7, sp, #0
 175              	.LCFI14:
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 178 0008 0B46     		mov	r3, r1
 179 000a 7B80     		strh	r3, [r7, #2]	@ movhi
  80:Src/robotronik_protocol.c ****   //Avoid compiler warnings.
  81:Src/robotronik_protocol.c ****   (void)interface;
  82:Src/robotronik_protocol.c ****   (void)err;
  83:Src/robotronik_protocol.c ****  }
 180              		.loc 1 83 0
 181 000c 00BF     		nop
 182 000e 0C37     		adds	r7, r7, #12
 183              	.LCFI15:
 184              		.cfi_def_cfa_offset 4
 185 0010 BD46     		mov	sp, r7
 186              	.LCFI16:
 187              		.cfi_def_cfa_register 13
 188              		@ sp needed
 189 0012 5DF8047B 		ldr	r7, [sp], #4
 190              	.LCFI17:
 191              		.cfi_restore 7
 192              		.cfi_def_cfa_offset 0
 193 0016 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE2:
 197              		.section	.text.RP_Build_Frame,"ax",%progbits
 198              		.align	1
 199              		.global	RP_Build_Frame
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu fpv4-sp-d16
 205              	RP_Build_Frame:
 206              	.LFB3:
  84:Src/robotronik_protocol.c **** 
  85:Src/robotronik_protocol.c **** //==================================================
  86:Src/robotronik_protocol.c **** //           Sending functions
  87:Src/robotronik_protocol.c **** //==================================================
  88:Src/robotronik_protocol.c **** 
ARM GAS  /tmp/cca1eqPD.s 			page 6


  89:Src/robotronik_protocol.c **** int RP_Build_Frame(RP_Packet *packet, uint8_t buffer[RP_BUFFER_SIZE]){
 207              		.loc 1 89 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 32
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211              		@ link register save eliminated.
 212 0000 80B4     		push	{r7}
 213              	.LCFI18:
 214              		.cfi_def_cfa_offset 4
 215              		.cfi_offset 7, -4
 216 0002 89B0     		sub	sp, sp, #36
 217              	.LCFI19:
 218              		.cfi_def_cfa_offset 40
 219 0004 00AF     		add	r7, sp, #0
 220              	.LCFI20:
 221              		.cfi_def_cfa_register 7
 222 0006 7860     		str	r0, [r7, #4]
 223 0008 3960     		str	r1, [r7]
  90:Src/robotronik_protocol.c ****   if((packet->len <= 0) || (packet->len + 6 > RP_BUFFER_SIZE) || (packet->len > RP_MAX_PACKET_SIZE)
 224              		.loc 1 90 0
 225 000a 7B68     		ldr	r3, [r7, #4]
 226 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 227 000e 002B     		cmp	r3, #0
 228 0010 09D0     		beq	.L7
 229              		.loc 1 90 0 is_stmt 0 discriminator 1
 230 0012 7B68     		ldr	r3, [r7, #4]
 231 0014 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 232 0016 0633     		adds	r3, r3, #6
 233 0018 B3F5807F 		cmp	r3, #256
 234 001c 03DC     		bgt	.L7
 235              		.loc 1 90 0 discriminator 2
 236 001e 7B68     		ldr	r3, [r7, #4]
 237 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 238 0022 FA2B     		cmp	r3, #250
 239 0024 06D9     		bls	.L8
 240              	.L7:
  91:Src/robotronik_protocol.c ****     err =  RP_ERR_INTERNAL | RP_ERR_ILLEGAL_ARGUMENTS;
 241              		.loc 1 91 0 is_stmt 1
 242 0026 634B     		ldr	r3, .L20
 243 0028 4FF48072 		mov	r2, #256
 244 002c 1A80     		strh	r2, [r3]	@ movhi
  92:Src/robotronik_protocol.c ****     return -1;
 245              		.loc 1 92 0
 246 002e 4FF0FF33 		mov	r3, #-1
 247 0032 B8E0     		b	.L9
 248              	.L8:
  93:Src/robotronik_protocol.c ****   }
  94:Src/robotronik_protocol.c **** 
  95:Src/robotronik_protocol.c ****   uint8_t *p_buffer = buffer;
 249              		.loc 1 95 0
 250 0034 3B68     		ldr	r3, [r7]
 251 0036 FB61     		str	r3, [r7, #28]
  96:Src/robotronik_protocol.c ****   uint8_t *p_code = p_buffer++;
 252              		.loc 1 96 0
 253 0038 FB69     		ldr	r3, [r7, #28]
 254 003a 5A1C     		adds	r2, r3, #1
 255 003c FA61     		str	r2, [r7, #28]
ARM GAS  /tmp/cca1eqPD.s 			page 7


 256 003e BB61     		str	r3, [r7, #24]
  97:Src/robotronik_protocol.c ****   uint16_t crc_accum = CRC_INIT;
 257              		.loc 1 97 0
 258 0040 0023     		movs	r3, #0
 259 0042 FB82     		strh	r3, [r7, #22]	@ movhi
  98:Src/robotronik_protocol.c **** 
  99:Src/robotronik_protocol.c ****   //ID
 100:Src/robotronik_protocol.c ****   const uint8_t id = packet->id;
 260              		.loc 1 100 0
 261 0044 7B68     		ldr	r3, [r7, #4]
 262 0046 1B78     		ldrb	r3, [r3]
 263 0048 FB73     		strb	r3, [r7, #15]
 101:Src/robotronik_protocol.c ****   UPDATE_CRC(crc_accum, id);
 264              		.loc 1 101 0
 265 004a FB8A     		ldrh	r3, [r7, #22]
 266 004c 1B02     		lsls	r3, r3, #8
 267 004e 1AB2     		sxth	r2, r3
 268 0050 FB8A     		ldrh	r3, [r7, #22]
 269 0052 1B0A     		lsrs	r3, r3, #8
 270 0054 9BB2     		uxth	r3, r3
 271 0056 1946     		mov	r1, r3
 272 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 273 005a 4B40     		eors	r3, r3, r1
 274 005c DBB2     		uxtb	r3, r3
 275 005e 5649     		ldr	r1, .L20+4
 276 0060 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 277 0064 1BB2     		sxth	r3, r3
 278 0066 5340     		eors	r3, r3, r2
 279 0068 1BB2     		sxth	r3, r3
 280 006a FB82     		strh	r3, [r7, #22]	@ movhi
 102:Src/robotronik_protocol.c ****   ENCODE_BYTE(id, p_buffer, p_code);
 281              		.loc 1 102 0
 282 006c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 283 006e 002B     		cmp	r3, #0
 284 0070 0AD1     		bne	.L10
 285              		.loc 1 102 0 is_stmt 0 discriminator 1
 286 0072 FA69     		ldr	r2, [r7, #28]
 287 0074 BB69     		ldr	r3, [r7, #24]
 288 0076 D31A     		subs	r3, r2, r3
 289 0078 DAB2     		uxtb	r2, r3
 290 007a BB69     		ldr	r3, [r7, #24]
 291 007c 1A70     		strb	r2, [r3]
 292 007e FB69     		ldr	r3, [r7, #28]
 293 0080 5A1C     		adds	r2, r3, #1
 294 0082 FA61     		str	r2, [r7, #28]
 295 0084 BB61     		str	r3, [r7, #24]
 296 0086 04E0     		b	.L11
 297              	.L10:
 298              		.loc 1 102 0 discriminator 2
 299 0088 FB69     		ldr	r3, [r7, #28]
 300 008a 5A1C     		adds	r2, r3, #1
 301 008c FA61     		str	r2, [r7, #28]
 302 008e FA7B     		ldrb	r2, [r7, #15]
 303 0090 1A70     		strb	r2, [r3]
 304              	.L11:
 103:Src/robotronik_protocol.c ****     
 104:Src/robotronik_protocol.c ****   //Size (remaining bytes)
ARM GAS  /tmp/cca1eqPD.s 			page 8


 105:Src/robotronik_protocol.c ****   const uint8_t size = 4 + packet->len;
 305              		.loc 1 105 0 is_stmt 1
 306 0092 7B68     		ldr	r3, [r7, #4]
 307 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 308 0096 0433     		adds	r3, r3, #4
 309 0098 BB73     		strb	r3, [r7, #14]
 106:Src/robotronik_protocol.c ****   UPDATE_CRC(crc_accum, size);
 310              		.loc 1 106 0
 311 009a FB8A     		ldrh	r3, [r7, #22]
 312 009c 1B02     		lsls	r3, r3, #8
 313 009e 1AB2     		sxth	r2, r3
 314 00a0 FB8A     		ldrh	r3, [r7, #22]
 315 00a2 1B0A     		lsrs	r3, r3, #8
 316 00a4 9BB2     		uxth	r3, r3
 317 00a6 1946     		mov	r1, r3
 318 00a8 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 319 00aa 4B40     		eors	r3, r3, r1
 320 00ac DBB2     		uxtb	r3, r3
 321 00ae 4249     		ldr	r1, .L20+4
 322 00b0 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 323 00b4 1BB2     		sxth	r3, r3
 324 00b6 5340     		eors	r3, r3, r2
 325 00b8 1BB2     		sxth	r3, r3
 326 00ba FB82     		strh	r3, [r7, #22]	@ movhi
 107:Src/robotronik_protocol.c ****   *(p_buffer++) = size;
 327              		.loc 1 107 0
 328 00bc FB69     		ldr	r3, [r7, #28]
 329 00be 5A1C     		adds	r2, r3, #1
 330 00c0 FA61     		str	r2, [r7, #28]
 331 00c2 BA7B     		ldrb	r2, [r7, #14]
 332 00c4 1A70     		strb	r2, [r3]
 108:Src/robotronik_protocol.c ****   
 109:Src/robotronik_protocol.c ****   int i;
 110:Src/robotronik_protocol.c ****   for(i = 0; i < packet->len; i++){
 333              		.loc 1 110 0
 334 00c6 0023     		movs	r3, #0
 335 00c8 3B61     		str	r3, [r7, #16]
 336 00ca 2CE0     		b	.L12
 337              	.L15:
 338              	.LBB2:
 111:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 339              		.loc 1 111 0
 340 00cc 7A68     		ldr	r2, [r7, #4]
 341 00ce 3B69     		ldr	r3, [r7, #16]
 342 00d0 1344     		add	r3, r3, r2
 343 00d2 0233     		adds	r3, r3, #2
 344 00d4 1B78     		ldrb	r3, [r3]
 345 00d6 FB72     		strb	r3, [r7, #11]
 112:Src/robotronik_protocol.c ****     UPDATE_CRC(crc_accum, byte);
 346              		.loc 1 112 0
 347 00d8 FB8A     		ldrh	r3, [r7, #22]
 348 00da 1B02     		lsls	r3, r3, #8
 349 00dc 1AB2     		sxth	r2, r3
 350 00de FB8A     		ldrh	r3, [r7, #22]
 351 00e0 1B0A     		lsrs	r3, r3, #8
 352 00e2 9BB2     		uxth	r3, r3
 353 00e4 1946     		mov	r1, r3
ARM GAS  /tmp/cca1eqPD.s 			page 9


 354 00e6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 355 00e8 4B40     		eors	r3, r3, r1
 356 00ea DBB2     		uxtb	r3, r3
 357 00ec 3249     		ldr	r1, .L20+4
 358 00ee 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 359 00f2 1BB2     		sxth	r3, r3
 360 00f4 5340     		eors	r3, r3, r2
 361 00f6 1BB2     		sxth	r3, r3
 362 00f8 FB82     		strh	r3, [r7, #22]	@ movhi
 113:Src/robotronik_protocol.c ****     ENCODE_BYTE(byte, p_buffer, p_code);
 363              		.loc 1 113 0
 364 00fa FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 365 00fc 002B     		cmp	r3, #0
 366 00fe 0AD1     		bne	.L13
 367              		.loc 1 113 0 is_stmt 0 discriminator 1
 368 0100 FA69     		ldr	r2, [r7, #28]
 369 0102 BB69     		ldr	r3, [r7, #24]
 370 0104 D31A     		subs	r3, r2, r3
 371 0106 DAB2     		uxtb	r2, r3
 372 0108 BB69     		ldr	r3, [r7, #24]
 373 010a 1A70     		strb	r2, [r3]
 374 010c FB69     		ldr	r3, [r7, #28]
 375 010e 5A1C     		adds	r2, r3, #1
 376 0110 FA61     		str	r2, [r7, #28]
 377 0112 BB61     		str	r3, [r7, #24]
 378 0114 04E0     		b	.L14
 379              	.L13:
 380              		.loc 1 113 0 discriminator 2
 381 0116 FB69     		ldr	r3, [r7, #28]
 382 0118 5A1C     		adds	r2, r3, #1
 383 011a FA61     		str	r2, [r7, #28]
 384 011c FA7A     		ldrb	r2, [r7, #11]
 385 011e 1A70     		strb	r2, [r3]
 386              	.L14:
 387              	.LBE2:
 110:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 388              		.loc 1 110 0 is_stmt 1 discriminator 2
 389 0120 3B69     		ldr	r3, [r7, #16]
 390 0122 0133     		adds	r3, r3, #1
 391 0124 3B61     		str	r3, [r7, #16]
 392              	.L12:
 110:Src/robotronik_protocol.c ****     const uint8_t byte = packet->data[i];
 393              		.loc 1 110 0 is_stmt 0 discriminator 1
 394 0126 7B68     		ldr	r3, [r7, #4]
 395 0128 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 396 012a 1A46     		mov	r2, r3
 397 012c 3B69     		ldr	r3, [r7, #16]
 398 012e 9342     		cmp	r3, r2
 399 0130 CCDB     		blt	.L15
 114:Src/robotronik_protocol.c ****   }
 115:Src/robotronik_protocol.c ****   
 116:Src/robotronik_protocol.c ****   //CRC-16
 117:Src/robotronik_protocol.c ****   uint8_t crc_low = crc_accum & 0xFF;
 400              		.loc 1 117 0 is_stmt 1
 401 0132 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 402 0134 7B73     		strb	r3, [r7, #13]
 118:Src/robotronik_protocol.c ****   uint8_t crc_high = crc_accum >> 8;
ARM GAS  /tmp/cca1eqPD.s 			page 10


 403              		.loc 1 118 0
 404 0136 FB8A     		ldrh	r3, [r7, #22]
 405 0138 1B0A     		lsrs	r3, r3, #8
 406 013a 9BB2     		uxth	r3, r3
 407 013c 3B73     		strb	r3, [r7, #12]
 119:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_low, p_buffer, p_code);
 408              		.loc 1 119 0
 409 013e 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 410 0140 002B     		cmp	r3, #0
 411 0142 0AD1     		bne	.L16
 412              		.loc 1 119 0 is_stmt 0 discriminator 1
 413 0144 FA69     		ldr	r2, [r7, #28]
 414 0146 BB69     		ldr	r3, [r7, #24]
 415 0148 D31A     		subs	r3, r2, r3
 416 014a DAB2     		uxtb	r2, r3
 417 014c BB69     		ldr	r3, [r7, #24]
 418 014e 1A70     		strb	r2, [r3]
 419 0150 FB69     		ldr	r3, [r7, #28]
 420 0152 5A1C     		adds	r2, r3, #1
 421 0154 FA61     		str	r2, [r7, #28]
 422 0156 BB61     		str	r3, [r7, #24]
 423 0158 04E0     		b	.L17
 424              	.L16:
 425              		.loc 1 119 0 discriminator 2
 426 015a FB69     		ldr	r3, [r7, #28]
 427 015c 5A1C     		adds	r2, r3, #1
 428 015e FA61     		str	r2, [r7, #28]
 429 0160 7A7B     		ldrb	r2, [r7, #13]
 430 0162 1A70     		strb	r2, [r3]
 431              	.L17:
 120:Src/robotronik_protocol.c ****   ENCODE_BYTE(crc_high, p_buffer, p_code);
 432              		.loc 1 120 0 is_stmt 1
 433 0164 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 434 0166 002B     		cmp	r3, #0
 435 0168 0AD1     		bne	.L18
 436              		.loc 1 120 0 is_stmt 0 discriminator 1
 437 016a FA69     		ldr	r2, [r7, #28]
 438 016c BB69     		ldr	r3, [r7, #24]
 439 016e D31A     		subs	r3, r2, r3
 440 0170 DAB2     		uxtb	r2, r3
 441 0172 BB69     		ldr	r3, [r7, #24]
 442 0174 1A70     		strb	r2, [r3]
 443 0176 FB69     		ldr	r3, [r7, #28]
 444 0178 5A1C     		adds	r2, r3, #1
 445 017a FA61     		str	r2, [r7, #28]
 446 017c BB61     		str	r3, [r7, #24]
 447 017e 04E0     		b	.L19
 448              	.L18:
 449              		.loc 1 120 0 discriminator 2
 450 0180 FB69     		ldr	r3, [r7, #28]
 451 0182 5A1C     		adds	r2, r3, #1
 452 0184 FA61     		str	r2, [r7, #28]
 453 0186 3A7B     		ldrb	r2, [r7, #12]
 454 0188 1A70     		strb	r2, [r3]
 455              	.L19:
 121:Src/robotronik_protocol.c ****   
 122:Src/robotronik_protocol.c ****   //RP_EOF
ARM GAS  /tmp/cca1eqPD.s 			page 11


 123:Src/robotronik_protocol.c ****   *p_code = p_buffer - p_code;
 456              		.loc 1 123 0 is_stmt 1
 457 018a FA69     		ldr	r2, [r7, #28]
 458 018c BB69     		ldr	r3, [r7, #24]
 459 018e D31A     		subs	r3, r2, r3
 460 0190 DAB2     		uxtb	r2, r3
 461 0192 BB69     		ldr	r3, [r7, #24]
 462 0194 1A70     		strb	r2, [r3]
 124:Src/robotronik_protocol.c ****   *(p_buffer++) = RP_EOF;
 463              		.loc 1 124 0
 464 0196 FB69     		ldr	r3, [r7, #28]
 465 0198 5A1C     		adds	r2, r3, #1
 466 019a FA61     		str	r2, [r7, #28]
 467 019c 0022     		movs	r2, #0
 468 019e 1A70     		strb	r2, [r3]
 125:Src/robotronik_protocol.c **** 
 126:Src/robotronik_protocol.c ****   return p_buffer - buffer;
 469              		.loc 1 126 0
 470 01a0 FA69     		ldr	r2, [r7, #28]
 471 01a2 3B68     		ldr	r3, [r7]
 472 01a4 D31A     		subs	r3, r2, r3
 473              	.L9:
 127:Src/robotronik_protocol.c **** }
 474              		.loc 1 127 0
 475 01a6 1846     		mov	r0, r3
 476 01a8 2437     		adds	r7, r7, #36
 477              	.LCFI21:
 478              		.cfi_def_cfa_offset 4
 479 01aa BD46     		mov	sp, r7
 480              	.LCFI22:
 481              		.cfi_def_cfa_register 13
 482              		@ sp needed
 483 01ac 5DF8047B 		ldr	r7, [sp], #4
 484              	.LCFI23:
 485              		.cfi_restore 7
 486              		.cfi_def_cfa_offset 0
 487 01b0 7047     		bx	lr
 488              	.L21:
 489 01b2 00BF     		.align	2
 490              	.L20:
 491 01b4 00000000 		.word	err
 492 01b8 00000000 		.word	crc_table
 493              		.cfi_endproc
 494              	.LFE3:
 496              		.section	.text.RP_Sync,"ax",%progbits
 497              		.align	1
 498              		.global	RP_Sync
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu fpv4-sp-d16
 504              	RP_Sync:
 505              	.LFB4:
 128:Src/robotronik_protocol.c **** 
 129:Src/robotronik_protocol.c **** int RP_Sync(RP_Interface *interface, uint32_t timeout){
 506              		.loc 1 129 0
 507              		.cfi_startproc
ARM GAS  /tmp/cca1eqPD.s 			page 12


 508              		@ args = 0, pretend = 0, frame = 16
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510 0000 90B5     		push	{r4, r7, lr}
 511              	.LCFI24:
 512              		.cfi_def_cfa_offset 12
 513              		.cfi_offset 4, -12
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 85B0     		sub	sp, sp, #20
 517              	.LCFI25:
 518              		.cfi_def_cfa_offset 32
 519 0004 00AF     		add	r7, sp, #0
 520              	.LCFI26:
 521              		.cfi_def_cfa_register 7
 522 0006 7860     		str	r0, [r7, #4]
 523 0008 3960     		str	r1, [r7]
 130:Src/robotronik_protocol.c ****   uint8_t byte = RP_EOF;
 524              		.loc 1 130 0
 525 000a 0023     		movs	r3, #0
 526 000c FB73     		strb	r3, [r7, #15]
 131:Src/robotronik_protocol.c **** 
 132:Src/robotronik_protocol.c ****   if(interface->send(interface->link_handler, &byte, 1, timeout) != 0){
 527              		.loc 1 132 0
 528 000e 7B68     		ldr	r3, [r7, #4]
 529 0010 1C68     		ldr	r4, [r3]
 530 0012 7B68     		ldr	r3, [r7, #4]
 531 0014 D3F81804 		ldr	r0, [r3, #1048]
 532 0018 07F10F01 		add	r1, r7, #15
 533 001c 3B68     		ldr	r3, [r7]
 534 001e 0122     		movs	r2, #1
 535 0020 A047     		blx	r4
 536              	.LVL0:
 537 0022 0346     		mov	r3, r0
 538 0024 002B     		cmp	r3, #0
 539 0026 06D0     		beq	.L23
 133:Src/robotronik_protocol.c ****     err = RP_ERR_LINK | RP_ERR_TIMEOUT;
 540              		.loc 1 133 0
 541 0028 054B     		ldr	r3, .L26
 542 002a 4FF40072 		mov	r2, #512
 543 002e 1A80     		strh	r2, [r3]	@ movhi
 134:Src/robotronik_protocol.c ****     return -1;
 544              		.loc 1 134 0
 545 0030 4FF0FF33 		mov	r3, #-1
 546 0034 00E0     		b	.L25
 547              	.L23:
 135:Src/robotronik_protocol.c ****   }
 136:Src/robotronik_protocol.c ****   
 137:Src/robotronik_protocol.c ****   return 0;
 548              		.loc 1 137 0
 549 0036 0023     		movs	r3, #0
 550              	.L25:
 138:Src/robotronik_protocol.c **** }
 551              		.loc 1 138 0 discriminator 1
 552 0038 1846     		mov	r0, r3
 553 003a 1437     		adds	r7, r7, #20
 554              	.LCFI27:
 555              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cca1eqPD.s 			page 13


 556 003c BD46     		mov	sp, r7
 557              	.LCFI28:
 558              		.cfi_def_cfa_register 13
 559              		@ sp needed
 560 003e 90BD     		pop	{r4, r7, pc}
 561              	.L27:
 562              		.align	2
 563              	.L26:
 564 0040 00000000 		.word	err
 565              		.cfi_endproc
 566              	.LFE4:
 568              		.section	.text.RP_Send,"ax",%progbits
 569              		.align	1
 570              		.global	RP_Send
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu fpv4-sp-d16
 576              	RP_Send:
 577              	.LFB5:
 139:Src/robotronik_protocol.c **** 
 140:Src/robotronik_protocol.c **** int RP_Send(RP_Interface *interface, RP_Packet *packet, uint32_t timeout){
 578              		.loc 1 140 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 24
 581              		@ frame_needed = 1, uses_anonymous_args = 0
 582 0000 90B5     		push	{r4, r7, lr}
 583              	.LCFI29:
 584              		.cfi_def_cfa_offset 12
 585              		.cfi_offset 4, -12
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 87B0     		sub	sp, sp, #28
 589              	.LCFI30:
 590              		.cfi_def_cfa_offset 40
 591 0004 00AF     		add	r7, sp, #0
 592              	.LCFI31:
 593              		.cfi_def_cfa_register 7
 594 0006 F860     		str	r0, [r7, #12]
 595 0008 B960     		str	r1, [r7, #8]
 596 000a 7A60     		str	r2, [r7, #4]
 141:Src/robotronik_protocol.c ****   int len = RP_Build_Frame(packet, interface->buffer_out);
 597              		.loc 1 141 0
 598 000c FB68     		ldr	r3, [r7, #12]
 599 000e 03F54073 		add	r3, r3, #768
 600 0012 1946     		mov	r1, r3
 601 0014 B868     		ldr	r0, [r7, #8]
 602 0016 FFF7FEFF 		bl	RP_Build_Frame
 603 001a 7861     		str	r0, [r7, #20]
 142:Src/robotronik_protocol.c **** 
 143:Src/robotronik_protocol.c ****   if(len == -1){
 604              		.loc 1 143 0
 605 001c 7B69     		ldr	r3, [r7, #20]
 606 001e B3F1FF3F 		cmp	r3, #-1
 607 0022 02D1     		bne	.L29
 144:Src/robotronik_protocol.c ****     return -1;
 608              		.loc 1 144 0
ARM GAS  /tmp/cca1eqPD.s 			page 14


 609 0024 4FF0FF33 		mov	r3, #-1
 610 0028 16E0     		b	.L30
 611              	.L29:
 145:Src/robotronik_protocol.c ****   }
 146:Src/robotronik_protocol.c **** 
 147:Src/robotronik_protocol.c ****   if(interface->send(interface->link_handler, interface->buffer_out, len, timeout) != 0){
 612              		.loc 1 147 0
 613 002a FB68     		ldr	r3, [r7, #12]
 614 002c 1C68     		ldr	r4, [r3]
 615 002e FB68     		ldr	r3, [r7, #12]
 616 0030 D3F81804 		ldr	r0, [r3, #1048]
 617 0034 FB68     		ldr	r3, [r7, #12]
 618 0036 03F54071 		add	r1, r3, #768
 619 003a 7B69     		ldr	r3, [r7, #20]
 620 003c 9AB2     		uxth	r2, r3
 621 003e 7B68     		ldr	r3, [r7, #4]
 622 0040 A047     		blx	r4
 623              	.LVL1:
 624 0042 0346     		mov	r3, r0
 625 0044 002B     		cmp	r3, #0
 626 0046 06D0     		beq	.L31
 148:Src/robotronik_protocol.c ****     err = RP_ERR_LINK | RP_ERR_TIMEOUT;
 627              		.loc 1 148 0
 628 0048 054B     		ldr	r3, .L32
 629 004a 4FF40072 		mov	r2, #512
 630 004e 1A80     		strh	r2, [r3]	@ movhi
 149:Src/robotronik_protocol.c ****     return -1;
 631              		.loc 1 149 0
 632 0050 4FF0FF33 		mov	r3, #-1
 633 0054 00E0     		b	.L30
 634              	.L31:
 150:Src/robotronik_protocol.c ****   }
 151:Src/robotronik_protocol.c ****   
 152:Src/robotronik_protocol.c ****   return 0;
 635              		.loc 1 152 0
 636 0056 0023     		movs	r3, #0
 637              	.L30:
 153:Src/robotronik_protocol.c **** }
 638              		.loc 1 153 0
 639 0058 1846     		mov	r0, r3
 640 005a 1C37     		adds	r7, r7, #28
 641              	.LCFI32:
 642              		.cfi_def_cfa_offset 12
 643 005c BD46     		mov	sp, r7
 644              	.LCFI33:
 645              		.cfi_def_cfa_register 13
 646              		@ sp needed
 647 005e 90BD     		pop	{r4, r7, pc}
 648              	.L33:
 649              		.align	2
 650              	.L32:
 651 0060 00000000 		.word	err
 652              		.cfi_endproc
 653              	.LFE5:
 655              		.section	.text.RP_Process_Data,"ax",%progbits
 656              		.align	1
 657              		.global	RP_Process_Data
ARM GAS  /tmp/cca1eqPD.s 			page 15


 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 661              		.fpu fpv4-sp-d16
 663              	RP_Process_Data:
 664              	.LFB6:
 154:Src/robotronik_protocol.c **** 
 155:Src/robotronik_protocol.c **** //==================================================
 156:Src/robotronik_protocol.c **** //           Receiving functions
 157:Src/robotronik_protocol.c **** //==================================================
 158:Src/robotronik_protocol.c **** 
 159:Src/robotronik_protocol.c **** void RP_Process_Data(RP_Interface *interface, uint8_t *data, uint16_t len){
 665              		.loc 1 159 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 16
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669 0000 80B5     		push	{r7, lr}
 670              	.LCFI34:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 7, -8
 673              		.cfi_offset 14, -4
 674 0002 84B0     		sub	sp, sp, #16
 675              	.LCFI35:
 676              		.cfi_def_cfa_offset 24
 677 0004 00AF     		add	r7, sp, #0
 678              	.LCFI36:
 679              		.cfi_def_cfa_register 7
 680 0006 F860     		str	r0, [r7, #12]
 681 0008 B960     		str	r1, [r7, #8]
 682 000a 1346     		mov	r3, r2
 683 000c FB80     		strh	r3, [r7, #6]	@ movhi
 160:Src/robotronik_protocol.c ****   interface->p_in = data;
 684              		.loc 1 160 0
 685 000e FB68     		ldr	r3, [r7, #12]
 686 0010 BA68     		ldr	r2, [r7, #8]
 687 0012 C3F80824 		str	r2, [r3, #1032]
 161:Src/robotronik_protocol.c **** 
 162:Src/robotronik_protocol.c ****   while(len--){
 688              		.loc 1 162 0
 689 0016 04E0     		b	.L35
 690              	.L36:
 163:Src/robotronik_protocol.c ****     interface->update_state(interface);
 691              		.loc 1 163 0
 692 0018 FB68     		ldr	r3, [r7, #12]
 693 001a D3F80034 		ldr	r3, [r3, #1024]
 694 001e F868     		ldr	r0, [r7, #12]
 695 0020 9847     		blx	r3
 696              	.LVL2:
 697              	.L35:
 162:Src/robotronik_protocol.c ****     interface->update_state(interface);
 698              		.loc 1 162 0
 699 0022 FB88     		ldrh	r3, [r7, #6]
 700 0024 5A1E     		subs	r2, r3, #1
 701 0026 FA80     		strh	r2, [r7, #6]	@ movhi
 702 0028 002B     		cmp	r3, #0
 703 002a F5D1     		bne	.L36
 164:Src/robotronik_protocol.c ****   }
ARM GAS  /tmp/cca1eqPD.s 			page 16


 165:Src/robotronik_protocol.c **** }
 704              		.loc 1 165 0
 705 002c 00BF     		nop
 706 002e 1037     		adds	r7, r7, #16
 707              	.LCFI37:
 708              		.cfi_def_cfa_offset 8
 709 0030 BD46     		mov	sp, r7
 710              	.LCFI38:
 711              		.cfi_def_cfa_register 13
 712              		@ sp needed
 713 0032 80BD     		pop	{r7, pc}
 714              		.cfi_endproc
 715              	.LFE6:
 717              		.section	.text.RP_Wait_Packet,"ax",%progbits
 718              		.align	1
 719              		.global	RP_Wait_Packet
 720              		.syntax unified
 721              		.thumb
 722              		.thumb_func
 723              		.fpu fpv4-sp-d16
 725              	RP_Wait_Packet:
 726              	.LFB7:
 166:Src/robotronik_protocol.c **** 
 167:Src/robotronik_protocol.c **** int RP_Wait_Packet(RP_Interface *interface, uint32_t timeout_ms){
 727              		.loc 1 167 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 16
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731 0000 80B5     		push	{r7, lr}
 732              	.LCFI39:
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 7, -8
 735              		.cfi_offset 14, -4
 736 0002 84B0     		sub	sp, sp, #16
 737              	.LCFI40:
 738              		.cfi_def_cfa_offset 24
 739 0004 00AF     		add	r7, sp, #0
 740              	.LCFI41:
 741              		.cfi_def_cfa_register 7
 742 0006 7860     		str	r0, [r7, #4]
 743 0008 3960     		str	r1, [r7]
 168:Src/robotronik_protocol.c ****   int start = interface->get_tick();
 744              		.loc 1 168 0
 745 000a 7B68     		ldr	r3, [r7, #4]
 746 000c 5B68     		ldr	r3, [r3, #4]
 747 000e 9847     		blx	r3
 748              	.LVL3:
 749 0010 0346     		mov	r3, r0
 750 0012 FB60     		str	r3, [r7, #12]
 169:Src/robotronik_protocol.c ****   
 170:Src/robotronik_protocol.c ****   //interface->received = false;
 171:Src/robotronik_protocol.c ****   while(!interface->received && (interface->get_tick() - start < timeout_ms));
 751              		.loc 1 171 0
 752 0014 00BF     		nop
 753              	.L39:
 754              		.loc 1 171 0 is_stmt 0 discriminator 2
 755 0016 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca1eqPD.s 			page 17


 756 0018 93F81234 		ldrb	r3, [r3, #1042]
 757 001c DBB2     		uxtb	r3, r3
 758 001e 83F00103 		eor	r3, r3, #1
 759 0022 DBB2     		uxtb	r3, r3
 760 0024 002B     		cmp	r3, #0
 761 0026 08D0     		beq	.L38
 762              		.loc 1 171 0 discriminator 1
 763 0028 7B68     		ldr	r3, [r7, #4]
 764 002a 5B68     		ldr	r3, [r3, #4]
 765 002c 9847     		blx	r3
 766              	.LVL4:
 767 002e 0246     		mov	r2, r0
 768 0030 FB68     		ldr	r3, [r7, #12]
 769 0032 D31A     		subs	r3, r2, r3
 770 0034 3A68     		ldr	r2, [r7]
 771 0036 9A42     		cmp	r2, r3
 772 0038 EDD8     		bhi	.L39
 773              	.L38:
 172:Src/robotronik_protocol.c ****   
 173:Src/robotronik_protocol.c ****   if(!interface->received){
 774              		.loc 1 173 0 is_stmt 1
 775 003a 7B68     		ldr	r3, [r7, #4]
 776 003c 93F81234 		ldrb	r3, [r3, #1042]
 777 0040 DBB2     		uxtb	r3, r3
 778 0042 83F00103 		eor	r3, r3, #1
 779 0046 DBB2     		uxtb	r3, r3
 780 0048 002B     		cmp	r3, #0
 781 004a 02D0     		beq	.L40
 174:Src/robotronik_protocol.c ****     return -1;
 782              		.loc 1 174 0
 783 004c 4FF0FF33 		mov	r3, #-1
 784 0050 04E0     		b	.L41
 785              	.L40:
 175:Src/robotronik_protocol.c ****   }
 176:Src/robotronik_protocol.c ****   
 177:Src/robotronik_protocol.c ****   interface->received = false;
 786              		.loc 1 177 0
 787 0052 7B68     		ldr	r3, [r7, #4]
 788 0054 0022     		movs	r2, #0
 789 0056 83F81224 		strb	r2, [r3, #1042]
 178:Src/robotronik_protocol.c ****   
 179:Src/robotronik_protocol.c ****   return 0;
 790              		.loc 1 179 0
 791 005a 0023     		movs	r3, #0
 792              	.L41:
 180:Src/robotronik_protocol.c **** }
 793              		.loc 1 180 0
 794 005c 1846     		mov	r0, r3
 795 005e 1037     		adds	r7, r7, #16
 796              	.LCFI42:
 797              		.cfi_def_cfa_offset 8
 798 0060 BD46     		mov	sp, r7
 799              	.LCFI43:
 800              		.cfi_def_cfa_register 13
 801              		@ sp needed
 802 0062 80BD     		pop	{r7, pc}
 803              		.cfi_endproc
ARM GAS  /tmp/cca1eqPD.s 			page 18


 804              	.LFE7:
 806              		.section	.text.RP_FSM_INIT,"ax",%progbits
 807              		.align	1
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	RP_FSM_INIT:
 814              	.LFB8:
 181:Src/robotronik_protocol.c **** 
 182:Src/robotronik_protocol.c **** #define FSM_UPDATE(fsm,state_function) fsm->update_state = state_function
 183:Src/robotronik_protocol.c **** 
 184:Src/robotronik_protocol.c **** #define FSM_GET_BYTE(fsm) uint8_t byte = *(fsm->p_in++);
 185:Src/robotronik_protocol.c **** 
 186:Src/robotronik_protocol.c **** #define FSM_BYTE byte
 187:Src/robotronik_protocol.c **** 
 188:Src/robotronik_protocol.c **** #define FSM_RESET(fsm) {						\
 189:Src/robotronik_protocol.c ****     FSM_UPDATE(fsm, RP_FSM_INIT);					\
 190:Src/robotronik_protocol.c ****     fsm->crc_accum = 0;							\
 191:Src/robotronik_protocol.c ****     fsm->p_out = fsm->r_packet.data;					\
 192:Src/robotronik_protocol.c ****     return;								\
 193:Src/robotronik_protocol.c ****   }
 194:Src/robotronik_protocol.c **** 
 195:Src/robotronik_protocol.c **** #define FSM_ERR(fsm, err_code) {		\
 196:Src/robotronik_protocol.c ****   err = err_code;				\
 197:Src/robotronik_protocol.c ****   RP_Error_Handler(fsm, err);			\
 198:Src/robotronik_protocol.c ****   FSM_RESET(fsm);				\
 199:Src/robotronik_protocol.c ****   }
 200:Src/robotronik_protocol.c **** 
 201:Src/robotronik_protocol.c **** #define FSM_CHECK_ERR(fsm, err_code) {		\
 202:Src/robotronik_protocol.c ****     if(FSM_BYTE == RP_EOF){			\
 203:Src/robotronik_protocol.c ****       FSM_ERR(fsm, err_code);			\
 204:Src/robotronik_protocol.c ****     }						\
 205:Src/robotronik_protocol.c ****   }
 206:Src/robotronik_protocol.c **** 
 207:Src/robotronik_protocol.c **** #define FSM_CHECK_EOF(fsm) {			\
 208:Src/robotronik_protocol.c ****     if(FSM_BYTE == RP_EOF) {FSM_RESET(fsm);}	\
 209:Src/robotronik_protocol.c ****   }
 210:Src/robotronik_protocol.c **** /**
 211:Src/robotronik_protocol.c ****  * Reinit the FSM when EOF is reached.
 212:Src/robotronik_protocol.c ****  * Set the 'valid' flag of FSM
 213:Src/robotronik_protocol.c ****  * and the error code.
 214:Src/robotronik_protocol.c ****  */
 215:Src/robotronik_protocol.c **** 
 216:Src/robotronik_protocol.c **** #define FSM_DECODE_BYTE(fsm, byte)			\
 217:Src/robotronik_protocol.c ****   (((--fsm->bs_count) == 0)?				\
 218:Src/robotronik_protocol.c ****    (fsm->bs_count = byte, (uint8_t) RP_EOF):		\
 219:Src/robotronik_protocol.c ****    (byte))
 220:Src/robotronik_protocol.c **** /**
 221:Src/robotronik_protocol.c ****  * Update the COBS counter and decode the current byte. This macro can
 222:Src/robotronik_protocol.c ****  * be used once and only once in an fsm state. If the macro is not
 223:Src/robotronik_protocol.c ****  * used and the FSM is not reset, bs_count MUST be updated manually.
 224:Src/robotronik_protocol.c ****  */
 225:Src/robotronik_protocol.c **** 
 226:Src/robotronik_protocol.c **** static void RP_FSM_INIT(RP_Interface *interface){
 815              		.loc 1 226 0
 816              		.cfi_startproc
ARM GAS  /tmp/cca1eqPD.s 			page 19


 817              		@ args = 0, pretend = 0, frame = 16
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820 0000 80B4     		push	{r7}
 821              	.LCFI44:
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 85B0     		sub	sp, sp, #20
 825              	.LCFI45:
 826              		.cfi_def_cfa_offset 24
 827 0004 00AF     		add	r7, sp, #0
 828              	.LCFI46:
 829              		.cfi_def_cfa_register 7
 830 0006 7860     		str	r0, [r7, #4]
 227:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 831              		.loc 1 227 0
 832 0008 7B68     		ldr	r3, [r7, #4]
 833 000a D3F80834 		ldr	r3, [r3, #1032]
 834 000e 591C     		adds	r1, r3, #1
 835 0010 7A68     		ldr	r2, [r7, #4]
 836 0012 C2F80814 		str	r1, [r2, #1032]
 837 0016 1B78     		ldrb	r3, [r3]
 838 0018 FB73     		strb	r3, [r7, #15]
 228:Src/robotronik_protocol.c ****   /* 
 229:Src/robotronik_protocol.c ****    * If current byte is EOF, the fsm is reset but no error is set :
 230:Src/robotronik_protocol.c ****    * it's just a blank frame that can be used for synchronisation
 231:Src/robotronik_protocol.c ****    * purpose.
 232:Src/robotronik_protocol.c ****    */
 233:Src/robotronik_protocol.c ****   FSM_CHECK_EOF(interface);
 839              		.loc 1 233 0
 840 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 841 001c 002B     		cmp	r3, #0
 842 001e 0ED1     		bne	.L43
 843              		.loc 1 233 0 is_stmt 0 discriminator 1
 844 0020 7B68     		ldr	r3, [r7, #4]
 845 0022 0D4A     		ldr	r2, .L45
 846 0024 C3F80024 		str	r2, [r3, #1024]
 847 0028 7B68     		ldr	r3, [r7, #4]
 848 002a 0022     		movs	r2, #0
 849 002c A3F81024 		strh	r2, [r3, #1040]	@ movhi
 850 0030 7B68     		ldr	r3, [r7, #4]
 851 0032 03F58572 		add	r2, r3, #266
 852 0036 7B68     		ldr	r3, [r7, #4]
 853 0038 C3F80C24 		str	r2, [r3, #1036]
 854 003c 07E0     		b	.L42
 855              	.L43:
 234:Src/robotronik_protocol.c **** 
 235:Src/robotronik_protocol.c ****   /*
 236:Src/robotronik_protocol.c ****    * The first byte initializes the COBS algorithm.
 237:Src/robotronik_protocol.c ****    */
 238:Src/robotronik_protocol.c ****   interface->bs_count = FSM_BYTE;
 856              		.loc 1 238 0 is_stmt 1
 857 003e 7B68     		ldr	r3, [r7, #4]
 858 0040 FA7B     		ldrb	r2, [r7, #15]
 859 0042 83F80424 		strb	r2, [r3, #1028]
 239:Src/robotronik_protocol.c **** 
 240:Src/robotronik_protocol.c ****   FSM_UPDATE(interface, RP_FSM_ID);
ARM GAS  /tmp/cca1eqPD.s 			page 20


 860              		.loc 1 240 0
 861 0046 7B68     		ldr	r3, [r7, #4]
 862 0048 044A     		ldr	r2, .L45+4
 863 004a C3F80024 		str	r2, [r3, #1024]
 864              	.L42:
 241:Src/robotronik_protocol.c **** }
 865              		.loc 1 241 0
 866 004e 1437     		adds	r7, r7, #20
 867              	.LCFI47:
 868              		.cfi_def_cfa_offset 4
 869 0050 BD46     		mov	sp, r7
 870              	.LCFI48:
 871              		.cfi_def_cfa_register 13
 872              		@ sp needed
 873 0052 5DF8047B 		ldr	r7, [sp], #4
 874              	.LCFI49:
 875              		.cfi_restore 7
 876              		.cfi_def_cfa_offset 0
 877 0056 7047     		bx	lr
 878              	.L46:
 879              		.align	2
 880              	.L45:
 881 0058 00000000 		.word	RP_FSM_INIT
 882 005c 00000000 		.word	RP_FSM_ID
 883              		.cfi_endproc
 884              	.LFE8:
 886              		.section	.text.RP_FSM_ID,"ax",%progbits
 887              		.align	1
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 891              		.fpu fpv4-sp-d16
 893              	RP_FSM_ID:
 894              	.LFB9:
 242:Src/robotronik_protocol.c **** 
 243:Src/robotronik_protocol.c **** static void RP_FSM_ID(RP_Interface *interface){
 895              		.loc 1 243 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 16
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              	.LCFI50:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 7, -8
 903              		.cfi_offset 14, -4
 904 0002 84B0     		sub	sp, sp, #16
 905              	.LCFI51:
 906              		.cfi_def_cfa_offset 24
 907 0004 00AF     		add	r7, sp, #0
 908              	.LCFI52:
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 244:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 911              		.loc 1 244 0
 912 0008 7B68     		ldr	r3, [r7, #4]
 913 000a D3F80834 		ldr	r3, [r3, #1032]
 914 000e 591C     		adds	r1, r3, #1
ARM GAS  /tmp/cca1eqPD.s 			page 21


 915 0010 7A68     		ldr	r2, [r7, #4]
 916 0012 C2F80814 		str	r1, [r2, #1032]
 917 0016 1B78     		ldrb	r3, [r3]
 918 0018 FB73     		strb	r3, [r7, #15]
 245:Src/robotronik_protocol.c **** 
 246:Src/robotronik_protocol.c ****   /*
 247:Src/robotronik_protocol.c ****    * From this byte, reaching an EOF flag before the END state is
 248:Src/robotronik_protocol.c ****    * unexpected and will trigger an error.
 249:Src/robotronik_protocol.c ****    */
 250:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 919              		.loc 1 250 0
 920 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 921 001c 002B     		cmp	r3, #0
 922 001e 18D1     		bne	.L48
 923              		.loc 1 250 0 is_stmt 0 discriminator 1
 924 0020 284B     		ldr	r3, .L52
 925 0022 40F20122 		movw	r2, #513
 926 0026 1A80     		strh	r2, [r3]	@ movhi
 927 0028 264B     		ldr	r3, .L52
 928 002a 1B88     		ldrh	r3, [r3]
 929 002c 1946     		mov	r1, r3
 930 002e 7868     		ldr	r0, [r7, #4]
 931 0030 FFF7FEFF 		bl	RP_Error_Handler
 932 0034 7B68     		ldr	r3, [r7, #4]
 933 0036 244A     		ldr	r2, .L52+4
 934 0038 C3F80024 		str	r2, [r3, #1024]
 935 003c 7B68     		ldr	r3, [r7, #4]
 936 003e 0022     		movs	r2, #0
 937 0040 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 938 0044 7B68     		ldr	r3, [r7, #4]
 939 0046 03F58572 		add	r2, r3, #266
 940 004a 7B68     		ldr	r3, [r7, #4]
 941 004c C3F80C24 		str	r2, [r3, #1036]
 942 0050 34E0     		b	.L47
 943              	.L48:
 251:Src/robotronik_protocol.c **** 
 252:Src/robotronik_protocol.c ****   /*
 253:Src/robotronik_protocol.c ****    * Note that the CRC is computed AFTER the byte is decoded. Indeed,
 254:Src/robotronik_protocol.c ****    * the CRC concerns the useful data.
 255:Src/robotronik_protocol.c ****    */
 256:Src/robotronik_protocol.c ****   FSM_BYTE = FSM_DECODE_BYTE(interface, FSM_BYTE);
 944              		.loc 1 256 0 is_stmt 1
 945 0052 7B68     		ldr	r3, [r7, #4]
 946 0054 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 947 0058 013B     		subs	r3, r3, #1
 948 005a DAB2     		uxtb	r2, r3
 949 005c 7B68     		ldr	r3, [r7, #4]
 950 005e 83F80424 		strb	r2, [r3, #1028]
 951 0062 7B68     		ldr	r3, [r7, #4]
 952 0064 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 953 0068 002B     		cmp	r3, #0
 954 006a 05D1     		bne	.L50
 955              		.loc 1 256 0 is_stmt 0 discriminator 1
 956 006c 7B68     		ldr	r3, [r7, #4]
 957 006e FA7B     		ldrb	r2, [r7, #15]
 958 0070 83F80424 		strb	r2, [r3, #1028]
 959 0074 0023     		movs	r3, #0
ARM GAS  /tmp/cca1eqPD.s 			page 22


 960 0076 00E0     		b	.L51
 961              	.L50:
 962              		.loc 1 256 0 discriminator 2
 963 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 964              	.L51:
 965              		.loc 1 256 0 discriminator 4
 966 007a FB73     		strb	r3, [r7, #15]
 257:Src/robotronik_protocol.c ****   interface->r_packet.id = FSM_BYTE;
 967              		.loc 1 257 0 is_stmt 1 discriminator 4
 968 007c 7B68     		ldr	r3, [r7, #4]
 969 007e FA7B     		ldrb	r2, [r7, #15]
 970 0080 83F80821 		strb	r2, [r3, #264]
 258:Src/robotronik_protocol.c ****   UPDATE_CRC(interface->crc_accum, FSM_BYTE);
 971              		.loc 1 258 0 discriminator 4
 972 0084 7B68     		ldr	r3, [r7, #4]
 973 0086 B3F81034 		ldrh	r3, [r3, #1040]
 974 008a 1B02     		lsls	r3, r3, #8
 975 008c 1AB2     		sxth	r2, r3
 976 008e 7B68     		ldr	r3, [r7, #4]
 977 0090 B3F81034 		ldrh	r3, [r3, #1040]
 978 0094 1B0A     		lsrs	r3, r3, #8
 979 0096 9BB2     		uxth	r3, r3
 980 0098 1946     		mov	r1, r3
 981 009a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 982 009c 4B40     		eors	r3, r3, r1
 983 009e DBB2     		uxtb	r3, r3
 984 00a0 0A49     		ldr	r1, .L52+8
 985 00a2 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 986 00a6 1BB2     		sxth	r3, r3
 987 00a8 5340     		eors	r3, r3, r2
 988 00aa 1BB2     		sxth	r3, r3
 989 00ac 9AB2     		uxth	r2, r3
 990 00ae 7B68     		ldr	r3, [r7, #4]
 991 00b0 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 259:Src/robotronik_protocol.c **** 
 260:Src/robotronik_protocol.c ****   FSM_UPDATE(interface, RP_FSM_SIZE);
 992              		.loc 1 260 0 discriminator 4
 993 00b4 7B68     		ldr	r3, [r7, #4]
 994 00b6 064A     		ldr	r2, .L52+12
 995 00b8 C3F80024 		str	r2, [r3, #1024]
 996              	.L47:
 261:Src/robotronik_protocol.c **** }
 997              		.loc 1 261 0
 998 00bc 1037     		adds	r7, r7, #16
 999              	.LCFI53:
 1000              		.cfi_def_cfa_offset 8
 1001 00be BD46     		mov	sp, r7
 1002              	.LCFI54:
 1003              		.cfi_def_cfa_register 13
 1004              		@ sp needed
 1005 00c0 80BD     		pop	{r7, pc}
 1006              	.L53:
 1007 00c2 00BF     		.align	2
 1008              	.L52:
 1009 00c4 00000000 		.word	err
 1010 00c8 00000000 		.word	RP_FSM_INIT
 1011 00cc 00000000 		.word	crc_table
ARM GAS  /tmp/cca1eqPD.s 			page 23


 1012 00d0 00000000 		.word	RP_FSM_SIZE
 1013              		.cfi_endproc
 1014              	.LFE9:
 1016              		.section	.text.RP_FSM_SIZE,"ax",%progbits
 1017              		.align	1
 1018              		.syntax unified
 1019              		.thumb
 1020              		.thumb_func
 1021              		.fpu fpv4-sp-d16
 1023              	RP_FSM_SIZE:
 1024              	.LFB10:
 262:Src/robotronik_protocol.c **** 
 263:Src/robotronik_protocol.c **** static void RP_FSM_SIZE(RP_Interface *interface){
 1025              		.loc 1 263 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 16
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 0000 80B5     		push	{r7, lr}
 1030              	.LCFI55:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 7, -8
 1033              		.cfi_offset 14, -4
 1034 0002 84B0     		sub	sp, sp, #16
 1035              	.LCFI56:
 1036              		.cfi_def_cfa_offset 24
 1037 0004 00AF     		add	r7, sp, #0
 1038              	.LCFI57:
 1039              		.cfi_def_cfa_register 7
 1040 0006 7860     		str	r0, [r7, #4]
 264:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 1041              		.loc 1 264 0
 1042 0008 7B68     		ldr	r3, [r7, #4]
 1043 000a D3F80834 		ldr	r3, [r3, #1032]
 1044 000e 591C     		adds	r1, r3, #1
 1045 0010 7A68     		ldr	r2, [r7, #4]
 1046 0012 C2F80814 		str	r1, [r2, #1032]
 1047 0016 1B78     		ldrb	r3, [r3]
 1048 0018 FB73     		strb	r3, [r7, #15]
 265:Src/robotronik_protocol.c **** 
 266:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 1049              		.loc 1 266 0
 1050 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1051 001c 002B     		cmp	r3, #0
 1052 001e 18D1     		bne	.L55
 1053              		.loc 1 266 0 is_stmt 0 discriminator 1
 1054 0020 374B     		ldr	r3, .L58
 1055 0022 40F20122 		movw	r2, #513
 1056 0026 1A80     		strh	r2, [r3]	@ movhi
 1057 0028 354B     		ldr	r3, .L58
 1058 002a 1B88     		ldrh	r3, [r3]
 1059 002c 1946     		mov	r1, r3
 1060 002e 7868     		ldr	r0, [r7, #4]
 1061 0030 FFF7FEFF 		bl	RP_Error_Handler
 1062 0034 7B68     		ldr	r3, [r7, #4]
 1063 0036 334A     		ldr	r2, .L58+4
 1064 0038 C3F80024 		str	r2, [r3, #1024]
 1065 003c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca1eqPD.s 			page 24


 1066 003e 0022     		movs	r2, #0
 1067 0040 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1068 0044 7B68     		ldr	r3, [r7, #4]
 1069 0046 03F58572 		add	r2, r3, #266
 1070 004a 7B68     		ldr	r3, [r7, #4]
 1071 004c C3F80C24 		str	r2, [r3, #1036]
 1072 0050 53E0     		b	.L54
 1073              	.L55:
 267:Src/robotronik_protocol.c **** 
 268:Src/robotronik_protocol.c ****   /*
 269:Src/robotronik_protocol.c ****    * FSM_DECODE_BYTE is not used here because the protocol requires
 270:Src/robotronik_protocol.c ****    * that the size is > 0. So bs_count is decremented manually.
 271:Src/robotronik_protocol.c ****    */
 272:Src/robotronik_protocol.c ****   --(interface->bs_count);
 1074              		.loc 1 272 0 is_stmt 1
 1075 0052 7B68     		ldr	r3, [r7, #4]
 1076 0054 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1077 0058 013B     		subs	r3, r3, #1
 1078 005a DAB2     		uxtb	r2, r3
 1079 005c 7B68     		ldr	r3, [r7, #4]
 1080 005e 83F80424 		strb	r2, [r3, #1028]
 273:Src/robotronik_protocol.c **** 
 274:Src/robotronik_protocol.c ****   /*
 275:Src/robotronik_protocol.c ****    * For the states RP_FSM_SIZE and RP_FSM_DATA, the CRC must be
 276:Src/robotronik_protocol.c ****    * updated for each byte.
 277:Src/robotronik_protocol.c ****    */
 278:Src/robotronik_protocol.c ****   UPDATE_CRC(interface->crc_accum, FSM_BYTE);
 1081              		.loc 1 278 0
 1082 0062 7B68     		ldr	r3, [r7, #4]
 1083 0064 B3F81034 		ldrh	r3, [r3, #1040]
 1084 0068 1B02     		lsls	r3, r3, #8
 1085 006a 1AB2     		sxth	r2, r3
 1086 006c 7B68     		ldr	r3, [r7, #4]
 1087 006e B3F81034 		ldrh	r3, [r3, #1040]
 1088 0072 1B0A     		lsrs	r3, r3, #8
 1089 0074 9BB2     		uxth	r3, r3
 1090 0076 1946     		mov	r1, r3
 1091 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1092 007a 4B40     		eors	r3, r3, r1
 1093 007c DBB2     		uxtb	r3, r3
 1094 007e 2249     		ldr	r1, .L58+8
 1095 0080 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1096 0084 1BB2     		sxth	r3, r3
 1097 0086 5340     		eors	r3, r3, r2
 1098 0088 1BB2     		sxth	r3, r3
 1099 008a 9AB2     		uxth	r2, r3
 1100 008c 7B68     		ldr	r3, [r7, #4]
 1101 008e A3F81024 		strh	r2, [r3, #1040]	@ movhi
 279:Src/robotronik_protocol.c ****   /*
 280:Src/robotronik_protocol.c ****    * Get the packet length. It will be used to find the CRC position.
 281:Src/robotronik_protocol.c ****    */
 282:Src/robotronik_protocol.c ****   interface->size = interface->remaining = FSM_BYTE - 4;
 1102              		.loc 1 282 0
 1103 0092 FB7B     		ldrb	r3, [r7, #15]
 1104 0094 043B     		subs	r3, r3, #4
 1105 0096 DAB2     		uxtb	r2, r3
 1106 0098 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca1eqPD.s 			page 25


 1107 009a 83F80624 		strb	r2, [r3, #1030]
 1108 009e 7B68     		ldr	r3, [r7, #4]
 1109 00a0 93F80624 		ldrb	r2, [r3, #1030]	@ zero_extendqisi2
 1110 00a4 7B68     		ldr	r3, [r7, #4]
 1111 00a6 83F80524 		strb	r2, [r3, #1029]
 283:Src/robotronik_protocol.c ****   interface->r_packet.len = interface->size;
 1112              		.loc 1 283 0
 1113 00aa 7B68     		ldr	r3, [r7, #4]
 1114 00ac 93F80524 		ldrb	r2, [r3, #1029]	@ zero_extendqisi2
 1115 00b0 7B68     		ldr	r3, [r7, #4]
 1116 00b2 83F80921 		strb	r2, [r3, #265]
 284:Src/robotronik_protocol.c ****   
 285:Src/robotronik_protocol.c ****   /*
 286:Src/robotronik_protocol.c ****    * Checks wether or not the read size is consistent.
 287:Src/robotronik_protocol.c ****    */
 288:Src/robotronik_protocol.c ****   if(interface->size > RP_MAX_PACKET_SIZE){
 1117              		.loc 1 288 0
 1118 00b6 7B68     		ldr	r3, [r7, #4]
 1119 00b8 93F80534 		ldrb	r3, [r3, #1029]	@ zero_extendqisi2
 1120 00bc FA2B     		cmp	r3, #250
 1121 00be 18D9     		bls	.L57
 289:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_SIZE);
 1122              		.loc 1 289 0
 1123 00c0 0F4B     		ldr	r3, .L58
 1124 00c2 40F20222 		movw	r2, #514
 1125 00c6 1A80     		strh	r2, [r3]	@ movhi
 1126 00c8 0D4B     		ldr	r3, .L58
 1127 00ca 1B88     		ldrh	r3, [r3]
 1128 00cc 1946     		mov	r1, r3
 1129 00ce 7868     		ldr	r0, [r7, #4]
 1130 00d0 FFF7FEFF 		bl	RP_Error_Handler
 1131 00d4 7B68     		ldr	r3, [r7, #4]
 1132 00d6 0B4A     		ldr	r2, .L58+4
 1133 00d8 C3F80024 		str	r2, [r3, #1024]
 1134 00dc 7B68     		ldr	r3, [r7, #4]
 1135 00de 0022     		movs	r2, #0
 1136 00e0 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1137 00e4 7B68     		ldr	r3, [r7, #4]
 1138 00e6 03F58572 		add	r2, r3, #266
 1139 00ea 7B68     		ldr	r3, [r7, #4]
 1140 00ec C3F80C24 		str	r2, [r3, #1036]
 1141 00f0 03E0     		b	.L54
 1142              	.L57:
 290:Src/robotronik_protocol.c ****   }
 291:Src/robotronik_protocol.c ****   
 292:Src/robotronik_protocol.c ****   FSM_UPDATE(interface, RP_FSM_DATA);
 1143              		.loc 1 292 0
 1144 00f2 7B68     		ldr	r3, [r7, #4]
 1145 00f4 054A     		ldr	r2, .L58+12
 1146 00f6 C3F80024 		str	r2, [r3, #1024]
 1147              	.L54:
 293:Src/robotronik_protocol.c **** }
 1148              		.loc 1 293 0
 1149 00fa 1037     		adds	r7, r7, #16
 1150              	.LCFI58:
 1151              		.cfi_def_cfa_offset 8
 1152 00fc BD46     		mov	sp, r7
ARM GAS  /tmp/cca1eqPD.s 			page 26


 1153              	.LCFI59:
 1154              		.cfi_def_cfa_register 13
 1155              		@ sp needed
 1156 00fe 80BD     		pop	{r7, pc}
 1157              	.L59:
 1158              		.align	2
 1159              	.L58:
 1160 0100 00000000 		.word	err
 1161 0104 00000000 		.word	RP_FSM_INIT
 1162 0108 00000000 		.word	crc_table
 1163 010c 00000000 		.word	RP_FSM_DATA
 1164              		.cfi_endproc
 1165              	.LFE10:
 1167              		.section	.text.RP_FSM_DATA,"ax",%progbits
 1168              		.align	1
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1172              		.fpu fpv4-sp-d16
 1174              	RP_FSM_DATA:
 1175              	.LFB11:
 294:Src/robotronik_protocol.c **** 
 295:Src/robotronik_protocol.c **** static void RP_FSM_DATA(RP_Interface *interface){
 1176              		.loc 1 295 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 16
 1179              		@ frame_needed = 1, uses_anonymous_args = 0
 1180 0000 80B5     		push	{r7, lr}
 1181              	.LCFI60:
 1182              		.cfi_def_cfa_offset 8
 1183              		.cfi_offset 7, -8
 1184              		.cfi_offset 14, -4
 1185 0002 84B0     		sub	sp, sp, #16
 1186              	.LCFI61:
 1187              		.cfi_def_cfa_offset 24
 1188 0004 00AF     		add	r7, sp, #0
 1189              	.LCFI62:
 1190              		.cfi_def_cfa_register 7
 1191 0006 7860     		str	r0, [r7, #4]
 296:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 1192              		.loc 1 296 0
 1193 0008 7B68     		ldr	r3, [r7, #4]
 1194 000a D3F80834 		ldr	r3, [r3, #1032]
 1195 000e 591C     		adds	r1, r3, #1
 1196 0010 7A68     		ldr	r2, [r7, #4]
 1197 0012 C2F80814 		str	r1, [r2, #1032]
 1198 0016 1B78     		ldrb	r3, [r3]
 1199 0018 FB73     		strb	r3, [r7, #15]
 297:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 1200              		.loc 1 297 0
 1201 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1202 001c 002B     		cmp	r3, #0
 1203 001e 18D1     		bne	.L61
 1204              		.loc 1 297 0 is_stmt 0 discriminator 1
 1205 0020 314B     		ldr	r3, .L65
 1206 0022 40F20122 		movw	r2, #513
 1207 0026 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/cca1eqPD.s 			page 27


 1208 0028 2F4B     		ldr	r3, .L65
 1209 002a 1B88     		ldrh	r3, [r3]
 1210 002c 1946     		mov	r1, r3
 1211 002e 7868     		ldr	r0, [r7, #4]
 1212 0030 FFF7FEFF 		bl	RP_Error_Handler
 1213 0034 7B68     		ldr	r3, [r7, #4]
 1214 0036 2D4A     		ldr	r2, .L65+4
 1215 0038 C3F80024 		str	r2, [r3, #1024]
 1216 003c 7B68     		ldr	r3, [r7, #4]
 1217 003e 0022     		movs	r2, #0
 1218 0040 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1219 0044 7B68     		ldr	r3, [r7, #4]
 1220 0046 03F58572 		add	r2, r3, #266
 1221 004a 7B68     		ldr	r3, [r7, #4]
 1222 004c C3F80C24 		str	r2, [r3, #1036]
 1223 0050 46E0     		b	.L60
 1224              	.L61:
 298:Src/robotronik_protocol.c **** 
 299:Src/robotronik_protocol.c ****   FSM_BYTE = FSM_DECODE_BYTE(interface, FSM_BYTE);
 1225              		.loc 1 299 0 is_stmt 1
 1226 0052 7B68     		ldr	r3, [r7, #4]
 1227 0054 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1228 0058 013B     		subs	r3, r3, #1
 1229 005a DAB2     		uxtb	r2, r3
 1230 005c 7B68     		ldr	r3, [r7, #4]
 1231 005e 83F80424 		strb	r2, [r3, #1028]
 1232 0062 7B68     		ldr	r3, [r7, #4]
 1233 0064 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1234 0068 002B     		cmp	r3, #0
 1235 006a 05D1     		bne	.L63
 1236              		.loc 1 299 0 is_stmt 0 discriminator 1
 1237 006c 7B68     		ldr	r3, [r7, #4]
 1238 006e FA7B     		ldrb	r2, [r7, #15]
 1239 0070 83F80424 		strb	r2, [r3, #1028]
 1240 0074 0023     		movs	r3, #0
 1241 0076 00E0     		b	.L64
 1242              	.L63:
 1243              		.loc 1 299 0 discriminator 2
 1244 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1245              	.L64:
 1246              		.loc 1 299 0 discriminator 4
 1247 007a FB73     		strb	r3, [r7, #15]
 300:Src/robotronik_protocol.c ****   *(interface->p_out++) = FSM_BYTE;
 1248              		.loc 1 300 0 is_stmt 1 discriminator 4
 1249 007c 7B68     		ldr	r3, [r7, #4]
 1250 007e D3F80C34 		ldr	r3, [r3, #1036]
 1251 0082 591C     		adds	r1, r3, #1
 1252 0084 7A68     		ldr	r2, [r7, #4]
 1253 0086 C2F80C14 		str	r1, [r2, #1036]
 1254 008a FA7B     		ldrb	r2, [r7, #15]
 1255 008c 1A70     		strb	r2, [r3]
 301:Src/robotronik_protocol.c ****   UPDATE_CRC(interface->crc_accum, FSM_BYTE);
 1256              		.loc 1 301 0 discriminator 4
 1257 008e 7B68     		ldr	r3, [r7, #4]
 1258 0090 B3F81034 		ldrh	r3, [r3, #1040]
 1259 0094 1B02     		lsls	r3, r3, #8
 1260 0096 1AB2     		sxth	r2, r3
ARM GAS  /tmp/cca1eqPD.s 			page 28


 1261 0098 7B68     		ldr	r3, [r7, #4]
 1262 009a B3F81034 		ldrh	r3, [r3, #1040]
 1263 009e 1B0A     		lsrs	r3, r3, #8
 1264 00a0 9BB2     		uxth	r3, r3
 1265 00a2 1946     		mov	r1, r3
 1266 00a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1267 00a6 4B40     		eors	r3, r3, r1
 1268 00a8 DBB2     		uxtb	r3, r3
 1269 00aa 1149     		ldr	r1, .L65+8
 1270 00ac 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 1271 00b0 1BB2     		sxth	r3, r3
 1272 00b2 5340     		eors	r3, r3, r2
 1273 00b4 1BB2     		sxth	r3, r3
 1274 00b6 9AB2     		uxth	r2, r3
 1275 00b8 7B68     		ldr	r3, [r7, #4]
 1276 00ba A3F81024 		strh	r2, [r3, #1040]	@ movhi
 302:Src/robotronik_protocol.c **** 
 303:Src/robotronik_protocol.c ****   if(!(--interface->remaining)){
 1277              		.loc 1 303 0 discriminator 4
 1278 00be 7B68     		ldr	r3, [r7, #4]
 1279 00c0 93F80634 		ldrb	r3, [r3, #1030]	@ zero_extendqisi2
 1280 00c4 013B     		subs	r3, r3, #1
 1281 00c6 DAB2     		uxtb	r2, r3
 1282 00c8 7B68     		ldr	r3, [r7, #4]
 1283 00ca 83F80624 		strb	r2, [r3, #1030]
 1284 00ce 7B68     		ldr	r3, [r7, #4]
 1285 00d0 93F80634 		ldrb	r3, [r3, #1030]	@ zero_extendqisi2
 1286 00d4 002B     		cmp	r3, #0
 1287 00d6 03D1     		bne	.L60
 304:Src/robotronik_protocol.c ****     /*
 305:Src/robotronik_protocol.c ****      * According to the size read, the next bytes should contains CRC
 306:Src/robotronik_protocol.c ****      * information.
 307:Src/robotronik_protocol.c ****      */
 308:Src/robotronik_protocol.c ****     FSM_UPDATE(interface, RP_FSM_CRC_LOW);
 1288              		.loc 1 308 0
 1289 00d8 7B68     		ldr	r3, [r7, #4]
 1290 00da 064A     		ldr	r2, .L65+12
 1291 00dc C3F80024 		str	r2, [r3, #1024]
 1292              	.L60:
 309:Src/robotronik_protocol.c ****   }
 310:Src/robotronik_protocol.c **** }
 1293              		.loc 1 310 0
 1294 00e0 1037     		adds	r7, r7, #16
 1295              	.LCFI63:
 1296              		.cfi_def_cfa_offset 8
 1297 00e2 BD46     		mov	sp, r7
 1298              	.LCFI64:
 1299              		.cfi_def_cfa_register 13
 1300              		@ sp needed
 1301 00e4 80BD     		pop	{r7, pc}
 1302              	.L66:
 1303 00e6 00BF     		.align	2
 1304              	.L65:
 1305 00e8 00000000 		.word	err
 1306 00ec 00000000 		.word	RP_FSM_INIT
 1307 00f0 00000000 		.word	crc_table
 1308 00f4 00000000 		.word	RP_FSM_CRC_LOW
ARM GAS  /tmp/cca1eqPD.s 			page 29


 1309              		.cfi_endproc
 1310              	.LFE11:
 1312              		.section	.text.RP_FSM_CRC_LOW,"ax",%progbits
 1313              		.align	1
 1314              		.syntax unified
 1315              		.thumb
 1316              		.thumb_func
 1317              		.fpu fpv4-sp-d16
 1319              	RP_FSM_CRC_LOW:
 1320              	.LFB12:
 311:Src/robotronik_protocol.c **** 
 312:Src/robotronik_protocol.c **** static void RP_FSM_CRC_LOW(RP_Interface *interface){
 1321              		.loc 1 312 0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 16
 1324              		@ frame_needed = 1, uses_anonymous_args = 0
 1325 0000 80B5     		push	{r7, lr}
 1326              	.LCFI65:
 1327              		.cfi_def_cfa_offset 8
 1328              		.cfi_offset 7, -8
 1329              		.cfi_offset 14, -4
 1330 0002 84B0     		sub	sp, sp, #16
 1331              	.LCFI66:
 1332              		.cfi_def_cfa_offset 24
 1333 0004 00AF     		add	r7, sp, #0
 1334              	.LCFI67:
 1335              		.cfi_def_cfa_register 7
 1336 0006 7860     		str	r0, [r7, #4]
 313:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 1337              		.loc 1 313 0
 1338 0008 7B68     		ldr	r3, [r7, #4]
 1339 000a D3F80834 		ldr	r3, [r3, #1032]
 1340 000e 591C     		adds	r1, r3, #1
 1341 0010 7A68     		ldr	r2, [r7, #4]
 1342 0012 C2F80814 		str	r1, [r2, #1032]
 1343 0016 1B78     		ldrb	r3, [r3]
 1344 0018 FB73     		strb	r3, [r7, #15]
 314:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 1345              		.loc 1 314 0
 1346 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1347 001c 002B     		cmp	r3, #0
 1348 001e 18D1     		bne	.L68
 1349              		.loc 1 314 0 is_stmt 0 discriminator 1
 1350 0020 294B     		ldr	r3, .L73
 1351 0022 40F20122 		movw	r2, #513
 1352 0026 1A80     		strh	r2, [r3]	@ movhi
 1353 0028 274B     		ldr	r3, .L73
 1354 002a 1B88     		ldrh	r3, [r3]
 1355 002c 1946     		mov	r1, r3
 1356 002e 7868     		ldr	r0, [r7, #4]
 1357 0030 FFF7FEFF 		bl	RP_Error_Handler
 1358 0034 7B68     		ldr	r3, [r7, #4]
 1359 0036 254A     		ldr	r2, .L73+4
 1360 0038 C3F80024 		str	r2, [r3, #1024]
 1361 003c 7B68     		ldr	r3, [r7, #4]
 1362 003e 0022     		movs	r2, #0
 1363 0040 A3F81024 		strh	r2, [r3, #1040]	@ movhi
ARM GAS  /tmp/cca1eqPD.s 			page 30


 1364 0044 7B68     		ldr	r3, [r7, #4]
 1365 0046 03F58572 		add	r2, r3, #266
 1366 004a 7B68     		ldr	r3, [r7, #4]
 1367 004c C3F80C24 		str	r2, [r3, #1036]
 1368 0050 36E0     		b	.L67
 1369              	.L68:
 315:Src/robotronik_protocol.c **** 
 316:Src/robotronik_protocol.c ****   /*
 317:Src/robotronik_protocol.c ****    * Checks the low byte of CRC, and triggers an error if it doesn't match.
 318:Src/robotronik_protocol.c ****    */
 319:Src/robotronik_protocol.c ****   if((interface->crc_accum & 0xFF) != FSM_DECODE_BYTE(interface, FSM_BYTE)){
 1370              		.loc 1 319 0 is_stmt 1
 1371 0052 7B68     		ldr	r3, [r7, #4]
 1372 0054 B3F81034 		ldrh	r3, [r3, #1040]
 1373 0058 DAB2     		uxtb	r2, r3
 1374 005a 7B68     		ldr	r3, [r7, #4]
 1375 005c 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1376 0060 013B     		subs	r3, r3, #1
 1377 0062 D9B2     		uxtb	r1, r3
 1378 0064 7B68     		ldr	r3, [r7, #4]
 1379 0066 83F80414 		strb	r1, [r3, #1028]
 1380 006a 7B68     		ldr	r3, [r7, #4]
 1381 006c 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1382 0070 002B     		cmp	r3, #0
 1383 0072 05D1     		bne	.L70
 1384              		.loc 1 319 0 is_stmt 0 discriminator 1
 1385 0074 7B68     		ldr	r3, [r7, #4]
 1386 0076 F97B     		ldrb	r1, [r7, #15]
 1387 0078 83F80414 		strb	r1, [r3, #1028]
 1388 007c 0023     		movs	r3, #0
 1389 007e 00E0     		b	.L71
 1390              	.L70:
 1391              		.loc 1 319 0 discriminator 2
 1392 0080 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1393              	.L71:
 1394              		.loc 1 319 0 discriminator 4
 1395 0082 9342     		cmp	r3, r2
 1396 0084 18D0     		beq	.L72
 320:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_CRC);
 1397              		.loc 1 320 0 is_stmt 1
 1398 0086 104B     		ldr	r3, .L73
 1399 0088 40F20322 		movw	r2, #515
 1400 008c 1A80     		strh	r2, [r3]	@ movhi
 1401 008e 0E4B     		ldr	r3, .L73
 1402 0090 1B88     		ldrh	r3, [r3]
 1403 0092 1946     		mov	r1, r3
 1404 0094 7868     		ldr	r0, [r7, #4]
 1405 0096 FFF7FEFF 		bl	RP_Error_Handler
 1406 009a 7B68     		ldr	r3, [r7, #4]
 1407 009c 0B4A     		ldr	r2, .L73+4
 1408 009e C3F80024 		str	r2, [r3, #1024]
 1409 00a2 7B68     		ldr	r3, [r7, #4]
 1410 00a4 0022     		movs	r2, #0
 1411 00a6 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1412 00aa 7B68     		ldr	r3, [r7, #4]
 1413 00ac 03F58572 		add	r2, r3, #266
 1414 00b0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca1eqPD.s 			page 31


 1415 00b2 C3F80C24 		str	r2, [r3, #1036]
 1416 00b6 03E0     		b	.L67
 1417              	.L72:
 321:Src/robotronik_protocol.c ****   }else{
 322:Src/robotronik_protocol.c ****     FSM_UPDATE(interface, RP_FSM_CRC_HIGH);
 1418              		.loc 1 322 0
 1419 00b8 7B68     		ldr	r3, [r7, #4]
 1420 00ba 054A     		ldr	r2, .L73+8
 1421 00bc C3F80024 		str	r2, [r3, #1024]
 1422              	.L67:
 323:Src/robotronik_protocol.c ****   }
 324:Src/robotronik_protocol.c **** }
 1423              		.loc 1 324 0
 1424 00c0 1037     		adds	r7, r7, #16
 1425              	.LCFI68:
 1426              		.cfi_def_cfa_offset 8
 1427 00c2 BD46     		mov	sp, r7
 1428              	.LCFI69:
 1429              		.cfi_def_cfa_register 13
 1430              		@ sp needed
 1431 00c4 80BD     		pop	{r7, pc}
 1432              	.L74:
 1433 00c6 00BF     		.align	2
 1434              	.L73:
 1435 00c8 00000000 		.word	err
 1436 00cc 00000000 		.word	RP_FSM_INIT
 1437 00d0 00000000 		.word	RP_FSM_CRC_HIGH
 1438              		.cfi_endproc
 1439              	.LFE12:
 1441              		.section	.text.RP_FSM_CRC_HIGH,"ax",%progbits
 1442              		.align	1
 1443              		.syntax unified
 1444              		.thumb
 1445              		.thumb_func
 1446              		.fpu fpv4-sp-d16
 1448              	RP_FSM_CRC_HIGH:
 1449              	.LFB13:
 325:Src/robotronik_protocol.c **** 
 326:Src/robotronik_protocol.c **** static void RP_FSM_CRC_HIGH(RP_Interface *interface){
 1450              		.loc 1 326 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 16
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454 0000 80B5     		push	{r7, lr}
 1455              	.LCFI70:
 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 7, -8
 1458              		.cfi_offset 14, -4
 1459 0002 84B0     		sub	sp, sp, #16
 1460              	.LCFI71:
 1461              		.cfi_def_cfa_offset 24
 1462 0004 00AF     		add	r7, sp, #0
 1463              	.LCFI72:
 1464              		.cfi_def_cfa_register 7
 1465 0006 7860     		str	r0, [r7, #4]
 327:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 1466              		.loc 1 327 0
ARM GAS  /tmp/cca1eqPD.s 			page 32


 1467 0008 7B68     		ldr	r3, [r7, #4]
 1468 000a D3F80834 		ldr	r3, [r3, #1032]
 1469 000e 591C     		adds	r1, r3, #1
 1470 0010 7A68     		ldr	r2, [r7, #4]
 1471 0012 C2F80814 		str	r1, [r2, #1032]
 1472 0016 1B78     		ldrb	r3, [r3]
 1473 0018 FB73     		strb	r3, [r7, #15]
 328:Src/robotronik_protocol.c ****   FSM_CHECK_ERR(interface, RP_ERR_LINK | RP_ERR_UNEXPECTED_EOF);
 1474              		.loc 1 328 0
 1475 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1476 001c 002B     		cmp	r3, #0
 1477 001e 18D1     		bne	.L76
 1478              		.loc 1 328 0 is_stmt 0 discriminator 1
 1479 0020 2A4B     		ldr	r3, .L81
 1480 0022 40F20122 		movw	r2, #513
 1481 0026 1A80     		strh	r2, [r3]	@ movhi
 1482 0028 284B     		ldr	r3, .L81
 1483 002a 1B88     		ldrh	r3, [r3]
 1484 002c 1946     		mov	r1, r3
 1485 002e 7868     		ldr	r0, [r7, #4]
 1486 0030 FFF7FEFF 		bl	RP_Error_Handler
 1487 0034 7B68     		ldr	r3, [r7, #4]
 1488 0036 264A     		ldr	r2, .L81+4
 1489 0038 C3F80024 		str	r2, [r3, #1024]
 1490 003c 7B68     		ldr	r3, [r7, #4]
 1491 003e 0022     		movs	r2, #0
 1492 0040 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1493 0044 7B68     		ldr	r3, [r7, #4]
 1494 0046 03F58572 		add	r2, r3, #266
 1495 004a 7B68     		ldr	r3, [r7, #4]
 1496 004c C3F80C24 		str	r2, [r3, #1036]
 1497 0050 38E0     		b	.L75
 1498              	.L76:
 329:Src/robotronik_protocol.c **** 
 330:Src/robotronik_protocol.c ****   /*
 331:Src/robotronik_protocol.c ****    * Checks the high byte of CRC, and triggers an error if it doesn't match.
 332:Src/robotronik_protocol.c ****    */
 333:Src/robotronik_protocol.c ****   if((interface->crc_accum >> 8) != FSM_DECODE_BYTE(interface, FSM_BYTE)){
 1499              		.loc 1 333 0 is_stmt 1
 1500 0052 7B68     		ldr	r3, [r7, #4]
 1501 0054 B3F81034 		ldrh	r3, [r3, #1040]
 1502 0058 1B0A     		lsrs	r3, r3, #8
 1503 005a 9BB2     		uxth	r3, r3
 1504 005c 1946     		mov	r1, r3
 1505 005e 7B68     		ldr	r3, [r7, #4]
 1506 0060 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1507 0064 013B     		subs	r3, r3, #1
 1508 0066 DAB2     		uxtb	r2, r3
 1509 0068 7B68     		ldr	r3, [r7, #4]
 1510 006a 83F80424 		strb	r2, [r3, #1028]
 1511 006e 7B68     		ldr	r3, [r7, #4]
 1512 0070 93F80434 		ldrb	r3, [r3, #1028]	@ zero_extendqisi2
 1513 0074 002B     		cmp	r3, #0
 1514 0076 05D1     		bne	.L78
 1515              		.loc 1 333 0 is_stmt 0 discriminator 1
 1516 0078 7B68     		ldr	r3, [r7, #4]
 1517 007a FA7B     		ldrb	r2, [r7, #15]
ARM GAS  /tmp/cca1eqPD.s 			page 33


 1518 007c 83F80424 		strb	r2, [r3, #1028]
 1519 0080 0023     		movs	r3, #0
 1520 0082 00E0     		b	.L79
 1521              	.L78:
 1522              		.loc 1 333 0 discriminator 2
 1523 0084 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1524              	.L79:
 1525              		.loc 1 333 0 discriminator 4
 1526 0086 8B42     		cmp	r3, r1
 1527 0088 18D0     		beq	.L80
 334:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_CRC);
 1528              		.loc 1 334 0 is_stmt 1
 1529 008a 104B     		ldr	r3, .L81
 1530 008c 40F20322 		movw	r2, #515
 1531 0090 1A80     		strh	r2, [r3]	@ movhi
 1532 0092 0E4B     		ldr	r3, .L81
 1533 0094 1B88     		ldrh	r3, [r3]
 1534 0096 1946     		mov	r1, r3
 1535 0098 7868     		ldr	r0, [r7, #4]
 1536 009a FFF7FEFF 		bl	RP_Error_Handler
 1537 009e 7B68     		ldr	r3, [r7, #4]
 1538 00a0 0B4A     		ldr	r2, .L81+4
 1539 00a2 C3F80024 		str	r2, [r3, #1024]
 1540 00a6 7B68     		ldr	r3, [r7, #4]
 1541 00a8 0022     		movs	r2, #0
 1542 00aa A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1543 00ae 7B68     		ldr	r3, [r7, #4]
 1544 00b0 03F58572 		add	r2, r3, #266
 1545 00b4 7B68     		ldr	r3, [r7, #4]
 1546 00b6 C3F80C24 		str	r2, [r3, #1036]
 1547 00ba 03E0     		b	.L75
 1548              	.L80:
 335:Src/robotronik_protocol.c ****   }else{
 336:Src/robotronik_protocol.c ****     FSM_UPDATE(interface, RP_FSM_END);
 1549              		.loc 1 336 0
 1550 00bc 7B68     		ldr	r3, [r7, #4]
 1551 00be 054A     		ldr	r2, .L81+8
 1552 00c0 C3F80024 		str	r2, [r3, #1024]
 1553              	.L75:
 337:Src/robotronik_protocol.c ****   }
 338:Src/robotronik_protocol.c **** }
 1554              		.loc 1 338 0
 1555 00c4 1037     		adds	r7, r7, #16
 1556              	.LCFI73:
 1557              		.cfi_def_cfa_offset 8
 1558 00c6 BD46     		mov	sp, r7
 1559              	.LCFI74:
 1560              		.cfi_def_cfa_register 13
 1561              		@ sp needed
 1562 00c8 80BD     		pop	{r7, pc}
 1563              	.L82:
 1564 00ca 00BF     		.align	2
 1565              	.L81:
 1566 00cc 00000000 		.word	err
 1567 00d0 00000000 		.word	RP_FSM_INIT
 1568 00d4 00000000 		.word	RP_FSM_END
 1569              		.cfi_endproc
ARM GAS  /tmp/cca1eqPD.s 			page 34


 1570              	.LFE13:
 1572              		.section	.text.RP_FSM_END,"ax",%progbits
 1573              		.align	1
 1574              		.syntax unified
 1575              		.thumb
 1576              		.thumb_func
 1577              		.fpu fpv4-sp-d16
 1579              	RP_FSM_END:
 1580              	.LFB14:
 339:Src/robotronik_protocol.c **** 
 340:Src/robotronik_protocol.c **** static void RP_FSM_END(RP_Interface *interface){
 1581              		.loc 1 340 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 16
 1584              		@ frame_needed = 1, uses_anonymous_args = 0
 1585 0000 80B5     		push	{r7, lr}
 1586              	.LCFI75:
 1587              		.cfi_def_cfa_offset 8
 1588              		.cfi_offset 7, -8
 1589              		.cfi_offset 14, -4
 1590 0002 84B0     		sub	sp, sp, #16
 1591              	.LCFI76:
 1592              		.cfi_def_cfa_offset 24
 1593 0004 00AF     		add	r7, sp, #0
 1594              	.LCFI77:
 1595              		.cfi_def_cfa_register 7
 1596 0006 7860     		str	r0, [r7, #4]
 341:Src/robotronik_protocol.c ****   FSM_GET_BYTE(interface);
 1597              		.loc 1 341 0
 1598 0008 7B68     		ldr	r3, [r7, #4]
 1599 000a D3F80834 		ldr	r3, [r3, #1032]
 1600 000e 591C     		adds	r1, r3, #1
 1601 0010 7A68     		ldr	r2, [r7, #4]
 1602 0012 C2F80814 		str	r1, [r2, #1032]
 1603 0016 1B78     		ldrb	r3, [r3]
 1604 0018 FB73     		strb	r3, [r7, #15]
 342:Src/robotronik_protocol.c **** 
 343:Src/robotronik_protocol.c ****   /*
 344:Src/robotronik_protocol.c ****    * The last byte must be EOF. Otherwise, it is an error.
 345:Src/robotronik_protocol.c ****    */
 346:Src/robotronik_protocol.c ****   if(FSM_BYTE == 0x00){
 1605              		.loc 1 346 0
 1606 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1607 001c 002B     		cmp	r3, #0
 1608 001e 19D1     		bne	.L84
 347:Src/robotronik_protocol.c ****     interface->received = true;
 1609              		.loc 1 347 0
 1610 0020 7B68     		ldr	r3, [r7, #4]
 1611 0022 0122     		movs	r2, #1
 1612 0024 83F81224 		strb	r2, [r3, #1042]
 348:Src/robotronik_protocol.c ****     RP_Packet_Received(interface, &interface->r_packet);
 1613              		.loc 1 348 0
 1614 0028 7B68     		ldr	r3, [r7, #4]
 1615 002a 03F58473 		add	r3, r3, #264
 1616 002e 1946     		mov	r1, r3
 1617 0030 7868     		ldr	r0, [r7, #4]
 1618 0032 FFF7FEFF 		bl	RP_Packet_Received
ARM GAS  /tmp/cca1eqPD.s 			page 35


 349:Src/robotronik_protocol.c ****     FSM_RESET(interface);
 1619              		.loc 1 349 0
 1620 0036 7B68     		ldr	r3, [r7, #4]
 1621 0038 144A     		ldr	r2, .L86
 1622 003a C3F80024 		str	r2, [r3, #1024]
 1623 003e 7B68     		ldr	r3, [r7, #4]
 1624 0040 0022     		movs	r2, #0
 1625 0042 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1626 0046 7B68     		ldr	r3, [r7, #4]
 1627 0048 03F58572 		add	r2, r3, #266
 1628 004c 7B68     		ldr	r3, [r7, #4]
 1629 004e C3F80C24 		str	r2, [r3, #1036]
 1630 0052 18E0     		b	.L83
 1631              	.L84:
 350:Src/robotronik_protocol.c ****   }else{
 351:Src/robotronik_protocol.c ****     FSM_ERR(interface, RP_ERR_LINK | RP_ERR_SIZE);
 1632              		.loc 1 351 0
 1633 0054 0E4B     		ldr	r3, .L86+4
 1634 0056 40F20222 		movw	r2, #514
 1635 005a 1A80     		strh	r2, [r3]	@ movhi
 1636 005c 0C4B     		ldr	r3, .L86+4
 1637 005e 1B88     		ldrh	r3, [r3]
 1638 0060 1946     		mov	r1, r3
 1639 0062 7868     		ldr	r0, [r7, #4]
 1640 0064 FFF7FEFF 		bl	RP_Error_Handler
 1641 0068 7B68     		ldr	r3, [r7, #4]
 1642 006a 084A     		ldr	r2, .L86
 1643 006c C3F80024 		str	r2, [r3, #1024]
 1644 0070 7B68     		ldr	r3, [r7, #4]
 1645 0072 0022     		movs	r2, #0
 1646 0074 A3F81024 		strh	r2, [r3, #1040]	@ movhi
 1647 0078 7B68     		ldr	r3, [r7, #4]
 1648 007a 03F58572 		add	r2, r3, #266
 1649 007e 7B68     		ldr	r3, [r7, #4]
 1650 0080 C3F80C24 		str	r2, [r3, #1036]
 1651 0084 00BF     		nop
 1652              	.L83:
 352:Src/robotronik_protocol.c ****   }
 353:Src/robotronik_protocol.c **** }
 1653              		.loc 1 353 0
 1654 0086 1037     		adds	r7, r7, #16
 1655              	.LCFI78:
 1656              		.cfi_def_cfa_offset 8
 1657 0088 BD46     		mov	sp, r7
 1658              	.LCFI79:
 1659              		.cfi_def_cfa_register 13
 1660              		@ sp needed
 1661 008a 80BD     		pop	{r7, pc}
 1662              	.L87:
 1663              		.align	2
 1664              	.L86:
 1665 008c 00000000 		.word	RP_FSM_INIT
 1666 0090 00000000 		.word	err
 1667              		.cfi_endproc
 1668              	.LFE14:
 1670              		.section	.text.RP_Get_Error,"ax",%progbits
 1671              		.align	1
ARM GAS  /tmp/cca1eqPD.s 			page 36


 1672              		.global	RP_Get_Error
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1676              		.fpu fpv4-sp-d16
 1678              	RP_Get_Error:
 1679              	.LFB15:
 354:Src/robotronik_protocol.c **** 
 355:Src/robotronik_protocol.c **** uint16_t RP_Get_Error(){
 1680              		.loc 1 355 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 0
 1683              		@ frame_needed = 1, uses_anonymous_args = 0
 1684              		@ link register save eliminated.
 1685 0000 80B4     		push	{r7}
 1686              	.LCFI80:
 1687              		.cfi_def_cfa_offset 4
 1688              		.cfi_offset 7, -4
 1689 0002 00AF     		add	r7, sp, #0
 1690              	.LCFI81:
 1691              		.cfi_def_cfa_register 7
 356:Src/robotronik_protocol.c ****   return err;
 1692              		.loc 1 356 0
 1693 0004 034B     		ldr	r3, .L90
 1694 0006 1B88     		ldrh	r3, [r3]
 357:Src/robotronik_protocol.c **** }
 1695              		.loc 1 357 0
 1696 0008 1846     		mov	r0, r3
 1697 000a BD46     		mov	sp, r7
 1698              	.LCFI82:
 1699              		.cfi_def_cfa_register 13
 1700              		@ sp needed
 1701 000c 5DF8047B 		ldr	r7, [sp], #4
 1702              	.LCFI83:
 1703              		.cfi_restore 7
 1704              		.cfi_def_cfa_offset 0
 1705 0010 7047     		bx	lr
 1706              	.L91:
 1707 0012 00BF     		.align	2
 1708              	.L90:
 1709 0014 00000000 		.word	err
 1710              		.cfi_endproc
 1711              	.LFE15:
 1713              		.text
 1714              	.Letext0:
 1715              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1716              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1717              		.file 4 "Inc/robotronik_protocol.h"
 1718              		.file 5 "Inc/crc_16.h"
ARM GAS  /tmp/cca1eqPD.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 robotronik_protocol.c
     /tmp/cca1eqPD.s:18     .bss.err:0000000000000000 $d
     /tmp/cca1eqPD.s:21     .bss.err:0000000000000000 err
     /tmp/cca1eqPD.s:24     .text.RP_Init_Interface:0000000000000000 $t
     /tmp/cca1eqPD.s:31     .text.RP_Init_Interface:0000000000000000 RP_Init_Interface
     /tmp/cca1eqPD.s:104    .text.RP_Init_Interface:0000000000000060 $d
     /tmp/cca1eqPD.s:813    .text.RP_FSM_INIT:0000000000000000 RP_FSM_INIT
     /tmp/cca1eqPD.s:109    .text.RP_Packet_Received:0000000000000000 $t
     /tmp/cca1eqPD.s:116    .text.RP_Packet_Received:0000000000000000 RP_Packet_Received
     /tmp/cca1eqPD.s:153    .text.RP_Error_Handler:0000000000000000 $t
     /tmp/cca1eqPD.s:160    .text.RP_Error_Handler:0000000000000000 RP_Error_Handler
     /tmp/cca1eqPD.s:198    .text.RP_Build_Frame:0000000000000000 $t
     /tmp/cca1eqPD.s:205    .text.RP_Build_Frame:0000000000000000 RP_Build_Frame
     /tmp/cca1eqPD.s:491    .text.RP_Build_Frame:00000000000001b4 $d
     /tmp/cca1eqPD.s:497    .text.RP_Sync:0000000000000000 $t
     /tmp/cca1eqPD.s:504    .text.RP_Sync:0000000000000000 RP_Sync
     /tmp/cca1eqPD.s:564    .text.RP_Sync:0000000000000040 $d
     /tmp/cca1eqPD.s:569    .text.RP_Send:0000000000000000 $t
     /tmp/cca1eqPD.s:576    .text.RP_Send:0000000000000000 RP_Send
     /tmp/cca1eqPD.s:651    .text.RP_Send:0000000000000060 $d
     /tmp/cca1eqPD.s:656    .text.RP_Process_Data:0000000000000000 $t
     /tmp/cca1eqPD.s:663    .text.RP_Process_Data:0000000000000000 RP_Process_Data
     /tmp/cca1eqPD.s:718    .text.RP_Wait_Packet:0000000000000000 $t
     /tmp/cca1eqPD.s:725    .text.RP_Wait_Packet:0000000000000000 RP_Wait_Packet
     /tmp/cca1eqPD.s:807    .text.RP_FSM_INIT:0000000000000000 $t
     /tmp/cca1eqPD.s:881    .text.RP_FSM_INIT:0000000000000058 $d
     /tmp/cca1eqPD.s:893    .text.RP_FSM_ID:0000000000000000 RP_FSM_ID
     /tmp/cca1eqPD.s:887    .text.RP_FSM_ID:0000000000000000 $t
     /tmp/cca1eqPD.s:1009   .text.RP_FSM_ID:00000000000000c4 $d
     /tmp/cca1eqPD.s:1023   .text.RP_FSM_SIZE:0000000000000000 RP_FSM_SIZE
     /tmp/cca1eqPD.s:1017   .text.RP_FSM_SIZE:0000000000000000 $t
     /tmp/cca1eqPD.s:1160   .text.RP_FSM_SIZE:0000000000000100 $d
     /tmp/cca1eqPD.s:1174   .text.RP_FSM_DATA:0000000000000000 RP_FSM_DATA
     /tmp/cca1eqPD.s:1168   .text.RP_FSM_DATA:0000000000000000 $t
     /tmp/cca1eqPD.s:1305   .text.RP_FSM_DATA:00000000000000e8 $d
     /tmp/cca1eqPD.s:1319   .text.RP_FSM_CRC_LOW:0000000000000000 RP_FSM_CRC_LOW
     /tmp/cca1eqPD.s:1313   .text.RP_FSM_CRC_LOW:0000000000000000 $t
     /tmp/cca1eqPD.s:1435   .text.RP_FSM_CRC_LOW:00000000000000c8 $d
     /tmp/cca1eqPD.s:1448   .text.RP_FSM_CRC_HIGH:0000000000000000 RP_FSM_CRC_HIGH
     /tmp/cca1eqPD.s:1442   .text.RP_FSM_CRC_HIGH:0000000000000000 $t
     /tmp/cca1eqPD.s:1566   .text.RP_FSM_CRC_HIGH:00000000000000cc $d
     /tmp/cca1eqPD.s:1579   .text.RP_FSM_END:0000000000000000 RP_FSM_END
     /tmp/cca1eqPD.s:1573   .text.RP_FSM_END:0000000000000000 $t
     /tmp/cca1eqPD.s:1665   .text.RP_FSM_END:000000000000008c $d
     /tmp/cca1eqPD.s:1671   .text.RP_Get_Error:0000000000000000 $t
     /tmp/cca1eqPD.s:1678   .text.RP_Get_Error:0000000000000000 RP_Get_Error
     /tmp/cca1eqPD.s:1709   .text.RP_Get_Error:0000000000000014 $d

UNDEFINED SYMBOLS
crc_table
